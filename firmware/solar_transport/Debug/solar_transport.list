
solar_transport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016484  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d48  08016668  08016668  00017668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173b0  080173b0  00019114  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080173b0  080173b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173b8  080173b8  00019114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080173b8  080173b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080173c0  080173c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  080173c4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac44  20000118  080174d8  00019118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ad5c  080174d8  00019d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a59  00000000  00000000  00019144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a58  00000000  00000000  0003ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  0003f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149f  00000000  00000000  000410c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c66c  00000000  00000000  0004255f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002037f  00000000  00000000  0006ebcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111eb2  00000000  00000000  0008ef4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a0dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d3c  00000000  00000000  001a0e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001a8bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801664c 	.word	0x0801664c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	0801664c 	.word	0x0801664c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9d3 	b.w	80006b8 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <MX_FREERTOS_Init+0x18>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_FREERTOS_Init+0x1c>)
 80006c6:	f005 f9e3 	bl	8005a90 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <MX_FREERTOS_Init+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08016708 	.word	0x08016708
 80006d8:	08000eb9 	.word	0x08000eb9
 80006dc:	20000134 	.word	0x20000134

080006e0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006ec:	f006 faa4 	bl	8006c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006f0:	4b5a      	ldr	r3, [pc, #360]	@ (800085c <pvPortMallocMicroROS+0x17c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006f8:	f000 f986 	bl	8000a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <pvPortMallocMicroROS+0x180>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4013      	ands	r3, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 8090 	bne.w	800082a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01e      	beq.n	800074e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000710:	2208      	movs	r2, #8
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	2b00      	cmp	r3, #0
 8000720:	d015      	beq.n	800074e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f023 0307 	bic.w	r3, r3, #7
 8000728:	3308      	adds	r3, #8
 800072a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00b      	beq.n	800074e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800073a:	f383 8811 	msr	BASEPRI, r3
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	e7fd      	b.n	800074a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d06a      	beq.n	800082a <pvPortMallocMicroROS+0x14a>
 8000754:	4b43      	ldr	r3, [pc, #268]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d865      	bhi.n	800082a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800075e:	4b42      	ldr	r3, [pc, #264]	@ (8000868 <pvPortMallocMicroROS+0x188>)
 8000760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000762:	4b41      	ldr	r3, [pc, #260]	@ (8000868 <pvPortMallocMicroROS+0x188>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000768:	e004      	b.n	8000774 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d903      	bls.n	8000786 <pvPortMallocMicroROS+0xa6>
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f1      	bne.n	800076a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000786:	4b35      	ldr	r3, [pc, #212]	@ (800085c <pvPortMallocMicroROS+0x17c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800078c:	429a      	cmp	r2, r3
 800078e:	d04c      	beq.n	800082a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2208      	movs	r2, #8
 8000796:	4413      	add	r3, r2
 8000798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1ad2      	subs	r2, r2, r3
 80007aa:	2308      	movs	r3, #8
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d920      	bls.n	80007f4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00b      	beq.n	80007dc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	613b      	str	r3, [r7, #16]
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ee:	69b8      	ldr	r0, [r7, #24]
 80007f0:	f000 f96c 	bl	8000acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <pvPortMallocMicroROS+0x18c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d203      	bcs.n	8000816 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <pvPortMallocMicroROS+0x18c>)
 8000814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <pvPortMallocMicroROS+0x180>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	431a      	orrs	r2, r3
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800082a:	f006 fa13 	bl	8006c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00b      	beq.n	8000850 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800083c:	f383 8811 	msr	BASEPRI, r3
 8000840:	f3bf 8f6f 	isb	sy
 8000844:	f3bf 8f4f 	dsb	sy
 8000848:	60fb      	str	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000850:	69fb      	ldr	r3, [r7, #28]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20003c7c 	.word	0x20003c7c
 8000860:	20003c88 	.word	0x20003c88
 8000864:	20003c80 	.word	0x20003c80
 8000868:	20003c74 	.word	0x20003c74
 800086c:	20003c84 	.word	0x20003c84

08000870 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d04a      	beq.n	8000918 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000882:	2308      	movs	r3, #8
 8000884:	425b      	negs	r3, r3
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4013      	ands	r3, r2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <vPortFreeMicroROS+0x46>
	__asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	60fb      	str	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00b      	beq.n	80008d6 <vPortFreeMicroROS+0x66>
	__asm volatile
 80008be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	60bb      	str	r3, [r7, #8]
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	e7fd      	b.n	80008d2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008fc:	f006 f99c 	bl	8006c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <vPortFreeMicroROS+0xb4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <vPortFreeMicroROS+0xb4>)
 800090c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f000 f8dc 	bl	8000acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000914:	f006 f99e 	bl	8006c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20003c88 	.word	0x20003c88
 8000924:	20003c80 	.word	0x20003c80

08000928 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000934:	2308      	movs	r3, #8
 8000936:	425b      	negs	r3, r3
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <getBlockSize+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	43db      	mvns	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	return count;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20003c88 	.word	0x20003c88

08000964 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096e:	f006 f963 	bl	8006c38 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff feb4 	bl	80006e0 <pvPortMallocMicroROS>
 8000978:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffce 	bl	8000928 <getBlockSize>
 800098c:	4603      	mov	r3, r0
 800098e:	2208      	movs	r2, #8
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d201      	bcs.n	80009a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f014 ff7e 	bl	80158a6 <memcpy>

		vPortFreeMicroROS(pv);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff60 	bl	8000870 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009b0:	f006 f950 	bl	8006c54 <xTaskResumeAll>

	return newmem;
 80009b4:	68bb      	ldr	r3, [r7, #8]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009c8:	f006 f936 	bl	8006c38 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe82 	bl	80006e0 <pvPortMallocMicroROS>
 80009dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009e2:	e004      	b.n	80009ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f5      	bne.n	80009e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009f8:	f006 f92c 	bl	8006c54 <xTaskResumeAll>
  	return mem;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a14:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <prvHeapInit+0xac>)
 8000a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00c      	beq.n	8000a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <prvHeapInit+0xac>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <prvHeapInit+0xb0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <prvHeapInit+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a54:	2208      	movs	r2, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <prvHeapInit+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <prvHeapInit+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <prvHeapInit+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <prvHeapInit+0xb4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <prvHeapInit+0xb8>)
 8000a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <prvHeapInit+0xbc>)
 8000a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <prvHeapInit+0xc0>)
 8000aa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20003074 	.word	0x20003074
 8000ab8:	20003c74 	.word	0x20003c74
 8000abc:	20003c7c 	.word	0x20003c7c
 8000ac0:	20003c84 	.word	0x20003c84
 8000ac4:	20003c80 	.word	0x20003c80
 8000ac8:	20003c88 	.word	0x20003c88

08000acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ad4:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <prvInsertBlockIntoFreeList+0xac>)
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e002      	b.n	8000ae0 <prvInsertBlockIntoFreeList+0x14>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8f7      	bhi.n	8000ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d108      	bne.n	8000b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d118      	bne.n	8000b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d002      	beq.n	8000b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20003c74 	.word	0x20003c74
 8000b7c:	20003c7c 	.word	0x20003c7c

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	200b      	movs	r0, #11
 8000bbc:	f001 f80a 	bl	8001bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f001 f821 	bl	8001c08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2105      	movs	r1, #5
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f001 f802 	bl	8001bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bd0:	200c      	movs	r0, #12
 8000bd2:	f001 f819 	bl	8001c08 <HAL_NVIC_EnableIRQ>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bf2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bf8:	4904      	ldr	r1, [pc, #16]	@ (8000c0c <cubemx_transport_open+0x28>)
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f003 f9a6 	bl	8003f4c <HAL_UART_Receive_DMA>
    return true;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20003c8c 	.word	0x20003c8c

08000c10 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f003 f9df 	bl	8003fe4 <HAL_UART_DMAStop>
    return true;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c44:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4c:	2b20      	cmp	r3, #32
 8000c4e:	d11b      	bne.n	8000c88 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f003 f8f7 	bl	8003e4c <HAL_UART_Transmit_DMA>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c62:	e002      	b.n	8000c6a <cubemx_transport_write+0x3a>
            osDelay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f004 ffa5 	bl	8005bb4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c6a:	7cfb      	ldrb	r3, [r7, #19]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <cubemx_transport_write+0x4a>
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	2b20      	cmp	r3, #32
 8000c78:	d1f4      	bne.n	8000c64 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c7a:	7cfb      	ldrb	r3, [r7, #19]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <cubemx_transport_write+0x54>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	e002      	b.n	8000c8a <cubemx_transport_write+0x5a>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e000      	b.n	8000c8a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000c88:	2300      	movs	r3, #0
    }
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ca8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cae:	b672      	cpsid	i
}
 8000cb0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <cubemx_transport_read+0x9c>)
 8000cc2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cc4:	b662      	cpsie	i
}
 8000cc6:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f004 ff70 	bl	8005bb4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <cubemx_transport_read+0x9c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d103      	bne.n	8000ce8 <cubemx_transport_read+0x54>
 8000ce0:	69fa      	ldr	r2, [r7, #28]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbe2      	blt.n	8000cae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cec:	e011      	b.n	8000d12 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	490f      	ldr	r1, [pc, #60]	@ (8000d38 <cubemx_transport_read+0xa4>)
 8000cfa:	5c8a      	ldrb	r2, [r1, r2]
 8000cfc:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000d0a:	6013      	str	r3, [r2, #0]
        wrote++;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <cubemx_transport_read+0x9c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d003      	beq.n	8000d26 <cubemx_transport_read+0x92>
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3e3      	bcc.n	8000cee <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8000d26:	69bb      	ldr	r3, [r7, #24]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20004490 	.word	0x20004490
 8000d34:	2000448c 	.word	0x2000448c
 8000d38:	20003c8c 	.word	0x20003c8c

08000d3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b2f      	ldr	r3, [pc, #188]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a2e      	ldr	r2, [pc, #184]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a22      	ldr	r2, [pc, #136]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f001 fbf3 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <MX_GPIO_Init+0xd8>)
 8000dd6:	f001 fa63 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df4:	f001 fa54 	bl	80022a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	2028      	movs	r0, #40	@ 0x28
 8000dfe:	f000 fee9 	bl	8001bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e02:	2028      	movs	r0, #40	@ 0x28
 8000e04:	f000 ff00 	bl	8001c08 <HAL_NVIC_EnableIRQ>

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800

08000e18 <timer_callback>:
std_msgs__msg__Int32 msg;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	e9c7 2300 	strd	r2, r3, [r7]
	static uint8_t cnt = 0;
	if (timer != NULL) {
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d024      	beq.n	8000e74 <timer_callback+0x5c>
		if (cnt == 0)
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <timer_callback+0x64>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <timer_callback+0x24>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e32:	2120      	movs	r1, #32
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e38:	f001 fbcc 	bl	80025d4 <HAL_GPIO_TogglePin>
		cnt = (cnt + 1) % 100;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <timer_callback+0x64>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a0f      	ldr	r2, [pc, #60]	@ (8000e80 <timer_callback+0x68>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	1151      	asrs	r1, r2, #5
 8000e4a:	17da      	asrs	r2, r3, #31
 8000e4c:	1a8a      	subs	r2, r1, r2
 8000e4e:	2164      	movs	r1, #100	@ 0x64
 8000e50:	fb01 f202 	mul.w	r2, r1, r2
 8000e54:	1a9a      	subs	r2, r3, r2
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <timer_callback+0x64>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		pub_msg.data += step;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <timer_callback+0x6c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <timer_callback+0x70>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <timer_callback+0x6c>)
 8000e68:	6013      	str	r3, [r2, #0]
		RCSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4905      	ldr	r1, [pc, #20]	@ (8000e84 <timer_callback+0x6c>)
 8000e6e:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <timer_callback+0x74>)
 8000e70:	f007 fd3a 	bl	80088e8 <rcl_publish>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20004588 	.word	0x20004588
 8000e80:	51eb851f 	.word	0x51eb851f
 8000e84:	20004580 	.word	0x20004580
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20004578 	.word	0x20004578

08000e90 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * sub_msg = (const std_msgs__msg__Int32 *)msgin;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
  step = sub_msg->data;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a03      	ldr	r2, [pc, #12]	@ (8000eb0 <subscription_callback+0x20>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b0b2      	sub	sp, #200	@ 0xc8
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 8000ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8001000 <StartDefaultTask+0x148>)
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8001004 <StartDefaultTask+0x14c>)
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4b4f      	ldr	r3, [pc, #316]	@ (8001008 <StartDefaultTask+0x150>)
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800100c <StartDefaultTask+0x154>)
 8000ece:	4950      	ldr	r1, [pc, #320]	@ (8001010 <StartDefaultTask+0x158>)
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f008 fd91 	bl	80099f8 <rmw_uros_set_custom_transport>
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8000ed6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eda:	4618      	mov	r0, r3
 8000edc:	f008 fca8 	bl	8009830 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8000ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8001014 <StartDefaultTask+0x15c>)
 8000ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8001018 <StartDefaultTask+0x160>)
 8000ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8000eec:	4b4b      	ldr	r3, [pc, #300]	@ (800101c <StartDefaultTask+0x164>)
 8000eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8001020 <StartDefaultTask+0x168>)
 8000ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000ef8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000efc:	4618      	mov	r0, r3
 8000efe:	f008 fca5 	bl	800984c <rcutils_set_default_allocator>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8000f0e:	217d      	movs	r1, #125	@ 0x7d
 8000f10:	4844      	ldr	r0, [pc, #272]	@ (8001024 <StartDefaultTask+0x16c>)
 8000f12:	f014 fb0d 	bl	8015530 <iprintf>
	}

	// micro-ROS app

	allocator = rcl_get_default_allocator();
 8000f16:	4c44      	ldr	r4, [pc, #272]	@ (8001028 <StartDefaultTask+0x170>)
 8000f18:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fcb3 	bl	8009888 <rcutils_get_default_allocator>
 8000f22:	4625      	mov	r5, r4
 8000f24:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8000f30:	f007 fb0a 	bl	8008548 <rcl_get_zero_initialized_init_options>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a3d      	ldr	r2, [pc, #244]	@ (800102c <StartDefaultTask+0x174>)
 8000f38:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <StartDefaultTask+0x170>)
 8000f3c:	466c      	mov	r4, sp
 8000f3e:	f103 020c 	add.w	r2, r3, #12
 8000f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f46:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f4c:	4837      	ldr	r0, [pc, #220]	@ (800102c <StartDefaultTask+0x174>)
 8000f4e:	f007 fafd 	bl	800854c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 8000f52:	2163      	movs	r1, #99	@ 0x63
 8000f54:	4835      	ldr	r0, [pc, #212]	@ (800102c <StartDefaultTask+0x174>)
 8000f56:	f007 fbf5 	bl	8008744 <rcl_init_options_set_domain_id>
	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8000f5a:	4b33      	ldr	r3, [pc, #204]	@ (8001028 <StartDefaultTask+0x170>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4b33      	ldr	r3, [pc, #204]	@ (800102c <StartDefaultTask+0x174>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	4832      	ldr	r0, [pc, #200]	@ (8001030 <StartDefaultTask+0x178>)
 8000f66:	f008 fb53 	bl	8009610 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000f6a:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <StartDefaultTask+0x178>)
 8000f6c:	4a31      	ldr	r2, [pc, #196]	@ (8001034 <StartDefaultTask+0x17c>)
 8000f6e:	4932      	ldr	r1, [pc, #200]	@ (8001038 <StartDefaultTask+0x180>)
 8000f70:	4832      	ldr	r0, [pc, #200]	@ (800103c <StartDefaultTask+0x184>)
 8000f72:	f008 fb81 	bl	8009678 <rclc_node_init_default>
	//create pub
	rclc_publisher_init_default(&publisher, &node,
 8000f76:	f009 ffb7 	bl	800aee8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <StartDefaultTask+0x188>)
 8000f7e:	492f      	ldr	r1, [pc, #188]	@ (800103c <StartDefaultTask+0x184>)
 8000f80:	4830      	ldr	r0, [pc, #192]	@ (8001044 <StartDefaultTask+0x18c>)
 8000f82:	f008 fbb5 	bl	80096f0 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher");
	//create sub
	rclc_subscription_init_default(&subscriber, &node,
 8000f86:	f009 ffaf 	bl	800aee8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001048 <StartDefaultTask+0x190>)
 8000f8e:	492b      	ldr	r1, [pc, #172]	@ (800103c <StartDefaultTask+0x184>)
 8000f90:	482e      	ldr	r0, [pc, #184]	@ (800104c <StartDefaultTask+0x194>)
 8000f92:	f008 fbe1 	bl	8009758 <rclc_subscription_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_subscription");
	//create msg
	pub_msg.data = 0;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <StartDefaultTask+0x198>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
	//create timer
	rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(100),
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <StartDefaultTask+0x19c>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	a315      	add	r3, pc, #84	@ (adr r3, 8000ff8 <StartDefaultTask+0x140>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	4922      	ldr	r1, [pc, #136]	@ (8001030 <StartDefaultTask+0x178>)
 8000fa8:	482b      	ldr	r0, [pc, #172]	@ (8001058 <StartDefaultTask+0x1a0>)
 8000faa:	f008 fc09 	bl	80097c0 <rclc_timer_init_default>
			timer_callback);
	//create executor
	executor = rclc_executor_get_zero_initialized_executor();
 8000fae:	4c2b      	ldr	r4, [pc, #172]	@ (800105c <StartDefaultTask+0x1a4>)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f008 f826 	bl	8009004 <rclc_executor_get_zero_initialized_executor>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2288      	movs	r2, #136	@ 0x88
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f014 fc71 	bl	80158a6 <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <StartDefaultTask+0x170>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4919      	ldr	r1, [pc, #100]	@ (8001030 <StartDefaultTask+0x178>)
 8000fca:	4824      	ldr	r0, [pc, #144]	@ (800105c <StartDefaultTask+0x1a4>)
 8000fcc:	f008 f824 	bl	8009018 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 8000fd0:	4921      	ldr	r1, [pc, #132]	@ (8001058 <StartDefaultTask+0x1a0>)
 8000fd2:	4822      	ldr	r0, [pc, #136]	@ (800105c <StartDefaultTask+0x1a4>)
 8000fd4:	f008 f8c4 	bl	8009160 <rclc_executor_add_timer>
	rclc_executor_add_subscription(&executor, &subscriber, &sub_msg, &subscription_callback, ON_NEW_DATA);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <StartDefaultTask+0x1a8>)
 8000fde:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <StartDefaultTask+0x1ac>)
 8000fe0:	491a      	ldr	r1, [pc, #104]	@ (800104c <StartDefaultTask+0x194>)
 8000fe2:	481e      	ldr	r0, [pc, #120]	@ (800105c <StartDefaultTask+0x1a4>)
 8000fe4:	f008 f888 	bl	80090f8 <rclc_executor_add_subscription>
	rclc_executor_spin(&executor);
 8000fe8:	481c      	ldr	r0, [pc, #112]	@ (800105c <StartDefaultTask+0x1a4>)
 8000fea:	f008 facf 	bl	800958c <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f004 fde0 	bl	8005bb4 <osDelay>
 8000ff4:	e7fb      	b.n	8000fee <StartDefaultTask+0x136>
 8000ff6:	bf00      	nop
 8000ff8:	05f5e100 	.word	0x05f5e100
 8000ffc:	00000000 	.word	0x00000000
 8001000:	08000c95 	.word	0x08000c95
 8001004:	08000c31 	.word	0x08000c31
 8001008:	08000c11 	.word	0x08000c11
 800100c:	08000be5 	.word	0x08000be5
 8001010:	200045e8 	.word	0x200045e8
 8001014:	08001159 	.word	0x08001159
 8001018:	0800119d 	.word	0x0800119d
 800101c:	080011d5 	.word	0x080011d5
 8001020:	08001241 	.word	0x08001241
 8001024:	08016674 	.word	0x08016674
 8001028:	200044c8 	.word	0x200044c8
 800102c:	200044e4 	.word	0x200044e4
 8001030:	20004494 	.word	0x20004494
 8001034:	0801669c 	.word	0x0801669c
 8001038:	080166a0 	.word	0x080166a0
 800103c:	200044dc 	.word	0x200044dc
 8001040:	080166ac 	.word	0x080166ac
 8001044:	20004578 	.word	0x20004578
 8001048:	080166c0 	.word	0x080166c0
 800104c:	2000457c 	.word	0x2000457c
 8001050:	20004580 	.word	0x20004580
 8001054:	08000e19 	.word	0x08000e19
 8001058:	200044e8 	.word	0x200044e8
 800105c:	200044f0 	.word	0x200044f0
 8001060:	08000e91 	.word	0x08000e91
 8001064:	20004584 	.word	0x20004584

08001068 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800106c:	f000 fcc3 	bl	80019f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001070:	f000 f80e 	bl	8001090 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001074:	f7ff fe62 	bl	8000d3c <MX_GPIO_Init>
	MX_DMA_Init();
 8001078:	f7ff fd82 	bl	8000b80 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 800107c:	f000 fb8a 	bl	8001794 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001080:	f004 fcbc 	bl	80059fc <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001084:	f7ff fb1a 	bl	80006bc <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001088:	f004 fcdc 	bl	8005a44 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <main+0x24>

08001090 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	2238      	movs	r2, #56	@ 0x38
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f014 fb38 	bl	8015714 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f001 facc 	bl	8002650 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c2:	2340      	movs	r3, #64	@ 0x40
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80010d2:	2355      	movs	r3, #85	@ 0x55
 80010d4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fb66 	bl	80027b8 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x66>
		Error_Handler();
 80010f2:	f000 f82b 	bl	800114c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2104      	movs	r1, #4
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fe64 	bl	8002ddc <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x8e>
		Error_Handler();
 800111a:	f000 f817 	bl	800114c <Error_Handler>
	}
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	@ 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800113a:	f000 fc75 	bl	8001a28 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40012c00 	.word	0x40012c00

0800114c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <microros_allocate+0x3c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <microros_allocate+0x3c>)
 8001170:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <microros_allocate+0x40>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <microros_allocate+0x40>)
 8001180:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff faac 	bl	80006e0 <pvPortMallocMicroROS>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000458c 	.word	0x2000458c
 8001198:	20004590 	.word	0x20004590

0800119c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00c      	beq.n	80011c6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fbbb 	bl	8000928 <getBlockSize>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <microros_deallocate+0x34>)
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <microros_deallocate+0x34>)
 80011be:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fb55 	bl	8000870 <vPortFreeMicroROS>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20004590 	.word	0x20004590

080011d4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <microros_reallocate+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <microros_reallocate+0x64>)
 80011ee:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <microros_reallocate+0x68>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <microros_reallocate+0x68>)
 80011fe:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f7ff fa6a 	bl	80006e0 <pvPortMallocMicroROS>
 800120c:	4603      	mov	r3, r0
 800120e:	e00e      	b.n	800122e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fb89 	bl	8000928 <getBlockSize>
 8001216:	4603      	mov	r3, r0
 8001218:	4a08      	ldr	r2, [pc, #32]	@ (800123c <microros_reallocate+0x68>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	461a      	mov	r2, r3
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <microros_reallocate+0x68>)
 8001222:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fb9c 	bl	8000964 <pvPortReallocMicroROS>
 800122c:	4603      	mov	r3, r0
  }
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000458c 	.word	0x2000458c
 800123c:	20004590 	.word	0x20004590

08001240 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <microros_zero_allocate+0x48>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	4413      	add	r3, r2
 800125a:	461a      	mov	r2, r3
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <microros_zero_allocate+0x48>)
 800125e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	4a08      	ldr	r2, [pc, #32]	@ (800128c <microros_zero_allocate+0x4c>)
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4413      	add	r3, r2
 800126e:	461a      	mov	r2, r3
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <microros_zero_allocate+0x4c>)
 8001272:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff fba1 	bl	80009be <pvPortCallocMicroROS>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000458c 	.word	0x2000458c
 800128c:	20004590 	.word	0x20004590

08001290 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80012a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a6:	a320      	add	r3, pc, #128	@ (adr r3, 8001328 <UTILS_NanosecondsToTimespec+0x98>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f820 	bl	80002f0 <__aeabi_ldivmod>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80012ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012be:	a31a      	add	r3, pc, #104	@ (adr r3, 8001328 <UTILS_NanosecondsToTimespec+0x98>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff f814 	bl	80002f0 <__aeabi_ldivmod>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da20      	bge.n	8001316 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <UTILS_NanosecondsToTimespec+0x90>)
 80012da:	fb82 1203 	smull	r1, r2, r2, r3
 80012de:	1712      	asrs	r2, r2, #28
 80012e0:	17db      	asrs	r3, r3, #31
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	6979      	ldr	r1, [r7, #20]
 80012f0:	17c8      	asrs	r0, r1, #31
 80012f2:	460c      	mov	r4, r1
 80012f4:	4605      	mov	r5, r0
 80012f6:	ebb2 0804 	subs.w	r8, r2, r4
 80012fa:	eb63 0905 	sbc.w	r9, r3, r5
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4906      	ldr	r1, [pc, #24]	@ (8001324 <UTILS_NanosecondsToTimespec+0x94>)
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	441a      	add	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	609a      	str	r2, [r3, #8]
    }
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001320:	44b82fa1 	.word	0x44b82fa1
 8001324:	3b9aca00 	.word	0x3b9aca00
 8001328:	3b9aca00 	.word	0x3b9aca00
 800132c:	00000000 	.word	0x00000000

08001330 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001334:	b08e      	sub	sp, #56	@ 0x38
 8001336:	af00      	add	r7, sp, #0
 8001338:	6278      	str	r0, [r7, #36]	@ 0x24
 800133a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800133c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001340:	2300      	movs	r3, #0
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fef8 	bl	800714c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	17da      	asrs	r2, r3, #31
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	61fa      	str	r2, [r7, #28]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	69b9      	ldr	r1, [r7, #24]
 800136e:	000b      	movs	r3, r1
 8001370:	2200      	movs	r2, #0
 8001372:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	2200      	movs	r2, #0
 800137a:	461c      	mov	r4, r3
 800137c:	4615      	mov	r5, r2
 800137e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001382:	1911      	adds	r1, r2, r4
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	416b      	adcs	r3, r5
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800138e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001392:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	f04f 0400 	mov.w	r4, #0
 800139e:	f04f 0500 	mov.w	r5, #0
 80013a2:	015d      	lsls	r5, r3, #5
 80013a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80013a8:	0154      	lsls	r4, r2, #5
 80013aa:	4622      	mov	r2, r4
 80013ac:	462b      	mov	r3, r5
 80013ae:	ebb2 0800 	subs.w	r8, r2, r0
 80013b2:	eb63 0901 	sbc.w	r9, r3, r1
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013c6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80013ca:	4690      	mov	r8, r2
 80013cc:	4699      	mov	r9, r3
 80013ce:	eb18 0a00 	adds.w	sl, r8, r0
 80013d2:	eb49 0b01 	adc.w	fp, r9, r1
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013ea:	ebb2 040a 	subs.w	r4, r2, sl
 80013ee:	603c      	str	r4, [r7, #0]
 80013f0:	eb63 030b 	sbc.w	r3, r3, fp
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013fa:	4623      	mov	r3, r4
 80013fc:	181b      	adds	r3, r3, r0
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	462b      	mov	r3, r5
 8001402:	eb41 0303 	adc.w	r3, r1, r3
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	6a3a      	ldr	r2, [r7, #32]
 800140a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800140e:	f7ff ff3f 	bl	8001290 <UTILS_NanosecondsToTimespec>

    return 0;
 8001412:	2300      	movs	r3, #0
 8001414:	4618      	mov	r0, r3
 8001416:	3738      	adds	r7, #56	@ 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_MspInit+0x50>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_MspInit+0x50>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	@ 0x60
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_MspInit+0x50>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_MspInit+0x50>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_MspInit+0x50>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001448:	6593      	str	r3, [r2, #88]	@ 0x58
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_MspInit+0x50>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	210f      	movs	r1, #15
 800145a:	f06f 0001 	mvn.w	r0, #1
 800145e:	f000 fbb9 	bl	8001bd4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001462:	f001 f999 	bl	8002798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	@ 0x30
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001484:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <HAL_InitTick+0xc4>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001488:	4a2b      	ldr	r2, [pc, #172]	@ (8001538 <HAL_InitTick+0xc4>)
 800148a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800148e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <HAL_InitTick+0xc4>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800149c:	f107 020c 	add.w	r2, r7, #12
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fe6e 	bl	8003188 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014ac:	f001 fe56 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80014b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b4:	4a21      	ldr	r2, [pc, #132]	@ (800153c <HAL_InitTick+0xc8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3b01      	subs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_InitTick+0xcc>)
 80014c2:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <HAL_InitTick+0xd0>)
 80014c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <HAL_InitTick+0xcc>)
 80014c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001540 <HAL_InitTick+0xcc>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_InitTick+0xcc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_InitTick+0xcc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80014e0:	4817      	ldr	r0, [pc, #92]	@ (8001540 <HAL_InitTick+0xcc>)
 80014e2:	f002 f917 	bl	8003714 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80014ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11b      	bne.n	800152c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014f4:	4812      	ldr	r0, [pc, #72]	@ (8001540 <HAL_InitTick+0xcc>)
 80014f6:	f002 f96f 	bl	80037d8 <HAL_TIM_Base_Start_IT>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001508:	2019      	movs	r0, #25
 800150a:	f000 fb7d 	bl	8001c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d808      	bhi.n	8001526 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2019      	movs	r0, #25
 800151a:	f000 fb5b 	bl	8001bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_InitTick+0xd4>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e002      	b.n	800152c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800152c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001530:	4618      	mov	r0, r3
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	431bde83 	.word	0x431bde83
 8001540:	20004594 	.word	0x20004594
 8001544:	40012c00 	.word	0x40012c00
 8001548:	2000000c 	.word	0x2000000c

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <DMA1_Channel1_IRQHandler+0x10>)
 800158a:	f000 fd2e 	bl	8001fea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000467c 	.word	0x2000467c

08001598 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <DMA1_Channel2_IRQHandler+0x10>)
 800159e:	f000 fd24 	bl	8001fea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200046dc 	.word	0x200046dc

080015ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015b2:	f002 f989 	bl	80038c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20004594 	.word	0x20004594

080015c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015c8:	f001 f81e 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <LPUART1_IRQHandler+0x10>)
 80015d6:	f002 fd9b 	bl	8004110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200045e8 	.word	0x200045e8

080015e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_kill>:

int _kill(int pid, int sig)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fe:	f014 f91d 	bl	801583c <__errno>
 8001602:	4603      	mov	r3, r0
 8001604:	2216      	movs	r2, #22
 8001606:	601a      	str	r2, [r3, #0]
  return -1;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_exit>:

void _exit (int status)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800161c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe7 	bl	80015f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <_exit+0x12>

0800162a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00a      	b.n	8001652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163c:	f3af 8000 	nop.w
 8001640:	4601      	mov	r1, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	b2ca      	uxtb	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf0      	blt.n	800163c <_read+0x12>
  }

  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e009      	b.n	800168a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf1      	blt.n	8001676 <_write+0x12>
  }
  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_close>:

int _close(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c4:	605a      	str	r2, [r3, #4]
  return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_isatty>:

int _isatty(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f014 f882 	bl	801583c <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20020000 	.word	0x20020000
 8001764:	00000400 	.word	0x00000400
 8001768:	200045e4 	.word	0x200045e4
 800176c:	2000ad60 	.word	0x2000ad60

08001770 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 800179a:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <MX_LPUART1_UART_Init+0x90>)
 800179c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c4:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80017d6:	4812      	ldr	r0, [pc, #72]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017d8:	f002 fae8 	bl	8003dac <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f7ff fcb3 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	480d      	ldr	r0, [pc, #52]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017ea:	f003 fff8 	bl	80057de <HAL_UARTEx_SetTxFifoThreshold>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80017f4:	f7ff fcaa 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4809      	ldr	r0, [pc, #36]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 80017fc:	f004 f82d 	bl	800585a <HAL_UARTEx_SetRxFifoThreshold>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001806:	f7ff fca1 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_LPUART1_UART_Init+0x8c>)
 800180c:	f003 ffae 	bl	800576c <HAL_UARTEx_DisableFifoMode>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001816:	f7ff fc99 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200045e8 	.word	0x200045e8
 8001824:	40008000 	.word	0x40008000

08001828 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b09e      	sub	sp, #120	@ 0x78
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2254      	movs	r2, #84	@ 0x54
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f013 ff63 	bl	8015714 <memset>
  if(uartHandle->Instance==LPUART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a4e      	ldr	r2, [pc, #312]	@ (800198c <HAL_UART_MspInit+0x164>)
 8001854:	4293      	cmp	r3, r2
 8001856:	f040 8094 	bne.w	8001982 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800185a:	2320      	movs	r3, #32
 800185c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fd06 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001872:	f7ff fc6b 	bl	800114c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001876:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <HAL_UART_MspInit+0x168>)
 8001878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187a:	4a45      	ldr	r2, [pc, #276]	@ (8001990 <HAL_UART_MspInit+0x168>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001882:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <HAL_UART_MspInit+0x168>)
 8001884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <HAL_UART_MspInit+0x168>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	4a3f      	ldr	r2, [pc, #252]	@ (8001990 <HAL_UART_MspInit+0x168>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_UART_MspInit+0x168>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018a6:	230c      	movs	r3, #12
 80018a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80018b6:	230c      	movs	r3, #12
 80018b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c4:	f000 fcec 	bl	80022a0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80018c8:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018ca:	4a33      	ldr	r2, [pc, #204]	@ (8001998 <HAL_UART_MspInit+0x170>)
 80018cc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018d0:	2222      	movs	r2, #34	@ 0x22
 80018d2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018da:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ec:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80018f2:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018f4:	2220      	movs	r2, #32
 80018f6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018f8:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 80018fa:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80018fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001900:	4824      	ldr	r0, [pc, #144]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 8001902:	f000 f98f 	bl	8001c24 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800190c:	f7ff fc1e 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a20      	ldr	r2, [pc, #128]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 8001914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001918:	4a1e      	ldr	r2, [pc, #120]	@ (8001994 <HAL_UART_MspInit+0x16c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001920:	4a1f      	ldr	r2, [pc, #124]	@ (80019a0 <HAL_UART_MspInit+0x178>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001926:	2223      	movs	r2, #35	@ 0x23
 8001928:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_UART_MspInit+0x174>)
 800192c:	2210      	movs	r2, #16
 800192e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001936:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <HAL_UART_MspInit+0x174>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_UART_MspInit+0x174>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001950:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001954:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001956:	4811      	ldr	r0, [pc, #68]	@ (800199c <HAL_UART_MspInit+0x174>)
 8001958:	f000 f964 	bl	8001c24 <HAL_DMA_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001962:	f7ff fbf3 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <HAL_UART_MspInit+0x174>)
 800196a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800196c:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <HAL_UART_MspInit+0x174>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2105      	movs	r1, #5
 8001976:	205b      	movs	r0, #91	@ 0x5b
 8001978:	f000 f92c 	bl	8001bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800197c:	205b      	movs	r0, #91	@ 0x5b
 800197e:	f000 f943 	bl	8001c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3778      	adds	r7, #120	@ 0x78
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40008000 	.word	0x40008000
 8001990:	40021000 	.word	0x40021000
 8001994:	2000467c 	.word	0x2000467c
 8001998:	40020008 	.word	0x40020008
 800199c:	200046dc 	.word	0x200046dc
 80019a0:	4002001c 	.word	0x4002001c

080019a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a4:	480d      	ldr	r0, [pc, #52]	@ (80019dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff fee2 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <LoopForever+0xe>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	@ (80019f0 <LoopForever+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f013 ff39 	bl	8015848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d6:	f7ff fb47 	bl	8001068 <main>

080019da <LoopForever>:

LoopForever:
    b LoopForever
 80019da:	e7fe      	b.n	80019da <LoopForever>
  ldr   r0, =_estack
 80019dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80019e8:	080173c4 	.word	0x080173c4
  ldr r2, =_sbss
 80019ec:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80019f0:	2000ad5c 	.word	0x2000ad5c

080019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_2_IRQHandler>

080019f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f8dc 	bl	8001bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	200f      	movs	r0, #15
 8001a08:	f7ff fd34 	bl	8001474 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	e001      	b.n	8001a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a18:	f7ff fd02 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_IncTick+0x1c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a03      	ldr	r2, [pc, #12]	@ (8001a44 <HAL_IncTick+0x1c>)
 8001a38:	6013      	str	r3, [r2, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	2000473c 	.word	0x2000473c
 8001a48:	20000010 	.word	0x20000010

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000473c 	.word	0x2000473c

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	@ (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	@ (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff4c 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be2:	f7ff ff63 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001be6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7ff ffb3 	bl	8001b58 <NVIC_EncodePriority>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff82 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff56 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e08d      	b.n	8001d52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HAL_DMA_Init+0x138>)
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d80f      	bhi.n	8001c62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b45      	ldr	r3, [pc, #276]	@ (8001d60 <HAL_DMA_Init+0x13c>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a45      	ldr	r2, [pc, #276]	@ (8001d64 <HAL_DMA_Init+0x140>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	009a      	lsls	r2, r3, #2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a42      	ldr	r2, [pc, #264]	@ (8001d68 <HAL_DMA_Init+0x144>)
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c60:	e00e      	b.n	8001c80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <HAL_DMA_Init+0x148>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d64 <HAL_DMA_Init+0x140>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	009a      	lsls	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d70 <HAL_DMA_Init+0x14c>)
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa82 	bl	80021dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ce0:	d102      	bne.n	8001ce8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cfc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_DMA_Init+0x104>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d80c      	bhi.n	8001d28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 faa2 	bl	8002258 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	e008      	b.n	8001d3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40020407 	.word	0x40020407
 8001d60:	bffdfff8 	.word	0xbffdfff8
 8001d64:	cccccccd 	.word	0xcccccccd
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	bffdfbf8 	.word	0xbffdfbf8
 8001d70:	40020400 	.word	0x40020400

08001d74 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_DMA_Start_IT+0x20>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e066      	b.n	8001e62 <HAL_DMA_Start_IT+0xee>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d155      	bne.n	8001e54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f9c7 	bl	8002160 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 020e 	orr.w	r2, r2, #14
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e00f      	b.n	8001e0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0204 	bic.w	r2, r2, #4
 8001dfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 020a 	orr.w	r2, r2, #10
 8001e0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e005      	b.n	8001e60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d005      	beq.n	8001e8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e037      	b.n	8001efe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 020e 	bic.w	r2, r2, #14
 8001e9c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f003 021f 	and.w	r2, r3, #31
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	2101      	movs	r1, #1
 8001ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001eda:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00c      	beq.n	8001efe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ef2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001efc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d00d      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2204      	movs	r2, #4
 8001f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e047      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020e 	bic.w	r2, r2, #14
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f9c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fbe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
    }
  }
  return status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2204      	movs	r2, #4
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d026      	beq.n	8002064 <HAL_DMA_IRQHandler+0x7a>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d021      	beq.n	8002064 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0204 	bic.w	r2, r2, #4
 800203c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	2104      	movs	r1, #4
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	2b00      	cmp	r3, #0
 8002058:	d071      	beq.n	800213e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002062:	e06c      	b.n	800213e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2202      	movs	r2, #2
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d02e      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d029      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 020a 	bic.w	r2, r2, #10
 800209e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	2102      	movs	r1, #2
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d038      	beq.n	800213e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020d4:	e033      	b.n	800213e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d02a      	beq.n	8002140 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d025      	beq.n	8002140 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 020e 	bic.w	r2, r2, #14
 8002102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800213e:	bf00      	nop
 8002140:	bf00      	nop
}
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002176:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002188:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d108      	bne.n	80021c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021be:	e007      	b.n	80021d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	60da      	str	r2, [r3, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d802      	bhi.n	80021f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e001      	b.n	80021fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3b08      	subs	r3, #8
 8002206:	4a12      	ldr	r2, [pc, #72]	@ (8002250 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	009a      	lsls	r2, r3, #2
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002226:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40020407 	.word	0x40020407
 8002248:	40020800 	.word	0x40020800
 800224c:	40020820 	.word	0x40020820
 8002250:	cccccccd 	.word	0xcccccccd
 8002254:	40020880 	.word	0x40020880

08002258 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a08      	ldr	r2, [pc, #32]	@ (800229c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800227a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3b01      	subs	r3, #1
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2201      	movs	r2, #1
 8002286:	409a      	lsls	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	1000823f 	.word	0x1000823f
 800229c:	40020940 	.word	0x40020940

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ae:	e15a      	b.n	8002566 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 814c 	beq.w	8002560 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d005      	beq.n	80022e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d130      	bne.n	8002342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002316:	2201      	movs	r2, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 0201 	and.w	r2, r3, #1
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b03      	cmp	r3, #3
 800234c:	d017      	beq.n	800237e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d123      	bne.n	80023d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	6939      	ldr	r1, [r7, #16]
 80023ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0203 	and.w	r2, r3, #3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80a6 	beq.w	8002560 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b5b      	ldr	r3, [pc, #364]	@ (8002584 <HAL_GPIO_Init+0x2e4>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002418:	4a5a      	ldr	r2, [pc, #360]	@ (8002584 <HAL_GPIO_Init+0x2e4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002420:	4b58      	ldr	r3, [pc, #352]	@ (8002584 <HAL_GPIO_Init+0x2e4>)
 8002422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242c:	4a56      	ldr	r2, [pc, #344]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002456:	d01f      	beq.n	8002498 <HAL_GPIO_Init+0x1f8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4c      	ldr	r2, [pc, #304]	@ (800258c <HAL_GPIO_Init+0x2ec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d019      	beq.n	8002494 <HAL_GPIO_Init+0x1f4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4b      	ldr	r2, [pc, #300]	@ (8002590 <HAL_GPIO_Init+0x2f0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_GPIO_Init+0x1f0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4a      	ldr	r2, [pc, #296]	@ (8002594 <HAL_GPIO_Init+0x2f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00d      	beq.n	800248c <HAL_GPIO_Init+0x1ec>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a49      	ldr	r2, [pc, #292]	@ (8002598 <HAL_GPIO_Init+0x2f8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0x1e8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a48      	ldr	r2, [pc, #288]	@ (800259c <HAL_GPIO_Init+0x2fc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_GPIO_Init+0x1e4>
 8002480:	2305      	movs	r3, #5
 8002482:	e00a      	b.n	800249a <HAL_GPIO_Init+0x1fa>
 8002484:	2306      	movs	r3, #6
 8002486:	e008      	b.n	800249a <HAL_GPIO_Init+0x1fa>
 8002488:	2304      	movs	r3, #4
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1fa>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1fa>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1fa>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1fa>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024aa:	4937      	ldr	r1, [pc, #220]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e2:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002506:	4a26      	ldr	r2, [pc, #152]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800250c:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002530:	4a1b      	ldr	r2, [pc, #108]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255a:	4a11      	ldr	r2, [pc, #68]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f ae9d 	bne.w	80022b0 <HAL_GPIO_Init+0x10>
  }
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000
 800258c:	48000400 	.word	0x48000400
 8002590:	48000800 	.word	0x48000800
 8002594:	48000c00 	.word	0x48000c00
 8002598:	48001000 	.word	0x48001000
 800259c:	48001400 	.word	0x48001400
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43d9      	mvns	r1, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	400b      	ands	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800261e:	4a05      	ldr	r2, [pc, #20]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f806 	bl	8002638 <HAL_GPIO_EXTI_Callback>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d141      	bne.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800265e:	4b4b      	ldr	r3, [pc, #300]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800266a:	d131      	bne.n	80026d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800266c:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002672:	4a46      	ldr	r2, [pc, #280]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800267c:	4b43      	ldr	r3, [pc, #268]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002684:	4a41      	ldr	r2, [pc, #260]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800268a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800268c:	4b40      	ldr	r3, [pc, #256]	@ (8002790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2232      	movs	r2, #50	@ 0x32
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	4a3f      	ldr	r2, [pc, #252]	@ (8002794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9b      	lsrs	r3, r3, #18
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a2:	e002      	b.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b6:	d102      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f2      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026be:	4b33      	ldr	r3, [pc, #204]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ca:	d158      	bne.n	800277e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e057      	b.n	8002780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d0:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026d6:	4a2d      	ldr	r2, [pc, #180]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026e0:	e04d      	b.n	800277e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e8:	d141      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ea:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f6:	d131      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f8:	4b24      	ldr	r3, [pc, #144]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026fe:	4a23      	ldr	r2, [pc, #140]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002710:	4a1e      	ldr	r2, [pc, #120]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2232      	movs	r2, #50	@ 0x32
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272e:	e002      	b.n	8002736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3b01      	subs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002742:	d102      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f2      	bne.n	8002730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002756:	d112      	bne.n	800277e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e011      	b.n	8002780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002768:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800276c:	e007      	b.n	800277e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800277c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40007000 	.word	0x40007000
 8002790:	20000008 	.word	0x20000008
 8002794:	431bde83 	.word	0x431bde83

08002798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a6:	6093      	str	r3, [r2, #8]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40007000 	.word	0x40007000

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e2fe      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d075      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d6:	4b97      	ldr	r3, [pc, #604]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e0:	4b94      	ldr	r3, [pc, #592]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3e>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_OscConfig+0x44>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x108>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e2d9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x74>
 800281e:	4b85      	ldr	r3, [pc, #532]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a84      	ldr	r2, [pc, #528]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b7f      	ldr	r3, [pc, #508]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b7c      	ldr	r3, [pc, #496]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7b      	ldr	r2, [pc, #492]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 8002850:	4b78      	ldr	r3, [pc, #480]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a77      	ldr	r2, [pc, #476]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b75      	ldr	r3, [pc, #468]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a74      	ldr	r2, [pc, #464]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f8ec 	bl	8001a4c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff f8e8 	bl	8001a4c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e29e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xc0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f8d8 	bl	8001a4c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff f8d4 	bl	8001a4c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e28a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b2:	4b60      	ldr	r3, [pc, #384]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0xe8>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d075      	beq.n	80029ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ce:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d8:	4b56      	ldr	r3, [pc, #344]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_OscConfig+0x136>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_OscConfig+0x13c>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d11f      	bne.n	8002934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x154>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e25d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b49      	ldr	r3, [pc, #292]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	4946      	ldr	r1, [pc, #280]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002920:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <HAL_RCC_OscConfig+0x280>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fda5 	bl	8001474 <HAL_InitTick>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d043      	beq.n	80029b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e249      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800293c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3c      	ldr	r2, [pc, #240]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff f880 	bl	8001a4c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002950:	f7ff f87c 	bl	8001a4c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e232      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002962:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	492d      	ldr	r1, [pc, #180]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
 8002982:	e01a      	b.n	80029ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002984:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2a      	ldr	r2, [pc, #168]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 800298a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800298e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7ff f85c 	bl	8001a4c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002998:	f7ff f858 	bl	8001a4c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e20e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1e0>
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d041      	beq.n	8002a4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d4:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7ff f835 	bl	8001a4c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7ff f831 	bl	8001a4c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1e7      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ef      	beq.n	80029e6 <HAL_RCC_OscConfig+0x22e>
 8002a06:	e020      	b.n	8002a4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a0e:	4a09      	ldr	r2, [pc, #36]	@ (8002a34 <HAL_RCC_OscConfig+0x27c>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff f818 	bl	8001a4c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a1e:	e00d      	b.n	8002a3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff f814 	bl	8001a4c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d906      	bls.n	8002a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1ca      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ea      	bne.n	8002a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80a6 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a5c:	4b84      	ldr	r3, [pc, #528]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2b4>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x2b6>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b7f      	ldr	r3, [pc, #508]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	4a7e      	ldr	r2, [pc, #504]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	4b79      	ldr	r3, [pc, #484]	@ (8002c74 <HAL_RCC_OscConfig+0x4bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9a:	4b76      	ldr	r3, [pc, #472]	@ (8002c74 <HAL_RCC_OscConfig+0x4bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	@ (8002c74 <HAL_RCC_OscConfig+0x4bc>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe ffd1 	bl	8001a4c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fe ffcd 	bl	8001a4c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e183      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c74 <HAL_RCC_OscConfig+0x4bc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d108      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x32e>
 8002ad4:	4b66      	ldr	r3, [pc, #408]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	4a65      	ldr	r2, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae4:	e024      	b.n	8002b30 <HAL_RCC_OscConfig+0x378>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d110      	bne.n	8002b10 <HAL_RCC_OscConfig+0x358>
 8002aee:	4b60      	ldr	r3, [pc, #384]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af4:	4a5e      	ldr	r2, [pc, #376]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002afe:	4b5c      	ldr	r3, [pc, #368]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b04:	4a5a      	ldr	r2, [pc, #360]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0e:	e00f      	b.n	8002b30 <HAL_RCC_OscConfig+0x378>
 8002b10:	4b57      	ldr	r3, [pc, #348]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	4a56      	ldr	r2, [pc, #344]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	4a52      	ldr	r2, [pc, #328]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d016      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe ff88 	bl	8001a4c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe ff84 	bl	8001a4c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e138      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	4b46      	ldr	r3, [pc, #280]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ed      	beq.n	8002b40 <HAL_RCC_OscConfig+0x388>
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe ff71 	bl	8001a4c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe ff6d 	bl	8001a4c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e121      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b84:	4b3a      	ldr	r3, [pc, #232]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ed      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b98:	4b35      	ldr	r3, [pc, #212]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	4a34      	ldr	r2, [pc, #208]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d03c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe ff40 	bl	8001a4c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd0:	f7fe ff3c 	bl	8001a4c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0f2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002be2:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x418>
 8002bf0:	e01b      	b.n	8002c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7fe ff23 	bl	8001a4c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c0a:	f7fe ff1f 	bl	8001a4c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0d5      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c1c:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ef      	bne.n	8002c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80c9 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c34:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	f000 8083 	beq.w	8002d48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d15e      	bne.n	8002d08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a08      	ldr	r2, [pc, #32]	@ (8002c70 <HAL_RCC_OscConfig+0x4b8>)
 8002c50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fef9 	bl	8001a4c <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	e00c      	b.n	8002c78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fef5 	bl	8001a4c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d905      	bls.n	8002c78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0ab      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c78:	4b55      	ldr	r3, [pc, #340]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ec      	bne.n	8002c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c84:	4b52      	ldr	r3, [pc, #328]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b52      	ldr	r3, [pc, #328]	@ (8002dd4 <HAL_RCC_OscConfig+0x61c>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6a11      	ldr	r1, [r2, #32]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c94:	3a01      	subs	r2, #1
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c9e:	0212      	lsls	r2, r2, #8
 8002ca0:	4311      	orrs	r1, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	0552      	lsls	r2, r2, #21
 8002cac:	4311      	orrs	r1, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cb2:	0852      	lsrs	r2, r2, #1
 8002cb4:	3a01      	subs	r2, #1
 8002cb6:	0652      	lsls	r2, r2, #25
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cbe:	06d2      	lsls	r2, r2, #27
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4943      	ldr	r1, [pc, #268]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b41      	ldr	r3, [pc, #260]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a40      	ldr	r2, [pc, #256]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe feb4 	bl	8001a4c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe feb0 	bl	8001a4c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e066      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x530>
 8002d06:	e05e      	b.n	8002dc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe9a 	bl	8001a4c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fe96 	bl	8001a4c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2e:	4b28      	ldr	r3, [pc, #160]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d3a:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4924      	ldr	r1, [pc, #144]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002d40:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_RCC_OscConfig+0x620>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
 8002d46:	e03e      	b.n	8002dc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e039      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d54:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <HAL_RCC_OscConfig+0x618>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d12c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	3b01      	subs	r3, #1
 8002d74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d123      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11b      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d113      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	019f800c 	.word	0x019f800c
 8002dd8:	feeefffc 	.word	0xfeeefffc

08002ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e11e      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b91      	ldr	r3, [pc, #580]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b8e      	ldr	r3, [pc, #568]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	498c      	ldr	r1, [pc, #560]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b8a      	ldr	r3, [pc, #552]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e106      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d073      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d129      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e38:	4b81      	ldr	r3, [pc, #516]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0f4      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e48:	f000 f9d0 	bl	80031ec <RCC_GetSysClockFreqFromPLLSource>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4a7c      	ldr	r2, [pc, #496]	@ (8003044 <HAL_RCC_ClockConfig+0x268>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d93f      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e56:	4b7a      	ldr	r3, [pc, #488]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d033      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d12f      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e76:	4b72      	ldr	r3, [pc, #456]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e7e:	4a70      	ldr	r2, [pc, #448]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e024      	b.n	8002ed6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e94:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0c6      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	4b66      	ldr	r3, [pc, #408]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0be      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002eb4:	f000 f8ce 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4a61      	ldr	r2, [pc, #388]	@ (8003044 <HAL_RCC_ClockConfig+0x268>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d909      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eca:	4a5d      	ldr	r2, [pc, #372]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4957      	ldr	r1, [pc, #348]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fdb0 	bl	8001a4c <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe fdac 	bl	8001a4c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e095      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b4e      	ldr	r3, [pc, #312]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f30:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a42      	ldr	r2, [pc, #264]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f48:	4b3d      	ldr	r3, [pc, #244]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f50:	4a3b      	ldr	r2, [pc, #236]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4936      	ldr	r1, [pc, #216]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b80      	cmp	r3, #128	@ 0x80
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f72:	4b33      	ldr	r3, [pc, #204]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4a32      	ldr	r2, [pc, #200]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d21d      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 020f 	bic.w	r2, r3, #15
 8002f94:	4929      	ldr	r1, [pc, #164]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fd56 	bl	8001a4c <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7fe fd52 	bl	8001a4c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e03b      	b.n	8003032 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1ed      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4917      	ldr	r1, [pc, #92]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff2:	4b13      	ldr	r3, [pc, #76]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490f      	ldr	r1, [pc, #60]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003006:	f000 f825 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490c      	ldr	r1, [pc, #48]	@ (8003048 <HAL_RCC_ClockConfig+0x26c>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a0a      	ldr	r2, [pc, #40]	@ (800304c <HAL_RCC_ClockConfig+0x270>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003026:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <HAL_RCC_ClockConfig+0x274>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fa22 	bl	8001474 <HAL_InitTick>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40022000 	.word	0x40022000
 8003040:	40021000 	.word	0x40021000
 8003044:	04c4b400 	.word	0x04c4b400
 8003048:	0801672c 	.word	0x0801672c
 800304c:	20000008 	.word	0x20000008
 8003050:	2000000c 	.word	0x2000000c

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800305a:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b04      	cmp	r3, #4
 8003064:	d102      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003066:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e047      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800306c:	4b27      	ldr	r3, [pc, #156]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d102      	bne.n	800307e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003078:	4b26      	ldr	r3, [pc, #152]	@ (8003114 <HAL_RCC_GetSysClockFreq+0xc0>)
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e03e      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800307e:	4b23      	ldr	r3, [pc, #140]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d136      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3301      	adds	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d10c      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003114 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	4a16      	ldr	r2, [pc, #88]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b2:	68d2      	ldr	r2, [r2, #12]
 80030b4:	0a12      	lsrs	r2, r2, #8
 80030b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	617b      	str	r3, [r7, #20]
      break;
 80030c0:	e00c      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030c2:	4a13      	ldr	r2, [pc, #76]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	4a10      	ldr	r2, [pc, #64]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	0a12      	lsrs	r2, r2, #8
 80030d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
      break;
 80030da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0e5b      	lsrs	r3, r3, #25
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	3301      	adds	r3, #1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e001      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030fc:	693b      	ldr	r3, [r7, #16]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	00f42400 	.word	0x00f42400
 8003114:	016e3600 	.word	0x016e3600

08003118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <HAL_RCC_GetHCLKFreq+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000008 	.word	0x20000008

08003130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003134:	f7ff fff0 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4904      	ldr	r1, [pc, #16]	@ (8003158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	0801673c 	.word	0x0801673c

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003160:	f7ff ffda 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0adb      	lsrs	r3, r3, #11
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	0801673c 	.word	0x0801673c

08003188 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	220f      	movs	r2, #15
 8003196:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003198:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <HAL_RCC_GetClockConfig+0x5c>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0203 	and.w	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80031a4:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <HAL_RCC_GetClockConfig+0x5c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <HAL_RCC_GetClockConfig+0x5c>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_RCC_GetClockConfig+0x5c>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80031ca:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <HAL_RCC_GetClockConfig+0x60>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40022000 	.word	0x40022000

080031ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031f2:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d10c      	bne.n	800322a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003210:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800321a:	68d2      	ldr	r2, [r2, #12]
 800321c:	0a12      	lsrs	r2, r2, #8
 800321e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	617b      	str	r3, [r7, #20]
    break;
 8003228:	e00c      	b.n	8003244 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800322a:	4a12      	ldr	r2, [pc, #72]	@ (8003274 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4a0e      	ldr	r2, [pc, #56]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	0a12      	lsrs	r2, r2, #8
 8003238:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
    break;
 8003242:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0e5b      	lsrs	r3, r3, #25
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800325e:	687b      	ldr	r3, [r7, #4]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	016e3600 	.word	0x016e3600
 8003274:	00f42400 	.word	0x00f42400

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003280:	2300      	movs	r3, #0
 8003282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003284:	2300      	movs	r3, #0
 8003286:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8098 	beq.w	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	4a3f      	ldr	r2, [pc, #252]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b2:	4b3d      	ldr	r3, [pc, #244]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c2:	4b3a      	ldr	r3, [pc, #232]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a39      	ldr	r2, [pc, #228]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ce:	f7fe fbbd 	bl	8001a4c <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d4:	e009      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fe fbb9 	bl	8001a4c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d902      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	74fb      	strb	r3, [r7, #19]
        break;
 80032e8:	e005      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ea:	4b30      	ldr	r3, [pc, #192]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ef      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d159      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032fc:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01e      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	d019      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003318:	4b23      	ldr	r3, [pc, #140]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003324:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	4a1f      	ldr	r2, [pc, #124]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003334:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003344:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe fb79 	bl	8001a4c <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335c:	e00b      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fe fb75 	bl	8001a4c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d902      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	74fb      	strb	r3, [r7, #19]
            break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ec      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	4903      	ldr	r1, [pc, #12]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	74bb      	strb	r3, [r7, #18]
 80033a6:	e005      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b4:	7c7b      	ldrb	r3, [r7, #17]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	4aa6      	ldr	r2, [pc, #664]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f023 0203 	bic.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	499d      	ldr	r1, [pc, #628]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f4:	4b98      	ldr	r3, [pc, #608]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 020c 	bic.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4995      	ldr	r1, [pc, #596]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003416:	4b90      	ldr	r3, [pc, #576]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	498c      	ldr	r1, [pc, #560]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003438:	4b87      	ldr	r3, [pc, #540]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4984      	ldr	r1, [pc, #528]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800345a:	4b7f      	ldr	r3, [pc, #508]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	497b      	ldr	r1, [pc, #492]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800347c:	4b76      	ldr	r3, [pc, #472]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4973      	ldr	r1, [pc, #460]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	4b6e      	ldr	r3, [pc, #440]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	496a      	ldr	r1, [pc, #424]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c0:	4b65      	ldr	r3, [pc, #404]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4962      	ldr	r1, [pc, #392]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	4959      	ldr	r1, [pc, #356]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003504:	4b54      	ldr	r3, [pc, #336]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	4951      	ldr	r1, [pc, #324]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003526:	4b4c      	ldr	r3, [pc, #304]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4948      	ldr	r1, [pc, #288]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003548:	4b43      	ldr	r3, [pc, #268]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	4940      	ldr	r1, [pc, #256]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003566:	d105      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003568:	4b3b      	ldr	r3, [pc, #236]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a3a      	ldr	r2, [pc, #232]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003572:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003580:	4b35      	ldr	r3, [pc, #212]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	4932      	ldr	r1, [pc, #200]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800359e:	d105      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035b8:	4b27      	ldr	r3, [pc, #156]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	4924      	ldr	r1, [pc, #144]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	4916      	ldr	r1, [pc, #88]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360e:	d105      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a10      	ldr	r2, [pc, #64]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800361a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d019      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	4908      	ldr	r1, [pc, #32]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003646:	d109      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003648:	4b03      	ldr	r3, [pc, #12]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a02      	ldr	r2, [pc, #8]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003652:	60d3      	str	r3, [r2, #12]
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003668:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	4926      	ldr	r1, [pc, #152]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003686:	d105      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003688:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a20      	ldr	r2, [pc, #128]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80036a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ae:	4918      	ldr	r1, [pc, #96]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036c0:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f6:	d105      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003704:	7cbb      	ldrb	r3, [r7, #18]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e049      	b.n	80037ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f841 	bl	80037c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f000 fa30 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d001      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e054      	b.n	800389a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a26      	ldr	r2, [pc, #152]	@ (80038a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381a:	d01d      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a22      	ldr	r2, [pc, #136]	@ (80038ac <HAL_TIM_Base_Start_IT+0xd4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1f      	ldr	r2, [pc, #124]	@ (80038b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1e      	ldr	r2, [pc, #120]	@ (80038b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <HAL_TIM_Base_Start_IT+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x80>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1b      	ldr	r2, [pc, #108]	@ (80038c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d115      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <HAL_TIM_Base_Start_IT+0xec>)
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b06      	cmp	r3, #6
 8003868:	d015      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0xbe>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d011      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	e008      	b.n	8003896 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e000      	b.n	8003898 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40013400 	.word	0x40013400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40015000 	.word	0x40015000
 80038c4:	00010007 	.word	0x00010007

080038c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0202 	mvn.w	r2, #2
 80038fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f931 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f923 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f934 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d020      	beq.n	8003978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01b      	beq.n	8003978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0204 	mvn.w	r2, #4
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f90b 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8fd 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f90e 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d020      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0208 	mvn.w	r2, #8
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8e5 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8d7 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8e8 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0210 	mvn.w	r2, #16
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2208      	movs	r2, #8
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8bf 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8b1 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f8c2 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0201 	mvn.w	r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fb7a 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00c      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f969 	bl	8003d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00c      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f961 	bl	8003d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00c      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f87c 	bl	8003ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f06f 0220 	mvn.w	r2, #32
 8003ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f929 	bl	8003d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f935 	bl	8003d5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f92d 	bl	8003d70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f925 	bl	8003d84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f91d 	bl	8003d98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4c      	ldr	r2, [pc, #304]	@ (8003cfc <TIM_Base_SetConfig+0x144>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d017      	beq.n	8003c00 <TIM_Base_SetConfig+0x48>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd6:	d013      	beq.n	8003c00 <TIM_Base_SetConfig+0x48>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a49      	ldr	r2, [pc, #292]	@ (8003d00 <TIM_Base_SetConfig+0x148>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_Base_SetConfig+0x48>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a48      	ldr	r2, [pc, #288]	@ (8003d04 <TIM_Base_SetConfig+0x14c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_Base_SetConfig+0x48>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a47      	ldr	r2, [pc, #284]	@ (8003d08 <TIM_Base_SetConfig+0x150>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_Base_SetConfig+0x48>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a46      	ldr	r2, [pc, #280]	@ (8003d0c <TIM_Base_SetConfig+0x154>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0x48>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a45      	ldr	r2, [pc, #276]	@ (8003d10 <TIM_Base_SetConfig+0x158>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a39      	ldr	r2, [pc, #228]	@ (8003cfc <TIM_Base_SetConfig+0x144>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d023      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c20:	d01f      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a36      	ldr	r2, [pc, #216]	@ (8003d00 <TIM_Base_SetConfig+0x148>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01b      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a35      	ldr	r2, [pc, #212]	@ (8003d04 <TIM_Base_SetConfig+0x14c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d017      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <TIM_Base_SetConfig+0x150>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a33      	ldr	r2, [pc, #204]	@ (8003d0c <TIM_Base_SetConfig+0x154>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00f      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a33      	ldr	r2, [pc, #204]	@ (8003d14 <TIM_Base_SetConfig+0x15c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <TIM_Base_SetConfig+0x160>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <TIM_Base_SetConfig+0x164>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0xaa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d10 <TIM_Base_SetConfig+0x158>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <TIM_Base_SetConfig+0x144>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <TIM_Base_SetConfig+0x110>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <TIM_Base_SetConfig+0x154>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x110>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d14 <TIM_Base_SetConfig+0x15c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x110>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	@ (8003d18 <TIM_Base_SetConfig+0x160>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x110>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a18      	ldr	r2, [pc, #96]	@ (8003d1c <TIM_Base_SetConfig+0x164>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x110>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a13      	ldr	r2, [pc, #76]	@ (8003d10 <TIM_Base_SetConfig+0x158>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d103      	bne.n	8003cd0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	611a      	str	r2, [r3, #16]
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40015000 	.word	0x40015000
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800

08003d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e042      	b.n	8003e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd fd29 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2224      	movs	r2, #36	@ 0x24
 8003dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f001 f806 	bl	8004e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fd07 	bl	8004810 <UART_SetConfig>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e01b      	b.n	8003e44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 f885 	bl	8004f4c <UART_CheckIdleState>
 8003e42:	4603      	mov	r3, r0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	@ 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d167      	bne.n	8003f34 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_UART_Transmit_DMA+0x24>
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e060      	b.n	8003f36 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2221      	movs	r2, #33	@ 0x21
 8003e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d028      	beq.n	8003ef4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea6:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_UART_Transmit_DMA+0xf4>)
 8003ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eae:	4a25      	ldr	r2, [pc, #148]	@ (8003f44 <HAL_UART_Transmit_DMA+0xf8>)
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eb6:	4a24      	ldr	r2, [pc, #144]	@ (8003f48 <HAL_UART_Transmit_DMA+0xfc>)
 8003eb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3328      	adds	r3, #40	@ 0x28
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	f7fd ff4d 	bl	8001d74 <HAL_DMA_Start_IT>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e020      	b.n	8003f36 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2240      	movs	r2, #64	@ 0x40
 8003efa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1c:	623a      	str	r2, [r7, #32]
 8003f1e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	69f9      	ldr	r1, [r7, #28]
 8003f22:	6a3a      	ldr	r2, [r7, #32]
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e5      	bne.n	8003efc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3728      	adds	r7, #40	@ 0x28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	08005417 	.word	0x08005417
 8003f44:	080054b1 	.word	0x080054b1
 8003f48:	08005637 	.word	0x08005637

08003f4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	@ 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d137      	bne.n	8003fd4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Receive_DMA+0x24>
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e030      	b.n	8003fd6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_UART_Receive_DMA+0x94>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d01f      	beq.n	8003fc4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e6      	bne.n	8003f92 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f001 f8d6 	bl	800517c <UART_Start_Receive_DMA>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	e000      	b.n	8003fd6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3728      	adds	r7, #40	@ 0x28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40008000 	.word	0x40008000

08003fe4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b090      	sub	sp, #64	@ 0x40
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ffa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004006:	2b80      	cmp	r3, #128	@ 0x80
 8004008:	d139      	bne.n	800407e <HAL_UART_DMAStop+0x9a>
 800400a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400c:	2b21      	cmp	r3, #33	@ 0x21
 800400e:	d136      	bne.n	800407e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd ff0a 	bl	8001e6a <HAL_DMA_Abort>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe f871 	bl	8002148 <HAL_DMA_GetError>
 8004066:	4603      	mov	r3, r0
 8004068:	2b20      	cmp	r3, #32
 800406a:	d105      	bne.n	8004078 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2210      	movs	r2, #16
 8004070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e047      	b.n	8004108 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f001 f925 	bl	80052c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d13c      	bne.n	8004106 <HAL_UART_DMAStop+0x122>
 800408c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408e:	2b22      	cmp	r3, #34	@ 0x22
 8004090:	d139      	bne.n	8004106 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	61ba      	str	r2, [r7, #24]
 80040b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6979      	ldr	r1, [r7, #20]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	613b      	str	r3, [r7, #16]
   return(result);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d017      	beq.n	8004100 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd fec7 	bl	8001e6a <HAL_DMA_Abort>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00e      	beq.n	8004100 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe f82d 	bl	8002148 <HAL_DMA_GetError>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d105      	bne.n	8004100 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2210      	movs	r2, #16
 80040f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e003      	b.n	8004108 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f001 f922 	bl	800534a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3740      	adds	r7, #64	@ 0x40
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b0ba      	sub	sp, #232	@ 0xe8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800413a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800413e:	4013      	ands	r3, r2
 8004140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11b      	bne.n	8004184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8300 	beq.w	800477a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
      }
      return;
 8004182:	e2fa      	b.n	800477a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8123 	beq.w	80043d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800418e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004192:	4b8d      	ldr	r3, [pc, #564]	@ (80043c8 <HAL_UART_IRQHandler+0x2b8>)
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800419a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800419e:	4b8b      	ldr	r3, [pc, #556]	@ (80043cc <HAL_UART_IRQHandler+0x2bc>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8116 	beq.w	80043d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_UART_IRQHandler+0xc8>
 80041b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d011      	beq.n	8004208 <HAL_UART_IRQHandler+0xf8>
 80041e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2202      	movs	r2, #2
 80041f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fe:	f043 0204 	orr.w	r2, r3, #4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d011      	beq.n	8004238 <HAL_UART_IRQHandler+0x128>
 8004214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00b      	beq.n	8004238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2204      	movs	r2, #4
 8004226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004250:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004254:	4b5c      	ldr	r3, [pc, #368]	@ (80043c8 <HAL_UART_IRQHandler+0x2b8>)
 8004256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	f043 0208 	orr.w	r2, r3, #8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <HAL_UART_IRQHandler+0x196>
 8004280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00c      	beq.n	80042a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8266 	beq.w	800477e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d013      	beq.n	80042e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b40      	cmp	r3, #64	@ 0x40
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004302:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d054      	beq.n	80043b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 f81d 	bl	800534a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d146      	bne.n	80043ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800433c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800434a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800434e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1d9      	bne.n	800431e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437a:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <HAL_UART_IRQHandler+0x2c0>)
 800437c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004384:	4618      	mov	r0, r3
 8004386:	f7fd fdc9 	bl	8001f1c <HAL_DMA_Abort_IT>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d019      	beq.n	80043c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800439e:	4610      	mov	r0, r2
 80043a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a2:	e00f      	b.n	80043c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa1d 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043aa:	e00b      	b.n	80043c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa19 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b2:	e007      	b.n	80043c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa15 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80043c2:	e1dc      	b.n	800477e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	bf00      	nop
    return;
 80043c6:	e1da      	b.n	800477e <HAL_UART_IRQHandler+0x66e>
 80043c8:	10000001 	.word	0x10000001
 80043cc:	04000120 	.word	0x04000120
 80043d0:	080056b7 	.word	0x080056b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 8170 	bne.w	80046be <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8169 	beq.w	80046be <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8162 	beq.w	80046be <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	f040 80d8 	bne.w	80045c2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80af 	beq.w	8004588 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004434:	429a      	cmp	r2, r3
 8004436:	f080 80a7 	bcs.w	8004588 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004440:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8087 	bne.w	8004566 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800446c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004486:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800448e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800449a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1da      	bne.n	8004458 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e1      	bne.n	80044a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004504:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004508:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e3      	bne.n	80044de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004546:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004548:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800454c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e4      	bne.n	8004524 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fc82 	bl	8001e6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004578:	b29b      	uxth	r3, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f939 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004586:	e0fc      	b.n	8004782 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004592:	429a      	cmp	r2, r3
 8004594:	f040 80f5 	bne.w	8004782 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	f040 80eb 	bne.w	8004782 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f91c 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
      return;
 80045c0:	e0df      	b.n	8004782 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80d1 	beq.w	8004786 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80045e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80cc 	beq.w	8004786 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004610:	647b      	str	r3, [r7, #68]	@ 0x44
 8004612:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800461e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e4      	bne.n	80045ee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	623b      	str	r3, [r7, #32]
   return(result);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3308      	adds	r3, #8
 8004648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800464c:	633a      	str	r2, [r7, #48]	@ 0x30
 800464e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e1      	bne.n	8004624 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	60fb      	str	r3, [r7, #12]
   return(result);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	617b      	str	r3, [r7, #20]
   return(result);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e4      	bne.n	8004674 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f89e 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046bc:	e063      	b.n	8004786 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5d8>
 80046ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 f825 	bl	8005730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046e6:	e051      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d014      	beq.n	800471e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004710:	2b00      	cmp	r3, #0
 8004712:	d03a      	beq.n	800478a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
    }
    return;
 800471c:	e035      	b.n	800478a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_UART_IRQHandler+0x62e>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 ffcf 	bl	80056da <UART_EndTransmit_IT>
    return;
 800473c:	e026      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_UART_IRQHandler+0x64e>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fffe 	bl	8005758 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800475c:	e016      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_UART_IRQHandler+0x67c>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476e:	2b00      	cmp	r3, #0
 8004770:	da0c      	bge.n	800478c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 ffe6 	bl	8005744 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004778:	e008      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
      return;
 800477a:	bf00      	nop
 800477c:	e006      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
    return;
 800477e:	bf00      	nop
 8004780:	e004      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
      return;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
      return;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <HAL_UART_IRQHandler+0x67c>
    return;
 800478a:	bf00      	nop
  }
}
 800478c:	37e8      	adds	r7, #232	@ 0xe8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b08c      	sub	sp, #48	@ 0x30
 8004816:	af00      	add	r7, sp, #0
 8004818:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4313      	orrs	r3, r2
 8004836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4baa      	ldr	r3, [pc, #680]	@ (8004ae8 <UART_SetConfig+0x2d8>)
 8004840:	4013      	ands	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004848:	430b      	orrs	r3, r1
 800484a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a9f      	ldr	r2, [pc, #636]	@ (8004aec <UART_SetConfig+0x2dc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004878:	4313      	orrs	r3, r2
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004886:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004890:	430b      	orrs	r3, r1
 8004892:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	f023 010f 	bic.w	r1, r3, #15
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a90      	ldr	r2, [pc, #576]	@ (8004af0 <UART_SetConfig+0x2e0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d125      	bne.n	8004900 <UART_SetConfig+0xf0>
 80048b4:	4b8f      	ldr	r3, [pc, #572]	@ (8004af4 <UART_SetConfig+0x2e4>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d81a      	bhi.n	80048f8 <UART_SetConfig+0xe8>
 80048c2:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <UART_SetConfig+0xb8>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	080048e1 	.word	0x080048e1
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048de:	e116      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80048e0:	2302      	movs	r3, #2
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e6:	e112      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80048e8:	2304      	movs	r3, #4
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ee:	e10e      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80048f0:	2308      	movs	r3, #8
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	e10a      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80048f8:	2310      	movs	r3, #16
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fe:	e106      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7c      	ldr	r2, [pc, #496]	@ (8004af8 <UART_SetConfig+0x2e8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d138      	bne.n	800497c <UART_SetConfig+0x16c>
 800490a:	4b7a      	ldr	r3, [pc, #488]	@ (8004af4 <UART_SetConfig+0x2e4>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d82d      	bhi.n	8004974 <UART_SetConfig+0x164>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <UART_SetConfig+0x110>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004955 	.word	0x08004955
 8004924:	08004975 	.word	0x08004975
 8004928:	08004975 	.word	0x08004975
 800492c:	08004975 	.word	0x08004975
 8004930:	08004965 	.word	0x08004965
 8004934:	08004975 	.word	0x08004975
 8004938:	08004975 	.word	0x08004975
 800493c:	08004975 	.word	0x08004975
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004975 	.word	0x08004975
 8004948:	08004975 	.word	0x08004975
 800494c:	08004975 	.word	0x08004975
 8004950:	0800496d 	.word	0x0800496d
 8004954:	2300      	movs	r3, #0
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495a:	e0d8      	b.n	8004b0e <UART_SetConfig+0x2fe>
 800495c:	2302      	movs	r3, #2
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004962:	e0d4      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004964:	2304      	movs	r3, #4
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e0d0      	b.n	8004b0e <UART_SetConfig+0x2fe>
 800496c:	2308      	movs	r3, #8
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e0cc      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004974:	2310      	movs	r3, #16
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497a:	e0c8      	b.n	8004b0e <UART_SetConfig+0x2fe>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5e      	ldr	r2, [pc, #376]	@ (8004afc <UART_SetConfig+0x2ec>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d125      	bne.n	80049d2 <UART_SetConfig+0x1c2>
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <UART_SetConfig+0x2e4>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004990:	2b30      	cmp	r3, #48	@ 0x30
 8004992:	d016      	beq.n	80049c2 <UART_SetConfig+0x1b2>
 8004994:	2b30      	cmp	r3, #48	@ 0x30
 8004996:	d818      	bhi.n	80049ca <UART_SetConfig+0x1ba>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d00a      	beq.n	80049b2 <UART_SetConfig+0x1a2>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d814      	bhi.n	80049ca <UART_SetConfig+0x1ba>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <UART_SetConfig+0x19a>
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d008      	beq.n	80049ba <UART_SetConfig+0x1aa>
 80049a8:	e00f      	b.n	80049ca <UART_SetConfig+0x1ba>
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b0:	e0ad      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80049b2:	2302      	movs	r3, #2
 80049b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b8:	e0a9      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80049ba:	2304      	movs	r3, #4
 80049bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c0:	e0a5      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80049c2:	2308      	movs	r3, #8
 80049c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c8:	e0a1      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80049ca:	2310      	movs	r3, #16
 80049cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d0:	e09d      	b.n	8004b0e <UART_SetConfig+0x2fe>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004b00 <UART_SetConfig+0x2f0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d125      	bne.n	8004a28 <UART_SetConfig+0x218>
 80049dc:	4b45      	ldr	r3, [pc, #276]	@ (8004af4 <UART_SetConfig+0x2e4>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049e8:	d016      	beq.n	8004a18 <UART_SetConfig+0x208>
 80049ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80049ec:	d818      	bhi.n	8004a20 <UART_SetConfig+0x210>
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d00a      	beq.n	8004a08 <UART_SetConfig+0x1f8>
 80049f2:	2b80      	cmp	r3, #128	@ 0x80
 80049f4:	d814      	bhi.n	8004a20 <UART_SetConfig+0x210>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <UART_SetConfig+0x1f0>
 80049fa:	2b40      	cmp	r3, #64	@ 0x40
 80049fc:	d008      	beq.n	8004a10 <UART_SetConfig+0x200>
 80049fe:	e00f      	b.n	8004a20 <UART_SetConfig+0x210>
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a06:	e082      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0e:	e07e      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a16:	e07a      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a1e:	e076      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a26:	e072      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <UART_SetConfig+0x2f4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d12a      	bne.n	8004a88 <UART_SetConfig+0x278>
 8004a32:	4b30      	ldr	r3, [pc, #192]	@ (8004af4 <UART_SetConfig+0x2e4>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a40:	d01a      	beq.n	8004a78 <UART_SetConfig+0x268>
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a46:	d81b      	bhi.n	8004a80 <UART_SetConfig+0x270>
 8004a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a4c:	d00c      	beq.n	8004a68 <UART_SetConfig+0x258>
 8004a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a52:	d815      	bhi.n	8004a80 <UART_SetConfig+0x270>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <UART_SetConfig+0x250>
 8004a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5c:	d008      	beq.n	8004a70 <UART_SetConfig+0x260>
 8004a5e:	e00f      	b.n	8004a80 <UART_SetConfig+0x270>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a66:	e052      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6e:	e04e      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a76:	e04a      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7e:	e046      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	e042      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <UART_SetConfig+0x2dc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d13a      	bne.n	8004b08 <UART_SetConfig+0x2f8>
 8004a92:	4b18      	ldr	r3, [pc, #96]	@ (8004af4 <UART_SetConfig+0x2e4>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aa0:	d01a      	beq.n	8004ad8 <UART_SetConfig+0x2c8>
 8004aa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aa6:	d81b      	bhi.n	8004ae0 <UART_SetConfig+0x2d0>
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aac:	d00c      	beq.n	8004ac8 <UART_SetConfig+0x2b8>
 8004aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab2:	d815      	bhi.n	8004ae0 <UART_SetConfig+0x2d0>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <UART_SetConfig+0x2b0>
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004abc:	d008      	beq.n	8004ad0 <UART_SetConfig+0x2c0>
 8004abe:	e00f      	b.n	8004ae0 <UART_SetConfig+0x2d0>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac6:	e022      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ace:	e01e      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad6:	e01a      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ade:	e016      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae6:	e012      	b.n	8004b0e <UART_SetConfig+0x2fe>
 8004ae8:	cfff69f3 	.word	0xcfff69f3
 8004aec:	40008000 	.word	0x40008000
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40004400 	.word	0x40004400
 8004afc:	40004800 	.word	0x40004800
 8004b00:	40004c00 	.word	0x40004c00
 8004b04:	40005000 	.word	0x40005000
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4aae      	ldr	r2, [pc, #696]	@ (8004dcc <UART_SetConfig+0x5bc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	f040 8097 	bne.w	8004c48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d823      	bhi.n	8004b6a <UART_SetConfig+0x35a>
 8004b22:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0x318>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b6b 	.word	0x08004b6b
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b6b 	.word	0x08004b6b
 8004b38:	08004b5b 	.word	0x08004b5b
 8004b3c:	08004b6b 	.word	0x08004b6b
 8004b40:	08004b6b 	.word	0x08004b6b
 8004b44:	08004b6b 	.word	0x08004b6b
 8004b48:	08004b63 	.word	0x08004b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fe faf0 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b52:	e010      	b.n	8004b76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b54:	4b9e      	ldr	r3, [pc, #632]	@ (8004dd0 <UART_SetConfig+0x5c0>)
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b58:	e00d      	b.n	8004b76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5a:	f7fe fa7b 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8004b5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b60:	e009      	b.n	8004b76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b68:	e005      	b.n	8004b76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8130 	beq.w	8004dde <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	4a94      	ldr	r2, [pc, #592]	@ (8004dd4 <UART_SetConfig+0x5c4>)
 8004b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d305      	bcc.n	8004bae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d903      	bls.n	8004bb6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bb4:	e113      	b.n	8004dde <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	60fa      	str	r2, [r7, #12]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	4a84      	ldr	r2, [pc, #528]	@ (8004dd4 <UART_SetConfig+0x5c4>)
 8004bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2200      	movs	r2, #0
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bd8:	f7fb fbda 	bl	8000390 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	020b      	lsls	r3, r1, #8
 8004bee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bf2:	0202      	lsls	r2, r0, #8
 8004bf4:	6979      	ldr	r1, [r7, #20]
 8004bf6:	6849      	ldr	r1, [r1, #4]
 8004bf8:	0849      	lsrs	r1, r1, #1
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	4605      	mov	r5, r0
 8004c00:	eb12 0804 	adds.w	r8, r2, r4
 8004c04:	eb43 0905 	adc.w	r9, r3, r5
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	469a      	mov	sl, r3
 8004c10:	4693      	mov	fp, r2
 8004c12:	4652      	mov	r2, sl
 8004c14:	465b      	mov	r3, fp
 8004c16:	4640      	mov	r0, r8
 8004c18:	4649      	mov	r1, r9
 8004c1a:	f7fb fbb9 	bl	8000390 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4613      	mov	r3, r2
 8004c24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c2c:	d308      	bcc.n	8004c40 <UART_SetConfig+0x430>
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c34:	d204      	bcs.n	8004c40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	e0ce      	b.n	8004dde <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c46:	e0ca      	b.n	8004dde <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d166      	bne.n	8004d20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004c52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d827      	bhi.n	8004caa <UART_SetConfig+0x49a>
 8004c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <UART_SetConfig+0x450>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004cab 	.word	0x08004cab
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe fa54 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c8a:	e014      	b.n	8004cb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fe fa66 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c92:	e010      	b.n	8004cb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd0 <UART_SetConfig+0x5c0>)
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c98:	e00d      	b.n	8004cb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe f9db 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8004c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ca0:	e009      	b.n	8004cb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca8:	e005      	b.n	8004cb6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8090 	beq.w	8004dde <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	4a44      	ldr	r2, [pc, #272]	@ (8004dd4 <UART_SetConfig+0x5c4>)
 8004cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd0:	005a      	lsls	r2, r3, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	441a      	add	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d916      	bls.n	8004d18 <UART_SetConfig+0x508>
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d212      	bcs.n	8004d18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f023 030f 	bic.w	r3, r3, #15
 8004cfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	8bfb      	ldrh	r3, [r7, #30]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	8bfa      	ldrh	r2, [r7, #30]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e062      	b.n	8004dde <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d1e:	e05e      	b.n	8004dde <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d828      	bhi.n	8004d7a <UART_SetConfig+0x56a>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x520>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe f9ec 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d5a:	e014      	b.n	8004d86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fe f9fe 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <UART_SetConfig+0x5c0>)
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fe f973 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8004d6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d84:	bf00      	nop
    }

    if (pclk != 0U)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d028      	beq.n	8004dde <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	4a10      	ldr	r2, [pc, #64]	@ (8004dd4 <UART_SetConfig+0x5c4>)
 8004d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	441a      	add	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d910      	bls.n	8004dd8 <UART_SetConfig+0x5c8>
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d20c      	bcs.n	8004dd8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e009      	b.n	8004dde <UART_SetConfig+0x5ce>
 8004dca:	bf00      	nop
 8004dcc:	40008000 	.word	0x40008000
 8004dd0:	00f42400 	.word	0x00f42400
 8004dd4:	08016744 	.word	0x08016744
      }
      else
      {
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2200      	movs	r2, #0
 8004df8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004dfa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3730      	adds	r7, #48	@ 0x30
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f06:	d10a      	bne.n	8004f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b098      	sub	sp, #96	@ 0x60
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f5c:	f7fc fd76 	bl	8001a4c <HAL_GetTick>
 8004f60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d12f      	bne.n	8004fd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f88e 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d022      	beq.n	8004fd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004faa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e063      	b.n	8005098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d149      	bne.n	8005072 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f857 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d03c      	beq.n	8005072 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	623b      	str	r3, [r7, #32]
   return(result);
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005016:	633b      	str	r3, [r7, #48]	@ 0x30
 8005018:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800501c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	60fb      	str	r3, [r7, #12]
   return(result);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800504a:	61fa      	str	r2, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	617b      	str	r3, [r7, #20]
   return(result);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e012      	b.n	8005098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3758      	adds	r7, #88	@ 0x58
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b0:	e04f      	b.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b8:	d04b      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fc fcc7 	bl	8001a4c <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e04e      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d037      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b80      	cmp	r3, #128	@ 0x80
 80050e6:	d034      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d031      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d110      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2208      	movs	r2, #8
 8005102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f920 	bl	800534a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2208      	movs	r2, #8
 800510e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e029      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800512c:	d111      	bne.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f906 	bl	800534a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e00f      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	429a      	cmp	r2, r3
 800516e:	d0a0      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b096      	sub	sp, #88	@ 0x58
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2222      	movs	r2, #34	@ 0x22
 80051a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02d      	beq.n	800520e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051b8:	4a40      	ldr	r2, [pc, #256]	@ (80052bc <UART_Start_Receive_DMA+0x140>)
 80051ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c2:	4a3f      	ldr	r2, [pc, #252]	@ (80052c0 <UART_Start_Receive_DMA+0x144>)
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051cc:	4a3d      	ldr	r2, [pc, #244]	@ (80052c4 <UART_Start_Receive_DMA+0x148>)
 80051ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d6:	2200      	movs	r2, #0
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3324      	adds	r3, #36	@ 0x24
 80051e6:	4619      	mov	r1, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	461a      	mov	r2, r3
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	f7fc fdc0 	bl	8001d74 <HAL_DMA_Start_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2210      	movs	r2, #16
 80051fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e051      	b.n	80052b2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d018      	beq.n	8005248 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522a:	657b      	str	r3, [r7, #84]	@ 0x54
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005236:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800523a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e6      	bne.n	8005216 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005268:	637a      	str	r2, [r7, #52]	@ 0x34
 800526a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800526e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e5      	bne.n	8005248 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	613b      	str	r3, [r7, #16]
   return(result);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800529c:	623a      	str	r2, [r7, #32]
 800529e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	69f9      	ldr	r1, [r7, #28]
 80052a2:	6a3a      	ldr	r2, [r7, #32]
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3758      	adds	r7, #88	@ 0x58
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	080054cd 	.word	0x080054cd
 80052c0:	080055f9 	.word	0x080055f9
 80052c4:	08005637 	.word	0x08005637

080052c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08f      	sub	sp, #60	@ 0x3c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e6      	bne.n	80052d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	60bb      	str	r3, [r7, #8]
   return(result);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005322:	61ba      	str	r2, [r7, #24]
 8005324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6979      	ldr	r1, [r7, #20]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	613b      	str	r3, [r7, #16]
   return(result);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800533e:	bf00      	nop
 8005340:	373c      	adds	r7, #60	@ 0x3c
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800534a:	b480      	push	{r7}
 800534c:	b095      	sub	sp, #84	@ 0x54
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005370:	643b      	str	r3, [r7, #64]	@ 0x40
 8005372:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e6      	bne.n	8005352 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	61fb      	str	r3, [r7, #28]
   return(result);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e3      	bne.n	8005384 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d118      	bne.n	80053f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f023 0310 	bic.w	r3, r3, #16
 80053d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6979      	ldr	r1, [r7, #20]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	613b      	str	r3, [r7, #16]
   return(result);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800540a:	bf00      	nop
 800540c:	3754      	adds	r7, #84	@ 0x54
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b090      	sub	sp, #64	@ 0x40
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d137      	bne.n	80054a2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005434:	2200      	movs	r2, #0
 8005436:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800543a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	623b      	str	r3, [r7, #32]
   return(result);
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005450:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800545a:	633a      	str	r2, [r7, #48]	@ 0x30
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800546e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60fb      	str	r3, [r7, #12]
   return(result);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005482:	637b      	str	r3, [r7, #52]	@ 0x34
 8005484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	69b9      	ldr	r1, [r7, #24]
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	617b      	str	r3, [r7, #20]
   return(result);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054a0:	e002      	b.n	80054a8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80054a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80054a4:	f7ff f976 	bl	8004794 <HAL_UART_TxCpltCallback>
}
 80054a8:	bf00      	nop
 80054aa:	3740      	adds	r7, #64	@ 0x40
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff f972 	bl	80047a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b09c      	sub	sp, #112	@ 0x70
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d171      	bne.n	80055cc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80054e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800550e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005510:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800551c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e6      	bne.n	80054f0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	667b      	str	r3, [r7, #100]	@ 0x64
 800553a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005542:	647a      	str	r2, [r7, #68]	@ 0x44
 8005544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	623b      	str	r3, [r7, #32]
   return(result);
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800556c:	663b      	str	r3, [r7, #96]	@ 0x60
 800556e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005576:	633a      	str	r2, [r7, #48]	@ 0x30
 8005578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800557c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e5      	bne.n	8005556 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800558a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800558c:	2220      	movs	r2, #32
 800558e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d118      	bne.n	80055cc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0310 	bic.w	r3, r3, #16
 80055ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	69b9      	ldr	r1, [r7, #24]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	617b      	str	r3, [r7, #20]
   return(result);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e6      	bne.n	800559a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ce:	2200      	movs	r2, #0
 80055d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055e0:	4619      	mov	r1, r3
 80055e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80055e4:	f7ff f908 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055e8:	e002      	b.n	80055f0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80055ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80055ec:	f7ff f8e6 	bl	80047bc <HAL_UART_RxCpltCallback>
}
 80055f0:	bf00      	nop
 80055f2:	3770      	adds	r7, #112	@ 0x70
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d109      	bne.n	8005628 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	b29b      	uxth	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff f8e9 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005626:	e002      	b.n	800562e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff f8d1 	bl	80047d0 <HAL_UART_RxHalfCpltCallback>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005652:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d109      	bne.n	8005676 <UART_DMAError+0x40>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b21      	cmp	r3, #33	@ 0x21
 8005666:	d106      	bne.n	8005676 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2200      	movs	r2, #0
 800566c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005670:	6978      	ldr	r0, [r7, #20]
 8005672:	f7ff fe29 	bl	80052c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d109      	bne.n	8005698 <UART_DMAError+0x62>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b22      	cmp	r3, #34	@ 0x22
 8005688:	d106      	bne.n	8005698 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7ff fe59 	bl	800534a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	f043 0210 	orr.w	r2, r3, #16
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a8:	6978      	ldr	r0, [r7, #20]
 80056aa:	f7ff f89b 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff f889 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6979      	ldr	r1, [r7, #20]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	613b      	str	r3, [r7, #16]
   return(result);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff f836 	bl	8004794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005728:	bf00      	nop
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UARTEx_DisableFifoMode+0x16>
 800577e:	2302      	movs	r3, #2
 8005780:	e027      	b.n	80057d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	@ 0x24
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e02d      	b.n	8005852 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2224      	movs	r2, #36	@ 0x24
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f850 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800586e:	2302      	movs	r3, #2
 8005870:	e02d      	b.n	80058ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	@ 0x24
 800587e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f812 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058f8:	e031      	b.n	800595e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058fa:	2308      	movs	r3, #8
 80058fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058fe:	2308      	movs	r3, #8
 8005900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	0e5b      	lsrs	r3, r3, #25
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	0f5b      	lsrs	r3, r3, #29
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	7b3a      	ldrb	r2, [r7, #12]
 8005926:	4911      	ldr	r1, [pc, #68]	@ (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005928:	5c8a      	ldrb	r2, [r1, r2]
 800592a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800592e:	7b3a      	ldrb	r2, [r7, #12]
 8005930:	490f      	ldr	r1, [pc, #60]	@ (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005934:	fb93 f3f2 	sdiv	r3, r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	7b7a      	ldrb	r2, [r7, #13]
 8005944:	4909      	ldr	r1, [pc, #36]	@ (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005946:	5c8a      	ldrb	r2, [r1, r2]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800594c:	7b7a      	ldrb	r2, [r7, #13]
 800594e:	4908      	ldr	r1, [pc, #32]	@ (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005952:	fb93 f3f2 	sdiv	r3, r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	0801675c 	.word	0x0801675c
 8005970:	08016764 	.word	0x08016764

08005974 <__NVIC_SetPriority>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005984:	2b00      	cmp	r3, #0
 8005986:	db0a      	blt.n	800599e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	490c      	ldr	r1, [pc, #48]	@ (80059c0 <__NVIC_SetPriority+0x4c>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	440b      	add	r3, r1
 8005998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800599c:	e00a      	b.n	80059b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4908      	ldr	r1, [pc, #32]	@ (80059c4 <__NVIC_SetPriority+0x50>)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3b04      	subs	r3, #4
 80059ac:	0112      	lsls	r2, r2, #4
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	440b      	add	r3, r1
 80059b2:	761a      	strb	r2, [r3, #24]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	e000e100 	.word	0xe000e100
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059cc:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <SysTick_Handler+0x1c>)
 80059ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059d0:	f001 fd40 	bl	8007454 <xTaskGetSchedulerState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d001      	beq.n	80059de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059da:	f002 fb35 	bl	8008048 <xPortSysTickHandler>
  }
}
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	e000e010 	.word	0xe000e010

080059e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059ec:	2100      	movs	r1, #0
 80059ee:	f06f 0004 	mvn.w	r0, #4
 80059f2:	f7ff ffbf 	bl	8005974 <__NVIC_SetPriority>
#endif
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a02:	f3ef 8305 	mrs	r3, IPSR
 8005a06:	603b      	str	r3, [r7, #0]
  return(result);
 8005a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a0e:	f06f 0305 	mvn.w	r3, #5
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	e00c      	b.n	8005a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a16:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <osKernelInitialize+0x44>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a1e:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <osKernelInitialize+0x44>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	e002      	b.n	8005a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a30:	687b      	ldr	r3, [r7, #4]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20004740 	.word	0x20004740

08005a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a4a:	f3ef 8305 	mrs	r3, IPSR
 8005a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a56:	f06f 0305 	mvn.w	r3, #5
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	e010      	b.n	8005a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <osKernelStart+0x48>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d109      	bne.n	8005a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a66:	f7ff ffbf 	bl	80059e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <osKernelStart+0x48>)
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a70:	f001 f87a 	bl	8006b68 <vTaskStartScheduler>
      stat = osOK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	e002      	b.n	8005a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a80:	687b      	ldr	r3, [r7, #4]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20004740 	.word	0x20004740

08005a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	@ 0x38
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa0:	f3ef 8305 	mrs	r3, IPSR
 8005aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8005aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d17e      	bne.n	8005baa <osThreadNew+0x11a>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d07b      	beq.n	8005baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ab2:	2380      	movs	r3, #128	@ 0x80
 8005ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ab6:	2318      	movs	r3, #24
 8005ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d045      	beq.n	8005b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <osThreadNew+0x48>
        name = attr->name;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <osThreadNew+0x6e>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b38      	cmp	r3, #56	@ 0x38
 8005af0:	d805      	bhi.n	8005afe <osThreadNew+0x6e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <osThreadNew+0x72>
        return (NULL);
 8005afe:	2300      	movs	r3, #0
 8005b00:	e054      	b.n	8005bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00e      	beq.n	8005b38 <osThreadNew+0xa8>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b20:	d90a      	bls.n	8005b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <osThreadNew+0xa8>
        mem = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e010      	b.n	8005b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10c      	bne.n	8005b5a <osThreadNew+0xca>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d108      	bne.n	8005b5a <osThreadNew+0xca>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <osThreadNew+0xca>
          mem = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e001      	b.n	8005b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d110      	bne.n	8005b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b68:	9202      	str	r2, [sp, #8]
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fe1a 	bl	80067b0 <xTaskCreateStatic>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	e013      	b.n	8005baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f107 0310 	add.w	r3, r7, #16
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fe68 	bl	8006870 <xTaskCreate>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <osThreadNew+0x11a>
            hTask = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005baa:	693b      	ldr	r3, [r7, #16]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	@ 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bbc:	f3ef 8305 	mrs	r3, IPSR
 8005bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8005bc8:	f06f 0305 	mvn.w	r3, #5
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e007      	b.n	8005be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 ff8e 	bl	8006afc <vTaskDelay>
    }
  }

  return (stat);
 8005be0:	68fb      	ldr	r3, [r7, #12]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a07      	ldr	r2, [pc, #28]	@ (8005c18 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4a06      	ldr	r2, [pc, #24]	@ (8005c1c <vApplicationGetIdleTaskMemory+0x30>)
 8005c02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2280      	movs	r2, #128	@ 0x80
 8005c08:	601a      	str	r2, [r3, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20004744 	.word	0x20004744
 8005c1c:	200047a0 	.word	0x200047a0

08005c20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a07      	ldr	r2, [pc, #28]	@ (8005c4c <vApplicationGetTimerTaskMemory+0x2c>)
 8005c30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4a06      	ldr	r2, [pc, #24]	@ (8005c50 <vApplicationGetTimerTaskMemory+0x30>)
 8005c36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c3e:	601a      	str	r2, [r3, #0]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	200049a0 	.word	0x200049a0
 8005c50:	200049fc 	.word	0x200049fc

08005c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f103 0208 	add.w	r2, r3, #8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f103 0208 	add.w	r2, r3, #8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f103 0208 	add.w	r2, r3, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d0c:	d103      	bne.n	8005d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e00c      	b.n	8005d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e002      	b.n	8005d24 <vListInsert+0x2e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d2f6      	bcs.n	8005d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6892      	ldr	r2, [r2, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6852      	ldr	r2, [r2, #4]
 8005d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d103      	bne.n	8005d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	1e5a      	subs	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <xQueueGenericReset+0x2c>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60bb      	str	r3, [r7, #8]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005de8:	f002 f89e 	bl	8007f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	22ff      	movs	r2, #255	@ 0xff
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	22ff      	movs	r2, #255	@ 0xff
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d114      	bne.n	8005e68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01a      	beq.n	8005e7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3310      	adds	r3, #16
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 f91a 	bl	8007084 <xTaskRemoveFromEventList>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d012      	beq.n	8005e7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e56:	4b0d      	ldr	r3, [pc, #52]	@ (8005e8c <xQueueGenericReset+0xd0>)
 8005e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	e009      	b.n	8005e7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3310      	adds	r3, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fef1 	bl	8005c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3324      	adds	r3, #36	@ 0x24
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff feec 	bl	8005c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e7c:	f002 f886 	bl	8007f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e80:	2301      	movs	r3, #1
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	@ 0x38
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10b      	bne.n	8005eda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <xQueueGenericCreateStatic+0x56>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <xQueueGenericCreateStatic+0x5a>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueGenericCreateStatic+0x5c>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	623b      	str	r3, [r7, #32]
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	e7fd      	b.n	8005f04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <xQueueGenericCreateStatic+0x84>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <xQueueGenericCreateStatic+0x88>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <xQueueGenericCreateStatic+0x8a>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	61fb      	str	r3, [r7, #28]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f36:	2350      	movs	r3, #80	@ 0x50
 8005f38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b50      	cmp	r3, #80	@ 0x50
 8005f3e:	d00b      	beq.n	8005f58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61bb      	str	r3, [r7, #24]
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	e7fd      	b.n	8005f54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f805 	bl	8005f8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3730      	adds	r7, #48	@ 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e002      	b.n	8005fac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fb8:	2101      	movs	r1, #1
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f7ff fefe 	bl	8005dbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08e      	sub	sp, #56	@ 0x38
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <xQueueGenericSend+0x34>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <xQueueGenericSend+0x42>
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueGenericSend+0x46>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueGenericSend+0x48>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <xQueueGenericSend+0x64>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <xQueueGenericSend+0x72>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <xQueueGenericSend+0x76>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <xQueueGenericSend+0x78>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <xQueueGenericSend+0x94>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	623b      	str	r3, [r7, #32]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006064:	f001 f9f6 	bl	8007454 <xTaskGetSchedulerState>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <xQueueGenericSend+0xa4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <xQueueGenericSend+0xa8>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <xQueueGenericSend+0xaa>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <xQueueGenericSend+0xc6>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	61fb      	str	r3, [r7, #28]
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	e7fd      	b.n	8006092 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006096:	f001 ff47 	bl	8007f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <xQueueGenericSend+0xdc>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d129      	bne.n	8006100 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b2:	f000 fa0f 	bl	80064d4 <prvCopyDataToQueue>
 80060b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d010      	beq.n	80060e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c2:	3324      	adds	r3, #36	@ 0x24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 ffdd 	bl	8007084 <xTaskRemoveFromEventList>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060d0:	4b3f      	ldr	r3, [pc, #252]	@ (80061d0 <xQueueGenericSend+0x200>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	e00a      	b.n	80060f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060e8:	4b39      	ldr	r3, [pc, #228]	@ (80061d0 <xQueueGenericSend+0x200>)
 80060ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060f8:	f001 ff48 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e063      	b.n	80061c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006106:	f001 ff41 	bl	8007f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800610a:	2300      	movs	r3, #0
 800610c:	e05c      	b.n	80061c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800610e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f83f 	bl	800719c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006122:	f001 ff33 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006126:	f000 fd87 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800612a:	f001 fefd 	bl	8007f28 <vPortEnterCritical>
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006134:	b25b      	sxtb	r3, r3
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800613a:	d103      	bne.n	8006144 <xQueueGenericSend+0x174>
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800614a:	b25b      	sxtb	r3, r3
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006150:	d103      	bne.n	800615a <xQueueGenericSend+0x18a>
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800615a:	f001 ff17 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800615e:	1d3a      	adds	r2, r7, #4
 8006160:	f107 0314 	add.w	r3, r7, #20
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f82e 	bl	80071c8 <xTaskCheckForTimeOut>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d124      	bne.n	80061bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006174:	f000 faa6 	bl	80066c4 <prvIsQueueFull>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	3310      	adds	r3, #16
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4611      	mov	r1, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f000 ff2a 	bl	8006fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800618c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800618e:	f000 fa31 	bl	80065f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006192:	f000 fd5f 	bl	8006c54 <xTaskResumeAll>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f af7c 	bne.w	8006096 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800619e:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <xQueueGenericSend+0x200>)
 80061a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	e772      	b.n	8006096 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b2:	f000 fa1f 	bl	80065f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061b6:	f000 fd4d 	bl	8006c54 <xTaskResumeAll>
 80061ba:	e76c      	b.n	8006096 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061be:	f000 fa19 	bl	80065f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061c2:	f000 fd47 	bl	8006c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3738      	adds	r7, #56	@ 0x38
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b090      	sub	sp, #64	@ 0x40
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	e7fd      	b.n	8006200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <xQueueGenericSendFromISR+0x3e>
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <xQueueGenericSendFromISR+0x42>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <xQueueGenericSendFromISR+0x44>
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d103      	bne.n	8006242 <xQueueGenericSendFromISR+0x6e>
 800623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <xQueueGenericSendFromISR+0x72>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <xQueueGenericSendFromISR+0x74>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006264:	f001 ff40 	bl	80080e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006268:	f3ef 8211 	mrs	r2, BASEPRI
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fa      	str	r2, [r7, #28]
 800627e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006280:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628c:	429a      	cmp	r2, r3
 800628e:	d302      	bcc.n	8006296 <xQueueGenericSendFromISR+0xc2>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d12f      	bne.n	80062f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800629c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062ac:	f000 f912 	bl	80064d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b8:	d112      	bne.n	80062e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	3324      	adds	r3, #36	@ 0x24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fedc 	bl	8007084 <xTaskRemoveFromEventList>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e007      	b.n	80062f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062e4:	3301      	adds	r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	b25a      	sxtb	r2, r3
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062f0:	2301      	movs	r3, #1
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80062f4:	e001      	b.n	80062fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006308:	4618      	mov	r0, r3
 800630a:	3740      	adds	r7, #64	@ 0x40
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	@ 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <xQueueReceive+0x32>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	623b      	str	r3, [r7, #32]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <xQueueReceive+0x40>
 8006348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <xQueueReceive+0x44>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <xQueueReceive+0x46>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <xQueueReceive+0x62>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	61fb      	str	r3, [r7, #28]
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	e7fd      	b.n	800636e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006372:	f001 f86f 	bl	8007454 <xTaskGetSchedulerState>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <xQueueReceive+0x72>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <xQueueReceive+0x76>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueReceive+0x78>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <xQueueReceive+0x94>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	61bb      	str	r3, [r7, #24]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063a4:	f001 fdc0 	bl	8007f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01f      	beq.n	80063f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b8:	f000 f8f6 	bl	80065a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	1e5a      	subs	r2, r3, #1
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00f      	beq.n	80063ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	3310      	adds	r3, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fe57 	bl	8007084 <xTaskRemoveFromEventList>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063dc:	4b3c      	ldr	r3, [pc, #240]	@ (80064d0 <xQueueReceive+0x1c0>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063ec:	f001 fdce 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e069      	b.n	80064c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063fa:	f001 fdc7 	bl	8007f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063fe:	2300      	movs	r3, #0
 8006400:	e062      	b.n	80064c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fec5 	bl	800719c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006412:	2301      	movs	r3, #1
 8006414:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006416:	f001 fdb9 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800641a:	f000 fc0d 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800641e:	f001 fd83 	bl	8007f28 <vPortEnterCritical>
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006428:	b25b      	sxtb	r3, r3
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800642e:	d103      	bne.n	8006438 <xQueueReceive+0x128>
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800643e:	b25b      	sxtb	r3, r3
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006444:	d103      	bne.n	800644e <xQueueReceive+0x13e>
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800644e:	f001 fd9d 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006452:	1d3a      	adds	r2, r7, #4
 8006454:	f107 0310 	add.w	r3, r7, #16
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f000 feb4 	bl	80071c8 <xTaskCheckForTimeOut>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d123      	bne.n	80064ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006468:	f000 f916 	bl	8006698 <prvIsQueueEmpty>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	3324      	adds	r3, #36	@ 0x24
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fdb0 	bl	8006fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006482:	f000 f8b7 	bl	80065f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006486:	f000 fbe5 	bl	8006c54 <xTaskResumeAll>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d189      	bne.n	80063a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006490:	4b0f      	ldr	r3, [pc, #60]	@ (80064d0 <xQueueReceive+0x1c0>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	e780      	b.n	80063a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064a4:	f000 f8a6 	bl	80065f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064a8:	f000 fbd4 	bl	8006c54 <xTaskResumeAll>
 80064ac:	e77a      	b.n	80063a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b0:	f000 f8a0 	bl	80065f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064b4:	f000 fbce 	bl	8006c54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ba:	f000 f8ed 	bl	8006698 <prvIsQueueEmpty>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f43f af6f 	beq.w	80063a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3730      	adds	r7, #48	@ 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d14d      	bne.n	8006596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ffc6 	bl	8007490 <xTaskPriorityDisinherit>
 8006504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	e043      	b.n	8006596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d119      	bne.n	8006548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6858      	ldr	r0, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	461a      	mov	r2, r3
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	f00f f9c1 	bl	80158a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	d32b      	bcc.n	8006596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	e026      	b.n	8006596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68d8      	ldr	r0, [r3, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	461a      	mov	r2, r3
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	f00f f9a7 	bl	80158a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	425b      	negs	r3, r3
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d207      	bcs.n	8006584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	425b      	negs	r3, r3
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d105      	bne.n	8006596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3b01      	subs	r3, #1
 8006594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800659e:	697b      	ldr	r3, [r7, #20]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	441a      	add	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d303      	bcc.n	80065dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68d9      	ldr	r1, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	461a      	mov	r2, r3
 80065e6:	6838      	ldr	r0, [r7, #0]
 80065e8:	f00f f95d 	bl	80158a6 <memcpy>
	}
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065fc:	f001 fc94 	bl	8007f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006608:	e011      	b.n	800662e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d012      	beq.n	8006638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3324      	adds	r3, #36	@ 0x24
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fd34 	bl	8007084 <xTaskRemoveFromEventList>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006622:	f000 fe35 	bl	8007290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3b01      	subs	r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800662e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dce9      	bgt.n	800660a <prvUnlockQueue+0x16>
 8006636:	e000      	b.n	800663a <prvUnlockQueue+0x46>
					break;
 8006638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	22ff      	movs	r2, #255	@ 0xff
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006642:	f001 fca3 	bl	8007f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006646:	f001 fc6f 	bl	8007f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006652:	e011      	b.n	8006678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d012      	beq.n	8006682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3310      	adds	r3, #16
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fd0f 	bl	8007084 <xTaskRemoveFromEventList>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800666c:	f000 fe10 	bl	8007290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	3b01      	subs	r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800667c:	2b00      	cmp	r3, #0
 800667e:	dce9      	bgt.n	8006654 <prvUnlockQueue+0x60>
 8006680:	e000      	b.n	8006684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	22ff      	movs	r2, #255	@ 0xff
 8006688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800668c:	f001 fc7e 	bl	8007f8c <vPortExitCritical>
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066a0:	f001 fc42 	bl	8007f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e001      	b.n	80066b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066b6:	f001 fc69 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 80066ba:	68fb      	ldr	r3, [r7, #12]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066cc:	f001 fc2c 	bl	8007f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	429a      	cmp	r2, r3
 80066da:	d102      	bne.n	80066e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e001      	b.n	80066e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066e6:	f001 fc51 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e014      	b.n	800672e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006704:	4a0f      	ldr	r2, [pc, #60]	@ (8006744 <vQueueAddToRegistry+0x50>)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006710:	490c      	ldr	r1, [pc, #48]	@ (8006744 <vQueueAddToRegistry+0x50>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800671a:	4a0a      	ldr	r2, [pc, #40]	@ (8006744 <vQueueAddToRegistry+0x50>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	4413      	add	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006726:	e006      	b.n	8006736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b07      	cmp	r3, #7
 8006732:	d9e7      	bls.n	8006704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20004dfc 	.word	0x20004dfc

08006748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006758:	f001 fbe6 	bl	8007f28 <vPortEnterCritical>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006762:	b25b      	sxtb	r3, r3
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006768:	d103      	bne.n	8006772 <vQueueWaitForMessageRestricted+0x2a>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677e:	d103      	bne.n	8006788 <vQueueWaitForMessageRestricted+0x40>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006788:	f001 fc00 	bl	8007f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3324      	adds	r3, #36	@ 0x24
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fc45 	bl	800702c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067a2:	6978      	ldr	r0, [r7, #20]
 80067a4:	f7ff ff26 	bl	80065f4 <prvUnlockQueue>
	}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	@ 0x38
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	623b      	str	r3, [r7, #32]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	61fb      	str	r3, [r7, #28]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067fa:	235c      	movs	r3, #92	@ 0x5c
 80067fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b5c      	cmp	r3, #92	@ 0x5c
 8006802:	d00b      	beq.n	800681c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	61bb      	str	r3, [r7, #24]
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	e7fd      	b.n	8006818 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800681c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01e      	beq.n	8006862 <xTaskCreateStatic+0xb2>
 8006824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01b      	beq.n	8006862 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	2202      	movs	r2, #2
 8006838:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800683c:	2300      	movs	r3, #0
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f850 	bl	80068fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800685a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800685c:	f000 f8de 	bl	8006a1c <prvAddNewTaskToReadyList>
 8006860:	e001      	b.n	8006866 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006866:	697b      	ldr	r3, [r7, #20]
	}
 8006868:	4618      	mov	r0, r3
 800686a:	3728      	adds	r7, #40	@ 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08c      	sub	sp, #48	@ 0x30
 8006874:	af04      	add	r7, sp, #16
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006880:	88fb      	ldrh	r3, [r7, #6]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fc71 	bl	800816c <pvPortMalloc>
 800688a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006892:	205c      	movs	r0, #92	@ 0x5c
 8006894:	f001 fc6a 	bl	800816c <pvPortMalloc>
 8006898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80068a6:	e005      	b.n	80068b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068a8:	6978      	ldr	r0, [r7, #20]
 80068aa:	f001 fd2d 	bl	8008308 <vPortFree>
 80068ae:	e001      	b.n	80068b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d017      	beq.n	80068ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9303      	str	r3, [sp, #12]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f80e 	bl	80068fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068de:	69f8      	ldr	r0, [r7, #28]
 80068e0:	f000 f89c 	bl	8006a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068e4:	2301      	movs	r3, #1
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e002      	b.n	80068f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068f0:	69bb      	ldr	r3, [r7, #24]
	}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b088      	sub	sp, #32
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	461a      	mov	r2, r3
 8006912:	21a5      	movs	r1, #165	@ 0xa5
 8006914:	f00e fefe 	bl	8015714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006922:	3b01      	subs	r3, #1
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	617b      	str	r3, [r7, #20]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01f      	beq.n	800699a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e012      	b.n	8006986 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	7819      	ldrb	r1, [r3, #0]
 8006968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	3334      	adds	r3, #52	@ 0x34
 8006970:	460a      	mov	r2, r1
 8006972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b0f      	cmp	r3, #15
 800698a:	d9e9      	bls.n	8006960 <prvInitialiseNewTask+0x66>
 800698c:	e000      	b.n	8006990 <prvInitialiseNewTask+0x96>
			{
				break;
 800698e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006998:	e003      	b.n	80069a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	2b37      	cmp	r3, #55	@ 0x37
 80069a6:	d901      	bls.n	80069ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069a8:	2337      	movs	r3, #55	@ 0x37
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2200      	movs	r2, #0
 80069bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	3304      	adds	r3, #4
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff f966 	bl	8005c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	3318      	adds	r3, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff f961 	bl	8005c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2200      	movs	r2, #0
 80069ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	69b8      	ldr	r0, [r7, #24]
 80069fc:	f001 f966 	bl	8007ccc <pxPortInitialiseStack>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a12:	bf00      	nop
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a24:	f001 fa80 	bl	8007f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a28:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae0 <prvAddNewTaskToReadyList+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae0 <prvAddNewTaskToReadyList+0xc4>)
 8006a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a40:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <prvAddNewTaskToReadyList+0xc4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d110      	bne.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a48:	f000 fc46 	bl	80072d8 <prvInitialiseTaskLists>
 8006a4c:	e00d      	b.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a4e:	4b26      	ldr	r3, [pc, #152]	@ (8006ae8 <prvAddNewTaskToReadyList+0xcc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a56:	4b23      	ldr	r3, [pc, #140]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d802      	bhi.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a6a:	4b20      	ldr	r3, [pc, #128]	@ (8006aec <prvAddNewTaskToReadyList+0xd0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	4a1e      	ldr	r2, [pc, #120]	@ (8006aec <prvAddNewTaskToReadyList+0xd0>)
 8006a72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a74:	4b1d      	ldr	r3, [pc, #116]	@ (8006aec <prvAddNewTaskToReadyList+0xd0>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4b1b      	ldr	r3, [pc, #108]	@ (8006af0 <prvAddNewTaskToReadyList+0xd4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d903      	bls.n	8006a90 <prvAddNewTaskToReadyList+0x74>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <prvAddNewTaskToReadyList+0xd4>)
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4a15      	ldr	r2, [pc, #84]	@ (8006af4 <prvAddNewTaskToReadyList+0xd8>)
 8006a9e:	441a      	add	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7ff f901 	bl	8005cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006aac:	f001 fa6e 	bl	8007f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <prvAddNewTaskToReadyList+0xcc>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d207      	bcs.n	8006ad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8006af8 <prvAddNewTaskToReadyList+0xdc>)
 8006ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20005310 	.word	0x20005310
 8006ae4:	20004e3c 	.word	0x20004e3c
 8006ae8:	2000531c 	.word	0x2000531c
 8006aec:	2000532c 	.word	0x2000532c
 8006af0:	20005318 	.word	0x20005318
 8006af4:	20004e40 	.word	0x20004e40
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d018      	beq.n	8006b40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b0e:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <vTaskDelay+0x64>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <vTaskDelay+0x32>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60bb      	str	r3, [r7, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b2e:	f000 f883 	bl	8006c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b32:	2100      	movs	r1, #0
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fd1b 	bl	8007570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b3a:	f000 f88b 	bl	8006c54 <xTaskResumeAll>
 8006b3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b46:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <vTaskDelay+0x68>)
 8006b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20005338 	.word	0x20005338
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	@ 0x28
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b76:	463a      	mov	r2, r7
 8006b78:	1d39      	adds	r1, r7, #4
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f834 	bl	8005bec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	9202      	str	r2, [sp, #8]
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	460a      	mov	r2, r1
 8006b96:	4922      	ldr	r1, [pc, #136]	@ (8006c20 <vTaskStartScheduler+0xb8>)
 8006b98:	4822      	ldr	r0, [pc, #136]	@ (8006c24 <vTaskStartScheduler+0xbc>)
 8006b9a:	f7ff fe09 	bl	80067b0 <xTaskCreateStatic>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <vTaskStartScheduler+0xc0>)
 8006ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ba4:	4b20      	ldr	r3, [pc, #128]	@ (8006c28 <vTaskStartScheduler+0xc0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e001      	b.n	8006bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d102      	bne.n	8006bc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bbc:	f000 fd2c 	bl	8007618 <xTimerCreateTimerTask>
 8006bc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d116      	bne.n	8006bf6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bdc:	4b13      	ldr	r3, [pc, #76]	@ (8006c2c <vTaskStartScheduler+0xc4>)
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006be2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006be4:	4b12      	ldr	r3, [pc, #72]	@ (8006c30 <vTaskStartScheduler+0xc8>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bea:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <vTaskStartScheduler+0xcc>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bf0:	f001 f8f6 	bl	8007de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bf4:	e00f      	b.n	8006c16 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bfc:	d10b      	bne.n	8006c16 <vTaskStartScheduler+0xae>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	60fb      	str	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <vTaskStartScheduler+0xaa>
}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	080166d4 	.word	0x080166d4
 8006c24:	080072a9 	.word	0x080072a9
 8006c28:	20005334 	.word	0x20005334
 8006c2c:	20005330 	.word	0x20005330
 8006c30:	2000531c 	.word	0x2000531c
 8006c34:	20005314 	.word	0x20005314

08006c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c3c:	4b04      	ldr	r3, [pc, #16]	@ (8006c50 <vTaskSuspendAll+0x18>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a03      	ldr	r2, [pc, #12]	@ (8006c50 <vTaskSuspendAll+0x18>)
 8006c44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20005338 	.word	0x20005338

08006c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c62:	4b42      	ldr	r3, [pc, #264]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <xTaskResumeAll+0x2e>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	603b      	str	r3, [r7, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c82:	f001 f951 	bl	8007f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c86:	4b39      	ldr	r3, [pc, #228]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	4a37      	ldr	r2, [pc, #220]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c90:	4b36      	ldr	r3, [pc, #216]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d162      	bne.n	8006d5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c98:	4b35      	ldr	r3, [pc, #212]	@ (8006d70 <xTaskResumeAll+0x11c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d05e      	beq.n	8006d5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca0:	e02f      	b.n	8006d02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca2:	4b34      	ldr	r3, [pc, #208]	@ (8006d74 <xTaskResumeAll+0x120>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3318      	adds	r3, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff f85a 	bl	8005d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff f855 	bl	8005d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d78 <xTaskResumeAll+0x124>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d903      	bls.n	8006cd2 <xTaskResumeAll+0x7e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cce:	4a2a      	ldr	r2, [pc, #168]	@ (8006d78 <xTaskResumeAll+0x124>)
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4a27      	ldr	r2, [pc, #156]	@ (8006d7c <xTaskResumeAll+0x128>)
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7fe ffe0 	bl	8005cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf2:	4b23      	ldr	r3, [pc, #140]	@ (8006d80 <xTaskResumeAll+0x12c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006cfc:	4b21      	ldr	r3, [pc, #132]	@ (8006d84 <xTaskResumeAll+0x130>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d02:	4b1c      	ldr	r3, [pc, #112]	@ (8006d74 <xTaskResumeAll+0x120>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1cb      	bne.n	8006ca2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d10:	f000 fb80 	bl	8007414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d14:	4b1c      	ldr	r3, [pc, #112]	@ (8006d88 <xTaskResumeAll+0x134>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d20:	f000 f846 	bl	8006db0 <xTaskIncrementTick>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d2a:	4b16      	ldr	r3, [pc, #88]	@ (8006d84 <xTaskResumeAll+0x130>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f1      	bne.n	8006d20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d3c:	4b12      	ldr	r3, [pc, #72]	@ (8006d88 <xTaskResumeAll+0x134>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d42:	4b10      	ldr	r3, [pc, #64]	@ (8006d84 <xTaskResumeAll+0x130>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <xTaskResumeAll+0x138>)
 8006d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d5e:	f001 f915 	bl	8007f8c <vPortExitCritical>

	return xAlreadyYielded;
 8006d62:	68bb      	ldr	r3, [r7, #8]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20005338 	.word	0x20005338
 8006d70:	20005310 	.word	0x20005310
 8006d74:	200052d0 	.word	0x200052d0
 8006d78:	20005318 	.word	0x20005318
 8006d7c:	20004e40 	.word	0x20004e40
 8006d80:	20004e3c 	.word	0x20004e3c
 8006d84:	20005324 	.word	0x20005324
 8006d88:	20005320 	.word	0x20005320
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d96:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <xTaskGetTickCount+0x1c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d9c:	687b      	ldr	r3, [r7, #4]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20005314 	.word	0x20005314

08006db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dba:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef8 <xTaskIncrementTick+0x148>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 8090 	bne.w	8006ee4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006efc <xTaskIncrementTick+0x14c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8006efc <xTaskIncrementTick+0x14c>)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d121      	bne.n	8006e1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dd8:	4b49      	ldr	r3, [pc, #292]	@ (8006f00 <xTaskIncrementTick+0x150>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <xTaskIncrementTick+0x46>
 8006dfa:	4b41      	ldr	r3, [pc, #260]	@ (8006f00 <xTaskIncrementTick+0x150>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	4b40      	ldr	r3, [pc, #256]	@ (8006f04 <xTaskIncrementTick+0x154>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a3e      	ldr	r2, [pc, #248]	@ (8006f00 <xTaskIncrementTick+0x150>)
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	4a3e      	ldr	r2, [pc, #248]	@ (8006f04 <xTaskIncrementTick+0x154>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f08 <xTaskIncrementTick+0x158>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a3c      	ldr	r2, [pc, #240]	@ (8006f08 <xTaskIncrementTick+0x158>)
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	f000 fafc 	bl	8007414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f0c <xTaskIncrementTick+0x15c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d349      	bcc.n	8006eba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e26:	4b36      	ldr	r3, [pc, #216]	@ (8006f00 <xTaskIncrementTick+0x150>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e30:	4b36      	ldr	r3, [pc, #216]	@ (8006f0c <xTaskIncrementTick+0x15c>)
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e36:	601a      	str	r2, [r3, #0]
					break;
 8006e38:	e03f      	b.n	8006eba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3a:	4b31      	ldr	r3, [pc, #196]	@ (8006f00 <xTaskIncrementTick+0x150>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d203      	bcs.n	8006e5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e52:	4a2e      	ldr	r2, [pc, #184]	@ (8006f0c <xTaskIncrementTick+0x15c>)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e58:	e02f      	b.n	8006eba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe ff82 	bl	8005d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3318      	adds	r3, #24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe ff79 	bl	8005d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4b25      	ldr	r3, [pc, #148]	@ (8006f10 <xTaskIncrementTick+0x160>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d903      	bls.n	8006e8a <xTaskIncrementTick+0xda>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	4a22      	ldr	r2, [pc, #136]	@ (8006f10 <xTaskIncrementTick+0x160>)
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4a1f      	ldr	r2, [pc, #124]	@ (8006f14 <xTaskIncrementTick+0x164>)
 8006e98:	441a      	add	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe ff04 	bl	8005cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <xTaskIncrementTick+0x168>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d3b8      	bcc.n	8006e26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb8:	e7b5      	b.n	8006e26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eba:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <xTaskIncrementTick+0x168>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec0:	4914      	ldr	r1, [pc, #80]	@ (8006f14 <xTaskIncrementTick+0x164>)
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d901      	bls.n	8006ed6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ed6:	4b11      	ldr	r3, [pc, #68]	@ (8006f1c <xTaskIncrementTick+0x16c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	e004      	b.n	8006eee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8006f20 <xTaskIncrementTick+0x170>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	4a0d      	ldr	r2, [pc, #52]	@ (8006f20 <xTaskIncrementTick+0x170>)
 8006eec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006eee:	697b      	ldr	r3, [r7, #20]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20005338 	.word	0x20005338
 8006efc:	20005314 	.word	0x20005314
 8006f00:	200052c8 	.word	0x200052c8
 8006f04:	200052cc 	.word	0x200052cc
 8006f08:	20005328 	.word	0x20005328
 8006f0c:	20005330 	.word	0x20005330
 8006f10:	20005318 	.word	0x20005318
 8006f14:	20004e40 	.word	0x20004e40
 8006f18:	20004e3c 	.word	0x20004e3c
 8006f1c:	20005324 	.word	0x20005324
 8006f20:	20005320 	.word	0x20005320

08006f24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f2a:	4b28      	ldr	r3, [pc, #160]	@ (8006fcc <vTaskSwitchContext+0xa8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f32:	4b27      	ldr	r3, [pc, #156]	@ (8006fd0 <vTaskSwitchContext+0xac>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f38:	e042      	b.n	8006fc0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f3a:	4b25      	ldr	r3, [pc, #148]	@ (8006fd0 <vTaskSwitchContext+0xac>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f40:	4b24      	ldr	r3, [pc, #144]	@ (8006fd4 <vTaskSwitchContext+0xb0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e011      	b.n	8006f6c <vTaskSwitchContext+0x48>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <vTaskSwitchContext+0x42>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <vTaskSwitchContext+0x3e>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	491a      	ldr	r1, [pc, #104]	@ (8006fd8 <vTaskSwitchContext+0xb4>)
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0e3      	beq.n	8006f48 <vTaskSwitchContext+0x24>
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4a13      	ldr	r2, [pc, #76]	@ (8006fd8 <vTaskSwitchContext+0xb4>)
 8006f8c:	4413      	add	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	605a      	str	r2, [r3, #4]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d104      	bne.n	8006fb0 <vTaskSwitchContext+0x8c>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	4a09      	ldr	r2, [pc, #36]	@ (8006fdc <vTaskSwitchContext+0xb8>)
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4a06      	ldr	r2, [pc, #24]	@ (8006fd4 <vTaskSwitchContext+0xb0>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6013      	str	r3, [r2, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20005338 	.word	0x20005338
 8006fd0:	20005324 	.word	0x20005324
 8006fd4:	20005318 	.word	0x20005318
 8006fd8:	20004e40 	.word	0x20004e40
 8006fdc:	20004e3c 	.word	0x20004e3c

08006fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007008:	4b07      	ldr	r3, [pc, #28]	@ (8007028 <vTaskPlaceOnEventList+0x48>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3318      	adds	r3, #24
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fe fe70 	bl	8005cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007016:	2101      	movs	r1, #1
 8007018:	6838      	ldr	r0, [r7, #0]
 800701a:	f000 faa9 	bl	8007570 <prvAddCurrentTaskToDelayedList>
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20004e3c 	.word	0x20004e3c

0800702c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	617b      	str	r3, [r7, #20]
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	e7fd      	b.n	8007052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007056:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <vTaskPlaceOnEventListRestricted+0x54>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3318      	adds	r3, #24
 800705c:	4619      	mov	r1, r3
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7fe fe25 	bl	8005cae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800706a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800706e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	68b8      	ldr	r0, [r7, #8]
 8007074:	f000 fa7c 	bl	8007570 <prvAddCurrentTaskToDelayedList>
	}
 8007078:	bf00      	nop
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20004e3c 	.word	0x20004e3c

08007084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	60fb      	str	r3, [r7, #12]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3318      	adds	r3, #24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fe56 	bl	8005d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <xTaskRemoveFromEventList+0xb0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11d      	bne.n	8007100 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fe4d 	bl	8005d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d2:	4b19      	ldr	r3, [pc, #100]	@ (8007138 <xTaskRemoveFromEventList+0xb4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d903      	bls.n	80070e2 <xTaskRemoveFromEventList+0x5e>
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <xTaskRemoveFromEventList+0xb4>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a13      	ldr	r2, [pc, #76]	@ (800713c <xTaskRemoveFromEventList+0xb8>)
 80070f0:	441a      	add	r2, r3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7fe fdd8 	bl	8005cae <vListInsertEnd>
 80070fe:	e005      	b.n	800710c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3318      	adds	r3, #24
 8007104:	4619      	mov	r1, r3
 8007106:	480e      	ldr	r0, [pc, #56]	@ (8007140 <xTaskRemoveFromEventList+0xbc>)
 8007108:	f7fe fdd1 	bl	8005cae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <xTaskRemoveFromEventList+0xc0>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	429a      	cmp	r2, r3
 8007118:	d905      	bls.n	8007126 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <xTaskRemoveFromEventList+0xc4>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e001      	b.n	800712a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20005338 	.word	0x20005338
 8007138:	20005318 	.word	0x20005318
 800713c:	20004e40 	.word	0x20004e40
 8007140:	200052d0 	.word	0x200052d0
 8007144:	20004e3c 	.word	0x20004e3c
 8007148:	20005324 	.word	0x20005324

0800714c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	60fb      	str	r3, [r7, #12]
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	e7fd      	b.n	800716e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007172:	f000 fed9 	bl	8007f28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <vTaskSetTimeOutState+0x48>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800717e:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <vTaskSetTimeOutState+0x4c>)
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007186:	f000 ff01 	bl	8007f8c <vPortExitCritical>
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20005328 	.word	0x20005328
 8007198:	20005314 	.word	0x20005314

0800719c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071a4:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <vTaskInternalSetTimeOutState+0x24>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071ac:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <vTaskInternalSetTimeOutState+0x28>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20005328 	.word	0x20005328
 80071c4:	20005314 	.word	0x20005314

080071c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	613b      	str	r3, [r7, #16]
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	e7fd      	b.n	80071ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	60fb      	str	r3, [r7, #12]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800720e:	f000 fe8b 	bl	8007f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007212:	4b1d      	ldr	r3, [pc, #116]	@ (8007288 <xTaskCheckForTimeOut+0xc0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800722a:	d102      	bne.n	8007232 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e023      	b.n	800727a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b15      	ldr	r3, [pc, #84]	@ (800728c <xTaskCheckForTimeOut+0xc4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d007      	beq.n	800724e <xTaskCheckForTimeOut+0x86>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	61fb      	str	r3, [r7, #28]
 800724c:	e015      	b.n	800727a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	429a      	cmp	r2, r3
 8007256:	d20b      	bcs.n	8007270 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ff99 	bl	800719c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	e004      	b.n	800727a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800727a:	f000 fe87 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 800727e:	69fb      	ldr	r3, [r7, #28]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3720      	adds	r7, #32
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20005314 	.word	0x20005314
 800728c:	20005328 	.word	0x20005328

08007290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007294:	4b03      	ldr	r3, [pc, #12]	@ (80072a4 <vTaskMissedYield+0x14>)
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	bf00      	nop
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20005324 	.word	0x20005324

080072a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072b0:	f000 f852 	bl	8007358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072b4:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <prvIdleTask+0x28>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d9f9      	bls.n	80072b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <prvIdleTask+0x2c>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072cc:	e7f0      	b.n	80072b0 <prvIdleTask+0x8>
 80072ce:	bf00      	nop
 80072d0:	20004e40 	.word	0x20004e40
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	e00c      	b.n	80072fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <prvInitialiseTaskLists+0x60>)
 80072f0:	4413      	add	r3, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe fcae 	bl	8005c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3301      	adds	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b37      	cmp	r3, #55	@ 0x37
 8007302:	d9ef      	bls.n	80072e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007304:	480d      	ldr	r0, [pc, #52]	@ (800733c <prvInitialiseTaskLists+0x64>)
 8007306:	f7fe fca5 	bl	8005c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800730a:	480d      	ldr	r0, [pc, #52]	@ (8007340 <prvInitialiseTaskLists+0x68>)
 800730c:	f7fe fca2 	bl	8005c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007310:	480c      	ldr	r0, [pc, #48]	@ (8007344 <prvInitialiseTaskLists+0x6c>)
 8007312:	f7fe fc9f 	bl	8005c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007316:	480c      	ldr	r0, [pc, #48]	@ (8007348 <prvInitialiseTaskLists+0x70>)
 8007318:	f7fe fc9c 	bl	8005c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800731c:	480b      	ldr	r0, [pc, #44]	@ (800734c <prvInitialiseTaskLists+0x74>)
 800731e:	f7fe fc99 	bl	8005c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007322:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <prvInitialiseTaskLists+0x78>)
 8007324:	4a05      	ldr	r2, [pc, #20]	@ (800733c <prvInitialiseTaskLists+0x64>)
 8007326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvInitialiseTaskLists+0x7c>)
 800732a:	4a05      	ldr	r2, [pc, #20]	@ (8007340 <prvInitialiseTaskLists+0x68>)
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20004e40 	.word	0x20004e40
 800733c:	200052a0 	.word	0x200052a0
 8007340:	200052b4 	.word	0x200052b4
 8007344:	200052d0 	.word	0x200052d0
 8007348:	200052e4 	.word	0x200052e4
 800734c:	200052fc 	.word	0x200052fc
 8007350:	200052c8 	.word	0x200052c8
 8007354:	200052cc 	.word	0x200052cc

08007358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800735e:	e019      	b.n	8007394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007360:	f000 fde2 	bl	8007f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007364:	4b10      	ldr	r3, [pc, #64]	@ (80073a8 <prvCheckTasksWaitingTermination+0x50>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fcf9 	bl	8005d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007376:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <prvCheckTasksWaitingTermination+0x54>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	4a0b      	ldr	r2, [pc, #44]	@ (80073ac <prvCheckTasksWaitingTermination+0x54>)
 800737e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <prvCheckTasksWaitingTermination+0x58>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3b01      	subs	r3, #1
 8007386:	4a0a      	ldr	r2, [pc, #40]	@ (80073b0 <prvCheckTasksWaitingTermination+0x58>)
 8007388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800738a:	f000 fdff 	bl	8007f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f810 	bl	80073b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007394:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <prvCheckTasksWaitingTermination+0x58>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e1      	bne.n	8007360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200052e4 	.word	0x200052e4
 80073ac:	20005310 	.word	0x20005310
 80073b0:	200052f8 	.word	0x200052f8

080073b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d108      	bne.n	80073d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 ff9c 	bl	8008308 <vPortFree>
				vPortFree( pxTCB );
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 ff99 	bl	8008308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073d6:	e019      	b.n	800740c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d103      	bne.n	80073ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 ff90 	bl	8008308 <vPortFree>
	}
 80073e8:	e010      	b.n	800740c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d00b      	beq.n	800740c <prvDeleteTCB+0x58>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	60fb      	str	r3, [r7, #12]
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <prvDeleteTCB+0x54>
	}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800741a:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <prvResetNextTaskUnblockTime+0x38>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007424:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <prvResetNextTaskUnblockTime+0x3c>)
 8007426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800742a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800742c:	e008      	b.n	8007440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742e:	4b07      	ldr	r3, [pc, #28]	@ (800744c <prvResetNextTaskUnblockTime+0x38>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4a04      	ldr	r2, [pc, #16]	@ (8007450 <prvResetNextTaskUnblockTime+0x3c>)
 800743e:	6013      	str	r3, [r2, #0]
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	200052c8 	.word	0x200052c8
 8007450:	20005330 	.word	0x20005330

08007454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800745a:	4b0b      	ldr	r3, [pc, #44]	@ (8007488 <xTaskGetSchedulerState+0x34>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007462:	2301      	movs	r3, #1
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	e008      	b.n	800747a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007468:	4b08      	ldr	r3, [pc, #32]	@ (800748c <xTaskGetSchedulerState+0x38>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007470:	2302      	movs	r3, #2
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	e001      	b.n	800747a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800747a:	687b      	ldr	r3, [r7, #4]
	}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	2000531c 	.word	0x2000531c
 800748c:	20005338 	.word	0x20005338

08007490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d058      	beq.n	8007558 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007564 <xTaskPriorityDisinherit+0xd4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d00b      	beq.n	80074c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60bb      	str	r3, [r7, #8]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ec:	1e5a      	subs	r2, r3, #1
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d02c      	beq.n	8007558 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007502:	2b00      	cmp	r3, #0
 8007504:	d128      	bne.n	8007558 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	3304      	adds	r3, #4
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fc2c 	bl	8005d68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007528:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <xTaskPriorityDisinherit+0xd8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <xTaskPriorityDisinherit+0xa8>
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	4a0c      	ldr	r2, [pc, #48]	@ (8007568 <xTaskPriorityDisinherit+0xd8>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4a09      	ldr	r2, [pc, #36]	@ (800756c <xTaskPriorityDisinherit+0xdc>)
 8007546:	441a      	add	r2, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fe fbad 	bl	8005cae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007558:	697b      	ldr	r3, [r7, #20]
	}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20004e3c 	.word	0x20004e3c
 8007568:	20005318 	.word	0x20005318
 800756c:	20004e40 	.word	0x20004e40

08007570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800757a:	4b21      	ldr	r3, [pc, #132]	@ (8007600 <prvAddCurrentTaskToDelayedList+0x90>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007580:	4b20      	ldr	r3, [pc, #128]	@ (8007604 <prvAddCurrentTaskToDelayedList+0x94>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fbee 	bl	8005d68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007592:	d10a      	bne.n	80075aa <prvAddCurrentTaskToDelayedList+0x3a>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800759a:	4b1a      	ldr	r3, [pc, #104]	@ (8007604 <prvAddCurrentTaskToDelayedList+0x94>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3304      	adds	r3, #4
 80075a0:	4619      	mov	r1, r3
 80075a2:	4819      	ldr	r0, [pc, #100]	@ (8007608 <prvAddCurrentTaskToDelayedList+0x98>)
 80075a4:	f7fe fb83 	bl	8005cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075a8:	e026      	b.n	80075f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4413      	add	r3, r2
 80075b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075b2:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <prvAddCurrentTaskToDelayedList+0x94>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d209      	bcs.n	80075d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075c2:	4b12      	ldr	r3, [pc, #72]	@ (800760c <prvAddCurrentTaskToDelayedList+0x9c>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7fe fb91 	bl	8005cf6 <vListInsert>
}
 80075d4:	e010      	b.n	80075f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007610 <prvAddCurrentTaskToDelayedList+0xa0>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <prvAddCurrentTaskToDelayedList+0x94>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fb87 	bl	8005cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d202      	bcs.n	80075f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075f2:	4a08      	ldr	r2, [pc, #32]	@ (8007614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6013      	str	r3, [r2, #0]
}
 80075f8:	bf00      	nop
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20005314 	.word	0x20005314
 8007604:	20004e3c 	.word	0x20004e3c
 8007608:	200052fc 	.word	0x200052fc
 800760c:	200052cc 	.word	0x200052cc
 8007610:	200052c8 	.word	0x200052c8
 8007614:	20005330 	.word	0x20005330

08007618 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	@ 0x28
 800761c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007622:	f000 fb13 	bl	8007c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007626:	4b1d      	ldr	r3, [pc, #116]	@ (800769c <xTimerCreateTimerTask+0x84>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d021      	beq.n	8007672 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007636:	1d3a      	adds	r2, r7, #4
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	f107 030c 	add.w	r3, r7, #12
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe faed 	bl	8005c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	9202      	str	r2, [sp, #8]
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	2302      	movs	r3, #2
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	460a      	mov	r2, r1
 8007658:	4911      	ldr	r1, [pc, #68]	@ (80076a0 <xTimerCreateTimerTask+0x88>)
 800765a:	4812      	ldr	r0, [pc, #72]	@ (80076a4 <xTimerCreateTimerTask+0x8c>)
 800765c:	f7ff f8a8 	bl	80067b0 <xTaskCreateStatic>
 8007660:	4603      	mov	r3, r0
 8007662:	4a11      	ldr	r2, [pc, #68]	@ (80076a8 <xTimerCreateTimerTask+0x90>)
 8007664:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007666:	4b10      	ldr	r3, [pc, #64]	@ (80076a8 <xTimerCreateTimerTask+0x90>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800766e:	2301      	movs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	613b      	str	r3, [r7, #16]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007690:	697b      	ldr	r3, [r7, #20]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	2000536c 	.word	0x2000536c
 80076a0:	080166dc 	.word	0x080166dc
 80076a4:	080077e5 	.word	0x080077e5
 80076a8:	20005370 	.word	0x20005370

080076ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10b      	bne.n	80076dc <xTimerGenericCommand+0x30>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	623b      	str	r3, [r7, #32]
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	e7fd      	b.n	80076d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076dc:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <xTimerGenericCommand+0x98>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d02a      	beq.n	800773a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	dc18      	bgt.n	8007728 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076f6:	f7ff fead 	bl	8007454 <xTaskGetSchedulerState>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d109      	bne.n	8007714 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007700:	4b10      	ldr	r3, [pc, #64]	@ (8007744 <xTimerGenericCommand+0x98>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	f107 0110 	add.w	r1, r7, #16
 8007708:	2300      	movs	r3, #0
 800770a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770c:	f7fe fc60 	bl	8005fd0 <xQueueGenericSend>
 8007710:	6278      	str	r0, [r7, #36]	@ 0x24
 8007712:	e012      	b.n	800773a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007714:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <xTimerGenericCommand+0x98>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	f107 0110 	add.w	r1, r7, #16
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	f7fe fc56 	bl	8005fd0 <xQueueGenericSend>
 8007724:	6278      	str	r0, [r7, #36]	@ 0x24
 8007726:	e008      	b.n	800773a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007728:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <xTimerGenericCommand+0x98>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	f107 0110 	add.w	r1, r7, #16
 8007730:	2300      	movs	r3, #0
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	f7fe fd4e 	bl	80061d4 <xQueueGenericSendFromISR>
 8007738:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800773c:	4618      	mov	r0, r3
 800773e:	3728      	adds	r7, #40	@ 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	2000536c 	.word	0x2000536c

08007748 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007752:	4b23      	ldr	r3, [pc, #140]	@ (80077e0 <prvProcessExpiredTimer+0x98>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	3304      	adds	r3, #4
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fb01 	bl	8005d68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d023      	beq.n	80077bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	18d1      	adds	r1, r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	6978      	ldr	r0, [r7, #20]
 8007782:	f000 f8d5 	bl	8007930 <prvInsertTimerInActiveList>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d020      	beq.n	80077ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800778c:	2300      	movs	r3, #0
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2300      	movs	r3, #0
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	2100      	movs	r1, #0
 8007796:	6978      	ldr	r0, [r7, #20]
 8007798:	f7ff ff88 	bl	80076ac <xTimerGenericCommand>
 800779c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d114      	bne.n	80077ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	60fb      	str	r3, [r7, #12]
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	e7fd      	b.n	80077b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	6978      	ldr	r0, [r7, #20]
 80077d4:	4798      	blx	r3
}
 80077d6:	bf00      	nop
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20005364 	.word	0x20005364

080077e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f859 	bl	80078a8 <prvGetNextExpireTime>
 80077f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4619      	mov	r1, r3
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f805 	bl	800780c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007802:	f000 f8d7 	bl	80079b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007806:	bf00      	nop
 8007808:	e7f0      	b.n	80077ec <prvTimerTask+0x8>
	...

0800780c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007816:	f7ff fa0f 	bl	8006c38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f866 	bl	80078f0 <prvSampleTimeNow>
 8007824:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d130      	bne.n	800788e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <prvProcessTimerOrBlockTask+0x3c>
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	429a      	cmp	r2, r3
 8007838:	d806      	bhi.n	8007848 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800783a:	f7ff fa0b 	bl	8006c54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff ff81 	bl	8007748 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007846:	e024      	b.n	8007892 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d008      	beq.n	8007860 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800784e:	4b13      	ldr	r3, [pc, #76]	@ (800789c <prvProcessTimerOrBlockTask+0x90>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <prvProcessTimerOrBlockTask+0x50>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <prvProcessTimerOrBlockTask+0x52>
 800785c:	2300      	movs	r3, #0
 800785e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007860:	4b0f      	ldr	r3, [pc, #60]	@ (80078a0 <prvProcessTimerOrBlockTask+0x94>)
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	4619      	mov	r1, r3
 800786e:	f7fe ff6b 	bl	8006748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007872:	f7ff f9ef 	bl	8006c54 <xTaskResumeAll>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800787c:	4b09      	ldr	r3, [pc, #36]	@ (80078a4 <prvProcessTimerOrBlockTask+0x98>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
}
 800788c:	e001      	b.n	8007892 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800788e:	f7ff f9e1 	bl	8006c54 <xTaskResumeAll>
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20005368 	.word	0x20005368
 80078a0:	2000536c 	.word	0x2000536c
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078b0:	4b0e      	ldr	r3, [pc, #56]	@ (80078ec <prvGetNextExpireTime+0x44>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <prvGetNextExpireTime+0x16>
 80078ba:	2201      	movs	r2, #1
 80078bc:	e000      	b.n	80078c0 <prvGetNextExpireTime+0x18>
 80078be:	2200      	movs	r2, #0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d105      	bne.n	80078d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078cc:	4b07      	ldr	r3, [pc, #28]	@ (80078ec <prvGetNextExpireTime+0x44>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e001      	b.n	80078dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078dc:	68fb      	ldr	r3, [r7, #12]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20005364 	.word	0x20005364

080078f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078f8:	f7ff fa4a 	bl	8006d90 <xTaskGetTickCount>
 80078fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078fe:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <prvSampleTimeNow+0x3c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	429a      	cmp	r2, r3
 8007906:	d205      	bcs.n	8007914 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007908:	f000 f93a 	bl	8007b80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	e002      	b.n	800791a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800791a:	4a04      	ldr	r2, [pc, #16]	@ (800792c <prvSampleTimeNow+0x3c>)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007920:	68fb      	ldr	r3, [r7, #12]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20005374 	.word	0x20005374

08007930 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d812      	bhi.n	800797c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	429a      	cmp	r2, r3
 8007962:	d302      	bcc.n	800796a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e01b      	b.n	80079a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800796a:	4b10      	ldr	r3, [pc, #64]	@ (80079ac <prvInsertTimerInActiveList+0x7c>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7fe f9be 	bl	8005cf6 <vListInsert>
 800797a:	e012      	b.n	80079a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d206      	bcs.n	8007992 <prvInsertTimerInActiveList+0x62>
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e007      	b.n	80079a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007992:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <prvInsertTimerInActiveList+0x80>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fe f9aa 	bl	8005cf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079a2:	697b      	ldr	r3, [r7, #20]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20005368 	.word	0x20005368
 80079b0:	20005364 	.word	0x20005364

080079b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08e      	sub	sp, #56	@ 0x38
 80079b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ba:	e0ce      	b.n	8007b5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da19      	bge.n	80079f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079c2:	1d3b      	adds	r3, r7, #4
 80079c4:	3304      	adds	r3, #4
 80079c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	61fb      	str	r3, [r7, #28]
}
 80079e0:	bf00      	nop
 80079e2:	bf00      	nop
 80079e4:	e7fd      	b.n	80079e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ec:	6850      	ldr	r0, [r2, #4]
 80079ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f0:	6892      	ldr	r2, [r2, #8]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f2c0 80ae 	blt.w	8007b5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe f9aa 	bl	8005d68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a14:	463b      	mov	r3, r7
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff6a 	bl	80078f0 <prvSampleTimeNow>
 8007a1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b09      	cmp	r3, #9
 8007a22:	f200 8097 	bhi.w	8007b54 <prvProcessReceivedCommands+0x1a0>
 8007a26:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <prvProcessReceivedCommands+0x78>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a55 	.word	0x08007a55
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a55 	.word	0x08007a55
 8007a38:	08007acb 	.word	0x08007acb
 8007a3c:	08007adf 	.word	0x08007adf
 8007a40:	08007b2b 	.word	0x08007b2b
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a55 	.word	0x08007a55
 8007a4c:	08007acb 	.word	0x08007acb
 8007a50:	08007adf 	.word	0x08007adf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	18d1      	adds	r1, r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a74:	f7ff ff5c 	bl	8007930 <prvInsertTimerInActiveList>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d06c      	beq.n	8007b58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d061      	beq.n	8007b58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	441a      	add	r2, r3
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aa6:	f7ff fe01 	bl	80076ac <xTimerGenericCommand>
 8007aaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d152      	bne.n	8007b58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	61bb      	str	r3, [r7, #24]
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	e7fd      	b.n	8007ac6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007adc:	e03d      	b.n	8007b5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10b      	bne.n	8007b16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	617b      	str	r3, [r7, #20]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	18d1      	adds	r1, r2, r3
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b24:	f7ff ff04 	bl	8007930 <prvInsertTimerInActiveList>
					break;
 8007b28:	e017      	b.n	8007b5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b3a:	f000 fbe5 	bl	8008308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b3e:	e00c      	b.n	8007b5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b46:	f023 0301 	bic.w	r3, r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b52:	e002      	b.n	8007b5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007b54:	bf00      	nop
 8007b56:	e000      	b.n	8007b5a <prvProcessReceivedCommands+0x1a6>
					break;
 8007b58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b5a:	4b08      	ldr	r3, [pc, #32]	@ (8007b7c <prvProcessReceivedCommands+0x1c8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1d39      	adds	r1, r7, #4
 8007b60:	2200      	movs	r2, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fbd4 	bl	8006310 <xQueueReceive>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f af26 	bne.w	80079bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	3730      	adds	r7, #48	@ 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000536c 	.word	0x2000536c

08007b80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b86:	e049      	b.n	8007c1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b88:	4b2e      	ldr	r3, [pc, #184]	@ (8007c44 <prvSwitchTimerLists+0xc4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b92:	4b2c      	ldr	r3, [pc, #176]	@ (8007c44 <prvSwitchTimerLists+0xc4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe f8e1 	bl	8005d68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02f      	beq.n	8007c1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d90e      	bls.n	8007bec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bda:	4b1a      	ldr	r3, [pc, #104]	@ (8007c44 <prvSwitchTimerLists+0xc4>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fe f886 	bl	8005cf6 <vListInsert>
 8007bea:	e017      	b.n	8007c1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bec:	2300      	movs	r3, #0
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fd58 	bl	80076ac <xTimerGenericCommand>
 8007bfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	603b      	str	r3, [r7, #0]
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c1c:	4b09      	ldr	r3, [pc, #36]	@ (8007c44 <prvSwitchTimerLists+0xc4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1b0      	bne.n	8007b88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c26:	4b07      	ldr	r3, [pc, #28]	@ (8007c44 <prvSwitchTimerLists+0xc4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <prvSwitchTimerLists+0xc8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a04      	ldr	r2, [pc, #16]	@ (8007c44 <prvSwitchTimerLists+0xc4>)
 8007c32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c34:	4a04      	ldr	r2, [pc, #16]	@ (8007c48 <prvSwitchTimerLists+0xc8>)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	6013      	str	r3, [r2, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20005364 	.word	0x20005364
 8007c48:	20005368 	.word	0x20005368

08007c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c52:	f000 f969 	bl	8007f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c56:	4b15      	ldr	r3, [pc, #84]	@ (8007cac <prvCheckForValidListAndQueue+0x60>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d120      	bne.n	8007ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c5e:	4814      	ldr	r0, [pc, #80]	@ (8007cb0 <prvCheckForValidListAndQueue+0x64>)
 8007c60:	f7fd fff8 	bl	8005c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c64:	4813      	ldr	r0, [pc, #76]	@ (8007cb4 <prvCheckForValidListAndQueue+0x68>)
 8007c66:	f7fd fff5 	bl	8005c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c6a:	4b13      	ldr	r3, [pc, #76]	@ (8007cb8 <prvCheckForValidListAndQueue+0x6c>)
 8007c6c:	4a10      	ldr	r2, [pc, #64]	@ (8007cb0 <prvCheckForValidListAndQueue+0x64>)
 8007c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c70:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <prvCheckForValidListAndQueue+0x70>)
 8007c72:	4a10      	ldr	r2, [pc, #64]	@ (8007cb4 <prvCheckForValidListAndQueue+0x68>)
 8007c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c76:	2300      	movs	r3, #0
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <prvCheckForValidListAndQueue+0x74>)
 8007c7c:	4a11      	ldr	r2, [pc, #68]	@ (8007cc4 <prvCheckForValidListAndQueue+0x78>)
 8007c7e:	2110      	movs	r1, #16
 8007c80:	200a      	movs	r0, #10
 8007c82:	f7fe f905 	bl	8005e90 <xQueueGenericCreateStatic>
 8007c86:	4603      	mov	r3, r0
 8007c88:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <prvCheckForValidListAndQueue+0x60>)
 8007c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <prvCheckForValidListAndQueue+0x60>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <prvCheckForValidListAndQueue+0x60>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	490b      	ldr	r1, [pc, #44]	@ (8007cc8 <prvCheckForValidListAndQueue+0x7c>)
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fd2a 	bl	80066f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ca0:	f000 f974 	bl	8007f8c <vPortExitCritical>
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2000536c 	.word	0x2000536c
 8007cb0:	2000533c 	.word	0x2000533c
 8007cb4:	20005350 	.word	0x20005350
 8007cb8:	20005364 	.word	0x20005364
 8007cbc:	20005368 	.word	0x20005368
 8007cc0:	20005418 	.word	0x20005418
 8007cc4:	20005378 	.word	0x20005378
 8007cc8:	080166e4 	.word	0x080166e4

08007ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3b04      	subs	r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f023 0201 	bic.w	r2, r3, #1
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8007d30 <pxPortInitialiseStack+0x64>)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b14      	subs	r3, #20
 8007d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f06f 0202 	mvn.w	r2, #2
 8007d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3b20      	subs	r3, #32
 8007d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	08007d35 	.word	0x08007d35

08007d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d3e:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <prvTaskExitError+0x58>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d46:	d00b      	beq.n	8007d60 <prvTaskExitError+0x2c>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	60fb      	str	r3, [r7, #12]
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <prvTaskExitError+0x28>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60bb      	str	r3, [r7, #8]
}
 8007d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d74:	bf00      	nop
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0fc      	beq.n	8007d76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000014 	.word	0x20000014

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	@ (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	4770      	bx	lr
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20004e3c 	.word	0x20004e3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007db8:	4808      	ldr	r0, [pc, #32]	@ (8007ddc <prvPortStartFirstTask+0x24>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8814 	msr	CONTROL, r0
 8007dca:	b662      	cpsie	i
 8007dcc:	b661      	cpsie	f
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	df00      	svc	0
 8007dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dda:	bf00      	nop
 8007ddc:	e000ed08 	.word	0xe000ed08

08007de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007de6:	4b47      	ldr	r3, [pc, #284]	@ (8007f04 <xPortStartScheduler+0x124>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a47      	ldr	r2, [pc, #284]	@ (8007f08 <xPortStartScheduler+0x128>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10b      	bne.n	8007e08 <xPortStartScheduler+0x28>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60fb      	str	r3, [r7, #12]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e08:	4b3e      	ldr	r3, [pc, #248]	@ (8007f04 <xPortStartScheduler+0x124>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f0c <xPortStartScheduler+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d10b      	bne.n	8007e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	613b      	str	r3, [r7, #16]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e2a:	4b39      	ldr	r3, [pc, #228]	@ (8007f10 <xPortStartScheduler+0x130>)
 8007e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	22ff      	movs	r2, #255	@ 0xff
 8007e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	4b31      	ldr	r3, [pc, #196]	@ (8007f14 <xPortStartScheduler+0x134>)
 8007e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e52:	4b31      	ldr	r3, [pc, #196]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e54:	2207      	movs	r2, #7
 8007e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e58:	e009      	b.n	8007e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	4a2d      	ldr	r2, [pc, #180]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e76:	2b80      	cmp	r3, #128	@ 0x80
 8007e78:	d0ef      	beq.n	8007e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e7a:	4b27      	ldr	r3, [pc, #156]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1c3 0307 	rsb	r3, r3, #7
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d00b      	beq.n	8007e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60bb      	str	r3, [r7, #8]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007eb0:	4a19      	ldr	r2, [pc, #100]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ebc:	4b17      	ldr	r3, [pc, #92]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a16      	ldr	r2, [pc, #88]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec8:	4b14      	ldr	r3, [pc, #80]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a13      	ldr	r2, [pc, #76]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed4:	f000 f8da 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed8:	4b11      	ldr	r3, [pc, #68]	@ (8007f20 <xPortStartScheduler+0x140>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ede:	f000 f8f9 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ee2:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <xPortStartScheduler+0x144>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8007f24 <xPortStartScheduler+0x144>)
 8007ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007eee:	f7ff ff63 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ef2:	f7ff f817 	bl	8006f24 <vTaskSwitchContext>
	prvTaskExitError();
 8007ef6:	f7ff ff1d 	bl	8007d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	e000ed00 	.word	0xe000ed00
 8007f08:	410fc271 	.word	0x410fc271
 8007f0c:	410fc270 	.word	0x410fc270
 8007f10:	e000e400 	.word	0xe000e400
 8007f14:	20005468 	.word	0x20005468
 8007f18:	2000546c 	.word	0x2000546c
 8007f1c:	e000ed20 	.word	0xe000ed20
 8007f20:	20000014 	.word	0x20000014
 8007f24:	e000ef34 	.word	0xe000ef34

08007f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
}
 8007f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f42:	4b10      	ldr	r3, [pc, #64]	@ (8007f84 <vPortEnterCritical+0x5c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	4a0e      	ldr	r2, [pc, #56]	@ (8007f84 <vPortEnterCritical+0x5c>)
 8007f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f84 <vPortEnterCritical+0x5c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d110      	bne.n	8007f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <vPortEnterCritical+0x60>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	603b      	str	r3, [r7, #0]
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	e7fd      	b.n	8007f72 <vPortEnterCritical+0x4a>
	}
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000014 	.word	0x20000014
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f92:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <vPortExitCritical+0x50>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <vPortExitCritical+0x26>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	607b      	str	r3, [r7, #4]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	4a08      	ldr	r2, [pc, #32]	@ (8007fdc <vPortExitCritical+0x50>)
 8007fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fbc:	4b07      	ldr	r3, [pc, #28]	@ (8007fdc <vPortExitCritical+0x50>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <vPortExitCritical+0x44>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	f383 8811 	msr	BASEPRI, r3
}
 8007fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000014 	.word	0x20000014

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	@ (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7fe ff88 	bl	8006f24 <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	20004e3c 	.word	0x20004e3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7fe fea5 	bl	8006db0 <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <xPortSysTickHandler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	@ (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	@ (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	20000008 	.word	0x20000008
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ee:	f3ef 8305 	mrs	r3, IPSR
 80080f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d915      	bls.n	8008126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080fa:	4a18      	ldr	r2, [pc, #96]	@ (800815c <vPortValidateInterruptPriority+0x74>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008104:	4b16      	ldr	r3, [pc, #88]	@ (8008160 <vPortValidateInterruptPriority+0x78>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	429a      	cmp	r2, r3
 800810c:	d20b      	bcs.n	8008126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008126:	4b0f      	ldr	r3, [pc, #60]	@ (8008164 <vPortValidateInterruptPriority+0x7c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800812e:	4b0e      	ldr	r3, [pc, #56]	@ (8008168 <vPortValidateInterruptPriority+0x80>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d90b      	bls.n	800814e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	603b      	str	r3, [r7, #0]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vPortValidateInterruptPriority+0x62>
	}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	e000e3f0 	.word	0xe000e3f0
 8008160:	20005468 	.word	0x20005468
 8008164:	e000ed0c 	.word	0xe000ed0c
 8008168:	2000546c 	.word	0x2000546c

0800816c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	@ 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008178:	f7fe fd5e 	bl	8006c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800817c:	4b5c      	ldr	r3, [pc, #368]	@ (80082f0 <pvPortMalloc+0x184>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008184:	f000 f924 	bl	80083d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008188:	4b5a      	ldr	r3, [pc, #360]	@ (80082f4 <pvPortMalloc+0x188>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	f040 8095 	bne.w	80082c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01e      	beq.n	80081da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800819c:	2208      	movs	r2, #8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	3308      	adds	r3, #8
 80081b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <pvPortMalloc+0x6e>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	617b      	str	r3, [r7, #20]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d06f      	beq.n	80082c0 <pvPortMalloc+0x154>
 80081e0:	4b45      	ldr	r3, [pc, #276]	@ (80082f8 <pvPortMalloc+0x18c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d86a      	bhi.n	80082c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081ea:	4b44      	ldr	r3, [pc, #272]	@ (80082fc <pvPortMalloc+0x190>)
 80081ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081ee:	4b43      	ldr	r3, [pc, #268]	@ (80082fc <pvPortMalloc+0x190>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081f4:	e004      	b.n	8008200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d903      	bls.n	8008212 <pvPortMalloc+0xa6>
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f1      	bne.n	80081f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008212:	4b37      	ldr	r3, [pc, #220]	@ (80082f0 <pvPortMalloc+0x184>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008218:	429a      	cmp	r2, r3
 800821a:	d051      	beq.n	80082c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2208      	movs	r2, #8
 8008222:	4413      	add	r3, r2
 8008224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	1ad2      	subs	r2, r2, r3
 8008236:	2308      	movs	r3, #8
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	429a      	cmp	r2, r3
 800823c:	d920      	bls.n	8008280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800823e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4413      	add	r3, r2
 8008244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <pvPortMalloc+0xfc>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800827a:	69b8      	ldr	r0, [r7, #24]
 800827c:	f000 f90a 	bl	8008494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008280:	4b1d      	ldr	r3, [pc, #116]	@ (80082f8 <pvPortMalloc+0x18c>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	4a1b      	ldr	r2, [pc, #108]	@ (80082f8 <pvPortMalloc+0x18c>)
 800828c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800828e:	4b1a      	ldr	r3, [pc, #104]	@ (80082f8 <pvPortMalloc+0x18c>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b1b      	ldr	r3, [pc, #108]	@ (8008300 <pvPortMalloc+0x194>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d203      	bcs.n	80082a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800829a:	4b17      	ldr	r3, [pc, #92]	@ (80082f8 <pvPortMalloc+0x18c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a18      	ldr	r2, [pc, #96]	@ (8008300 <pvPortMalloc+0x194>)
 80082a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4b13      	ldr	r3, [pc, #76]	@ (80082f4 <pvPortMalloc+0x188>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082b6:	4b13      	ldr	r3, [pc, #76]	@ (8008304 <pvPortMalloc+0x198>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <pvPortMalloc+0x198>)
 80082be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082c0:	f7fe fcc8 	bl	8006c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <pvPortMalloc+0x17a>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	60fb      	str	r3, [r7, #12]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <pvPortMalloc+0x176>
	return pvReturn;
 80082e6:	69fb      	ldr	r3, [r7, #28]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3728      	adds	r7, #40	@ 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20006078 	.word	0x20006078
 80082f4:	2000608c 	.word	0x2000608c
 80082f8:	2000607c 	.word	0x2000607c
 80082fc:	20006070 	.word	0x20006070
 8008300:	20006080 	.word	0x20006080
 8008304:	20006084 	.word	0x20006084

08008308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04f      	beq.n	80083ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800831a:	2308      	movs	r3, #8
 800831c:	425b      	negs	r3, r3
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4413      	add	r3, r2
 8008322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	4b25      	ldr	r3, [pc, #148]	@ (80083c4 <vPortFree+0xbc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4013      	ands	r3, r2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <vPortFree+0x46>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	e7fd      	b.n	800834a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <vPortFree+0x66>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	60bb      	str	r3, [r7, #8]
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	4b14      	ldr	r3, [pc, #80]	@ (80083c4 <vPortFree+0xbc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4013      	ands	r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01e      	beq.n	80083ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d11a      	bne.n	80083ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	4b0e      	ldr	r3, [pc, #56]	@ (80083c4 <vPortFree+0xbc>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	43db      	mvns	r3, r3
 800838e:	401a      	ands	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008394:	f7fe fc50 	bl	8006c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	4b0a      	ldr	r3, [pc, #40]	@ (80083c8 <vPortFree+0xc0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4413      	add	r3, r2
 80083a2:	4a09      	ldr	r2, [pc, #36]	@ (80083c8 <vPortFree+0xc0>)
 80083a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083a6:	6938      	ldr	r0, [r7, #16]
 80083a8:	f000 f874 	bl	8008494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083ac:	4b07      	ldr	r3, [pc, #28]	@ (80083cc <vPortFree+0xc4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	4a06      	ldr	r2, [pc, #24]	@ (80083cc <vPortFree+0xc4>)
 80083b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083b6:	f7fe fc4d 	bl	8006c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ba:	bf00      	nop
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2000608c 	.word	0x2000608c
 80083c8:	2000607c 	.word	0x2000607c
 80083cc:	20006088 	.word	0x20006088

080083d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80083da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083dc:	4b27      	ldr	r3, [pc, #156]	@ (800847c <prvHeapInit+0xac>)
 80083de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3307      	adds	r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0307 	bic.w	r3, r3, #7
 80083f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	4a1f      	ldr	r2, [pc, #124]	@ (800847c <prvHeapInit+0xac>)
 8008400:	4413      	add	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <prvHeapInit+0xb0>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800840e:	4b1c      	ldr	r3, [pc, #112]	@ (8008480 <prvHeapInit+0xb0>)
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	4413      	add	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800841c:	2208      	movs	r2, #8
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0307 	bic.w	r3, r3, #7
 800842a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a15      	ldr	r2, [pc, #84]	@ (8008484 <prvHeapInit+0xb4>)
 8008430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008432:	4b14      	ldr	r3, [pc, #80]	@ (8008484 <prvHeapInit+0xb4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2200      	movs	r2, #0
 8008438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <prvHeapInit+0xb4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008450:	4b0c      	ldr	r3, [pc, #48]	@ (8008484 <prvHeapInit+0xb4>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	4a0a      	ldr	r2, [pc, #40]	@ (8008488 <prvHeapInit+0xb8>)
 800845e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4a09      	ldr	r2, [pc, #36]	@ (800848c <prvHeapInit+0xbc>)
 8008466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008468:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <prvHeapInit+0xc0>)
 800846a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800846e:	601a      	str	r2, [r3, #0]
}
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	20005470 	.word	0x20005470
 8008480:	20006070 	.word	0x20006070
 8008484:	20006078 	.word	0x20006078
 8008488:	20006080 	.word	0x20006080
 800848c:	2000607c 	.word	0x2000607c
 8008490:	2000608c 	.word	0x2000608c

08008494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800849c:	4b28      	ldr	r3, [pc, #160]	@ (8008540 <prvInsertBlockIntoFreeList+0xac>)
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	e002      	b.n	80084a8 <prvInsertBlockIntoFreeList+0x14>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d8f7      	bhi.n	80084a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	4413      	add	r3, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d108      	bne.n	80084d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	441a      	add	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d118      	bne.n	800851c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b15      	ldr	r3, [pc, #84]	@ (8008544 <prvInsertBlockIntoFreeList+0xb0>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d00d      	beq.n	8008512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	441a      	add	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e008      	b.n	8008524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008512:	4b0c      	ldr	r3, [pc, #48]	@ (8008544 <prvInsertBlockIntoFreeList+0xb0>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	e003      	b.n	8008524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d002      	beq.n	8008532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20006070 	.word	0x20006070
 8008544:	20006078 	.word	0x20006078

08008548 <rcl_get_zero_initialized_init_options>:
 8008548:	2000      	movs	r0, #0
 800854a:	4770      	bx	lr

0800854c <rcl_init_options_init>:
 800854c:	b084      	sub	sp, #16
 800854e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008550:	b097      	sub	sp, #92	@ 0x5c
 8008552:	ae1d      	add	r6, sp, #116	@ 0x74
 8008554:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8008558:	2800      	cmp	r0, #0
 800855a:	d058      	beq.n	800860e <rcl_init_options_init+0xc2>
 800855c:	6803      	ldr	r3, [r0, #0]
 800855e:	4605      	mov	r5, r0
 8008560:	b133      	cbz	r3, 8008570 <rcl_init_options_init+0x24>
 8008562:	2464      	movs	r4, #100	@ 0x64
 8008564:	4620      	mov	r0, r4
 8008566:	b017      	add	sp, #92	@ 0x5c
 8008568:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800856c:	b004      	add	sp, #16
 800856e:	4770      	bx	lr
 8008570:	4630      	mov	r0, r6
 8008572:	f001 f997 	bl	80098a4 <rcutils_allocator_is_valid>
 8008576:	2800      	cmp	r0, #0
 8008578:	d049      	beq.n	800860e <rcl_init_options_init+0xc2>
 800857a:	46b4      	mov	ip, r6
 800857c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008580:	ac11      	add	r4, sp, #68	@ 0x44
 8008582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008584:	f8dc 3000 	ldr.w	r3, [ip]
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800858c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800858e:	2050      	movs	r0, #80	@ 0x50
 8008590:	4798      	blx	r3
 8008592:	4604      	mov	r4, r0
 8008594:	6028      	str	r0, [r5, #0]
 8008596:	2800      	cmp	r0, #0
 8008598:	d03b      	beq.n	8008612 <rcl_init_options_init+0xc6>
 800859a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800859e:	4686      	mov	lr, r0
 80085a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80085a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80085a8:	f8dc 3000 	ldr.w	r3, [ip]
 80085ac:	f8ce 3000 	str.w	r3, [lr]
 80085b0:	a802      	add	r0, sp, #8
 80085b2:	f001 fa09 	bl	80099c8 <rmw_get_zero_initialized_init_options>
 80085b6:	f10d 0e08 	add.w	lr, sp, #8
 80085ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80085be:	f104 0c18 	add.w	ip, r4, #24
 80085c2:	682f      	ldr	r7, [r5, #0]
 80085c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80085c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80085cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80085d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80085d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80085d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80085dc:	ac20      	add	r4, sp, #128	@ 0x80
 80085de:	e88c 0003 	stmia.w	ip, {r0, r1}
 80085e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80085ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80085ee:	f107 0018 	add.w	r0, r7, #24
 80085f2:	f001 fa17 	bl	8009a24 <rmw_init_options_init>
 80085f6:	4604      	mov	r4, r0
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d0b3      	beq.n	8008564 <rcl_init_options_init+0x18>
 80085fc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80085fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008600:	6828      	ldr	r0, [r5, #0]
 8008602:	4798      	blx	r3
 8008604:	4620      	mov	r0, r4
 8008606:	f007 faa9 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 800860a:	4604      	mov	r4, r0
 800860c:	e7aa      	b.n	8008564 <rcl_init_options_init+0x18>
 800860e:	240b      	movs	r4, #11
 8008610:	e7a8      	b.n	8008564 <rcl_init_options_init+0x18>
 8008612:	240a      	movs	r4, #10
 8008614:	e7a6      	b.n	8008564 <rcl_init_options_init+0x18>
 8008616:	bf00      	nop

08008618 <rcl_init_options_fini>:
 8008618:	b530      	push	{r4, r5, lr}
 800861a:	b087      	sub	sp, #28
 800861c:	b1f0      	cbz	r0, 800865c <rcl_init_options_fini+0x44>
 800861e:	6803      	ldr	r3, [r0, #0]
 8008620:	4604      	mov	r4, r0
 8008622:	b1db      	cbz	r3, 800865c <rcl_init_options_fini+0x44>
 8008624:	469c      	mov	ip, r3
 8008626:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800862a:	f10d 0e04 	add.w	lr, sp, #4
 800862e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008632:	f8dc 3000 	ldr.w	r3, [ip]
 8008636:	f8ce 3000 	str.w	r3, [lr]
 800863a:	a801      	add	r0, sp, #4
 800863c:	f001 f932 	bl	80098a4 <rcutils_allocator_is_valid>
 8008640:	b160      	cbz	r0, 800865c <rcl_init_options_fini+0x44>
 8008642:	6820      	ldr	r0, [r4, #0]
 8008644:	3018      	adds	r0, #24
 8008646:	f001 fac3 	bl	8009bd0 <rmw_init_options_fini>
 800864a:	4605      	mov	r5, r0
 800864c:	b950      	cbnz	r0, 8008664 <rcl_init_options_fini+0x4c>
 800864e:	6820      	ldr	r0, [r4, #0]
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	9905      	ldr	r1, [sp, #20]
 8008654:	4798      	blx	r3
 8008656:	4628      	mov	r0, r5
 8008658:	b007      	add	sp, #28
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	250b      	movs	r5, #11
 800865e:	4628      	mov	r0, r5
 8008660:	b007      	add	sp, #28
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	f007 fa7a 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 8008668:	4605      	mov	r5, r0
 800866a:	e7f8      	b.n	800865e <rcl_init_options_fini+0x46>

0800866c <rcl_init_options_copy>:
 800866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008670:	b094      	sub	sp, #80	@ 0x50
 8008672:	2800      	cmp	r0, #0
 8008674:	d058      	beq.n	8008728 <rcl_init_options_copy+0xbc>
 8008676:	4604      	mov	r4, r0
 8008678:	6800      	ldr	r0, [r0, #0]
 800867a:	2800      	cmp	r0, #0
 800867c:	d054      	beq.n	8008728 <rcl_init_options_copy+0xbc>
 800867e:	460e      	mov	r6, r1
 8008680:	f001 f910 	bl	80098a4 <rcutils_allocator_is_valid>
 8008684:	2800      	cmp	r0, #0
 8008686:	d04f      	beq.n	8008728 <rcl_init_options_copy+0xbc>
 8008688:	2e00      	cmp	r6, #0
 800868a:	d04d      	beq.n	8008728 <rcl_init_options_copy+0xbc>
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	b123      	cbz	r3, 800869a <rcl_init_options_copy+0x2e>
 8008690:	2464      	movs	r4, #100	@ 0x64
 8008692:	4620      	mov	r0, r4
 8008694:	b014      	add	sp, #80	@ 0x50
 8008696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869a:	6827      	ldr	r7, [r4, #0]
 800869c:	46bc      	mov	ip, r7
 800869e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80086a2:	ad0f      	add	r5, sp, #60	@ 0x3c
 80086a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086a6:	f8dc 3000 	ldr.w	r3, [ip]
 80086aa:	f8d7 8000 	ldr.w	r8, [r7]
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	2050      	movs	r0, #80	@ 0x50
 80086b4:	47c0      	blx	r8
 80086b6:	4605      	mov	r5, r0
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	b3d0      	cbz	r0, 8008732 <rcl_init_options_copy+0xc6>
 80086bc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80086c0:	4686      	mov	lr, r0
 80086c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80086c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80086ca:	f8dc 3000 	ldr.w	r3, [ip]
 80086ce:	f8ce 3000 	str.w	r3, [lr]
 80086d2:	4668      	mov	r0, sp
 80086d4:	f001 f978 	bl	80099c8 <rmw_get_zero_initialized_init_options>
 80086d8:	46ee      	mov	lr, sp
 80086da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80086de:	f105 0c18 	add.w	ip, r5, #24
 80086e2:	6824      	ldr	r4, [r4, #0]
 80086e4:	6835      	ldr	r5, [r6, #0]
 80086e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80086ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80086f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086fa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80086fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008702:	f104 0018 	add.w	r0, r4, #24
 8008706:	f105 0118 	add.w	r1, r5, #24
 800870a:	f001 f9ed 	bl	8009ae8 <rmw_init_options_copy>
 800870e:	4604      	mov	r4, r0
 8008710:	2800      	cmp	r0, #0
 8008712:	d0be      	beq.n	8008692 <rcl_init_options_copy+0x26>
 8008714:	f001 f8d4 	bl	80098c0 <rcutils_get_error_string>
 8008718:	f001 f8ea 	bl	80098f0 <rcutils_reset_error>
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff ff7b 	bl	8008618 <rcl_init_options_fini>
 8008722:	b140      	cbz	r0, 8008736 <rcl_init_options_copy+0xca>
 8008724:	4604      	mov	r4, r0
 8008726:	e7b4      	b.n	8008692 <rcl_init_options_copy+0x26>
 8008728:	240b      	movs	r4, #11
 800872a:	4620      	mov	r0, r4
 800872c:	b014      	add	sp, #80	@ 0x50
 800872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008732:	240a      	movs	r4, #10
 8008734:	e7ad      	b.n	8008692 <rcl_init_options_copy+0x26>
 8008736:	4620      	mov	r0, r4
 8008738:	b014      	add	sp, #80	@ 0x50
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f007 ba0d 	b.w	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 8008742:	bf00      	nop

08008744 <rcl_init_options_set_domain_id>:
 8008744:	b120      	cbz	r0, 8008750 <rcl_init_options_set_domain_id+0xc>
 8008746:	6803      	ldr	r3, [r0, #0]
 8008748:	b113      	cbz	r3, 8008750 <rcl_init_options_set_domain_id+0xc>
 800874a:	6259      	str	r1, [r3, #36]	@ 0x24
 800874c:	2000      	movs	r0, #0
 800874e:	4770      	bx	lr
 8008750:	200b      	movs	r0, #11
 8008752:	4770      	bx	lr

08008754 <rcl_get_zero_initialized_publisher>:
 8008754:	4b01      	ldr	r3, [pc, #4]	@ (800875c <rcl_get_zero_initialized_publisher+0x8>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	0801676c 	.word	0x0801676c

08008760 <rcl_publisher_init>:
 8008760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008764:	b088      	sub	sp, #32
 8008766:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8008768:	2d00      	cmp	r5, #0
 800876a:	d069      	beq.n	8008840 <rcl_publisher_init+0xe0>
 800876c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8008770:	4604      	mov	r4, r0
 8008772:	4648      	mov	r0, r9
 8008774:	460e      	mov	r6, r1
 8008776:	4690      	mov	r8, r2
 8008778:	461f      	mov	r7, r3
 800877a:	f001 f893 	bl	80098a4 <rcutils_allocator_is_valid>
 800877e:	2800      	cmp	r0, #0
 8008780:	d05e      	beq.n	8008840 <rcl_publisher_init+0xe0>
 8008782:	2c00      	cmp	r4, #0
 8008784:	d05c      	beq.n	8008840 <rcl_publisher_init+0xe0>
 8008786:	f8d4 a000 	ldr.w	sl, [r4]
 800878a:	f1ba 0f00 	cmp.w	sl, #0
 800878e:	d004      	beq.n	800879a <rcl_publisher_init+0x3a>
 8008790:	2764      	movs	r7, #100	@ 0x64
 8008792:	4638      	mov	r0, r7
 8008794:	b008      	add	sp, #32
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	4630      	mov	r0, r6
 800879c:	f007 fcc2 	bl	8010124 <rcl_node_is_valid>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d052      	beq.n	800884a <rcl_publisher_init+0xea>
 80087a4:	f1b8 0f00 	cmp.w	r8, #0
 80087a8:	d04a      	beq.n	8008840 <rcl_publisher_init+0xe0>
 80087aa:	2f00      	cmp	r7, #0
 80087ac:	d048      	beq.n	8008840 <rcl_publisher_init+0xe0>
 80087ae:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80087b2:	aa07      	add	r2, sp, #28
 80087b4:	9205      	str	r2, [sp, #20]
 80087b6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80087ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80087c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80087c6:	4639      	mov	r1, r7
 80087c8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80087cc:	4630      	mov	r0, r6
 80087ce:	f007 fcfd 	bl	80101cc <rcl_node_resolve_name>
 80087d2:	4607      	mov	r7, r0
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d14f      	bne.n	8008878 <rcl_publisher_init+0x118>
 80087d8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80087da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80087dc:	20c8      	movs	r0, #200	@ 0xc8
 80087de:	4798      	blx	r3
 80087e0:	6020      	str	r0, [r4, #0]
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d04e      	beq.n	8008884 <rcl_publisher_init+0x124>
 80087e6:	4630      	mov	r0, r6
 80087e8:	f007 fcbe 	bl	8010168 <rcl_node_get_rmw_handle>
 80087ec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	9a07      	ldr	r2, [sp, #28]
 80087f4:	6827      	ldr	r7, [r4, #0]
 80087f6:	462b      	mov	r3, r5
 80087f8:	4641      	mov	r1, r8
 80087fa:	f001 fd15 	bl	800a228 <rmw_create_publisher>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8008804:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008808:	b370      	cbz	r0, 8008868 <rcl_publisher_init+0x108>
 800880a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800880e:	f001 fde9 	bl	800a3e4 <rmw_publisher_get_actual_qos>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	4607      	mov	r7, r0
 8008816:	b9d0      	cbnz	r0, 800884e <rcl_publisher_init+0xee>
 8008818:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800881c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8008820:	4629      	mov	r1, r5
 8008822:	2270      	movs	r2, #112	@ 0x70
 8008824:	4618      	mov	r0, r3
 8008826:	f00d f83e 	bl	80158a6 <memcpy>
 800882a:	6832      	ldr	r2, [r6, #0]
 800882c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8008830:	9807      	ldr	r0, [sp, #28]
 8008832:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8008834:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008836:	4798      	blx	r3
 8008838:	4638      	mov	r0, r7
 800883a:	b008      	add	sp, #32
 800883c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008840:	270b      	movs	r7, #11
 8008842:	4638      	mov	r0, r7
 8008844:	b008      	add	sp, #32
 8008846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884a:	27c8      	movs	r7, #200	@ 0xc8
 800884c:	e7a1      	b.n	8008792 <rcl_publisher_init+0x32>
 800884e:	b18b      	cbz	r3, 8008874 <rcl_publisher_init+0x114>
 8008850:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008854:	b142      	cbz	r2, 8008868 <rcl_publisher_init+0x108>
 8008856:	4630      	mov	r0, r6
 8008858:	f007 fc86 	bl	8010168 <rcl_node_get_rmw_handle>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8008862:	f001 fdcf 	bl	800a404 <rmw_destroy_publisher>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800886a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800886c:	4618      	mov	r0, r3
 800886e:	4790      	blx	r2
 8008870:	2300      	movs	r3, #0
 8008872:	6023      	str	r3, [r4, #0]
 8008874:	2701      	movs	r7, #1
 8008876:	e7db      	b.n	8008830 <rcl_publisher_init+0xd0>
 8008878:	2867      	cmp	r0, #103	@ 0x67
 800887a:	d0d9      	beq.n	8008830 <rcl_publisher_init+0xd0>
 800887c:	2869      	cmp	r0, #105	@ 0x69
 800887e:	d003      	beq.n	8008888 <rcl_publisher_init+0x128>
 8008880:	280a      	cmp	r0, #10
 8008882:	d1f7      	bne.n	8008874 <rcl_publisher_init+0x114>
 8008884:	270a      	movs	r7, #10
 8008886:	e7d3      	b.n	8008830 <rcl_publisher_init+0xd0>
 8008888:	2767      	movs	r7, #103	@ 0x67
 800888a:	e7d1      	b.n	8008830 <rcl_publisher_init+0xd0>

0800888c <rcl_publisher_get_default_options>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	4d14      	ldr	r5, [pc, #80]	@ (80088e0 <rcl_publisher_get_default_options+0x54>)
 8008890:	4914      	ldr	r1, [pc, #80]	@ (80088e4 <rcl_publisher_get_default_options+0x58>)
 8008892:	b088      	sub	sp, #32
 8008894:	4604      	mov	r4, r0
 8008896:	2250      	movs	r2, #80	@ 0x50
 8008898:	4628      	mov	r0, r5
 800889a:	f00d f804 	bl	80158a6 <memcpy>
 800889e:	a802      	add	r0, sp, #8
 80088a0:	f000 fff2 	bl	8009888 <rcutils_get_default_allocator>
 80088a4:	f10d 0c08 	add.w	ip, sp, #8
 80088a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80088ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80088b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80088b4:	466e      	mov	r6, sp
 80088b6:	f8dc 3000 	ldr.w	r3, [ip]
 80088ba:	f8ce 3000 	str.w	r3, [lr]
 80088be:	4630      	mov	r0, r6
 80088c0:	f001 f892 	bl	80099e8 <rmw_get_default_publisher_options>
 80088c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80088c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80088cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80088d0:	2270      	movs	r2, #112	@ 0x70
 80088d2:	4629      	mov	r1, r5
 80088d4:	4620      	mov	r0, r4
 80088d6:	f00c ffe6 	bl	80158a6 <memcpy>
 80088da:	4620      	mov	r0, r4
 80088dc:	b008      	add	sp, #32
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	20006090 	.word	0x20006090
 80088e4:	08016770 	.word	0x08016770

080088e8 <rcl_publish>:
 80088e8:	b1f8      	cbz	r0, 800892a <rcl_publish+0x42>
 80088ea:	6803      	ldr	r3, [r0, #0]
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	b1b3      	cbz	r3, 8008920 <rcl_publish+0x38>
 80088f2:	4616      	mov	r6, r2
 80088f4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80088f8:	b192      	cbz	r2, 8008920 <rcl_publish+0x38>
 80088fa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80088fe:	460d      	mov	r5, r1
 8008900:	f007 f94a 	bl	800fb98 <rcl_context_is_valid>
 8008904:	b160      	cbz	r0, 8008920 <rcl_publish+0x38>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800890c:	b140      	cbz	r0, 8008920 <rcl_publish+0x38>
 800890e:	b155      	cbz	r5, 8008926 <rcl_publish+0x3e>
 8008910:	4632      	mov	r2, r6
 8008912:	4629      	mov	r1, r5
 8008914:	f001 fc28 	bl	800a168 <rmw_publish>
 8008918:	3800      	subs	r0, #0
 800891a:	bf18      	it	ne
 800891c:	2001      	movne	r0, #1
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	200b      	movs	r0, #11
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800892e:	4770      	bx	lr

08008930 <rcl_publisher_is_valid>:
 8008930:	b1a0      	cbz	r0, 800895c <rcl_publisher_is_valid+0x2c>
 8008932:	6803      	ldr	r3, [r0, #0]
 8008934:	b510      	push	{r4, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	b173      	cbz	r3, 8008958 <rcl_publisher_is_valid+0x28>
 800893a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800893e:	b15a      	cbz	r2, 8008958 <rcl_publisher_is_valid+0x28>
 8008940:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008944:	f007 f928 	bl	800fb98 <rcl_context_is_valid>
 8008948:	b130      	cbz	r0, 8008958 <rcl_publisher_is_valid+0x28>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008950:	3800      	subs	r0, #0
 8008952:	bf18      	it	ne
 8008954:	2001      	movne	r0, #1
 8008956:	bd10      	pop	{r4, pc}
 8008958:	2000      	movs	r0, #0
 800895a:	bd10      	pop	{r4, pc}
 800895c:	2000      	movs	r0, #0
 800895e:	4770      	bx	lr

08008960 <rcl_publisher_is_valid_except_context>:
 8008960:	b130      	cbz	r0, 8008970 <rcl_publisher_is_valid_except_context+0x10>
 8008962:	6800      	ldr	r0, [r0, #0]
 8008964:	b120      	cbz	r0, 8008970 <rcl_publisher_is_valid_except_context+0x10>
 8008966:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800896a:	3800      	subs	r0, #0
 800896c:	bf18      	it	ne
 800896e:	2001      	movne	r0, #1
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <_rclc_check_for_new_data>:
 8008974:	2800      	cmp	r0, #0
 8008976:	d046      	beq.n	8008a06 <_rclc_check_for_new_data+0x92>
 8008978:	b510      	push	{r4, lr}
 800897a:	7802      	ldrb	r2, [r0, #0]
 800897c:	b084      	sub	sp, #16
 800897e:	4603      	mov	r3, r0
 8008980:	2a0a      	cmp	r2, #10
 8008982:	d842      	bhi.n	8008a0a <_rclc_check_for_new_data+0x96>
 8008984:	e8df f002 	tbb	[pc, r2]
 8008988:	14181212 	.word	0x14181212
 800898c:	06060614 	.word	0x06060614
 8008990:	2e1a      	.short	0x2e1a
 8008992:	16          	.byte	0x16
 8008993:	00          	.byte	0x00
 8008994:	6a0a      	ldr	r2, [r1, #32]
 8008996:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008998:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800899c:	2000      	movs	r0, #0
 800899e:	1a12      	subs	r2, r2, r0
 80089a0:	bf18      	it	ne
 80089a2:	2201      	movne	r2, #1
 80089a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80089a8:	b004      	add	sp, #16
 80089aa:	bd10      	pop	{r4, pc}
 80089ac:	680a      	ldr	r2, [r1, #0]
 80089ae:	e7f2      	b.n	8008996 <_rclc_check_for_new_data+0x22>
 80089b0:	698a      	ldr	r2, [r1, #24]
 80089b2:	e7f0      	b.n	8008996 <_rclc_check_for_new_data+0x22>
 80089b4:	688a      	ldr	r2, [r1, #8]
 80089b6:	e7ee      	b.n	8008996 <_rclc_check_for_new_data+0x22>
 80089b8:	690a      	ldr	r2, [r1, #16]
 80089ba:	e7ec      	b.n	8008996 <_rclc_check_for_new_data+0x22>
 80089bc:	685c      	ldr	r4, [r3, #4]
 80089be:	4608      	mov	r0, r1
 80089c0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80089c4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80089c8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80089cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80089d6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80089da:	f104 0110 	add.w	r1, r4, #16
 80089de:	f009 f967 	bl	8011cb0 <rcl_action_client_wait_set_get_entities_ready>
 80089e2:	e7e1      	b.n	80089a8 <_rclc_check_for_new_data+0x34>
 80089e4:	685c      	ldr	r4, [r3, #4]
 80089e6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80089ea:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80089ee:	e9cd 3200 	strd	r3, r2, [sp]
 80089f2:	4608      	mov	r0, r1
 80089f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80089f8:	f104 0220 	add.w	r2, r4, #32
 80089fc:	f104 0110 	add.w	r1, r4, #16
 8008a00:	f009 fb6e 	bl	80120e0 <rcl_action_server_wait_set_get_entities_ready>
 8008a04:	e7d0      	b.n	80089a8 <_rclc_check_for_new_data+0x34>
 8008a06:	200b      	movs	r0, #11
 8008a08:	4770      	bx	lr
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	e7cc      	b.n	80089a8 <_rclc_check_for_new_data+0x34>
 8008a0e:	bf00      	nop

08008a10 <_rclc_take_new_data>:
 8008a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a12:	b09b      	sub	sp, #108	@ 0x6c
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f000 8088 	beq.w	8008b2a <_rclc_take_new_data+0x11a>
 8008a1a:	7803      	ldrb	r3, [r0, #0]
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	2b0a      	cmp	r3, #10
 8008a20:	f200 8167 	bhi.w	8008cf2 <_rclc_take_new_data+0x2e2>
 8008a24:	e8df f003 	tbb	[pc, r3]
 8008a28:	44152d2d 	.word	0x44152d2d
 8008a2c:	19191944 	.word	0x19191944
 8008a30:	065a      	.short	0x065a
 8008a32:	15          	.byte	0x15
 8008a33:	00          	.byte	0x00
 8008a34:	6840      	ldr	r0, [r0, #4]
 8008a36:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 80b2 	bne.w	8008ba4 <_rclc_take_new_data+0x194>
 8008a40:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 80e4 	bne.w	8008c12 <_rclc_take_new_data+0x202>
 8008a4a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d16f      	bne.n	8008b32 <_rclc_take_new_data+0x122>
 8008a52:	2500      	movs	r5, #0
 8008a54:	4628      	mov	r0, r5
 8008a56:	b01b      	add	sp, #108	@ 0x6c
 8008a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a5a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008a5c:	6a0b      	ldr	r3, [r1, #32]
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f5      	beq.n	8008a52 <_rclc_take_new_data+0x42>
 8008a66:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8008a6a:	f104 0110 	add.w	r1, r4, #16
 8008a6e:	f007 fc5b 	bl	8010328 <rcl_take_request>
 8008a72:	4605      	mov	r5, r0
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d0ec      	beq.n	8008a52 <_rclc_take_new_data+0x42>
 8008a78:	f240 2359 	movw	r3, #601	@ 0x259
 8008a7c:	4298      	cmp	r0, r3
 8008a7e:	d013      	beq.n	8008aa8 <_rclc_take_new_data+0x98>
 8008a80:	e029      	b.n	8008ad6 <_rclc_take_new_data+0xc6>
 8008a82:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008a84:	680b      	ldr	r3, [r1, #0]
 8008a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0e1      	beq.n	8008a52 <_rclc_take_new_data+0x42>
 8008a8e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8008a92:	2300      	movs	r3, #0
 8008a94:	aa0a      	add	r2, sp, #40	@ 0x28
 8008a96:	f007 fd85 	bl	80105a4 <rcl_take>
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0d9      	beq.n	8008a54 <_rclc_take_new_data+0x44>
 8008aa0:	f240 1391 	movw	r3, #401	@ 0x191
 8008aa4:	4298      	cmp	r0, r3
 8008aa6:	d116      	bne.n	8008ad6 <_rclc_take_new_data+0xc6>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8008aae:	e7d1      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008ab0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008ab2:	698b      	ldr	r3, [r1, #24]
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0ca      	beq.n	8008a52 <_rclc_take_new_data+0x42>
 8008abc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8008ac0:	f104 0110 	add.w	r1, r4, #16
 8008ac4:	f006 fff8 	bl	800fab8 <rcl_take_response>
 8008ac8:	4605      	mov	r5, r0
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0c1      	beq.n	8008a52 <_rclc_take_new_data+0x42>
 8008ace:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	d0be      	beq.n	8008a54 <_rclc_take_new_data+0x44>
 8008ad6:	f000 ff0b 	bl	80098f0 <rcutils_reset_error>
 8008ada:	e7bb      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008adc:	6840      	ldr	r0, [r0, #4]
 8008ade:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d17d      	bne.n	8008be2 <_rclc_take_new_data+0x1d2>
 8008ae6:	69c3      	ldr	r3, [r0, #28]
 8008ae8:	b11b      	cbz	r3, 8008af2 <_rclc_take_new_data+0xe2>
 8008aea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d144      	bne.n	8008b7c <_rclc_take_new_data+0x16c>
 8008af2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f040 80ac 	bne.w	8008c54 <_rclc_take_new_data+0x244>
 8008afc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d0a6      	beq.n	8008a52 <_rclc_take_new_data+0x42>
 8008b04:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008b06:	a90a      	add	r1, sp, #40	@ 0x28
 8008b08:	3010      	adds	r0, #16
 8008b0a:	f008 ffa9 	bl	8011a60 <rcl_action_take_result_response>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d1e0      	bne.n	8008ad6 <_rclc_take_new_data+0xc6>
 8008b14:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b18:	6860      	ldr	r0, [r4, #4]
 8008b1a:	f009 fc05 	bl	8012328 <rclc_action_find_handle_by_result_request_sequence_number>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d098      	beq.n	8008a54 <_rclc_take_new_data+0x44>
 8008b22:	2301      	movs	r3, #1
 8008b24:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8008b28:	e794      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008b2a:	250b      	movs	r5, #11
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	b01b      	add	sp, #108	@ 0x6c
 8008b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b32:	ae04      	add	r6, sp, #16
 8008b34:	aa0a      	add	r2, sp, #40	@ 0x28
 8008b36:	3010      	adds	r0, #16
 8008b38:	4631      	mov	r1, r6
 8008b3a:	f009 fa05 	bl	8011f48 <rcl_action_take_cancel_request>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d1c8      	bne.n	8008ad6 <_rclc_take_new_data+0xc6>
 8008b44:	6860      	ldr	r0, [r4, #4]
 8008b46:	a90a      	add	r1, sp, #40	@ 0x28
 8008b48:	f009 fbac 	bl	80122a4 <rclc_action_find_goal_handle_by_uuid>
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	f000 80bb 	beq.w	8008cca <_rclc_take_new_data+0x2ba>
 8008b54:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8008b58:	2101      	movs	r1, #1
 8008b5a:	f009 fb2d 	bl	80121b8 <rcl_action_transition_goal_state>
 8008b5e:	2803      	cmp	r0, #3
 8008b60:	4684      	mov	ip, r0
 8008b62:	f040 80a7 	bne.w	8008cb4 <_rclc_take_new_data+0x2a4>
 8008b66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008b68:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8008b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b6e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008b72:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b76:	f887 c008 	strb.w	ip, [r7, #8]
 8008b7a:	e76b      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008b7c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008b7e:	3010      	adds	r0, #16
 8008b80:	f008 ffee 	bl	8011b60 <rcl_action_take_feedback>
 8008b84:	4605      	mov	r5, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d1a5      	bne.n	8008ad6 <_rclc_take_new_data+0xc6>
 8008b8a:	6860      	ldr	r0, [r4, #4]
 8008b8c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008b8e:	f009 fb89 	bl	80122a4 <rclc_action_find_goal_handle_by_uuid>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f000 80a3 	beq.w	8008ce0 <_rclc_take_new_data+0x2d0>
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	6860      	ldr	r0, [r4, #4]
 8008b9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8008ba2:	e7a6      	b.n	8008af2 <_rclc_take_new_data+0xe2>
 8008ba4:	f009 fb58 	bl	8012258 <rclc_action_take_goal_handle>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	6860      	ldr	r0, [r4, #4]
 8008bac:	2e00      	cmp	r6, #0
 8008bae:	f43f af47 	beq.w	8008a40 <_rclc_take_new_data+0x30>
 8008bb2:	6070      	str	r0, [r6, #4]
 8008bb4:	69f2      	ldr	r2, [r6, #28]
 8008bb6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8008bba:	3010      	adds	r0, #16
 8008bbc:	f009 f90c 	bl	8011dd8 <rcl_action_take_goal_request>
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f040 808e 	bne.w	8008ce4 <_rclc_take_new_data+0x2d4>
 8008bc8:	69f7      	ldr	r7, [r6, #28]
 8008bca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008bcc:	7235      	strb	r5, [r6, #8]
 8008bce:	f8c6 0009 	str.w	r0, [r6, #9]
 8008bd2:	f8c6 100d 	str.w	r1, [r6, #13]
 8008bd6:	6860      	ldr	r0, [r4, #4]
 8008bd8:	f8c6 2011 	str.w	r2, [r6, #17]
 8008bdc:	f8c6 3015 	str.w	r3, [r6, #21]
 8008be0:	e72e      	b.n	8008a40 <_rclc_take_new_data+0x30>
 8008be2:	aa04      	add	r2, sp, #16
 8008be4:	a90a      	add	r1, sp, #40	@ 0x28
 8008be6:	3010      	adds	r0, #16
 8008be8:	f008 fec2 	bl	8011970 <rcl_action_take_goal_response>
 8008bec:	4605      	mov	r5, r0
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f47f af71 	bne.w	8008ad6 <_rclc_take_new_data+0xc6>
 8008bf4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008bf8:	6860      	ldr	r0, [r4, #4]
 8008bfa:	f009 fb83 	bl	8012304 <rclc_action_find_handle_by_goal_request_sequence_number>
 8008bfe:	b130      	cbz	r0, 8008c0e <_rclc_take_new_data+0x1fe>
 8008c00:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008c04:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f880 2020 	strb.w	r2, [r0, #32]
 8008c0e:	6860      	ldr	r0, [r4, #4]
 8008c10:	e769      	b.n	8008ae6 <_rclc_take_new_data+0xd6>
 8008c12:	aa04      	add	r2, sp, #16
 8008c14:	3010      	adds	r0, #16
 8008c16:	a90a      	add	r1, sp, #40	@ 0x28
 8008c18:	f009 f956 	bl	8011ec8 <rcl_action_take_result_request>
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f47f af59 	bne.w	8008ad6 <_rclc_take_new_data+0xc6>
 8008c24:	6860      	ldr	r0, [r4, #4]
 8008c26:	a904      	add	r1, sp, #16
 8008c28:	f009 fb3c 	bl	80122a4 <rclc_action_find_goal_handle_by_uuid>
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	b160      	cbz	r0, 8008c4a <_rclc_take_new_data+0x23a>
 8008c30:	ad0a      	add	r5, sp, #40	@ 0x28
 8008c32:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8008c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008c3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c3e:	f04f 0c02 	mov.w	ip, #2
 8008c42:	e886 0003 	stmia.w	r6, {r0, r1}
 8008c46:	f887 c008 	strb.w	ip, [r7, #8]
 8008c4a:	6860      	ldr	r0, [r4, #4]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8008c52:	e6fa      	b.n	8008a4a <_rclc_take_new_data+0x3a>
 8008c54:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8008c58:	a90a      	add	r1, sp, #40	@ 0x28
 8008c5a:	3010      	adds	r0, #16
 8008c5c:	f008 ff40 	bl	8011ae0 <rcl_action_take_cancel_response>
 8008c60:	4605      	mov	r5, r0
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f47f af37 	bne.w	8008ad6 <_rclc_take_new_data+0xc6>
 8008c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c6c:	6860      	ldr	r0, [r4, #4]
 8008c6e:	f009 fb6d 	bl	801234c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8008c72:	4606      	mov	r6, r0
 8008c74:	6860      	ldr	r0, [r4, #4]
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	f43f af40 	beq.w	8008afc <_rclc_take_new_data+0xec>
 8008c7c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008c7e:	2701      	movs	r7, #1
 8008c80:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f43f af3a 	beq.w	8008afc <_rclc_take_new_data+0xec>
 8008c88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c8a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008c8e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008c92:	f009 fb07 	bl	80122a4 <rclc_action_find_goal_handle_by_uuid>
 8008c96:	b138      	cbz	r0, 8008ca8 <_rclc_take_new_data+0x298>
 8008c98:	6860      	ldr	r0, [r4, #4]
 8008c9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008c9c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	42ab      	cmp	r3, r5
 8008ca4:	d8f0      	bhi.n	8008c88 <_rclc_take_new_data+0x278>
 8008ca6:	e729      	b.n	8008afc <_rclc_take_new_data+0xec>
 8008ca8:	6860      	ldr	r0, [r4, #4]
 8008caa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008cac:	3501      	adds	r5, #1
 8008cae:	42ab      	cmp	r3, r5
 8008cb0:	d8ea      	bhi.n	8008c88 <_rclc_take_new_data+0x278>
 8008cb2:	e723      	b.n	8008afc <_rclc_take_new_data+0xec>
 8008cb4:	ab06      	add	r3, sp, #24
 8008cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cb8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008cbc:	2103      	movs	r1, #3
 8008cbe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008cc2:	6860      	ldr	r0, [r4, #4]
 8008cc4:	f009 fbb8 	bl	8012438 <rclc_action_server_goal_cancel_reject>
 8008cc8:	e6c4      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008cca:	ab06      	add	r3, sp, #24
 8008ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008cd2:	2102      	movs	r1, #2
 8008cd4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008cd8:	6860      	ldr	r0, [r4, #4]
 8008cda:	f009 fbad 	bl	8012438 <rclc_action_server_goal_cancel_reject>
 8008cde:	e6b9      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008ce0:	6860      	ldr	r0, [r4, #4]
 8008ce2:	e706      	b.n	8008af2 <_rclc_take_new_data+0xe2>
 8008ce4:	6860      	ldr	r0, [r4, #4]
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	f009 fac6 	bl	8012278 <rclc_action_remove_used_goal_handle>
 8008cec:	f000 fe00 	bl	80098f0 <rcutils_reset_error>
 8008cf0:	e6b0      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008cf2:	2501      	movs	r5, #1
 8008cf4:	e6ae      	b.n	8008a54 <_rclc_take_new_data+0x44>
 8008cf6:	bf00      	nop

08008cf8 <_rclc_execute.part.0>:
 8008cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfa:	7803      	ldrb	r3, [r0, #0]
 8008cfc:	b087      	sub	sp, #28
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2b0a      	cmp	r3, #10
 8008d02:	f200 8136 	bhi.w	8008f72 <_rclc_execute.part.0+0x27a>
 8008d06:	e8df f003 	tbb	[pc, r3]
 8008d0a:	435e      	.short	0x435e
 8008d0c:	06a1664f 	.word	0x06a1664f
 8008d10:	6c1e0606 	.word	0x6c1e0606
 8008d14:	59          	.byte	0x59
 8008d15:	00          	.byte	0x00
 8008d16:	2b06      	cmp	r3, #6
 8008d18:	f000 8122 	beq.w	8008f60 <_rclc_execute.part.0+0x268>
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008d20:	f040 8118 	bne.w	8008f54 <_rclc_execute.part.0+0x25c>
 8008d24:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8008d28:	6880      	ldr	r0, [r0, #8]
 8008d2a:	4798      	blx	r3
 8008d2c:	f104 0110 	add.w	r1, r4, #16
 8008d30:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008d32:	6860      	ldr	r0, [r4, #4]
 8008d34:	f007 fb38 	bl	80103a8 <rcl_send_response>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d033      	beq.n	8008da4 <_rclc_execute.part.0+0xac>
 8008d3c:	9005      	str	r0, [sp, #20]
 8008d3e:	f000 fdd7 	bl	80098f0 <rcutils_reset_error>
 8008d42:	9805      	ldr	r0, [sp, #20]
 8008d44:	e02e      	b.n	8008da4 <_rclc_execute.part.0+0xac>
 8008d46:	6840      	ldr	r0, [r0, #4]
 8008d48:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8086 	beq.w	8008e5e <_rclc_execute.part.0+0x166>
 8008d52:	2600      	movs	r6, #0
 8008d54:	2701      	movs	r7, #1
 8008d56:	e004      	b.n	8008d62 <_rclc_execute.part.0+0x6a>
 8008d58:	f009 fa58 	bl	801220c <rclc_action_send_result_request>
 8008d5c:	b998      	cbnz	r0, 8008d86 <_rclc_execute.part.0+0x8e>
 8008d5e:	722f      	strb	r7, [r5, #8]
 8008d60:	6860      	ldr	r0, [r4, #4]
 8008d62:	f009 fb05 	bl	8012370 <rclc_action_find_first_handle_with_goal_response>
 8008d66:	4605      	mov	r5, r0
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d077      	beq.n	8008e5c <_rclc_execute.part.0+0x164>
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8008d76:	f885 6020 	strb.w	r6, [r5, #32]
 8008d7a:	4798      	blx	r3
 8008d7c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8008d80:	4628      	mov	r0, r5
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e8      	bne.n	8008d58 <_rclc_execute.part.0+0x60>
 8008d86:	6860      	ldr	r0, [r4, #4]
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f009 fa75 	bl	8012278 <rclc_action_remove_used_goal_handle>
 8008d8e:	e7e7      	b.n	8008d60 <_rclc_execute.part.0+0x68>
 8008d90:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8008d94:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	f000 80c9 	beq.w	8008f30 <_rclc_execute.part.0+0x238>
 8008d9e:	6880      	ldr	r0, [r0, #8]
 8008da0:	4798      	blx	r3
 8008da2:	2000      	movs	r0, #0
 8008da4:	b007      	add	sp, #28
 8008da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da8:	6840      	ldr	r0, [r0, #4]
 8008daa:	f007 ff0b 	bl	8010bc4 <rcl_timer_call>
 8008dae:	f240 3321 	movw	r3, #801	@ 0x321
 8008db2:	4298      	cmp	r0, r3
 8008db4:	d004      	beq.n	8008dc0 <_rclc_execute.part.0+0xc8>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d0f4      	beq.n	8008da4 <_rclc_execute.part.0+0xac>
 8008dba:	e7bf      	b.n	8008d3c <_rclc_execute.part.0+0x44>
 8008dbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008dbe:	4798      	blx	r3
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	b007      	add	sp, #28
 8008dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8008dca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008dcc:	b925      	cbnz	r5, 8008dd8 <_rclc_execute.part.0+0xe0>
 8008dce:	4628      	mov	r0, r5
 8008dd0:	4798      	blx	r3
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e7e6      	b.n	8008da4 <_rclc_execute.part.0+0xac>
 8008dd6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008dd8:	68a0      	ldr	r0, [r4, #8]
 8008dda:	4798      	blx	r3
 8008ddc:	2000      	movs	r0, #0
 8008dde:	b007      	add	sp, #28
 8008de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de2:	6840      	ldr	r0, [r0, #4]
 8008de4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008de8:	bb3b      	cbnz	r3, 8008e3a <_rclc_execute.part.0+0x142>
 8008dea:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d07b      	beq.n	8008eea <_rclc_execute.part.0+0x1f2>
 8008df2:	f640 0634 	movw	r6, #2100	@ 0x834
 8008df6:	2701      	movs	r7, #1
 8008df8:	e007      	b.n	8008e0a <_rclc_execute.part.0+0x112>
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f009 fad0 	bl	80123a0 <rclc_action_server_response_goal_request>
 8008e00:	6860      	ldr	r0, [r4, #4]
 8008e02:	4629      	mov	r1, r5
 8008e04:	f009 fa38 	bl	8012278 <rclc_action_remove_used_goal_handle>
 8008e08:	6860      	ldr	r0, [r4, #4]
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	f009 fa62 	bl	80122d4 <rclc_action_find_first_handle_by_status>
 8008e10:	4605      	mov	r5, r0
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d066      	beq.n	8008ee4 <_rclc_execute.part.0+0x1ec>
 8008e16:	6863      	ldr	r3, [r4, #4]
 8008e18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	4798      	blx	r3
 8008e1e:	42b0      	cmp	r0, r6
 8008e20:	f04f 0100 	mov.w	r1, #0
 8008e24:	d1e9      	bne.n	8008dfa <_rclc_execute.part.0+0x102>
 8008e26:	2101      	movs	r1, #1
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f009 fab9 	bl	80123a0 <rclc_action_server_response_goal_request>
 8008e2e:	722f      	strb	r7, [r5, #8]
 8008e30:	e7ea      	b.n	8008e08 <_rclc_execute.part.0+0x110>
 8008e32:	6848      	ldr	r0, [r1, #4]
 8008e34:	f009 fa20 	bl	8012278 <rclc_action_remove_used_goal_handle>
 8008e38:	6860      	ldr	r0, [r4, #4]
 8008e3a:	f009 fa57 	bl	80122ec <rclc_action_find_first_terminated_handle>
 8008e3e:	4601      	mov	r1, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d1f6      	bne.n	8008e32 <_rclc_execute.part.0+0x13a>
 8008e44:	6860      	ldr	r0, [r4, #4]
 8008e46:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8008e4a:	e7ce      	b.n	8008dea <_rclc_execute.part.0+0xf2>
 8008e4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008e4e:	6880      	ldr	r0, [r0, #8]
 8008e50:	f104 0110 	add.w	r1, r4, #16
 8008e54:	4798      	blx	r3
 8008e56:	2000      	movs	r0, #0
 8008e58:	b007      	add	sp, #28
 8008e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5c:	6860      	ldr	r0, [r4, #4]
 8008e5e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008e62:	b18b      	cbz	r3, 8008e88 <_rclc_execute.part.0+0x190>
 8008e64:	68c5      	ldr	r5, [r0, #12]
 8008e66:	b32d      	cbz	r5, 8008eb4 <_rclc_execute.part.0+0x1bc>
 8008e68:	2600      	movs	r6, #0
 8008e6a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8008e6e:	b143      	cbz	r3, 8008e82 <_rclc_execute.part.0+0x18a>
 8008e70:	69c3      	ldr	r3, [r0, #28]
 8008e72:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8008e76:	b123      	cbz	r3, 8008e82 <_rclc_execute.part.0+0x18a>
 8008e78:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008e7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	4798      	blx	r3
 8008e80:	6860      	ldr	r0, [r4, #4]
 8008e82:	682d      	ldr	r5, [r5, #0]
 8008e84:	2d00      	cmp	r5, #0
 8008e86:	d1f0      	bne.n	8008e6a <_rclc_execute.part.0+0x172>
 8008e88:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8008e8c:	b193      	cbz	r3, 8008eb4 <_rclc_execute.part.0+0x1bc>
 8008e8e:	68c5      	ldr	r5, [r0, #12]
 8008e90:	b185      	cbz	r5, 8008eb4 <_rclc_execute.part.0+0x1bc>
 8008e92:	2600      	movs	r6, #0
 8008e94:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8008e98:	b14b      	cbz	r3, 8008eae <_rclc_execute.part.0+0x1b6>
 8008e9a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008e9c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8008ea0:	b12b      	cbz	r3, 8008eae <_rclc_execute.part.0+0x1b6>
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8008ea8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008eaa:	4798      	blx	r3
 8008eac:	6860      	ldr	r0, [r4, #4]
 8008eae:	682d      	ldr	r5, [r5, #0]
 8008eb0:	2d00      	cmp	r5, #0
 8008eb2:	d1ef      	bne.n	8008e94 <_rclc_execute.part.0+0x19c>
 8008eb4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d081      	beq.n	8008dc0 <_rclc_execute.part.0+0xc8>
 8008ebc:	2700      	movs	r7, #0
 8008ebe:	e00b      	b.n	8008ed8 <_rclc_execute.part.0+0x1e0>
 8008ec0:	6863      	ldr	r3, [r4, #4]
 8008ec2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008ec4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ec6:	6a1e      	ldr	r6, [r3, #32]
 8008ec8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8008ecc:	47b0      	blx	r6
 8008ece:	6860      	ldr	r0, [r4, #4]
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f009 f9d1 	bl	8012278 <rclc_action_remove_used_goal_handle>
 8008ed6:	6860      	ldr	r0, [r4, #4]
 8008ed8:	f009 fa56 	bl	8012388 <rclc_action_find_first_handle_with_result_response>
 8008edc:	4605      	mov	r5, r0
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d1ee      	bne.n	8008ec0 <_rclc_execute.part.0+0x1c8>
 8008ee2:	e76d      	b.n	8008dc0 <_rclc_execute.part.0+0xc8>
 8008ee4:	6860      	ldr	r0, [r4, #4]
 8008ee6:	f880 5020 	strb.w	r5, [r0, #32]
 8008eea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f43f af66 	beq.w	8008dc0 <_rclc_execute.part.0+0xc8>
 8008ef4:	68c5      	ldr	r5, [r0, #12]
 8008ef6:	b1b5      	cbz	r5, 8008f26 <_rclc_execute.part.0+0x22e>
 8008ef8:	2602      	movs	r6, #2
 8008efa:	e001      	b.n	8008f00 <_rclc_execute.part.0+0x208>
 8008efc:	682d      	ldr	r5, [r5, #0]
 8008efe:	b195      	cbz	r5, 8008f26 <_rclc_execute.part.0+0x22e>
 8008f00:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d1f9      	bne.n	8008efc <_rclc_execute.part.0+0x204>
 8008f08:	69c3      	ldr	r3, [r0, #28]
 8008f0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	4798      	blx	r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8008f16:	4628      	mov	r0, r5
 8008f18:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8008f1c:	b163      	cbz	r3, 8008f38 <_rclc_execute.part.0+0x240>
 8008f1e:	f009 fa5f 	bl	80123e0 <rclc_action_server_goal_cancel_accept>
 8008f22:	6860      	ldr	r0, [r4, #4]
 8008f24:	e7ea      	b.n	8008efc <_rclc_execute.part.0+0x204>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	e739      	b.n	8008da4 <_rclc_execute.part.0+0xac>
 8008f30:	4628      	mov	r0, r5
 8008f32:	4798      	blx	r3
 8008f34:	4628      	mov	r0, r5
 8008f36:	e735      	b.n	8008da4 <_rclc_execute.part.0+0xac>
 8008f38:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8008f3a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008f3e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8008f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f46:	6860      	ldr	r0, [r4, #4]
 8008f48:	2101      	movs	r1, #1
 8008f4a:	f009 fa75 	bl	8012438 <rclc_action_server_goal_cancel_reject>
 8008f4e:	722e      	strb	r6, [r5, #8]
 8008f50:	6860      	ldr	r0, [r4, #4]
 8008f52:	e7d3      	b.n	8008efc <_rclc_execute.part.0+0x204>
 8008f54:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008f56:	6880      	ldr	r0, [r0, #8]
 8008f58:	4798      	blx	r3
 8008f5a:	f104 0110 	add.w	r1, r4, #16
 8008f5e:	e6e7      	b.n	8008d30 <_rclc_execute.part.0+0x38>
 8008f60:	f100 0110 	add.w	r1, r0, #16
 8008f64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008f66:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8008f68:	6880      	ldr	r0, [r0, #8]
 8008f6a:	9105      	str	r1, [sp, #20]
 8008f6c:	4798      	blx	r3
 8008f6e:	9905      	ldr	r1, [sp, #20]
 8008f70:	e6de      	b.n	8008d30 <_rclc_execute.part.0+0x38>
 8008f72:	2001      	movs	r0, #1
 8008f74:	e716      	b.n	8008da4 <_rclc_execute.part.0+0xac>
 8008f76:	bf00      	nop

08008f78 <rclc_executor_trigger_any>:
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d03f      	beq.n	8008ffc <rclc_executor_trigger_any+0x84>
 8008f7c:	2900      	cmp	r1, #0
 8008f7e:	d03e      	beq.n	8008ffe <rclc_executor_trigger_any+0x86>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8008f86:	2200      	movs	r2, #0
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d037      	beq.n	8008ffc <rclc_executor_trigger_any+0x84>
 8008f8c:	b430      	push	{r4, r5}
 8008f8e:	f893 c000 	ldrb.w	ip, [r3]
 8008f92:	f1bc 0f08 	cmp.w	ip, #8
 8008f96:	d11e      	bne.n	8008fd6 <rclc_executor_trigger_any+0x5e>
 8008f98:	685c      	ldr	r4, [r3, #4]
 8008f9a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8008f9c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8008fa0:	d105      	bne.n	8008fae <rclc_executor_trigger_any+0x36>
 8008fa2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8008fa6:	b910      	cbnz	r0, 8008fae <rclc_executor_trigger_any+0x36>
 8008fa8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8008fac:	b128      	cbz	r0, 8008fba <rclc_executor_trigger_any+0x42>
 8008fae:	bc30      	pop	{r4, r5}
 8008fb0:	4770      	bx	lr
 8008fb2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d1f9      	bne.n	8008fae <rclc_executor_trigger_any+0x36>
 8008fba:	3201      	adds	r2, #1
 8008fbc:	4291      	cmp	r1, r2
 8008fbe:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8008fc2:	d018      	beq.n	8008ff6 <rclc_executor_trigger_any+0x7e>
 8008fc4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d0f0      	beq.n	8008fae <rclc_executor_trigger_any+0x36>
 8008fcc:	f893 c000 	ldrb.w	ip, [r3]
 8008fd0:	f1bc 0f08 	cmp.w	ip, #8
 8008fd4:	d0e0      	beq.n	8008f98 <rclc_executor_trigger_any+0x20>
 8008fd6:	f1bc 0f09 	cmp.w	ip, #9
 8008fda:	d1ea      	bne.n	8008fb2 <rclc_executor_trigger_any+0x3a>
 8008fdc:	685c      	ldr	r4, [r3, #4]
 8008fde:	6a25      	ldr	r5, [r4, #32]
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	d1e4      	bne.n	8008fae <rclc_executor_trigger_any+0x36>
 8008fe4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d1e0      	bne.n	8008fae <rclc_executor_trigger_any+0x36>
 8008fec:	3201      	adds	r2, #1
 8008fee:	4291      	cmp	r1, r2
 8008ff0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8008ff4:	d1e6      	bne.n	8008fc4 <rclc_executor_trigger_any+0x4c>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	bc30      	pop	{r4, r5}
 8008ffa:	4770      	bx	lr
 8008ffc:	4770      	bx	lr
 8008ffe:	4608      	mov	r0, r1
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop

08009004 <rclc_executor_get_zero_initialized_executor>:
 8009004:	b510      	push	{r4, lr}
 8009006:	4903      	ldr	r1, [pc, #12]	@ (8009014 <rclc_executor_get_zero_initialized_executor+0x10>)
 8009008:	4604      	mov	r4, r0
 800900a:	2288      	movs	r2, #136	@ 0x88
 800900c:	f00c fc4b 	bl	80158a6 <memcpy>
 8009010:	4620      	mov	r0, r4
 8009012:	bd10      	pop	{r4, pc}
 8009014:	080167c0 	.word	0x080167c0

08009018 <rclc_executor_init>:
 8009018:	2800      	cmp	r0, #0
 800901a:	d05f      	beq.n	80090dc <rclc_executor_init+0xc4>
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	b0b0      	sub	sp, #192	@ 0xc0
 8009024:	2900      	cmp	r1, #0
 8009026:	d051      	beq.n	80090cc <rclc_executor_init+0xb4>
 8009028:	4605      	mov	r5, r0
 800902a:	4618      	mov	r0, r3
 800902c:	4616      	mov	r6, r2
 800902e:	461f      	mov	r7, r3
 8009030:	f000 fc38 	bl	80098a4 <rcutils_allocator_is_valid>
 8009034:	2800      	cmp	r0, #0
 8009036:	d049      	beq.n	80090cc <rclc_executor_init+0xb4>
 8009038:	2e00      	cmp	r6, #0
 800903a:	d047      	beq.n	80090cc <rclc_executor_init+0xb4>
 800903c:	492c      	ldr	r1, [pc, #176]	@ (80090f0 <rclc_executor_init+0xd8>)
 800903e:	2288      	movs	r2, #136	@ 0x88
 8009040:	a80e      	add	r0, sp, #56	@ 0x38
 8009042:	f00c fc30 	bl	80158a6 <memcpy>
 8009046:	a90e      	add	r1, sp, #56	@ 0x38
 8009048:	2288      	movs	r2, #136	@ 0x88
 800904a:	4628      	mov	r0, r5
 800904c:	f00c fc2b 	bl	80158a6 <memcpy>
 8009050:	602c      	str	r4, [r5, #0]
 8009052:	4668      	mov	r0, sp
 8009054:	60ae      	str	r6, [r5, #8]
 8009056:	466c      	mov	r4, sp
 8009058:	f007 febc 	bl	8010dd4 <rcl_get_zero_initialized_wait_set>
 800905c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800905e:	f105 0c14 	add.w	ip, r5, #20
 8009062:	f8d7 8000 	ldr.w	r8, [r7]
 8009066:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800906a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800906c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009072:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009076:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80090e8 <rclc_executor_init+0xd0>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	f8cc 3000 	str.w	r3, [ip]
 8009080:	6939      	ldr	r1, [r7, #16]
 8009082:	612f      	str	r7, [r5, #16]
 8009084:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009088:	01b0      	lsls	r0, r6, #6
 800908a:	47c0      	blx	r8
 800908c:	6068      	str	r0, [r5, #4]
 800908e:	b338      	cbz	r0, 80090e0 <rclc_executor_init+0xc8>
 8009090:	2400      	movs	r4, #0
 8009092:	e000      	b.n	8009096 <rclc_executor_init+0x7e>
 8009094:	6868      	ldr	r0, [r5, #4]
 8009096:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800909a:	4631      	mov	r1, r6
 800909c:	3401      	adds	r4, #1
 800909e:	f000 fa9f 	bl	80095e0 <rclc_executor_handle_init>
 80090a2:	42a6      	cmp	r6, r4
 80090a4:	d1f6      	bne.n	8009094 <rclc_executor_init+0x7c>
 80090a6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80090aa:	f000 fa8d 	bl	80095c8 <rclc_executor_handle_counters_zero_init>
 80090ae:	4a11      	ldr	r2, [pc, #68]	@ (80090f4 <rclc_executor_init+0xdc>)
 80090b0:	686b      	ldr	r3, [r5, #4]
 80090b2:	2000      	movs	r0, #0
 80090b4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 80090b8:	b163      	cbz	r3, 80090d4 <rclc_executor_init+0xbc>
 80090ba:	692b      	ldr	r3, [r5, #16]
 80090bc:	b153      	cbz	r3, 80090d4 <rclc_executor_init+0xbc>
 80090be:	68ab      	ldr	r3, [r5, #8]
 80090c0:	b143      	cbz	r3, 80090d4 <rclc_executor_init+0xbc>
 80090c2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 80090c6:	b030      	add	sp, #192	@ 0xc0
 80090c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090cc:	200b      	movs	r0, #11
 80090ce:	b030      	add	sp, #192	@ 0xc0
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	4618      	mov	r0, r3
 80090d6:	b030      	add	sp, #192	@ 0xc0
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090dc:	200b      	movs	r0, #11
 80090de:	4770      	bx	lr
 80090e0:	200a      	movs	r0, #10
 80090e2:	e7f4      	b.n	80090ce <rclc_executor_init+0xb6>
 80090e4:	f3af 8000 	nop.w
 80090e8:	3b9aca00 	.word	0x3b9aca00
 80090ec:	00000000 	.word	0x00000000
 80090f0:	080167c0 	.word	0x080167c0
 80090f4:	08008f79 	.word	0x08008f79

080090f8 <rclc_executor_add_subscription>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	f89d e018 	ldrb.w	lr, [sp, #24]
 80090fe:	b338      	cbz	r0, 8009150 <rclc_executor_add_subscription+0x58>
 8009100:	b331      	cbz	r1, 8009150 <rclc_executor_add_subscription+0x58>
 8009102:	b32a      	cbz	r2, 8009150 <rclc_executor_add_subscription+0x58>
 8009104:	b323      	cbz	r3, 8009150 <rclc_executor_add_subscription+0x58>
 8009106:	4604      	mov	r4, r0
 8009108:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800910c:	42a8      	cmp	r0, r5
 800910e:	d301      	bcc.n	8009114 <rclc_executor_add_subscription+0x1c>
 8009110:	2001      	movs	r0, #1
 8009112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009114:	6866      	ldr	r6, [r4, #4]
 8009116:	0187      	lsls	r7, r0, #6
 8009118:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800911c:	2500      	movs	r5, #0
 800911e:	55f5      	strb	r5, [r6, r7]
 8009120:	3001      	adds	r0, #1
 8009122:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009126:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800912a:	2301      	movs	r3, #1
 800912c:	f104 0514 	add.w	r5, r4, #20
 8009130:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009134:	f88c e001 	strb.w	lr, [ip, #1]
 8009138:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800913c:	60e0      	str	r0, [r4, #12]
 800913e:	4628      	mov	r0, r5
 8009140:	f007 fe5c 	bl	8010dfc <rcl_wait_set_is_valid>
 8009144:	b930      	cbnz	r0, 8009154 <rclc_executor_add_subscription+0x5c>
 8009146:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009148:	3301      	adds	r3, #1
 800914a:	2000      	movs	r0, #0
 800914c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009150:	200b      	movs	r0, #11
 8009152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009154:	4628      	mov	r0, r5
 8009156:	f007 fe57 	bl	8010e08 <rcl_wait_set_fini>
 800915a:	2800      	cmp	r0, #0
 800915c:	d0f3      	beq.n	8009146 <rclc_executor_add_subscription+0x4e>
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009160 <rclc_executor_add_timer>:
 8009160:	b300      	cbz	r0, 80091a4 <rclc_executor_add_timer+0x44>
 8009162:	b1f9      	cbz	r1, 80091a4 <rclc_executor_add_timer+0x44>
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800916a:	4293      	cmp	r3, r2
 800916c:	4604      	mov	r4, r0
 800916e:	d301      	bcc.n	8009174 <rclc_executor_add_timer+0x14>
 8009170:	2001      	movs	r0, #1
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	6840      	ldr	r0, [r0, #4]
 8009176:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800917a:	019d      	lsls	r5, r3, #6
 800917c:	6051      	str	r1, [r2, #4]
 800917e:	2102      	movs	r1, #2
 8009180:	5341      	strh	r1, [r0, r5]
 8009182:	3301      	adds	r3, #1
 8009184:	2000      	movs	r0, #0
 8009186:	2101      	movs	r1, #1
 8009188:	f104 0514 	add.w	r5, r4, #20
 800918c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800918e:	8711      	strh	r1, [r2, #56]	@ 0x38
 8009190:	4628      	mov	r0, r5
 8009192:	60e3      	str	r3, [r4, #12]
 8009194:	f007 fe32 	bl	8010dfc <rcl_wait_set_is_valid>
 8009198:	b930      	cbnz	r0, 80091a8 <rclc_executor_add_timer+0x48>
 800919a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800919c:	3301      	adds	r3, #1
 800919e:	2000      	movs	r0, #0
 80091a0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	200b      	movs	r0, #11
 80091a6:	4770      	bx	lr
 80091a8:	4628      	mov	r0, r5
 80091aa:	f007 fe2d 	bl	8010e08 <rcl_wait_set_fini>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d0f3      	beq.n	800919a <rclc_executor_add_timer+0x3a>
 80091b2:	bd38      	pop	{r3, r4, r5, pc}

080091b4 <rclc_executor_prepare>:
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d044      	beq.n	8009242 <rclc_executor_prepare+0x8e>
 80091b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ba:	f100 0514 	add.w	r5, r0, #20
 80091be:	b09b      	sub	sp, #108	@ 0x6c
 80091c0:	4604      	mov	r4, r0
 80091c2:	4628      	mov	r0, r5
 80091c4:	f007 fe1a 	bl	8010dfc <rcl_wait_set_is_valid>
 80091c8:	b110      	cbz	r0, 80091d0 <rclc_executor_prepare+0x1c>
 80091ca:	2000      	movs	r0, #0
 80091cc:	b01b      	add	sp, #108	@ 0x6c
 80091ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d0:	4628      	mov	r0, r5
 80091d2:	f007 fe19 	bl	8010e08 <rcl_wait_set_fini>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d130      	bne.n	800923c <rclc_executor_prepare+0x88>
 80091da:	a80c      	add	r0, sp, #48	@ 0x30
 80091dc:	f007 fdfa 	bl	8010dd4 <rcl_get_zero_initialized_wait_set>
 80091e0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80091e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80091e8:	46ae      	mov	lr, r5
 80091ea:	6927      	ldr	r7, [r4, #16]
 80091ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80091f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80091f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80091f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80091fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009200:	f8dc 3000 	ldr.w	r3, [ip]
 8009204:	f8ce 3000 	str.w	r3, [lr]
 8009208:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800920a:	ae04      	add	r6, sp, #16
 800920c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	6033      	str	r3, [r6, #0]
 8009214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009216:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009218:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800921c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009220:	e9cd 2100 	strd	r2, r1, [sp]
 8009224:	4628      	mov	r0, r5
 8009226:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009228:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800922a:	f008 f8eb 	bl	8011404 <rcl_wait_set_init>
 800922e:	2800      	cmp	r0, #0
 8009230:	d0cc      	beq.n	80091cc <rclc_executor_prepare+0x18>
 8009232:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009234:	f000 fb5c 	bl	80098f0 <rcutils_reset_error>
 8009238:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800923a:	e7c7      	b.n	80091cc <rclc_executor_prepare+0x18>
 800923c:	f000 fb58 	bl	80098f0 <rcutils_reset_error>
 8009240:	e7cb      	b.n	80091da <rclc_executor_prepare+0x26>
 8009242:	200b      	movs	r0, #11
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop

08009248 <rclc_executor_spin_some.part.0>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	f100 0614 	add.w	r6, r0, #20
 8009250:	b083      	sub	sp, #12
 8009252:	4691      	mov	r9, r2
 8009254:	4698      	mov	r8, r3
 8009256:	4605      	mov	r5, r0
 8009258:	f7ff ffac 	bl	80091b4 <rclc_executor_prepare>
 800925c:	4630      	mov	r0, r6
 800925e:	f007 fe9f 	bl	8010fa0 <rcl_wait_set_clear>
 8009262:	4607      	mov	r7, r0
 8009264:	2800      	cmp	r0, #0
 8009266:	f040 80ed 	bne.w	8009444 <rclc_executor_spin_some.part.0+0x1fc>
 800926a:	68ab      	ldr	r3, [r5, #8]
 800926c:	4604      	mov	r4, r0
 800926e:	b303      	cbz	r3, 80092b2 <rclc_executor_spin_some.part.0+0x6a>
 8009270:	6869      	ldr	r1, [r5, #4]
 8009272:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009276:	01a2      	lsls	r2, r4, #6
 8009278:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800927c:	b1cb      	cbz	r3, 80092b2 <rclc_executor_spin_some.part.0+0x6a>
 800927e:	5c8b      	ldrb	r3, [r1, r2]
 8009280:	2b0a      	cmp	r3, #10
 8009282:	f200 80d8 	bhi.w	8009436 <rclc_executor_spin_some.part.0+0x1ee>
 8009286:	e8df f003 	tbb	[pc, r3]
 800928a:	9c9c      	.short	0x9c9c
 800928c:	068c8ca7 	.word	0x068c8ca7
 8009290:	bdc90606 	.word	0xbdc90606
 8009294:	b2          	.byte	0xb2
 8009295:	00          	.byte	0x00
 8009296:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800929a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800929e:	4630      	mov	r0, r6
 80092a0:	f008 f9c6 	bl	8011630 <rcl_wait_set_add_service>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f040 8086 	bne.w	80093b6 <rclc_executor_spin_some.part.0+0x16e>
 80092aa:	68ab      	ldr	r3, [r5, #8]
 80092ac:	3401      	adds	r4, #1
 80092ae:	429c      	cmp	r4, r3
 80092b0:	d3de      	bcc.n	8009270 <rclc_executor_spin_some.part.0+0x28>
 80092b2:	4643      	mov	r3, r8
 80092b4:	464a      	mov	r2, r9
 80092b6:	4630      	mov	r0, r6
 80092b8:	f008 f9e6 	bl	8011688 <rcl_wait>
 80092bc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80c7 	beq.w	8009454 <rclc_executor_spin_some.part.0+0x20c>
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	f040 80b5 	bne.w	8009436 <rclc_executor_spin_some.part.0+0x1ee>
 80092cc:	68ab      	ldr	r3, [r5, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8159 	beq.w	8009586 <rclc_executor_spin_some.part.0+0x33e>
 80092d4:	2400      	movs	r4, #0
 80092d6:	46a0      	mov	r8, r4
 80092d8:	f240 1991 	movw	r9, #401	@ 0x191
 80092dc:	e00a      	b.n	80092f4 <rclc_executor_spin_some.part.0+0xac>
 80092de:	f7ff fb49 	bl	8008974 <_rclc_check_for_new_data>
 80092e2:	4604      	mov	r4, r0
 80092e4:	b110      	cbz	r0, 80092ec <rclc_executor_spin_some.part.0+0xa4>
 80092e6:	4548      	cmp	r0, r9
 80092e8:	f040 80b2 	bne.w	8009450 <rclc_executor_spin_some.part.0+0x208>
 80092ec:	68ab      	ldr	r3, [r5, #8]
 80092ee:	4598      	cmp	r8, r3
 80092f0:	f080 8126 	bcs.w	8009540 <rclc_executor_spin_some.part.0+0x2f8>
 80092f4:	686a      	ldr	r2, [r5, #4]
 80092f6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80092fa:	4631      	mov	r1, r6
 80092fc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009300:	f108 0801 	add.w	r8, r8, #1
 8009304:	f1bc 0f00 	cmp.w	ip, #0
 8009308:	d1e9      	bne.n	80092de <rclc_executor_spin_some.part.0+0x96>
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009312:	4798      	blx	r3
 8009314:	2800      	cmp	r0, #0
 8009316:	f000 809b 	beq.w	8009450 <rclc_executor_spin_some.part.0+0x208>
 800931a:	68ab      	ldr	r3, [r5, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8097 	beq.w	8009450 <rclc_executor_spin_some.part.0+0x208>
 8009322:	f04f 0800 	mov.w	r8, #0
 8009326:	f240 1991 	movw	r9, #401	@ 0x191
 800932a:	e009      	b.n	8009340 <rclc_executor_spin_some.part.0+0xf8>
 800932c:	f7ff fb70 	bl	8008a10 <_rclc_take_new_data>
 8009330:	4604      	mov	r4, r0
 8009332:	b110      	cbz	r0, 800933a <rclc_executor_spin_some.part.0+0xf2>
 8009334:	4548      	cmp	r0, r9
 8009336:	f040 808b 	bne.w	8009450 <rclc_executor_spin_some.part.0+0x208>
 800933a:	68ab      	ldr	r3, [r5, #8]
 800933c:	4598      	cmp	r8, r3
 800933e:	d209      	bcs.n	8009354 <rclc_executor_spin_some.part.0+0x10c>
 8009340:	6868      	ldr	r0, [r5, #4]
 8009342:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009346:	4631      	mov	r1, r6
 8009348:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800934c:	f108 0801 	add.w	r8, r8, #1
 8009350:	2a00      	cmp	r2, #0
 8009352:	d1eb      	bne.n	800932c <rclc_executor_spin_some.part.0+0xe4>
 8009354:	2600      	movs	r6, #0
 8009356:	b97b      	cbnz	r3, 8009378 <rclc_executor_spin_some.part.0+0x130>
 8009358:	e07a      	b.n	8009450 <rclc_executor_spin_some.part.0+0x208>
 800935a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800935e:	2a08      	cmp	r2, #8
 8009360:	f000 80fd 	beq.w	800955e <rclc_executor_spin_some.part.0+0x316>
 8009364:	2a09      	cmp	r2, #9
 8009366:	f000 80ef 	beq.w	8009548 <rclc_executor_spin_some.part.0+0x300>
 800936a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800936e:	b98a      	cbnz	r2, 8009394 <rclc_executor_spin_some.part.0+0x14c>
 8009370:	3601      	adds	r6, #1
 8009372:	429e      	cmp	r6, r3
 8009374:	d262      	bcs.n	800943c <rclc_executor_spin_some.part.0+0x1f4>
 8009376:	2400      	movs	r4, #0
 8009378:	686a      	ldr	r2, [r5, #4]
 800937a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800937e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009382:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009386:	2900      	cmp	r1, #0
 8009388:	d062      	beq.n	8009450 <rclc_executor_spin_some.part.0+0x208>
 800938a:	7841      	ldrb	r1, [r0, #1]
 800938c:	2900      	cmp	r1, #0
 800938e:	d0e4      	beq.n	800935a <rclc_executor_spin_some.part.0+0x112>
 8009390:	2901      	cmp	r1, #1
 8009392:	d1ed      	bne.n	8009370 <rclc_executor_spin_some.part.0+0x128>
 8009394:	f7ff fcb0 	bl	8008cf8 <_rclc_execute.part.0>
 8009398:	2800      	cmp	r0, #0
 800939a:	f040 80b6 	bne.w	800950a <rclc_executor_spin_some.part.0+0x2c2>
 800939e:	68ab      	ldr	r3, [r5, #8]
 80093a0:	e7e6      	b.n	8009370 <rclc_executor_spin_some.part.0+0x128>
 80093a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80093a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80093aa:	4630      	mov	r0, r6
 80093ac:	f008 f914 	bl	80115d8 <rcl_wait_set_add_client>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	f43f af7a 	beq.w	80092aa <rclc_executor_spin_some.part.0+0x62>
 80093b6:	9001      	str	r0, [sp, #4]
 80093b8:	f000 fa9a 	bl	80098f0 <rcutils_reset_error>
 80093bc:	9801      	ldr	r0, [sp, #4]
 80093be:	4607      	mov	r7, r0
 80093c0:	e03c      	b.n	800943c <rclc_executor_spin_some.part.0+0x1f4>
 80093c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80093c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80093ca:	4630      	mov	r0, r6
 80093cc:	f007 fdbc 	bl	8010f48 <rcl_wait_set_add_subscription>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f43f af6a 	beq.w	80092aa <rclc_executor_spin_some.part.0+0x62>
 80093d6:	e7ee      	b.n	80093b6 <rclc_executor_spin_some.part.0+0x16e>
 80093d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80093dc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80093e0:	4630      	mov	r0, r6
 80093e2:	f008 f8c9 	bl	8011578 <rcl_wait_set_add_timer>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f af5f 	beq.w	80092aa <rclc_executor_spin_some.part.0+0x62>
 80093ec:	e7e3      	b.n	80093b6 <rclc_executor_spin_some.part.0+0x16e>
 80093ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80093f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80093f6:	4630      	mov	r0, r6
 80093f8:	f008 f892 	bl	8011520 <rcl_wait_set_add_guard_condition>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f43f af54 	beq.w	80092aa <rclc_executor_spin_some.part.0+0x62>
 8009402:	e7d8      	b.n	80093b6 <rclc_executor_spin_some.part.0+0x16e>
 8009404:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009408:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800940c:	3110      	adds	r1, #16
 800940e:	4630      	mov	r0, r6
 8009410:	f008 fe12 	bl	8012038 <rcl_action_wait_set_add_action_server>
 8009414:	2800      	cmp	r0, #0
 8009416:	f43f af48 	beq.w	80092aa <rclc_executor_spin_some.part.0+0x62>
 800941a:	e7cc      	b.n	80093b6 <rclc_executor_spin_some.part.0+0x16e>
 800941c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009420:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009424:	3110      	adds	r1, #16
 8009426:	2300      	movs	r3, #0
 8009428:	4630      	mov	r0, r6
 800942a:	f008 fbdd 	bl	8011be8 <rcl_action_wait_set_add_action_client>
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f af3b 	beq.w	80092aa <rclc_executor_spin_some.part.0+0x62>
 8009434:	e7bf      	b.n	80093b6 <rclc_executor_spin_some.part.0+0x16e>
 8009436:	f000 fa5b 	bl	80098f0 <rcutils_reset_error>
 800943a:	2701      	movs	r7, #1
 800943c:	4638      	mov	r0, r7
 800943e:	b003      	add	sp, #12
 8009440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009444:	f000 fa54 	bl	80098f0 <rcutils_reset_error>
 8009448:	4638      	mov	r0, r7
 800944a:	b003      	add	sp, #12
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	4627      	mov	r7, r4
 8009452:	e7f3      	b.n	800943c <rclc_executor_spin_some.part.0+0x1f4>
 8009454:	68ab      	ldr	r3, [r5, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 8092 	beq.w	8009580 <rclc_executor_spin_some.part.0+0x338>
 800945c:	2400      	movs	r4, #0
 800945e:	46a0      	mov	r8, r4
 8009460:	f240 1991 	movw	r9, #401	@ 0x191
 8009464:	e008      	b.n	8009478 <rclc_executor_spin_some.part.0+0x230>
 8009466:	f7ff fa85 	bl	8008974 <_rclc_check_for_new_data>
 800946a:	4604      	mov	r4, r0
 800946c:	b108      	cbz	r0, 8009472 <rclc_executor_spin_some.part.0+0x22a>
 800946e:	4548      	cmp	r0, r9
 8009470:	d1ee      	bne.n	8009450 <rclc_executor_spin_some.part.0+0x208>
 8009472:	68ab      	ldr	r3, [r5, #8]
 8009474:	4598      	cmp	r8, r3
 8009476:	d265      	bcs.n	8009544 <rclc_executor_spin_some.part.0+0x2fc>
 8009478:	686a      	ldr	r2, [r5, #4]
 800947a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800947e:	4631      	mov	r1, r6
 8009480:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009484:	f108 0801 	add.w	r8, r8, #1
 8009488:	f1bc 0f00 	cmp.w	ip, #0
 800948c:	d1eb      	bne.n	8009466 <rclc_executor_spin_some.part.0+0x21e>
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009496:	4798      	blx	r3
 8009498:	2800      	cmp	r0, #0
 800949a:	d0d9      	beq.n	8009450 <rclc_executor_spin_some.part.0+0x208>
 800949c:	68ab      	ldr	r3, [r5, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0d6      	beq.n	8009450 <rclc_executor_spin_some.part.0+0x208>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	f240 1991 	movw	r9, #401	@ 0x191
 80094aa:	f240 2a59 	movw	sl, #601	@ 0x259
 80094ae:	e00e      	b.n	80094ce <rclc_executor_spin_some.part.0+0x286>
 80094b0:	f813 300b 	ldrb.w	r3, [r3, fp]
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d033      	beq.n	8009520 <rclc_executor_spin_some.part.0+0x2d8>
 80094b8:	2b09      	cmp	r3, #9
 80094ba:	d028      	beq.n	800950e <rclc_executor_spin_some.part.0+0x2c6>
 80094bc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80094c0:	b9fb      	cbnz	r3, 8009502 <rclc_executor_spin_some.part.0+0x2ba>
 80094c2:	68ab      	ldr	r3, [r5, #8]
 80094c4:	f108 0801 	add.w	r8, r8, #1
 80094c8:	4598      	cmp	r8, r3
 80094ca:	d2b7      	bcs.n	800943c <rclc_executor_spin_some.part.0+0x1f4>
 80094cc:	2400      	movs	r4, #0
 80094ce:	6868      	ldr	r0, [r5, #4]
 80094d0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80094d4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80094d8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0b7      	beq.n	8009450 <rclc_executor_spin_some.part.0+0x208>
 80094e0:	4631      	mov	r1, r6
 80094e2:	f7ff fa95 	bl	8008a10 <_rclc_take_new_data>
 80094e6:	b118      	cbz	r0, 80094f0 <rclc_executor_spin_some.part.0+0x2a8>
 80094e8:	4548      	cmp	r0, r9
 80094ea:	d001      	beq.n	80094f0 <rclc_executor_spin_some.part.0+0x2a8>
 80094ec:	4550      	cmp	r0, sl
 80094ee:	d10c      	bne.n	800950a <rclc_executor_spin_some.part.0+0x2c2>
 80094f0:	686b      	ldr	r3, [r5, #4]
 80094f2:	eb13 000b 	adds.w	r0, r3, fp
 80094f6:	d021      	beq.n	800953c <rclc_executor_spin_some.part.0+0x2f4>
 80094f8:	7842      	ldrb	r2, [r0, #1]
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	d0d8      	beq.n	80094b0 <rclc_executor_spin_some.part.0+0x268>
 80094fe:	2a01      	cmp	r2, #1
 8009500:	d1df      	bne.n	80094c2 <rclc_executor_spin_some.part.0+0x27a>
 8009502:	f7ff fbf9 	bl	8008cf8 <_rclc_execute.part.0>
 8009506:	2800      	cmp	r0, #0
 8009508:	d0db      	beq.n	80094c2 <rclc_executor_spin_some.part.0+0x27a>
 800950a:	4607      	mov	r7, r0
 800950c:	e796      	b.n	800943c <rclc_executor_spin_some.part.0+0x1f4>
 800950e:	6843      	ldr	r3, [r0, #4]
 8009510:	6a1a      	ldr	r2, [r3, #32]
 8009512:	2a00      	cmp	r2, #0
 8009514:	d1f5      	bne.n	8009502 <rclc_executor_spin_some.part.0+0x2ba>
 8009516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0d1      	beq.n	80094c2 <rclc_executor_spin_some.part.0+0x27a>
 800951e:	e7f0      	b.n	8009502 <rclc_executor_spin_some.part.0+0x2ba>
 8009520:	6843      	ldr	r3, [r0, #4]
 8009522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009524:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8009528:	d1eb      	bne.n	8009502 <rclc_executor_spin_some.part.0+0x2ba>
 800952a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800952e:	2a00      	cmp	r2, #0
 8009530:	d1e7      	bne.n	8009502 <rclc_executor_spin_some.part.0+0x2ba>
 8009532:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0c3      	beq.n	80094c2 <rclc_executor_spin_some.part.0+0x27a>
 800953a:	e7e2      	b.n	8009502 <rclc_executor_spin_some.part.0+0x2ba>
 800953c:	270b      	movs	r7, #11
 800953e:	e77d      	b.n	800943c <rclc_executor_spin_some.part.0+0x1f4>
 8009540:	686a      	ldr	r2, [r5, #4]
 8009542:	e6e2      	b.n	800930a <rclc_executor_spin_some.part.0+0xc2>
 8009544:	686a      	ldr	r2, [r5, #4]
 8009546:	e7a2      	b.n	800948e <rclc_executor_spin_some.part.0+0x246>
 8009548:	6842      	ldr	r2, [r0, #4]
 800954a:	6a11      	ldr	r1, [r2, #32]
 800954c:	2900      	cmp	r1, #0
 800954e:	f47f af21 	bne.w	8009394 <rclc_executor_spin_some.part.0+0x14c>
 8009552:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009556:	2a00      	cmp	r2, #0
 8009558:	f43f af0a 	beq.w	8009370 <rclc_executor_spin_some.part.0+0x128>
 800955c:	e71a      	b.n	8009394 <rclc_executor_spin_some.part.0+0x14c>
 800955e:	6842      	ldr	r2, [r0, #4]
 8009560:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8009562:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8009566:	f47f af15 	bne.w	8009394 <rclc_executor_spin_some.part.0+0x14c>
 800956a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800956e:	2900      	cmp	r1, #0
 8009570:	f47f af10 	bne.w	8009394 <rclc_executor_spin_some.part.0+0x14c>
 8009574:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8009578:	2a00      	cmp	r2, #0
 800957a:	f43f aef9 	beq.w	8009370 <rclc_executor_spin_some.part.0+0x128>
 800957e:	e709      	b.n	8009394 <rclc_executor_spin_some.part.0+0x14c>
 8009580:	686a      	ldr	r2, [r5, #4]
 8009582:	461c      	mov	r4, r3
 8009584:	e783      	b.n	800948e <rclc_executor_spin_some.part.0+0x246>
 8009586:	686a      	ldr	r2, [r5, #4]
 8009588:	461c      	mov	r4, r3
 800958a:	e6be      	b.n	800930a <rclc_executor_spin_some.part.0+0xc2>

0800958c <rclc_executor_spin>:
 800958c:	b1d0      	cbz	r0, 80095c4 <rclc_executor_spin+0x38>
 800958e:	b510      	push	{r4, lr}
 8009590:	4604      	mov	r4, r0
 8009592:	b082      	sub	sp, #8
 8009594:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	e9cd 2300 	strd	r2, r3, [sp]
 800959e:	f006 fafb 	bl	800fb98 <rcl_context_is_valid>
 80095a2:	4601      	mov	r1, r0
 80095a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a8:	4620      	mov	r0, r4
 80095aa:	b131      	cbz	r1, 80095ba <rclc_executor_spin+0x2e>
 80095ac:	f7ff fe4c 	bl	8009248 <rclc_executor_spin_some.part.0>
 80095b0:	f030 0302 	bics.w	r3, r0, #2
 80095b4:	d0ee      	beq.n	8009594 <rclc_executor_spin+0x8>
 80095b6:	b002      	add	sp, #8
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	f000 f999 	bl	80098f0 <rcutils_reset_error>
 80095be:	2001      	movs	r0, #1
 80095c0:	b002      	add	sp, #8
 80095c2:	bd10      	pop	{r4, pc}
 80095c4:	200b      	movs	r0, #11
 80095c6:	4770      	bx	lr

080095c8 <rclc_executor_handle_counters_zero_init>:
 80095c8:	b130      	cbz	r0, 80095d8 <rclc_executor_handle_counters_zero_init+0x10>
 80095ca:	b508      	push	{r3, lr}
 80095cc:	2220      	movs	r2, #32
 80095ce:	2100      	movs	r1, #0
 80095d0:	f00c f8a0 	bl	8015714 <memset>
 80095d4:	2000      	movs	r0, #0
 80095d6:	bd08      	pop	{r3, pc}
 80095d8:	200b      	movs	r0, #11
 80095da:	4770      	bx	lr
 80095dc:	0000      	movs	r0, r0
	...

080095e0 <rclc_executor_handle_init>:
 80095e0:	b168      	cbz	r0, 80095fe <rclc_executor_handle_init+0x1e>
 80095e2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009608 <rclc_executor_handle_init+0x28>
 80095e6:	2300      	movs	r3, #0
 80095e8:	220b      	movs	r2, #11
 80095ea:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 80095ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80095f2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80095f6:	8002      	strh	r2, [r0, #0]
 80095f8:	8703      	strh	r3, [r0, #56]	@ 0x38
 80095fa:	4618      	mov	r0, r3
 80095fc:	4770      	bx	lr
 80095fe:	200b      	movs	r0, #11
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	f3af 8000 	nop.w
	...

08009610 <rclc_support_init_with_options>:
 8009610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009614:	b083      	sub	sp, #12
 8009616:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009618:	b340      	cbz	r0, 800966c <rclc_support_init_with_options+0x5c>
 800961a:	461d      	mov	r5, r3
 800961c:	b333      	cbz	r3, 800966c <rclc_support_init_with_options+0x5c>
 800961e:	b32e      	cbz	r6, 800966c <rclc_support_init_with_options+0x5c>
 8009620:	46e9      	mov	r9, sp
 8009622:	4604      	mov	r4, r0
 8009624:	4648      	mov	r0, r9
 8009626:	460f      	mov	r7, r1
 8009628:	4690      	mov	r8, r2
 800962a:	f006 faab 	bl	800fb84 <rcl_get_zero_initialized_context>
 800962e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009632:	462a      	mov	r2, r5
 8009634:	e884 0003 	stmia.w	r4, {r0, r1}
 8009638:	4623      	mov	r3, r4
 800963a:	4641      	mov	r1, r8
 800963c:	4638      	mov	r0, r7
 800963e:	f006 fb11 	bl	800fc64 <rcl_init>
 8009642:	4605      	mov	r5, r0
 8009644:	b960      	cbnz	r0, 8009660 <rclc_support_init_with_options+0x50>
 8009646:	60a6      	str	r6, [r4, #8]
 8009648:	4632      	mov	r2, r6
 800964a:	f104 010c 	add.w	r1, r4, #12
 800964e:	2003      	movs	r0, #3
 8009650:	f007 f828 	bl	80106a4 <rcl_clock_init>
 8009654:	4605      	mov	r5, r0
 8009656:	b918      	cbnz	r0, 8009660 <rclc_support_init_with_options+0x50>
 8009658:	4628      	mov	r0, r5
 800965a:	b003      	add	sp, #12
 800965c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009660:	f000 f946 	bl	80098f0 <rcutils_reset_error>
 8009664:	4628      	mov	r0, r5
 8009666:	b003      	add	sp, #12
 8009668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800966c:	250b      	movs	r5, #11
 800966e:	4628      	mov	r0, r5
 8009670:	b003      	add	sp, #12
 8009672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009676:	bf00      	nop

08009678 <rclc_node_init_default>:
 8009678:	b3b8      	cbz	r0, 80096ea <rclc_node_init_default+0x72>
 800967a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800967e:	460d      	mov	r5, r1
 8009680:	b0a1      	sub	sp, #132	@ 0x84
 8009682:	b329      	cbz	r1, 80096d0 <rclc_node_init_default+0x58>
 8009684:	4616      	mov	r6, r2
 8009686:	b31a      	cbz	r2, 80096d0 <rclc_node_init_default+0x58>
 8009688:	461f      	mov	r7, r3
 800968a:	b30b      	cbz	r3, 80096d0 <rclc_node_init_default+0x58>
 800968c:	f10d 0810 	add.w	r8, sp, #16
 8009690:	4604      	mov	r4, r0
 8009692:	4640      	mov	r0, r8
 8009694:	f006 fbf6 	bl	800fe84 <rcl_get_zero_initialized_node>
 8009698:	e898 0003 	ldmia.w	r8, {r0, r1}
 800969c:	f10d 0918 	add.w	r9, sp, #24
 80096a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80096a4:	4648      	mov	r0, r9
 80096a6:	f006 fd65 	bl	8010174 <rcl_node_get_default_options>
 80096aa:	4640      	mov	r0, r8
 80096ac:	f006 fbea 	bl	800fe84 <rcl_get_zero_initialized_node>
 80096b0:	f8cd 9000 	str.w	r9, [sp]
 80096b4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80096b8:	463b      	mov	r3, r7
 80096ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80096be:	4632      	mov	r2, r6
 80096c0:	4629      	mov	r1, r5
 80096c2:	4620      	mov	r0, r4
 80096c4:	f006 fbe8 	bl	800fe98 <rcl_node_init>
 80096c8:	b930      	cbnz	r0, 80096d8 <rclc_node_init_default+0x60>
 80096ca:	b021      	add	sp, #132	@ 0x84
 80096cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d0:	200b      	movs	r0, #11
 80096d2:	b021      	add	sp, #132	@ 0x84
 80096d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d8:	9003      	str	r0, [sp, #12]
 80096da:	f000 f909 	bl	80098f0 <rcutils_reset_error>
 80096de:	f000 f907 	bl	80098f0 <rcutils_reset_error>
 80096e2:	9803      	ldr	r0, [sp, #12]
 80096e4:	b021      	add	sp, #132	@ 0x84
 80096e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ea:	200b      	movs	r0, #11
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop

080096f0 <rclc_publisher_init_default>:
 80096f0:	b368      	cbz	r0, 800974e <rclc_publisher_init_default+0x5e>
 80096f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	460d      	mov	r5, r1
 80096f8:	b0a0      	sub	sp, #128	@ 0x80
 80096fa:	b321      	cbz	r1, 8009746 <rclc_publisher_init_default+0x56>
 80096fc:	4616      	mov	r6, r2
 80096fe:	b312      	cbz	r2, 8009746 <rclc_publisher_init_default+0x56>
 8009700:	461f      	mov	r7, r3
 8009702:	b303      	cbz	r3, 8009746 <rclc_publisher_init_default+0x56>
 8009704:	4604      	mov	r4, r0
 8009706:	f7ff f825 	bl	8008754 <rcl_get_zero_initialized_publisher>
 800970a:	f10d 0810 	add.w	r8, sp, #16
 800970e:	6020      	str	r0, [r4, #0]
 8009710:	4640      	mov	r0, r8
 8009712:	f7ff f8bb 	bl	800888c <rcl_publisher_get_default_options>
 8009716:	490f      	ldr	r1, [pc, #60]	@ (8009754 <rclc_publisher_init_default+0x64>)
 8009718:	2250      	movs	r2, #80	@ 0x50
 800971a:	4640      	mov	r0, r8
 800971c:	f00c f8c3 	bl	80158a6 <memcpy>
 8009720:	f8cd 8000 	str.w	r8, [sp]
 8009724:	463b      	mov	r3, r7
 8009726:	4632      	mov	r2, r6
 8009728:	4629      	mov	r1, r5
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff f818 	bl	8008760 <rcl_publisher_init>
 8009730:	b910      	cbnz	r0, 8009738 <rclc_publisher_init_default+0x48>
 8009732:	b020      	add	sp, #128	@ 0x80
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009738:	9003      	str	r0, [sp, #12]
 800973a:	f000 f8d9 	bl	80098f0 <rcutils_reset_error>
 800973e:	9803      	ldr	r0, [sp, #12]
 8009740:	b020      	add	sp, #128	@ 0x80
 8009742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009746:	200b      	movs	r0, #11
 8009748:	b020      	add	sp, #128	@ 0x80
 800974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974e:	200b      	movs	r0, #11
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	08016848 	.word	0x08016848

08009758 <rclc_subscription_init_default>:
 8009758:	b368      	cbz	r0, 80097b6 <rclc_subscription_init_default+0x5e>
 800975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	460d      	mov	r5, r1
 8009760:	b0a0      	sub	sp, #128	@ 0x80
 8009762:	b321      	cbz	r1, 80097ae <rclc_subscription_init_default+0x56>
 8009764:	4616      	mov	r6, r2
 8009766:	b312      	cbz	r2, 80097ae <rclc_subscription_init_default+0x56>
 8009768:	461f      	mov	r7, r3
 800976a:	b303      	cbz	r3, 80097ae <rclc_subscription_init_default+0x56>
 800976c:	4604      	mov	r4, r0
 800976e:	f006 fe3d 	bl	80103ec <rcl_get_zero_initialized_subscription>
 8009772:	f10d 0810 	add.w	r8, sp, #16
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	4640      	mov	r0, r8
 800977a:	f006 fee5 	bl	8010548 <rcl_subscription_get_default_options>
 800977e:	490f      	ldr	r1, [pc, #60]	@ (80097bc <rclc_subscription_init_default+0x64>)
 8009780:	2250      	movs	r2, #80	@ 0x50
 8009782:	4640      	mov	r0, r8
 8009784:	f00c f88f 	bl	80158a6 <memcpy>
 8009788:	f8cd 8000 	str.w	r8, [sp]
 800978c:	463b      	mov	r3, r7
 800978e:	4632      	mov	r2, r6
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
 8009794:	f006 fe30 	bl	80103f8 <rcl_subscription_init>
 8009798:	b910      	cbnz	r0, 80097a0 <rclc_subscription_init_default+0x48>
 800979a:	b020      	add	sp, #128	@ 0x80
 800979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a0:	9003      	str	r0, [sp, #12]
 80097a2:	f000 f8a5 	bl	80098f0 <rcutils_reset_error>
 80097a6:	9803      	ldr	r0, [sp, #12]
 80097a8:	b020      	add	sp, #128	@ 0x80
 80097aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ae:	200b      	movs	r0, #11
 80097b0:	b020      	add	sp, #128	@ 0x80
 80097b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b6:	200b      	movs	r0, #11
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	08016898 	.word	0x08016898

080097c0 <rclc_timer_init_default>:
 80097c0:	b360      	cbz	r0, 800981c <rclc_timer_init_default+0x5c>
 80097c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c6:	460e      	mov	r6, r1
 80097c8:	b08a      	sub	sp, #40	@ 0x28
 80097ca:	b319      	cbz	r1, 8009814 <rclc_timer_init_default+0x54>
 80097cc:	4690      	mov	r8, r2
 80097ce:	461f      	mov	r7, r3
 80097d0:	4605      	mov	r5, r0
 80097d2:	f007 f945 	bl	8010a60 <rcl_get_zero_initialized_timer>
 80097d6:	68b4      	ldr	r4, [r6, #8]
 80097d8:	6028      	str	r0, [r5, #0]
 80097da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097dc:	f10d 0c0c 	add.w	ip, sp, #12
 80097e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	f8cc 3000 	str.w	r3, [ip]
 80097ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097ec:	9302      	str	r3, [sp, #8]
 80097ee:	e9cd 8700 	strd	r8, r7, [sp]
 80097f2:	4628      	mov	r0, r5
 80097f4:	4632      	mov	r2, r6
 80097f6:	f106 010c 	add.w	r1, r6, #12
 80097fa:	f007 f939 	bl	8010a70 <rcl_timer_init>
 80097fe:	b910      	cbnz	r0, 8009806 <rclc_timer_init_default+0x46>
 8009800:	b00a      	add	sp, #40	@ 0x28
 8009802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009806:	9009      	str	r0, [sp, #36]	@ 0x24
 8009808:	f000 f872 	bl	80098f0 <rcutils_reset_error>
 800980c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800980e:	b00a      	add	sp, #40	@ 0x28
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009814:	200b      	movs	r0, #11
 8009816:	b00a      	add	sp, #40	@ 0x28
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	200b      	movs	r0, #11
 800981e:	4770      	bx	lr

08009820 <__default_zero_allocate>:
 8009820:	f00b bb88 	b.w	8014f34 <calloc>

08009824 <__default_reallocate>:
 8009824:	f00b bd14 	b.w	8015250 <realloc>

08009828 <__default_deallocate>:
 8009828:	f00b bbf0 	b.w	801500c <free>

0800982c <__default_allocate>:
 800982c:	f00b bbe6 	b.w	8014ffc <malloc>

08009830 <rcutils_get_zero_initialized_allocator>:
 8009830:	b510      	push	{r4, lr}
 8009832:	4c05      	ldr	r4, [pc, #20]	@ (8009848 <rcutils_get_zero_initialized_allocator+0x18>)
 8009834:	4686      	mov	lr, r0
 8009836:	4684      	mov	ip, r0
 8009838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800983a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f8cc 3000 	str.w	r3, [ip]
 8009844:	4670      	mov	r0, lr
 8009846:	bd10      	pop	{r4, pc}
 8009848:	080168e8 	.word	0x080168e8

0800984c <rcutils_set_default_allocator>:
 800984c:	b1a8      	cbz	r0, 800987a <rcutils_set_default_allocator+0x2e>
 800984e:	6802      	ldr	r2, [r0, #0]
 8009850:	b1a2      	cbz	r2, 800987c <rcutils_set_default_allocator+0x30>
 8009852:	6841      	ldr	r1, [r0, #4]
 8009854:	b1a1      	cbz	r1, 8009880 <rcutils_set_default_allocator+0x34>
 8009856:	b410      	push	{r4}
 8009858:	68c4      	ldr	r4, [r0, #12]
 800985a:	b164      	cbz	r4, 8009876 <rcutils_set_default_allocator+0x2a>
 800985c:	6880      	ldr	r0, [r0, #8]
 800985e:	b138      	cbz	r0, 8009870 <rcutils_set_default_allocator+0x24>
 8009860:	4b08      	ldr	r3, [pc, #32]	@ (8009884 <rcutils_set_default_allocator+0x38>)
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	2200      	movs	r2, #0
 8009866:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800986a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800986e:	2001      	movs	r0, #1
 8009870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	4620      	mov	r0, r4
 8009878:	e7fa      	b.n	8009870 <rcutils_set_default_allocator+0x24>
 800987a:	4770      	bx	lr
 800987c:	4610      	mov	r0, r2
 800987e:	4770      	bx	lr
 8009880:	4608      	mov	r0, r1
 8009882:	4770      	bx	lr
 8009884:	20000018 	.word	0x20000018

08009888 <rcutils_get_default_allocator>:
 8009888:	b510      	push	{r4, lr}
 800988a:	4c05      	ldr	r4, [pc, #20]	@ (80098a0 <rcutils_get_default_allocator+0x18>)
 800988c:	4686      	mov	lr, r0
 800988e:	4684      	mov	ip, r0
 8009890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	f8cc 3000 	str.w	r3, [ip]
 800989c:	4670      	mov	r0, lr
 800989e:	bd10      	pop	{r4, pc}
 80098a0:	20000018 	.word	0x20000018

080098a4 <rcutils_allocator_is_valid>:
 80098a4:	b158      	cbz	r0, 80098be <rcutils_allocator_is_valid+0x1a>
 80098a6:	6803      	ldr	r3, [r0, #0]
 80098a8:	b143      	cbz	r3, 80098bc <rcutils_allocator_is_valid+0x18>
 80098aa:	6843      	ldr	r3, [r0, #4]
 80098ac:	b133      	cbz	r3, 80098bc <rcutils_allocator_is_valid+0x18>
 80098ae:	68c3      	ldr	r3, [r0, #12]
 80098b0:	b123      	cbz	r3, 80098bc <rcutils_allocator_is_valid+0x18>
 80098b2:	6880      	ldr	r0, [r0, #8]
 80098b4:	3800      	subs	r0, #0
 80098b6:	bf18      	it	ne
 80098b8:	2001      	movne	r0, #1
 80098ba:	4770      	bx	lr
 80098bc:	4618      	mov	r0, r3
 80098be:	4770      	bx	lr

080098c0 <rcutils_get_error_string>:
 80098c0:	4b06      	ldr	r3, [pc, #24]	@ (80098dc <rcutils_get_error_string+0x1c>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	b13b      	cbz	r3, 80098d6 <rcutils_get_error_string+0x16>
 80098c6:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <rcutils_get_error_string+0x20>)
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	b90a      	cbnz	r2, 80098d0 <rcutils_get_error_string+0x10>
 80098cc:	2201      	movs	r2, #1
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <rcutils_get_error_string+0x24>)
 80098d2:	7818      	ldrb	r0, [r3, #0]
 80098d4:	4770      	bx	lr
 80098d6:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <rcutils_get_error_string+0x28>)
 80098d8:	7818      	ldrb	r0, [r3, #0]
 80098da:	4770      	bx	lr
 80098dc:	20006100 	.word	0x20006100
 80098e0:	20006119 	.word	0x20006119
 80098e4:	20006118 	.word	0x20006118
 80098e8:	080168fc 	.word	0x080168fc
 80098ec:	00000000 	.word	0x00000000

080098f0 <rcutils_reset_error>:
 80098f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009910 <rcutils_reset_error+0x20>
 80098f4:	4a08      	ldr	r2, [pc, #32]	@ (8009918 <rcutils_reset_error+0x28>)
 80098f6:	4809      	ldr	r0, [pc, #36]	@ (800991c <rcutils_reset_error+0x2c>)
 80098f8:	4909      	ldr	r1, [pc, #36]	@ (8009920 <rcutils_reset_error+0x30>)
 80098fa:	2300      	movs	r3, #0
 80098fc:	8013      	strh	r3, [r2, #0]
 80098fe:	ed82 7b02 	vstr	d7, [r2, #8]
 8009902:	4a08      	ldr	r2, [pc, #32]	@ (8009924 <rcutils_reset_error+0x34>)
 8009904:	7003      	strb	r3, [r0, #0]
 8009906:	700b      	strb	r3, [r1, #0]
 8009908:	7013      	strb	r3, [r2, #0]
 800990a:	4770      	bx	lr
 800990c:	f3af 8000 	nop.w
	...
 8009918:	20006108 	.word	0x20006108
 800991c:	20006119 	.word	0x20006119
 8009920:	20006118 	.word	0x20006118
 8009924:	20006100 	.word	0x20006100

08009928 <rcutils_system_time_now>:
 8009928:	b308      	cbz	r0, 800996e <rcutils_system_time_now+0x46>
 800992a:	b570      	push	{r4, r5, r6, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	4604      	mov	r4, r0
 8009930:	4669      	mov	r1, sp
 8009932:	2001      	movs	r0, #1
 8009934:	f7f7 fcfc 	bl	8001330 <clock_gettime>
 8009938:	e9dd 3500 	ldrd	r3, r5, [sp]
 800993c:	2d00      	cmp	r5, #0
 800993e:	db13      	blt.n	8009968 <rcutils_system_time_now+0x40>
 8009940:	9902      	ldr	r1, [sp, #8]
 8009942:	2900      	cmp	r1, #0
 8009944:	db0d      	blt.n	8009962 <rcutils_system_time_now+0x3a>
 8009946:	4e0b      	ldr	r6, [pc, #44]	@ (8009974 <rcutils_system_time_now+0x4c>)
 8009948:	fba3 3206 	umull	r3, r2, r3, r6
 800994c:	185b      	adds	r3, r3, r1
 800994e:	fb06 2205 	mla	r2, r6, r5, r2
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800995a:	e9c4 3200 	strd	r3, r2, [r4]
 800995e:	b004      	add	sp, #16
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	ea53 0205 	orrs.w	r2, r3, r5
 8009966:	d1ee      	bne.n	8009946 <rcutils_system_time_now+0x1e>
 8009968:	2002      	movs	r0, #2
 800996a:	b004      	add	sp, #16
 800996c:	bd70      	pop	{r4, r5, r6, pc}
 800996e:	200b      	movs	r0, #11
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	3b9aca00 	.word	0x3b9aca00

08009978 <rcutils_steady_time_now>:
 8009978:	b308      	cbz	r0, 80099be <rcutils_steady_time_now+0x46>
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	4604      	mov	r4, r0
 8009980:	4669      	mov	r1, sp
 8009982:	2000      	movs	r0, #0
 8009984:	f7f7 fcd4 	bl	8001330 <clock_gettime>
 8009988:	e9dd 3500 	ldrd	r3, r5, [sp]
 800998c:	2d00      	cmp	r5, #0
 800998e:	db13      	blt.n	80099b8 <rcutils_steady_time_now+0x40>
 8009990:	9902      	ldr	r1, [sp, #8]
 8009992:	2900      	cmp	r1, #0
 8009994:	db0d      	blt.n	80099b2 <rcutils_steady_time_now+0x3a>
 8009996:	4e0b      	ldr	r6, [pc, #44]	@ (80099c4 <rcutils_steady_time_now+0x4c>)
 8009998:	fba3 3206 	umull	r3, r2, r3, r6
 800999c:	185b      	adds	r3, r3, r1
 800999e:	fb06 2205 	mla	r2, r6, r5, r2
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80099aa:	e9c4 3200 	strd	r3, r2, [r4]
 80099ae:	b004      	add	sp, #16
 80099b0:	bd70      	pop	{r4, r5, r6, pc}
 80099b2:	ea53 0205 	orrs.w	r2, r3, r5
 80099b6:	d1ee      	bne.n	8009996 <rcutils_steady_time_now+0x1e>
 80099b8:	2002      	movs	r0, #2
 80099ba:	b004      	add	sp, #16
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	200b      	movs	r0, #11
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	3b9aca00 	.word	0x3b9aca00

080099c8 <rmw_get_zero_initialized_init_options>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	2238      	movs	r2, #56	@ 0x38
 80099cc:	4604      	mov	r4, r0
 80099ce:	2100      	movs	r1, #0
 80099d0:	f00b fea0 	bl	8015714 <memset>
 80099d4:	f104 0010 	add.w	r0, r4, #16
 80099d8:	f000 f80a 	bl	80099f0 <rmw_get_default_security_options>
 80099dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099e0:	60e3      	str	r3, [r4, #12]
 80099e2:	4620      	mov	r0, r4
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	bf00      	nop

080099e8 <rmw_get_default_publisher_options>:
 80099e8:	2200      	movs	r2, #0
 80099ea:	6002      	str	r2, [r0, #0]
 80099ec:	7102      	strb	r2, [r0, #4]
 80099ee:	4770      	bx	lr

080099f0 <rmw_get_default_security_options>:
 80099f0:	2200      	movs	r2, #0
 80099f2:	7002      	strb	r2, [r0, #0]
 80099f4:	6042      	str	r2, [r0, #4]
 80099f6:	4770      	bx	lr

080099f8 <rmw_uros_set_custom_transport>:
 80099f8:	b470      	push	{r4, r5, r6}
 80099fa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80099fe:	b162      	cbz	r2, 8009a1a <rmw_uros_set_custom_transport+0x22>
 8009a00:	b15b      	cbz	r3, 8009a1a <rmw_uros_set_custom_transport+0x22>
 8009a02:	b155      	cbz	r5, 8009a1a <rmw_uros_set_custom_transport+0x22>
 8009a04:	b14e      	cbz	r6, 8009a1a <rmw_uros_set_custom_transport+0x22>
 8009a06:	4c06      	ldr	r4, [pc, #24]	@ (8009a20 <rmw_uros_set_custom_transport+0x28>)
 8009a08:	7020      	strb	r0, [r4, #0]
 8009a0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009a0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a12:	6166      	str	r6, [r4, #20]
 8009a14:	2000      	movs	r0, #0
 8009a16:	bc70      	pop	{r4, r5, r6}
 8009a18:	4770      	bx	lr
 8009a1a:	200b      	movs	r0, #11
 8009a1c:	bc70      	pop	{r4, r5, r6}
 8009a1e:	4770      	bx	lr
 8009a20:	2000611c 	.word	0x2000611c

08009a24 <rmw_init_options_init>:
 8009a24:	b084      	sub	sp, #16
 8009a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	ad09      	add	r5, sp, #36	@ 0x24
 8009a2c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8009a30:	b130      	cbz	r0, 8009a40 <rmw_init_options_init+0x1c>
 8009a32:	4604      	mov	r4, r0
 8009a34:	4628      	mov	r0, r5
 8009a36:	f7ff ff35 	bl	80098a4 <rcutils_allocator_is_valid>
 8009a3a:	b108      	cbz	r0, 8009a40 <rmw_init_options_init+0x1c>
 8009a3c:	68a6      	ldr	r6, [r4, #8]
 8009a3e:	b12e      	cbz	r6, 8009a4c <rmw_init_options_init+0x28>
 8009a40:	200b      	movs	r0, #11
 8009a42:	b003      	add	sp, #12
 8009a44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009a48:	b004      	add	sp, #16
 8009a4a:	4770      	bx	lr
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e9c4 2300 	strd	r2, r3, [r4]
 8009a54:	4b20      	ldr	r3, [pc, #128]	@ (8009ad8 <rmw_init_options_init+0xb4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	60a3      	str	r3, [r4, #8]
 8009a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a5c:	f104 0c20 	add.w	ip, r4, #32
 8009a60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a64:	466f      	mov	r7, sp
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	f8cc 3000 	str.w	r3, [ip]
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	61e6      	str	r6, [r4, #28]
 8009a70:	60e6      	str	r6, [r4, #12]
 8009a72:	f7ff ffbd 	bl	80099f0 <rmw_get_default_security_options>
 8009a76:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009a7a:	f104 0310 	add.w	r3, r4, #16
 8009a7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a82:	2203      	movs	r2, #3
 8009a84:	4815      	ldr	r0, [pc, #84]	@ (8009adc <rmw_init_options_init+0xb8>)
 8009a86:	4916      	ldr	r1, [pc, #88]	@ (8009ae0 <rmw_init_options_init+0xbc>)
 8009a88:	7626      	strb	r6, [r4, #24]
 8009a8a:	f000 ffbb 	bl	800aa04 <rmw_uxrce_init_init_options_impl_memory>
 8009a8e:	4813      	ldr	r0, [pc, #76]	@ (8009adc <rmw_init_options_init+0xb8>)
 8009a90:	f009 fb16 	bl	80130c0 <get_memory>
 8009a94:	b1f0      	cbz	r0, 8009ad4 <rmw_init_options_init+0xb0>
 8009a96:	4a13      	ldr	r2, [pc, #76]	@ (8009ae4 <rmw_init_options_init+0xc0>)
 8009a98:	6883      	ldr	r3, [r0, #8]
 8009a9a:	6851      	ldr	r1, [r2, #4]
 8009a9c:	7810      	ldrb	r0, [r2, #0]
 8009a9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aa0:	7418      	strb	r0, [r3, #16]
 8009aa2:	6159      	str	r1, [r3, #20]
 8009aa4:	68d1      	ldr	r1, [r2, #12]
 8009aa6:	61d9      	str	r1, [r3, #28]
 8009aa8:	6911      	ldr	r1, [r2, #16]
 8009aaa:	6219      	str	r1, [r3, #32]
 8009aac:	6951      	ldr	r1, [r2, #20]
 8009aae:	6892      	ldr	r2, [r2, #8]
 8009ab0:	619a      	str	r2, [r3, #24]
 8009ab2:	6259      	str	r1, [r3, #36]	@ 0x24
 8009ab4:	f004 fd9a 	bl	800e5ec <uxr_nanos>
 8009ab8:	f00b fb5e 	bl	8015178 <srand>
 8009abc:	f00b fb8a 	bl	80151d4 <rand>
 8009ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ac2:	6298      	str	r0, [r3, #40]	@ 0x28
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d0f9      	beq.n	8009abc <rmw_init_options_init+0x98>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009ad0:	b004      	add	sp, #16
 8009ad2:	4770      	bx	lr
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	e7b4      	b.n	8009a42 <rmw_init_options_init+0x1e>
 8009ad8:	080171c4 	.word	0x080171c4
 8009adc:	2000aa34 	.word	0x2000aa34
 8009ae0:	200062d0 	.word	0x200062d0
 8009ae4:	2000611c 	.word	0x2000611c

08009ae8 <rmw_init_options_copy>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	b160      	cbz	r0, 8009b08 <rmw_init_options_copy+0x20>
 8009aee:	460d      	mov	r5, r1
 8009af0:	b151      	cbz	r1, 8009b08 <rmw_init_options_copy+0x20>
 8009af2:	4604      	mov	r4, r0
 8009af4:	6880      	ldr	r0, [r0, #8]
 8009af6:	b128      	cbz	r0, 8009b04 <rmw_init_options_copy+0x1c>
 8009af8:	4b33      	ldr	r3, [pc, #204]	@ (8009bc8 <rmw_init_options_copy+0xe0>)
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	f7f6 fb90 	bl	8000220 <strcmp>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d154      	bne.n	8009bae <rmw_init_options_copy+0xc6>
 8009b04:	68ab      	ldr	r3, [r5, #8]
 8009b06:	b11b      	cbz	r3, 8009b10 <rmw_init_options_copy+0x28>
 8009b08:	240b      	movs	r4, #11
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	b008      	add	sp, #32
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	4623      	mov	r3, r4
 8009b12:	462a      	mov	r2, r5
 8009b14:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8009b18:	f8d3 c000 	ldr.w	ip, [r3]
 8009b1c:	6858      	ldr	r0, [r3, #4]
 8009b1e:	6899      	ldr	r1, [r3, #8]
 8009b20:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8009b24:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009b28:	3310      	adds	r3, #16
 8009b2a:	42b3      	cmp	r3, r6
 8009b2c:	f8c2 c000 	str.w	ip, [r2]
 8009b30:	6050      	str	r0, [r2, #4]
 8009b32:	6091      	str	r1, [r2, #8]
 8009b34:	f102 0210 	add.w	r2, r2, #16
 8009b38:	d1ee      	bne.n	8009b18 <rmw_init_options_copy+0x30>
 8009b3a:	6819      	ldr	r1, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	6053      	str	r3, [r2, #4]
 8009b40:	6011      	str	r1, [r2, #0]
 8009b42:	f104 0e20 	add.w	lr, r4, #32
 8009b46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009b4a:	f10d 0c0c 	add.w	ip, sp, #12
 8009b4e:	4666      	mov	r6, ip
 8009b50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b54:	f8de 3000 	ldr.w	r3, [lr]
 8009b58:	f8cc 3000 	str.w	r3, [ip]
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7ff fea1 	bl	80098a4 <rcutils_allocator_is_valid>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0d0      	beq.n	8009b08 <rmw_init_options_copy+0x20>
 8009b66:	ab08      	add	r3, sp, #32
 8009b68:	e913 0003 	ldmdb	r3, {r0, r1}
 8009b6c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009b70:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009b74:	69e0      	ldr	r0, [r4, #28]
 8009b76:	f008 fe55 	bl	8012824 <rcutils_strdup>
 8009b7a:	61e8      	str	r0, [r5, #28]
 8009b7c:	69e3      	ldr	r3, [r4, #28]
 8009b7e:	b103      	cbz	r3, 8009b82 <rmw_init_options_copy+0x9a>
 8009b80:	b1f8      	cbz	r0, 8009bc2 <rmw_init_options_copy+0xda>
 8009b82:	4812      	ldr	r0, [pc, #72]	@ (8009bcc <rmw_init_options_copy+0xe4>)
 8009b84:	f009 fa9c 	bl	80130c0 <get_memory>
 8009b88:	b1a8      	cbz	r0, 8009bb6 <rmw_init_options_copy+0xce>
 8009b8a:	6883      	ldr	r3, [r0, #8]
 8009b8c:	636b      	str	r3, [r5, #52]	@ 0x34
 8009b8e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009b90:	f102 0c10 	add.w	ip, r2, #16
 8009b94:	f103 0510 	add.w	r5, r3, #16
 8009b98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b9e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009ba8:	4620      	mov	r0, r4
 8009baa:	b008      	add	sp, #32
 8009bac:	bd70      	pop	{r4, r5, r6, pc}
 8009bae:	240c      	movs	r4, #12
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	b008      	add	sp, #32
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	9907      	ldr	r1, [sp, #28]
 8009bba:	69e8      	ldr	r0, [r5, #28]
 8009bbc:	4798      	blx	r3
 8009bbe:	2401      	movs	r4, #1
 8009bc0:	e7a3      	b.n	8009b0a <rmw_init_options_copy+0x22>
 8009bc2:	240a      	movs	r4, #10
 8009bc4:	e7a1      	b.n	8009b0a <rmw_init_options_copy+0x22>
 8009bc6:	bf00      	nop
 8009bc8:	080171c4 	.word	0x080171c4
 8009bcc:	2000aa34 	.word	0x2000aa34

08009bd0 <rmw_init_options_fini>:
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d041      	beq.n	8009c58 <rmw_init_options_fini+0x88>
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b08e      	sub	sp, #56	@ 0x38
 8009bda:	3020      	adds	r0, #32
 8009bdc:	f7ff fe62 	bl	80098a4 <rcutils_allocator_is_valid>
 8009be0:	b380      	cbz	r0, 8009c44 <rmw_init_options_fini+0x74>
 8009be2:	68a0      	ldr	r0, [r4, #8]
 8009be4:	b120      	cbz	r0, 8009bf0 <rmw_init_options_fini+0x20>
 8009be6:	4b1e      	ldr	r3, [pc, #120]	@ (8009c60 <rmw_init_options_fini+0x90>)
 8009be8:	6819      	ldr	r1, [r3, #0]
 8009bea:	f7f6 fb19 	bl	8000220 <strcmp>
 8009bee:	bb88      	cbnz	r0, 8009c54 <rmw_init_options_fini+0x84>
 8009bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c64 <rmw_init_options_fini+0x94>)
 8009bf2:	6819      	ldr	r1, [r3, #0]
 8009bf4:	b351      	cbz	r1, 8009c4c <rmw_init_options_fini+0x7c>
 8009bf6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009bf8:	e001      	b.n	8009bfe <rmw_init_options_fini+0x2e>
 8009bfa:	6849      	ldr	r1, [r1, #4]
 8009bfc:	b331      	cbz	r1, 8009c4c <rmw_init_options_fini+0x7c>
 8009bfe:	688b      	ldr	r3, [r1, #8]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d1fa      	bne.n	8009bfa <rmw_init_options_fini+0x2a>
 8009c04:	4817      	ldr	r0, [pc, #92]	@ (8009c64 <rmw_init_options_fini+0x94>)
 8009c06:	f009 fa6b 	bl	80130e0 <put_memory>
 8009c0a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c0e:	69e0      	ldr	r0, [r4, #28]
 8009c10:	4798      	blx	r3
 8009c12:	4668      	mov	r0, sp
 8009c14:	f7ff fed8 	bl	80099c8 <rmw_get_zero_initialized_init_options>
 8009c18:	46ee      	mov	lr, sp
 8009c1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c1e:	46a4      	mov	ip, r4
 8009c20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009c38:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	b00e      	add	sp, #56	@ 0x38
 8009c42:	bd10      	pop	{r4, pc}
 8009c44:	230b      	movs	r3, #11
 8009c46:	4618      	mov	r0, r3
 8009c48:	b00e      	add	sp, #56	@ 0x38
 8009c4a:	bd10      	pop	{r4, pc}
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	4618      	mov	r0, r3
 8009c50:	b00e      	add	sp, #56	@ 0x38
 8009c52:	bd10      	pop	{r4, pc}
 8009c54:	230c      	movs	r3, #12
 8009c56:	e7f2      	b.n	8009c3e <rmw_init_options_fini+0x6e>
 8009c58:	230b      	movs	r3, #11
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	080171c4 	.word	0x080171c4
 8009c64:	2000aa34 	.word	0x2000aa34

08009c68 <rmw_init>:
 8009c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f000 80d3 	beq.w	8009e1a <rmw_init+0x1b2>
 8009c74:	460e      	mov	r6, r1
 8009c76:	2900      	cmp	r1, #0
 8009c78:	f000 80cf 	beq.w	8009e1a <rmw_init+0x1b2>
 8009c7c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009c7e:	4605      	mov	r5, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80ca 	beq.w	8009e1a <rmw_init+0x1b2>
 8009c86:	4b78      	ldr	r3, [pc, #480]	@ (8009e68 <rmw_init+0x200>)
 8009c88:	6880      	ldr	r0, [r0, #8]
 8009c8a:	681f      	ldr	r7, [r3, #0]
 8009c8c:	b128      	cbz	r0, 8009c9a <rmw_init+0x32>
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fac6 	bl	8000220 <strcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	f040 80ca 	bne.w	8009e2e <rmw_init+0x1c6>
 8009c9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c9e:	4c73      	ldr	r4, [pc, #460]	@ (8009e6c <rmw_init+0x204>)
 8009ca0:	4973      	ldr	r1, [pc, #460]	@ (8009e70 <rmw_init+0x208>)
 8009ca2:	4874      	ldr	r0, [pc, #464]	@ (8009e74 <rmw_init+0x20c>)
 8009ca4:	60b7      	str	r7, [r6, #8]
 8009ca6:	e9c6 2300 	strd	r2, r3, [r6]
 8009caa:	68eb      	ldr	r3, [r5, #12]
 8009cac:	64b3      	str	r3, [r6, #72]	@ 0x48
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f000 fe48 	bl	800a944 <rmw_uxrce_init_session_memory>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	4970      	ldr	r1, [pc, #448]	@ (8009e78 <rmw_init+0x210>)
 8009cb8:	2204      	movs	r2, #4
 8009cba:	f000 fe83 	bl	800a9c4 <rmw_uxrce_init_static_input_buffer_memory>
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	486c      	ldr	r0, [pc, #432]	@ (8009e74 <rmw_init+0x20c>)
 8009cc4:	f884 800d 	strb.w	r8, [r4, #13]
 8009cc8:	f009 f9fa 	bl	80130c0 <get_memory>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	f000 80a9 	beq.w	8009e24 <rmw_init+0x1bc>
 8009cd2:	6884      	ldr	r4, [r0, #8]
 8009cd4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8009cd6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8009cd8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8009cdc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8009ce0:	9101      	str	r1, [sp, #4]
 8009ce2:	6a00      	ldr	r0, [r0, #32]
 8009ce4:	9000      	str	r0, [sp, #0]
 8009ce6:	f104 0910 	add.w	r9, r4, #16
 8009cea:	4661      	mov	r1, ip
 8009cec:	4648      	mov	r0, r9
 8009cee:	f002 fc1b 	bl	800c528 <uxr_set_custom_transport_callbacks>
 8009cf2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8009cf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009cfa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8009cfe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8009d02:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8009d06:	495d      	ldr	r1, [pc, #372]	@ (8009e7c <rmw_init+0x214>)
 8009d08:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8009d0c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8009d10:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8009d14:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8009d18:	4859      	ldr	r0, [pc, #356]	@ (8009e80 <rmw_init+0x218>)
 8009d1a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8009d1e:	2201      	movs	r2, #1
 8009d20:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8009d22:	f000 fdef 	bl	800a904 <rmw_uxrce_init_node_memory>
 8009d26:	4957      	ldr	r1, [pc, #348]	@ (8009e84 <rmw_init+0x21c>)
 8009d28:	4857      	ldr	r0, [pc, #348]	@ (8009e88 <rmw_init+0x220>)
 8009d2a:	2205      	movs	r2, #5
 8009d2c:	f000 fdca 	bl	800a8c4 <rmw_uxrce_init_subscription_memory>
 8009d30:	4956      	ldr	r1, [pc, #344]	@ (8009e8c <rmw_init+0x224>)
 8009d32:	4857      	ldr	r0, [pc, #348]	@ (8009e90 <rmw_init+0x228>)
 8009d34:	220a      	movs	r2, #10
 8009d36:	f000 fda5 	bl	800a884 <rmw_uxrce_init_publisher_memory>
 8009d3a:	4956      	ldr	r1, [pc, #344]	@ (8009e94 <rmw_init+0x22c>)
 8009d3c:	4856      	ldr	r0, [pc, #344]	@ (8009e98 <rmw_init+0x230>)
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f000 fd60 	bl	800a804 <rmw_uxrce_init_service_memory>
 8009d44:	4955      	ldr	r1, [pc, #340]	@ (8009e9c <rmw_init+0x234>)
 8009d46:	4856      	ldr	r0, [pc, #344]	@ (8009ea0 <rmw_init+0x238>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f000 fd7b 	bl	800a844 <rmw_uxrce_init_client_memory>
 8009d4e:	4955      	ldr	r1, [pc, #340]	@ (8009ea4 <rmw_init+0x23c>)
 8009d50:	4855      	ldr	r0, [pc, #340]	@ (8009ea8 <rmw_init+0x240>)
 8009d52:	220f      	movs	r2, #15
 8009d54:	f000 fe16 	bl	800a984 <rmw_uxrce_init_topic_memory>
 8009d58:	4954      	ldr	r1, [pc, #336]	@ (8009eac <rmw_init+0x244>)
 8009d5a:	4855      	ldr	r0, [pc, #340]	@ (8009eb0 <rmw_init+0x248>)
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	f000 fe51 	bl	800aa04 <rmw_uxrce_init_init_options_impl_memory>
 8009d62:	4954      	ldr	r1, [pc, #336]	@ (8009eb4 <rmw_init+0x24c>)
 8009d64:	4854      	ldr	r0, [pc, #336]	@ (8009eb8 <rmw_init+0x250>)
 8009d66:	2204      	movs	r2, #4
 8009d68:	f000 fe6c 	bl	800aa44 <rmw_uxrce_init_wait_set_memory>
 8009d6c:	4953      	ldr	r1, [pc, #332]	@ (8009ebc <rmw_init+0x254>)
 8009d6e:	4854      	ldr	r0, [pc, #336]	@ (8009ec0 <rmw_init+0x258>)
 8009d70:	2204      	movs	r2, #4
 8009d72:	f000 fe87 	bl	800aa84 <rmw_uxrce_init_guard_condition_memory>
 8009d76:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8009d78:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	f000 fd2a 	bl	800a7d4 <rmw_uxrce_transport_init>
 8009d80:	4607      	mov	r7, r0
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d158      	bne.n	8009e38 <rmw_init+0x1d0>
 8009d86:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009d88:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8009d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d8e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8009d92:	4628      	mov	r0, r5
 8009d94:	f002 fdfc 	bl	800c990 <uxr_init_session>
 8009d98:	494a      	ldr	r1, [pc, #296]	@ (8009ec4 <rmw_init+0x25c>)
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f002 fe1b 	bl	800c9d8 <uxr_set_topic_callback>
 8009da2:	4949      	ldr	r1, [pc, #292]	@ (8009ec8 <rmw_init+0x260>)
 8009da4:	463a      	mov	r2, r7
 8009da6:	4628      	mov	r0, r5
 8009da8:	f002 fe12 	bl	800c9d0 <uxr_set_status_callback>
 8009dac:	4947      	ldr	r1, [pc, #284]	@ (8009ecc <rmw_init+0x264>)
 8009dae:	463a      	mov	r2, r7
 8009db0:	4628      	mov	r0, r5
 8009db2:	f002 fe15 	bl	800c9e0 <uxr_set_request_callback>
 8009db6:	4946      	ldr	r1, [pc, #280]	@ (8009ed0 <rmw_init+0x268>)
 8009db8:	463a      	mov	r2, r7
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f002 fe14 	bl	800c9e8 <uxr_set_reply_callback>
 8009dc0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f002 fe49 	bl	800ca64 <uxr_create_input_reliable_stream>
 8009dd2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8009dd6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8009de2:	4628      	mov	r0, r5
 8009de4:	f002 fe16 	bl	800ca14 <uxr_create_output_reliable_stream>
 8009de8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8009dec:	4628      	mov	r0, r5
 8009dee:	f002 fe33 	bl	800ca58 <uxr_create_input_best_effort_stream>
 8009df2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8009df6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8009dfa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8009dfe:	3114      	adds	r1, #20
 8009e00:	4628      	mov	r0, r5
 8009e02:	f002 fdf5 	bl	800c9f0 <uxr_create_output_best_effort_stream>
 8009e06:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f003 fb80 	bl	800d510 <uxr_create_session>
 8009e10:	b1f8      	cbz	r0, 8009e52 <rmw_init+0x1ea>
 8009e12:	4638      	mov	r0, r7
 8009e14:	b003      	add	sp, #12
 8009e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1a:	270b      	movs	r7, #11
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	b003      	add	sp, #12
 8009e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e24:	2701      	movs	r7, #1
 8009e26:	4638      	mov	r0, r7
 8009e28:	b003      	add	sp, #12
 8009e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	270c      	movs	r7, #12
 8009e30:	4638      	mov	r0, r7
 8009e32:	b003      	add	sp, #12
 8009e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e38:	4648      	mov	r0, r9
 8009e3a:	f002 fbb7 	bl	800c5ac <uxr_close_custom_transport>
 8009e3e:	480d      	ldr	r0, [pc, #52]	@ (8009e74 <rmw_init+0x20c>)
 8009e40:	4621      	mov	r1, r4
 8009e42:	f009 f94d 	bl	80130e0 <put_memory>
 8009e46:	4638      	mov	r0, r7
 8009e48:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8009e4c:	b003      	add	sp, #12
 8009e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e52:	4648      	mov	r0, r9
 8009e54:	f002 fbaa 	bl	800c5ac <uxr_close_custom_transport>
 8009e58:	4806      	ldr	r0, [pc, #24]	@ (8009e74 <rmw_init+0x20c>)
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	f009 f940 	bl	80130e0 <put_memory>
 8009e60:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8009e62:	2701      	movs	r7, #1
 8009e64:	e7d5      	b.n	8009e12 <rmw_init+0x1aa>
 8009e66:	bf00      	nop
 8009e68:	080171c4 	.word	0x080171c4
 8009e6c:	2000aa84 	.word	0x2000aa84
 8009e70:	20006d30 	.word	0x20006d30
 8009e74:	2000aa74 	.word	0x2000aa74
 8009e78:	200082d8 	.word	0x200082d8
 8009e7c:	20006354 	.word	0x20006354
 8009e80:	2000aa44 	.word	0x2000aa44
 8009e84:	2000a3d8 	.word	0x2000a3d8
 8009e88:	2000aa94 	.word	0x2000aa94
 8009e8c:	200063f8 	.word	0x200063f8
 8009e90:	2000aa54 	.word	0x2000aa54
 8009e94:	20006c68 	.word	0x20006c68
 8009e98:	2000aa64 	.word	0x2000aa64
 8009e9c:	20006188 	.word	0x20006188
 8009ea0:	20006174 	.word	0x20006174
 8009ea4:	2000a810 	.word	0x2000a810
 8009ea8:	2000aaa4 	.word	0x2000aaa4
 8009eac:	200062d0 	.word	0x200062d0
 8009eb0:	2000aa34 	.word	0x2000aa34
 8009eb4:	2000a9b4 	.word	0x2000a9b4
 8009eb8:	2000aab4 	.word	0x2000aab4
 8009ebc:	20006250 	.word	0x20006250
 8009ec0:	2000aa24 	.word	0x2000aa24
 8009ec4:	08012ef9 	.word	0x08012ef9
 8009ec8:	08012ef1 	.word	0x08012ef1
 8009ecc:	08012f91 	.word	0x08012f91
 8009ed0:	0801302d 	.word	0x0801302d

08009ed4 <rmw_context_fini>:
 8009ed4:	4b17      	ldr	r3, [pc, #92]	@ (8009f34 <rmw_context_fini+0x60>)
 8009ed6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	681c      	ldr	r4, [r3, #0]
 8009edc:	4605      	mov	r5, r0
 8009ede:	b334      	cbz	r4, 8009f2e <rmw_context_fini+0x5a>
 8009ee0:	2600      	movs	r6, #0
 8009ee2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8009ee6:	6902      	ldr	r2, [r0, #16]
 8009ee8:	428a      	cmp	r2, r1
 8009eea:	d018      	beq.n	8009f1e <rmw_context_fini+0x4a>
 8009eec:	2c00      	cmp	r4, #0
 8009eee:	d1f8      	bne.n	8009ee2 <rmw_context_fini+0xe>
 8009ef0:	b189      	cbz	r1, 8009f16 <rmw_context_fini+0x42>
 8009ef2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8009ef6:	789b      	ldrb	r3, [r3, #2]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8009efe:	bf14      	ite	ne
 8009f00:	210a      	movne	r1, #10
 8009f02:	2100      	moveq	r1, #0
 8009f04:	f003 fadc 	bl	800d4c0 <uxr_delete_session_retries>
 8009f08:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8009f0a:	f000 fddb 	bl	800aac4 <rmw_uxrce_fini_session_memory>
 8009f0e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8009f10:	3010      	adds	r0, #16
 8009f12:	f002 fb4b 	bl	800c5ac <uxr_close_custom_transport>
 8009f16:	2300      	movs	r3, #0
 8009f18:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	3018      	adds	r0, #24
 8009f20:	f000 f89c 	bl	800a05c <rmw_destroy_node>
 8009f24:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009f26:	4606      	mov	r6, r0
 8009f28:	2c00      	cmp	r4, #0
 8009f2a:	d1da      	bne.n	8009ee2 <rmw_context_fini+0xe>
 8009f2c:	e7e0      	b.n	8009ef0 <rmw_context_fini+0x1c>
 8009f2e:	4626      	mov	r6, r4
 8009f30:	e7de      	b.n	8009ef0 <rmw_context_fini+0x1c>
 8009f32:	bf00      	nop
 8009f34:	2000aa44 	.word	0x2000aa44

08009f38 <create_node>:
 8009f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d05f      	beq.n	800a002 <create_node+0xca>
 8009f42:	4606      	mov	r6, r0
 8009f44:	4835      	ldr	r0, [pc, #212]	@ (800a01c <create_node+0xe4>)
 8009f46:	460f      	mov	r7, r1
 8009f48:	4690      	mov	r8, r2
 8009f4a:	461d      	mov	r5, r3
 8009f4c:	f009 f8b8 	bl	80130c0 <get_memory>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d056      	beq.n	800a002 <create_node+0xca>
 8009f54:	6884      	ldr	r4, [r0, #8]
 8009f56:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	f009 f919 	bl	8013190 <rmw_get_implementation_identifier>
 8009f5e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8009f62:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8009f66:	f8c4 9020 	str.w	r9, [r4, #32]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7f6 f962 	bl	8000234 <strlen>
 8009f70:	1c42      	adds	r2, r0, #1
 8009f72:	2a3c      	cmp	r2, #60	@ 0x3c
 8009f74:	f104 0518 	add.w	r5, r4, #24
 8009f78:	d840      	bhi.n	8009ffc <create_node+0xc4>
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8009f82:	f00b fc90 	bl	80158a6 <memcpy>
 8009f86:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	f7f6 f952 	bl	8000234 <strlen>
 8009f90:	1c42      	adds	r2, r0, #1
 8009f92:	2a3c      	cmp	r2, #60	@ 0x3c
 8009f94:	d832      	bhi.n	8009ffc <create_node+0xc4>
 8009f96:	4639      	mov	r1, r7
 8009f98:	4648      	mov	r0, r9
 8009f9a:	f00b fc84 	bl	80158a6 <memcpy>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8009faa:	1842      	adds	r2, r0, r1
 8009fac:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8009fb0:	f002 fb00 	bl	800c5b4 <uxr_object_id>
 8009fb4:	6160      	str	r0, [r4, #20]
 8009fb6:	783b      	ldrb	r3, [r7, #0]
 8009fb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009fba:	d127      	bne.n	800a00c <create_node+0xd4>
 8009fbc:	787b      	ldrb	r3, [r7, #1]
 8009fbe:	bb2b      	cbnz	r3, 800a00c <create_node+0xd4>
 8009fc0:	4a17      	ldr	r2, [pc, #92]	@ (800a020 <create_node+0xe8>)
 8009fc2:	4818      	ldr	r0, [pc, #96]	@ (800a024 <create_node+0xec>)
 8009fc4:	4633      	mov	r3, r6
 8009fc6:	213c      	movs	r1, #60	@ 0x3c
 8009fc8:	f00b fac4 	bl	8015554 <sniprintf>
 8009fcc:	6920      	ldr	r0, [r4, #16]
 8009fce:	4915      	ldr	r1, [pc, #84]	@ (800a024 <create_node+0xec>)
 8009fd0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8009fd4:	9100      	str	r1, [sp, #0]
 8009fd6:	2106      	movs	r1, #6
 8009fd8:	9101      	str	r1, [sp, #4]
 8009fda:	6811      	ldr	r1, [r2, #0]
 8009fdc:	6962      	ldr	r2, [r4, #20]
 8009fde:	fa1f f388 	uxth.w	r3, r8
 8009fe2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009fe6:	f002 f86d 	bl	800c0c4 <uxr_buffer_create_participant_bin>
 8009fea:	4602      	mov	r2, r0
 8009fec:	6920      	ldr	r0, [r4, #16]
 8009fee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009ff2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009ff6:	f000 fedd 	bl	800adb4 <run_xrce_session>
 8009ffa:	b918      	cbnz	r0, 800a004 <create_node+0xcc>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 fd67 	bl	800aad0 <rmw_uxrce_fini_node_memory>
 800a002:	2500      	movs	r5, #0
 800a004:	4628      	mov	r0, r5
 800a006:	b003      	add	sp, #12
 800a008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a00c:	4a06      	ldr	r2, [pc, #24]	@ (800a028 <create_node+0xf0>)
 800a00e:	9600      	str	r6, [sp, #0]
 800a010:	463b      	mov	r3, r7
 800a012:	213c      	movs	r1, #60	@ 0x3c
 800a014:	4803      	ldr	r0, [pc, #12]	@ (800a024 <create_node+0xec>)
 800a016:	f00b fa9d 	bl	8015554 <sniprintf>
 800a01a:	e7d7      	b.n	8009fcc <create_node+0x94>
 800a01c:	2000aa44 	.word	0x2000aa44
 800a020:	0801693c 	.word	0x0801693c
 800a024:	20006138 	.word	0x20006138
 800a028:	08016900 	.word	0x08016900

0800a02c <rmw_create_node>:
 800a02c:	b199      	cbz	r1, 800a056 <rmw_create_node+0x2a>
 800a02e:	780b      	ldrb	r3, [r1, #0]
 800a030:	468c      	mov	ip, r1
 800a032:	b183      	cbz	r3, 800a056 <rmw_create_node+0x2a>
 800a034:	b410      	push	{r4}
 800a036:	4614      	mov	r4, r2
 800a038:	b14a      	cbz	r2, 800a04e <rmw_create_node+0x22>
 800a03a:	7813      	ldrb	r3, [r2, #0]
 800a03c:	b13b      	cbz	r3, 800a04e <rmw_create_node+0x22>
 800a03e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800a040:	4603      	mov	r3, r0
 800a042:	4621      	mov	r1, r4
 800a044:	4660      	mov	r0, ip
 800a046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a04a:	f7ff bf75 	b.w	8009f38 <create_node>
 800a04e:	2000      	movs	r0, #0
 800a050:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	2000      	movs	r0, #0
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop

0800a05c <rmw_destroy_node>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	b328      	cbz	r0, 800a0ac <rmw_destroy_node+0x50>
 800a060:	4607      	mov	r7, r0
 800a062:	6800      	ldr	r0, [r0, #0]
 800a064:	b120      	cbz	r0, 800a070 <rmw_destroy_node+0x14>
 800a066:	4b36      	ldr	r3, [pc, #216]	@ (800a140 <rmw_destroy_node+0xe4>)
 800a068:	6819      	ldr	r1, [r3, #0]
 800a06a:	f7f6 f8d9 	bl	8000220 <strcmp>
 800a06e:	b9e8      	cbnz	r0, 800a0ac <rmw_destroy_node+0x50>
 800a070:	687d      	ldr	r5, [r7, #4]
 800a072:	b1dd      	cbz	r5, 800a0ac <rmw_destroy_node+0x50>
 800a074:	4b33      	ldr	r3, [pc, #204]	@ (800a144 <rmw_destroy_node+0xe8>)
 800a076:	681c      	ldr	r4, [r3, #0]
 800a078:	2c00      	cmp	r4, #0
 800a07a:	d05f      	beq.n	800a13c <rmw_destroy_node+0xe0>
 800a07c:	2600      	movs	r6, #0
 800a07e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a082:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800a086:	429d      	cmp	r5, r3
 800a088:	d013      	beq.n	800a0b2 <rmw_destroy_node+0x56>
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	d1f7      	bne.n	800a07e <rmw_destroy_node+0x22>
 800a08e:	4b2e      	ldr	r3, [pc, #184]	@ (800a148 <rmw_destroy_node+0xec>)
 800a090:	681c      	ldr	r4, [r3, #0]
 800a092:	b1c4      	cbz	r4, 800a0c6 <rmw_destroy_node+0x6a>
 800a094:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a098:	6a0b      	ldr	r3, [r1, #32]
 800a09a:	429d      	cmp	r5, r3
 800a09c:	d1f9      	bne.n	800a092 <rmw_destroy_node+0x36>
 800a09e:	317c      	adds	r1, #124	@ 0x7c
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f000 fb37 	bl	800a714 <rmw_destroy_subscription>
 800a0a6:	2801      	cmp	r0, #1
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	d1f2      	bne.n	800a092 <rmw_destroy_node+0x36>
 800a0ac:	2601      	movs	r6, #1
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b2:	3184      	adds	r1, #132	@ 0x84
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f000 f9a5 	bl	800a404 <rmw_destroy_publisher>
 800a0ba:	2801      	cmp	r0, #1
 800a0bc:	4606      	mov	r6, r0
 800a0be:	d0f5      	beq.n	800a0ac <rmw_destroy_node+0x50>
 800a0c0:	2c00      	cmp	r4, #0
 800a0c2:	d1dc      	bne.n	800a07e <rmw_destroy_node+0x22>
 800a0c4:	e7e3      	b.n	800a08e <rmw_destroy_node+0x32>
 800a0c6:	4b21      	ldr	r3, [pc, #132]	@ (800a14c <rmw_destroy_node+0xf0>)
 800a0c8:	681c      	ldr	r4, [r3, #0]
 800a0ca:	b16c      	cbz	r4, 800a0e8 <rmw_destroy_node+0x8c>
 800a0cc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a0d0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800a0d2:	429d      	cmp	r5, r3
 800a0d4:	d1f9      	bne.n	800a0ca <rmw_destroy_node+0x6e>
 800a0d6:	317c      	adds	r1, #124	@ 0x7c
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f000 f9e5 	bl	800a4a8 <rmw_destroy_service>
 800a0de:	2801      	cmp	r0, #1
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	d0e3      	beq.n	800a0ac <rmw_destroy_node+0x50>
 800a0e4:	2c00      	cmp	r4, #0
 800a0e6:	d1f1      	bne.n	800a0cc <rmw_destroy_node+0x70>
 800a0e8:	4b19      	ldr	r3, [pc, #100]	@ (800a150 <rmw_destroy_node+0xf4>)
 800a0ea:	681c      	ldr	r4, [r3, #0]
 800a0ec:	b16c      	cbz	r4, 800a10a <rmw_destroy_node+0xae>
 800a0ee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a0f2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800a0f4:	429d      	cmp	r5, r3
 800a0f6:	d1f9      	bne.n	800a0ec <rmw_destroy_node+0x90>
 800a0f8:	317c      	adds	r1, #124	@ 0x7c
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	f009 f804 	bl	8013108 <rmw_destroy_client>
 800a100:	2801      	cmp	r0, #1
 800a102:	4606      	mov	r6, r0
 800a104:	d0d2      	beq.n	800a0ac <rmw_destroy_node+0x50>
 800a106:	2c00      	cmp	r4, #0
 800a108:	d1f1      	bne.n	800a0ee <rmw_destroy_node+0x92>
 800a10a:	6928      	ldr	r0, [r5, #16]
 800a10c:	696a      	ldr	r2, [r5, #20]
 800a10e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a112:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a116:	6819      	ldr	r1, [r3, #0]
 800a118:	f001 ff88 	bl	800c02c <uxr_buffer_delete_entity>
 800a11c:	4602      	mov	r2, r0
 800a11e:	6928      	ldr	r0, [r5, #16]
 800a120:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a124:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a128:	f000 fe44 	bl	800adb4 <run_xrce_session>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	bf08      	it	eq
 800a130:	2602      	moveq	r6, #2
 800a132:	4638      	mov	r0, r7
 800a134:	f000 fccc 	bl	800aad0 <rmw_uxrce_fini_node_memory>
 800a138:	4630      	mov	r0, r6
 800a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13c:	4626      	mov	r6, r4
 800a13e:	e7a6      	b.n	800a08e <rmw_destroy_node+0x32>
 800a140:	080171c4 	.word	0x080171c4
 800a144:	2000aa54 	.word	0x2000aa54
 800a148:	2000aa94 	.word	0x2000aa94
 800a14c:	2000aa64 	.word	0x2000aa64
 800a150:	20006174 	.word	0x20006174

0800a154 <rmw_node_get_graph_guard_condition>:
 800a154:	6843      	ldr	r3, [r0, #4]
 800a156:	6918      	ldr	r0, [r3, #16]
 800a158:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop

0800a160 <flush_session>:
 800a160:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a162:	f003 b865 	b.w	800d230 <uxr_run_session_until_confirm_delivery>
 800a166:	bf00      	nop

0800a168 <rmw_publish>:
 800a168:	2800      	cmp	r0, #0
 800a16a:	d053      	beq.n	800a214 <rmw_publish+0xac>
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	460d      	mov	r5, r1
 800a170:	b08e      	sub	sp, #56	@ 0x38
 800a172:	2900      	cmp	r1, #0
 800a174:	d04b      	beq.n	800a20e <rmw_publish+0xa6>
 800a176:	4604      	mov	r4, r0
 800a178:	6800      	ldr	r0, [r0, #0]
 800a17a:	f000 fe9b 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d045      	beq.n	800a20e <rmw_publish+0xa6>
 800a182:	6866      	ldr	r6, [r4, #4]
 800a184:	2e00      	cmp	r6, #0
 800a186:	d042      	beq.n	800a20e <rmw_publish+0xa6>
 800a188:	69b4      	ldr	r4, [r6, #24]
 800a18a:	4628      	mov	r0, r5
 800a18c:	6923      	ldr	r3, [r4, #16]
 800a18e:	4798      	blx	r3
 800a190:	69f3      	ldr	r3, [r6, #28]
 800a192:	9005      	str	r0, [sp, #20]
 800a194:	b113      	cbz	r3, 800a19c <rmw_publish+0x34>
 800a196:	a805      	add	r0, sp, #20
 800a198:	4798      	blx	r3
 800a19a:	9805      	ldr	r0, [sp, #20]
 800a19c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	9000      	str	r0, [sp, #0]
 800a1a4:	6972      	ldr	r2, [r6, #20]
 800a1a6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a1a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a1ac:	ab06      	add	r3, sp, #24
 800a1ae:	f004 fabd 	bl	800e72c <uxr_prepare_output_stream>
 800a1b2:	b1d8      	cbz	r0, 800a1ec <rmw_publish+0x84>
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	a906      	add	r1, sp, #24
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	4798      	blx	r3
 800a1bc:	6a33      	ldr	r3, [r6, #32]
 800a1be:	4604      	mov	r4, r0
 800a1c0:	b10b      	cbz	r3, 800a1c6 <rmw_publish+0x5e>
 800a1c2:	a806      	add	r0, sp, #24
 800a1c4:	4798      	blx	r3
 800a1c6:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a1d0:	d022      	beq.n	800a218 <rmw_publish+0xb0>
 800a1d2:	6918      	ldr	r0, [r3, #16]
 800a1d4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a1d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a1da:	f003 f829 	bl	800d230 <uxr_run_session_until_confirm_delivery>
 800a1de:	4020      	ands	r0, r4
 800a1e0:	b2c4      	uxtb	r4, r0
 800a1e2:	f084 0001 	eor.w	r0, r4, #1
 800a1e6:	b2c0      	uxtb	r0, r0
 800a1e8:	b00e      	add	sp, #56	@ 0x38
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a1f0:	6918      	ldr	r0, [r3, #16]
 800a1f2:	9b05      	ldr	r3, [sp, #20]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <rmw_publish+0xbc>)
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	9602      	str	r6, [sp, #8]
 800a1fc:	6972      	ldr	r2, [r6, #20]
 800a1fe:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a204:	ab06      	add	r3, sp, #24
 800a206:	f004 fac1 	bl	800e78c <uxr_prepare_output_stream_fragmented>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d1d2      	bne.n	800a1b4 <rmw_publish+0x4c>
 800a20e:	2001      	movs	r0, #1
 800a210:	b00e      	add	sp, #56	@ 0x38
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	2001      	movs	r0, #1
 800a216:	4770      	bx	lr
 800a218:	6918      	ldr	r0, [r3, #16]
 800a21a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a21e:	f002 fc47 	bl	800cab0 <uxr_flash_output_streams>
 800a222:	e7de      	b.n	800a1e2 <rmw_publish+0x7a>
 800a224:	0800a161 	.word	0x0800a161

0800a228 <rmw_create_publisher>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	b087      	sub	sp, #28
 800a22e:	2800      	cmp	r0, #0
 800a230:	f000 80cc 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a234:	460e      	mov	r6, r1
 800a236:	2900      	cmp	r1, #0
 800a238:	f000 80c8 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a23c:	4604      	mov	r4, r0
 800a23e:	6800      	ldr	r0, [r0, #0]
 800a240:	4615      	mov	r5, r2
 800a242:	4698      	mov	r8, r3
 800a244:	f000 fe36 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a248:	2800      	cmp	r0, #0
 800a24a:	f000 80bf 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a24e:	2d00      	cmp	r5, #0
 800a250:	f000 80bc 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a254:	782b      	ldrb	r3, [r5, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 80b8 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a25c:	f1b8 0f00 	cmp.w	r8, #0
 800a260:	f000 80b4 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a264:	485c      	ldr	r0, [pc, #368]	@ (800a3d8 <rmw_create_publisher+0x1b0>)
 800a266:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a26a:	f008 ff29 	bl	80130c0 <get_memory>
 800a26e:	2800      	cmp	r0, #0
 800a270:	f000 80ac 	beq.w	800a3cc <rmw_create_publisher+0x1a4>
 800a274:	6884      	ldr	r4, [r0, #8]
 800a276:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a27a:	f008 ff89 	bl	8013190 <rmw_get_implementation_identifier>
 800a27e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a282:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a286:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7f5 ffd2 	bl	8000234 <strlen>
 800a290:	3001      	adds	r0, #1
 800a292:	283c      	cmp	r0, #60	@ 0x3c
 800a294:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800a298:	f200 8091 	bhi.w	800a3be <rmw_create_publisher+0x196>
 800a29c:	4a4f      	ldr	r2, [pc, #316]	@ (800a3dc <rmw_create_publisher+0x1b4>)
 800a29e:	462b      	mov	r3, r5
 800a2a0:	213c      	movs	r1, #60	@ 0x3c
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	f00b f956 	bl	8015554 <sniprintf>
 800a2a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a2ac:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a2ae:	4641      	mov	r1, r8
 800a2b0:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a2b4:	2250      	movs	r2, #80	@ 0x50
 800a2b6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a2ba:	f00b faf4 	bl	80158a6 <memcpy>
 800a2be:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a2c2:	4947      	ldr	r1, [pc, #284]	@ (800a3e0 <rmw_create_publisher+0x1b8>)
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2ca:	bf0c      	ite	eq
 800a2cc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a2d0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a2d4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f000 fdf7 	bl	800aed0 <get_message_typesupport_handle>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d06b      	beq.n	800a3be <rmw_create_publisher+0x196>
 800a2e6:	6842      	ldr	r2, [r0, #4]
 800a2e8:	61a2      	str	r2, [r4, #24]
 800a2ea:	2a00      	cmp	r2, #0
 800a2ec:	d067      	beq.n	800a3be <rmw_create_publisher+0x196>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4643      	mov	r3, r8
 800a2f2:	4648      	mov	r0, r9
 800a2f4:	f008 ff52 	bl	801319c <create_topic>
 800a2f8:	6260      	str	r0, [r4, #36]	@ 0x24
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d063      	beq.n	800a3c6 <rmw_create_publisher+0x19e>
 800a2fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a306:	2103      	movs	r1, #3
 800a308:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a30c:	1c42      	adds	r2, r0, #1
 800a30e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a312:	f002 f94f 	bl	800c5b4 <uxr_object_id>
 800a316:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a31a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a31e:	6120      	str	r0, [r4, #16]
 800a320:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a324:	6910      	ldr	r0, [r2, #16]
 800a326:	2506      	movs	r5, #6
 800a328:	9500      	str	r5, [sp, #0]
 800a32a:	6819      	ldr	r1, [r3, #0]
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a332:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a336:	f001 ff2d 	bl	800c194 <uxr_buffer_create_publisher_bin>
 800a33a:	4602      	mov	r2, r0
 800a33c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a340:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a344:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a348:	f000 fd34 	bl	800adb4 <run_xrce_session>
 800a34c:	b3b8      	cbz	r0, 800a3be <rmw_create_publisher+0x196>
 800a34e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a356:	2105      	movs	r1, #5
 800a358:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a35c:	1c42      	adds	r2, r0, #1
 800a35e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a362:	f002 f927 	bl	800c5b4 <uxr_object_id>
 800a366:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a36a:	6160      	str	r0, [r4, #20]
 800a36c:	691e      	ldr	r6, [r3, #16]
 800a36e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a372:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a376:	f10d 0a10 	add.w	sl, sp, #16
 800a37a:	4641      	mov	r1, r8
 800a37c:	4650      	mov	r0, sl
 800a37e:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800a382:	f000 fd33 	bl	800adec <convert_qos_profile>
 800a386:	9503      	str	r5, [sp, #12]
 800a388:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a38c:	9001      	str	r0, [sp, #4]
 800a38e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a392:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a39c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a3a0:	f8d8 1000 	ldr.w	r1, [r8]
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f001 ff55 	bl	800c254 <uxr_buffer_create_datawriter_bin>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a3b0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a3b4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a3b8:	f000 fcfc 	bl	800adb4 <run_xrce_session>
 800a3bc:	b938      	cbnz	r0, 800a3ce <rmw_create_publisher+0x1a6>
 800a3be:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a3c0:	b108      	cbz	r0, 800a3c6 <rmw_create_publisher+0x19e>
 800a3c2:	f000 fbf5 	bl	800abb0 <rmw_uxrce_fini_topic_memory>
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	f000 fb9a 	bl	800ab00 <rmw_uxrce_fini_publisher_memory>
 800a3cc:	2700      	movs	r7, #0
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	b007      	add	sp, #28
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	bf00      	nop
 800a3d8:	2000aa54 	.word	0x2000aa54
 800a3dc:	0801693c 	.word	0x0801693c
 800a3e0:	08016908 	.word	0x08016908

0800a3e4 <rmw_publisher_get_actual_qos>:
 800a3e4:	b150      	cbz	r0, 800a3fc <rmw_publisher_get_actual_qos+0x18>
 800a3e6:	b508      	push	{r3, lr}
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	b149      	cbz	r1, 800a400 <rmw_publisher_get_actual_qos+0x1c>
 800a3ec:	6841      	ldr	r1, [r0, #4]
 800a3ee:	2250      	movs	r2, #80	@ 0x50
 800a3f0:	3128      	adds	r1, #40	@ 0x28
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f00b fa57 	bl	80158a6 <memcpy>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	bd08      	pop	{r3, pc}
 800a3fc:	200b      	movs	r0, #11
 800a3fe:	4770      	bx	lr
 800a400:	200b      	movs	r0, #11
 800a402:	bd08      	pop	{r3, pc}

0800a404 <rmw_destroy_publisher>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	b128      	cbz	r0, 800a414 <rmw_destroy_publisher+0x10>
 800a408:	4604      	mov	r4, r0
 800a40a:	6800      	ldr	r0, [r0, #0]
 800a40c:	460d      	mov	r5, r1
 800a40e:	f000 fd51 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a412:	b910      	cbnz	r0, 800a41a <rmw_destroy_publisher+0x16>
 800a414:	2401      	movs	r4, #1
 800a416:	4620      	mov	r0, r4
 800a418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0f9      	beq.n	800a414 <rmw_destroy_publisher+0x10>
 800a420:	2d00      	cmp	r5, #0
 800a422:	d0f7      	beq.n	800a414 <rmw_destroy_publisher+0x10>
 800a424:	6828      	ldr	r0, [r5, #0]
 800a426:	f000 fd45 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0f2      	beq.n	800a414 <rmw_destroy_publisher+0x10>
 800a42e:	686c      	ldr	r4, [r5, #4]
 800a430:	2c00      	cmp	r4, #0
 800a432:	d0ef      	beq.n	800a414 <rmw_destroy_publisher+0x10>
 800a434:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a436:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a43a:	f008 feff 	bl	801323c <destroy_topic>
 800a43e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a442:	6962      	ldr	r2, [r4, #20]
 800a444:	6918      	ldr	r0, [r3, #16]
 800a446:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a44a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a44e:	6819      	ldr	r1, [r3, #0]
 800a450:	f001 fdec 	bl	800c02c <uxr_buffer_delete_entity>
 800a454:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a458:	6922      	ldr	r2, [r4, #16]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800a460:	4604      	mov	r4, r0
 800a462:	6809      	ldr	r1, [r1, #0]
 800a464:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a468:	f001 fde0 	bl	800c02c <uxr_buffer_delete_entity>
 800a46c:	693e      	ldr	r6, [r7, #16]
 800a46e:	4622      	mov	r2, r4
 800a470:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a474:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a478:	4604      	mov	r4, r0
 800a47a:	4630      	mov	r0, r6
 800a47c:	f000 fc9a 	bl	800adb4 <run_xrce_session>
 800a480:	693e      	ldr	r6, [r7, #16]
 800a482:	4622      	mov	r2, r4
 800a484:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a488:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a48c:	4604      	mov	r4, r0
 800a48e:	4630      	mov	r0, r6
 800a490:	f000 fc90 	bl	800adb4 <run_xrce_session>
 800a494:	b12c      	cbz	r4, 800a4a2 <rmw_destroy_publisher+0x9e>
 800a496:	b120      	cbz	r0, 800a4a2 <rmw_destroy_publisher+0x9e>
 800a498:	2400      	movs	r4, #0
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 fb30 	bl	800ab00 <rmw_uxrce_fini_publisher_memory>
 800a4a0:	e7b9      	b.n	800a416 <rmw_destroy_publisher+0x12>
 800a4a2:	2402      	movs	r4, #2
 800a4a4:	e7f9      	b.n	800a49a <rmw_destroy_publisher+0x96>
 800a4a6:	bf00      	nop

0800a4a8 <rmw_destroy_service>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	b128      	cbz	r0, 800a4b8 <rmw_destroy_service+0x10>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	6800      	ldr	r0, [r0, #0]
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	f000 fcff 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a4b6:	b910      	cbnz	r0, 800a4be <rmw_destroy_service+0x16>
 800a4b8:	2401      	movs	r4, #1
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
 800a4be:	6863      	ldr	r3, [r4, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0f9      	beq.n	800a4b8 <rmw_destroy_service+0x10>
 800a4c4:	2d00      	cmp	r5, #0
 800a4c6:	d0f7      	beq.n	800a4b8 <rmw_destroy_service+0x10>
 800a4c8:	6828      	ldr	r0, [r5, #0]
 800a4ca:	f000 fcf3 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d0f2      	beq.n	800a4b8 <rmw_destroy_service+0x10>
 800a4d2:	686e      	ldr	r6, [r5, #4]
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	d0ef      	beq.n	800a4b8 <rmw_destroy_service+0x10>
 800a4d8:	6864      	ldr	r4, [r4, #4]
 800a4da:	6932      	ldr	r2, [r6, #16]
 800a4dc:	6920      	ldr	r0, [r4, #16]
 800a4de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a4e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a4e6:	6819      	ldr	r1, [r3, #0]
 800a4e8:	f002 f8ce 	bl	800c688 <uxr_buffer_cancel_data>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	6920      	ldr	r0, [r4, #16]
 800a4f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a4f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a4f8:	f000 fc5c 	bl	800adb4 <run_xrce_session>
 800a4fc:	6920      	ldr	r0, [r4, #16]
 800a4fe:	6932      	ldr	r2, [r6, #16]
 800a500:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a504:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a508:	6819      	ldr	r1, [r3, #0]
 800a50a:	f001 fd8f 	bl	800c02c <uxr_buffer_delete_entity>
 800a50e:	4602      	mov	r2, r0
 800a510:	6920      	ldr	r0, [r4, #16]
 800a512:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a516:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a51a:	f000 fc4b 	bl	800adb4 <run_xrce_session>
 800a51e:	2800      	cmp	r0, #0
 800a520:	4628      	mov	r0, r5
 800a522:	bf14      	ite	ne
 800a524:	2400      	movne	r4, #0
 800a526:	2402      	moveq	r4, #2
 800a528:	f000 fb16 	bl	800ab58 <rmw_uxrce_fini_service_memory>
 800a52c:	e7c5      	b.n	800a4ba <rmw_destroy_service+0x12>
 800a52e:	bf00      	nop

0800a530 <rmw_create_subscription>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	b08d      	sub	sp, #52	@ 0x34
 800a536:	2800      	cmp	r0, #0
 800a538:	f000 80d1 	beq.w	800a6de <rmw_create_subscription+0x1ae>
 800a53c:	460e      	mov	r6, r1
 800a53e:	2900      	cmp	r1, #0
 800a540:	f000 80cd 	beq.w	800a6de <rmw_create_subscription+0x1ae>
 800a544:	4604      	mov	r4, r0
 800a546:	6800      	ldr	r0, [r0, #0]
 800a548:	4615      	mov	r5, r2
 800a54a:	4698      	mov	r8, r3
 800a54c:	f000 fcb2 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a550:	2800      	cmp	r0, #0
 800a552:	f000 80c4 	beq.w	800a6de <rmw_create_subscription+0x1ae>
 800a556:	2d00      	cmp	r5, #0
 800a558:	f000 80c1 	beq.w	800a6de <rmw_create_subscription+0x1ae>
 800a55c:	782b      	ldrb	r3, [r5, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 80bd 	beq.w	800a6de <rmw_create_subscription+0x1ae>
 800a564:	f1b8 0f00 	cmp.w	r8, #0
 800a568:	f000 80b9 	beq.w	800a6de <rmw_create_subscription+0x1ae>
 800a56c:	485e      	ldr	r0, [pc, #376]	@ (800a6e8 <rmw_create_subscription+0x1b8>)
 800a56e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a572:	f008 fda5 	bl	80130c0 <get_memory>
 800a576:	4604      	mov	r4, r0
 800a578:	2800      	cmp	r0, #0
 800a57a:	f000 80b1 	beq.w	800a6e0 <rmw_create_subscription+0x1b0>
 800a57e:	6887      	ldr	r7, [r0, #8]
 800a580:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800a584:	f008 fe04 	bl	8013190 <rmw_get_implementation_identifier>
 800a588:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800a58c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800a58e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800a592:	4628      	mov	r0, r5
 800a594:	f7f5 fe4e 	bl	8000234 <strlen>
 800a598:	3001      	adds	r0, #1
 800a59a:	283c      	cmp	r0, #60	@ 0x3c
 800a59c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800a5a0:	f200 8096 	bhi.w	800a6d0 <rmw_create_subscription+0x1a0>
 800a5a4:	4a51      	ldr	r2, [pc, #324]	@ (800a6ec <rmw_create_subscription+0x1bc>)
 800a5a6:	462b      	mov	r3, r5
 800a5a8:	213c      	movs	r1, #60	@ 0x3c
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	f00a ffd2 	bl	8015554 <sniprintf>
 800a5b0:	4641      	mov	r1, r8
 800a5b2:	f8c7 9020 	str.w	r9, [r7, #32]
 800a5b6:	2250      	movs	r2, #80	@ 0x50
 800a5b8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a5bc:	f00b f973 	bl	80158a6 <memcpy>
 800a5c0:	494b      	ldr	r1, [pc, #300]	@ (800a6f0 <rmw_create_subscription+0x1c0>)
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f000 fc84 	bl	800aed0 <get_message_typesupport_handle>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	f000 8081 	beq.w	800a6d0 <rmw_create_subscription+0x1a0>
 800a5ce:	6842      	ldr	r2, [r0, #4]
 800a5d0:	61ba      	str	r2, [r7, #24]
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d07c      	beq.n	800a6d0 <rmw_create_subscription+0x1a0>
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	4643      	mov	r3, r8
 800a5da:	4648      	mov	r0, r9
 800a5dc:	f008 fdde 	bl	801319c <create_topic>
 800a5e0:	61f8      	str	r0, [r7, #28]
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d078      	beq.n	800a6d8 <rmw_create_subscription+0x1a8>
 800a5e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5ee:	2104      	movs	r1, #4
 800a5f0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800a5f4:	1c42      	adds	r2, r0, #1
 800a5f6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800a5fa:	f001 ffdb 	bl	800c5b4 <uxr_object_id>
 800a5fe:	6138      	str	r0, [r7, #16]
 800a600:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a604:	2506      	movs	r5, #6
 800a606:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800a60a:	9500      	str	r5, [sp, #0]
 800a60c:	6819      	ldr	r1, [r3, #0]
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a614:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a618:	f001 fdec 	bl	800c1f4 <uxr_buffer_create_subscriber_bin>
 800a61c:	4602      	mov	r2, r0
 800a61e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a622:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a626:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a62a:	f000 fbc3 	bl	800adb4 <run_xrce_session>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d04e      	beq.n	800a6d0 <rmw_create_subscription+0x1a0>
 800a632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a63a:	4629      	mov	r1, r5
 800a63c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800a640:	1c42      	adds	r2, r0, #1
 800a642:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800a646:	f001 ffb5 	bl	800c5b4 <uxr_object_id>
 800a64a:	ae08      	add	r6, sp, #32
 800a64c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	6178      	str	r0, [r7, #20]
 800a654:	4641      	mov	r1, r8
 800a656:	4630      	mov	r0, r6
 800a658:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800a65c:	9305      	str	r3, [sp, #20]
 800a65e:	f000 fbc5 	bl	800adec <convert_qos_profile>
 800a662:	9503      	str	r5, [sp, #12]
 800a664:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	9001      	str	r0, [sp, #4]
 800a66c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800a678:	f8db 1000 	ldr.w	r1, [fp]
 800a67c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800a680:	f001 fe5e 	bl	800c340 <uxr_buffer_create_datareader_bin>
 800a684:	4602      	mov	r2, r0
 800a686:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a68a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a68e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a692:	f000 fb8f 	bl	800adb4 <run_xrce_session>
 800a696:	b1d8      	cbz	r0, 800a6d0 <rmw_create_subscription+0x1a0>
 800a698:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a69c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	bf0c      	ite	eq
 800a6a4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800a6a8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800a6ac:	9307      	str	r3, [sp, #28]
 800a6ae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800a6b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	9b07      	ldr	r3, [sp, #28]
 800a6c4:	6809      	ldr	r1, [r1, #0]
 800a6c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a6ca:	f001 ffa3 	bl	800c614 <uxr_buffer_request_data>
 800a6ce:	e007      	b.n	800a6e0 <rmw_create_subscription+0x1b0>
 800a6d0:	69f8      	ldr	r0, [r7, #28]
 800a6d2:	b108      	cbz	r0, 800a6d8 <rmw_create_subscription+0x1a8>
 800a6d4:	f000 fa6c 	bl	800abb0 <rmw_uxrce_fini_topic_memory>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 fa27 	bl	800ab2c <rmw_uxrce_fini_subscription_memory>
 800a6de:	2400      	movs	r4, #0
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	b00d      	add	sp, #52	@ 0x34
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	2000aa94 	.word	0x2000aa94
 800a6ec:	0801693c 	.word	0x0801693c
 800a6f0:	08016908 	.word	0x08016908

0800a6f4 <rmw_subscription_get_actual_qos>:
 800a6f4:	b150      	cbz	r0, 800a70c <rmw_subscription_get_actual_qos+0x18>
 800a6f6:	b508      	push	{r3, lr}
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	b149      	cbz	r1, 800a710 <rmw_subscription_get_actual_qos+0x1c>
 800a6fc:	6841      	ldr	r1, [r0, #4]
 800a6fe:	2250      	movs	r2, #80	@ 0x50
 800a700:	3128      	adds	r1, #40	@ 0x28
 800a702:	4618      	mov	r0, r3
 800a704:	f00b f8cf 	bl	80158a6 <memcpy>
 800a708:	2000      	movs	r0, #0
 800a70a:	bd08      	pop	{r3, pc}
 800a70c:	200b      	movs	r0, #11
 800a70e:	4770      	bx	lr
 800a710:	200b      	movs	r0, #11
 800a712:	bd08      	pop	{r3, pc}

0800a714 <rmw_destroy_subscription>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	b128      	cbz	r0, 800a724 <rmw_destroy_subscription+0x10>
 800a718:	4604      	mov	r4, r0
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	460d      	mov	r5, r1
 800a71e:	f000 fbc9 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a722:	b910      	cbnz	r0, 800a72a <rmw_destroy_subscription+0x16>
 800a724:	2401      	movs	r4, #1
 800a726:	4620      	mov	r0, r4
 800a728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a72a:	6863      	ldr	r3, [r4, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0f9      	beq.n	800a724 <rmw_destroy_subscription+0x10>
 800a730:	2d00      	cmp	r5, #0
 800a732:	d0f7      	beq.n	800a724 <rmw_destroy_subscription+0x10>
 800a734:	6828      	ldr	r0, [r5, #0]
 800a736:	f000 fbbd 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0f2      	beq.n	800a724 <rmw_destroy_subscription+0x10>
 800a73e:	686c      	ldr	r4, [r5, #4]
 800a740:	2c00      	cmp	r4, #0
 800a742:	d0ef      	beq.n	800a724 <rmw_destroy_subscription+0x10>
 800a744:	6a26      	ldr	r6, [r4, #32]
 800a746:	6962      	ldr	r2, [r4, #20]
 800a748:	6930      	ldr	r0, [r6, #16]
 800a74a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a74e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a752:	6819      	ldr	r1, [r3, #0]
 800a754:	f001 ff98 	bl	800c688 <uxr_buffer_cancel_data>
 800a758:	4602      	mov	r2, r0
 800a75a:	6930      	ldr	r0, [r6, #16]
 800a75c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a760:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a764:	f000 fb26 	bl	800adb4 <run_xrce_session>
 800a768:	69e0      	ldr	r0, [r4, #28]
 800a76a:	f008 fd67 	bl	801323c <destroy_topic>
 800a76e:	6a23      	ldr	r3, [r4, #32]
 800a770:	6962      	ldr	r2, [r4, #20]
 800a772:	6918      	ldr	r0, [r3, #16]
 800a774:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a778:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a77c:	6819      	ldr	r1, [r3, #0]
 800a77e:	f001 fc55 	bl	800c02c <uxr_buffer_delete_entity>
 800a782:	6a23      	ldr	r3, [r4, #32]
 800a784:	6922      	ldr	r2, [r4, #16]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800a78c:	4604      	mov	r4, r0
 800a78e:	6809      	ldr	r1, [r1, #0]
 800a790:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a794:	f001 fc4a 	bl	800c02c <uxr_buffer_delete_entity>
 800a798:	6937      	ldr	r7, [r6, #16]
 800a79a:	4622      	mov	r2, r4
 800a79c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800a7a0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f000 fb04 	bl	800adb4 <run_xrce_session>
 800a7ac:	6936      	ldr	r6, [r6, #16]
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a7b4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f000 fafa 	bl	800adb4 <run_xrce_session>
 800a7c0:	b12c      	cbz	r4, 800a7ce <rmw_destroy_subscription+0xba>
 800a7c2:	b120      	cbz	r0, 800a7ce <rmw_destroy_subscription+0xba>
 800a7c4:	2400      	movs	r4, #0
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f9b0 	bl	800ab2c <rmw_uxrce_fini_subscription_memory>
 800a7cc:	e7ab      	b.n	800a726 <rmw_destroy_subscription+0x12>
 800a7ce:	2402      	movs	r4, #2
 800a7d0:	e7f9      	b.n	800a7c6 <rmw_destroy_subscription+0xb2>
 800a7d2:	bf00      	nop

0800a7d4 <rmw_uxrce_transport_init>:
 800a7d4:	b508      	push	{r3, lr}
 800a7d6:	b108      	cbz	r0, 800a7dc <rmw_uxrce_transport_init+0x8>
 800a7d8:	f100 0210 	add.w	r2, r0, #16
 800a7dc:	b139      	cbz	r1, 800a7ee <rmw_uxrce_transport_init+0x1a>
 800a7de:	6949      	ldr	r1, [r1, #20]
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	f001 feaf 	bl	800c544 <uxr_init_custom_transport>
 800a7e6:	f080 0001 	eor.w	r0, r0, #1
 800a7ea:	b2c0      	uxtb	r0, r0
 800a7ec:	bd08      	pop	{r3, pc}
 800a7ee:	4b04      	ldr	r3, [pc, #16]	@ (800a800 <rmw_uxrce_transport_init+0x2c>)
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	6859      	ldr	r1, [r3, #4]
 800a7f4:	f001 fea6 	bl	800c544 <uxr_init_custom_transport>
 800a7f8:	f080 0001 	eor.w	r0, r0, #1
 800a7fc:	b2c0      	uxtb	r0, r0
 800a7fe:	bd08      	pop	{r3, pc}
 800a800:	2000611c 	.word	0x2000611c

0800a804 <rmw_uxrce_init_service_memory>:
 800a804:	b1e2      	cbz	r2, 800a840 <rmw_uxrce_init_service_memory+0x3c>
 800a806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	7b05      	ldrb	r5, [r0, #12]
 800a80c:	4606      	mov	r6, r0
 800a80e:	b9ad      	cbnz	r5, 800a83c <rmw_uxrce_init_service_memory+0x38>
 800a810:	23c8      	movs	r3, #200	@ 0xc8
 800a812:	e9c0 5500 	strd	r5, r5, [r0]
 800a816:	6083      	str	r3, [r0, #8]
 800a818:	f240 1301 	movw	r3, #257	@ 0x101
 800a81c:	4617      	mov	r7, r2
 800a81e:	8183      	strh	r3, [r0, #12]
 800a820:	460c      	mov	r4, r1
 800a822:	46a8      	mov	r8, r5
 800a824:	4621      	mov	r1, r4
 800a826:	4630      	mov	r0, r6
 800a828:	3501      	adds	r5, #1
 800a82a:	f008 fc59 	bl	80130e0 <put_memory>
 800a82e:	42af      	cmp	r7, r5
 800a830:	60a4      	str	r4, [r4, #8]
 800a832:	f884 800c 	strb.w	r8, [r4, #12]
 800a836:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a83a:	d1f3      	bne.n	800a824 <rmw_uxrce_init_service_memory+0x20>
 800a83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop

0800a844 <rmw_uxrce_init_client_memory>:
 800a844:	b1e2      	cbz	r2, 800a880 <rmw_uxrce_init_client_memory+0x3c>
 800a846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84a:	7b05      	ldrb	r5, [r0, #12]
 800a84c:	4606      	mov	r6, r0
 800a84e:	b9ad      	cbnz	r5, 800a87c <rmw_uxrce_init_client_memory+0x38>
 800a850:	23c8      	movs	r3, #200	@ 0xc8
 800a852:	e9c0 5500 	strd	r5, r5, [r0]
 800a856:	6083      	str	r3, [r0, #8]
 800a858:	f240 1301 	movw	r3, #257	@ 0x101
 800a85c:	4617      	mov	r7, r2
 800a85e:	8183      	strh	r3, [r0, #12]
 800a860:	460c      	mov	r4, r1
 800a862:	46a8      	mov	r8, r5
 800a864:	4621      	mov	r1, r4
 800a866:	4630      	mov	r0, r6
 800a868:	3501      	adds	r5, #1
 800a86a:	f008 fc39 	bl	80130e0 <put_memory>
 800a86e:	42af      	cmp	r7, r5
 800a870:	60a4      	str	r4, [r4, #8]
 800a872:	f884 800c 	strb.w	r8, [r4, #12]
 800a876:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a87a:	d1f3      	bne.n	800a864 <rmw_uxrce_init_client_memory+0x20>
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop

0800a884 <rmw_uxrce_init_publisher_memory>:
 800a884:	b1e2      	cbz	r2, 800a8c0 <rmw_uxrce_init_publisher_memory+0x3c>
 800a886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88a:	7b05      	ldrb	r5, [r0, #12]
 800a88c:	4606      	mov	r6, r0
 800a88e:	b9ad      	cbnz	r5, 800a8bc <rmw_uxrce_init_publisher_memory+0x38>
 800a890:	23d8      	movs	r3, #216	@ 0xd8
 800a892:	e9c0 5500 	strd	r5, r5, [r0]
 800a896:	6083      	str	r3, [r0, #8]
 800a898:	f240 1301 	movw	r3, #257	@ 0x101
 800a89c:	4617      	mov	r7, r2
 800a89e:	8183      	strh	r3, [r0, #12]
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	46a8      	mov	r8, r5
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	f008 fc19 	bl	80130e0 <put_memory>
 800a8ae:	42af      	cmp	r7, r5
 800a8b0:	60a4      	str	r4, [r4, #8]
 800a8b2:	f884 800c 	strb.w	r8, [r4, #12]
 800a8b6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a8ba:	d1f3      	bne.n	800a8a4 <rmw_uxrce_init_publisher_memory+0x20>
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop

0800a8c4 <rmw_uxrce_init_subscription_memory>:
 800a8c4:	b1e2      	cbz	r2, 800a900 <rmw_uxrce_init_subscription_memory+0x3c>
 800a8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ca:	7b05      	ldrb	r5, [r0, #12]
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	b9ad      	cbnz	r5, 800a8fc <rmw_uxrce_init_subscription_memory+0x38>
 800a8d0:	23d8      	movs	r3, #216	@ 0xd8
 800a8d2:	e9c0 5500 	strd	r5, r5, [r0]
 800a8d6:	6083      	str	r3, [r0, #8]
 800a8d8:	f240 1301 	movw	r3, #257	@ 0x101
 800a8dc:	4617      	mov	r7, r2
 800a8de:	8183      	strh	r3, [r0, #12]
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	46a8      	mov	r8, r5
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	3501      	adds	r5, #1
 800a8ea:	f008 fbf9 	bl	80130e0 <put_memory>
 800a8ee:	42af      	cmp	r7, r5
 800a8f0:	60a4      	str	r4, [r4, #8]
 800a8f2:	f884 800c 	strb.w	r8, [r4, #12]
 800a8f6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a8fa:	d1f3      	bne.n	800a8e4 <rmw_uxrce_init_subscription_memory+0x20>
 800a8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop

0800a904 <rmw_uxrce_init_node_memory>:
 800a904:	b1e2      	cbz	r2, 800a940 <rmw_uxrce_init_node_memory+0x3c>
 800a906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90a:	7b05      	ldrb	r5, [r0, #12]
 800a90c:	4606      	mov	r6, r0
 800a90e:	b9ad      	cbnz	r5, 800a93c <rmw_uxrce_init_node_memory+0x38>
 800a910:	23a4      	movs	r3, #164	@ 0xa4
 800a912:	e9c0 5500 	strd	r5, r5, [r0]
 800a916:	6083      	str	r3, [r0, #8]
 800a918:	f240 1301 	movw	r3, #257	@ 0x101
 800a91c:	4617      	mov	r7, r2
 800a91e:	8183      	strh	r3, [r0, #12]
 800a920:	460c      	mov	r4, r1
 800a922:	46a8      	mov	r8, r5
 800a924:	4621      	mov	r1, r4
 800a926:	4630      	mov	r0, r6
 800a928:	3501      	adds	r5, #1
 800a92a:	f008 fbd9 	bl	80130e0 <put_memory>
 800a92e:	42af      	cmp	r7, r5
 800a930:	60a4      	str	r4, [r4, #8]
 800a932:	f884 800c 	strb.w	r8, [r4, #12]
 800a936:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a93a:	d1f3      	bne.n	800a924 <rmw_uxrce_init_node_memory+0x20>
 800a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop

0800a944 <rmw_uxrce_init_session_memory>:
 800a944:	b1ea      	cbz	r2, 800a982 <rmw_uxrce_init_session_memory+0x3e>
 800a946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94a:	7b05      	ldrb	r5, [r0, #12]
 800a94c:	4606      	mov	r6, r0
 800a94e:	b9b5      	cbnz	r5, 800a97e <rmw_uxrce_init_session_memory+0x3a>
 800a950:	e9c0 5500 	strd	r5, r5, [r0]
 800a954:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a958:	f240 1301 	movw	r3, #257	@ 0x101
 800a95c:	4617      	mov	r7, r2
 800a95e:	f8c0 8008 	str.w	r8, [r0, #8]
 800a962:	460c      	mov	r4, r1
 800a964:	8183      	strh	r3, [r0, #12]
 800a966:	46a9      	mov	r9, r5
 800a968:	4621      	mov	r1, r4
 800a96a:	4630      	mov	r0, r6
 800a96c:	3501      	adds	r5, #1
 800a96e:	f008 fbb7 	bl	80130e0 <put_memory>
 800a972:	42af      	cmp	r7, r5
 800a974:	60a4      	str	r4, [r4, #8]
 800a976:	f884 900c 	strb.w	r9, [r4, #12]
 800a97a:	4444      	add	r4, r8
 800a97c:	d1f4      	bne.n	800a968 <rmw_uxrce_init_session_memory+0x24>
 800a97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a982:	4770      	bx	lr

0800a984 <rmw_uxrce_init_topic_memory>:
 800a984:	b1e2      	cbz	r2, 800a9c0 <rmw_uxrce_init_topic_memory+0x3c>
 800a986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98a:	7b05      	ldrb	r5, [r0, #12]
 800a98c:	4606      	mov	r6, r0
 800a98e:	b9ad      	cbnz	r5, 800a9bc <rmw_uxrce_init_topic_memory+0x38>
 800a990:	231c      	movs	r3, #28
 800a992:	e9c0 5500 	strd	r5, r5, [r0]
 800a996:	6083      	str	r3, [r0, #8]
 800a998:	f240 1301 	movw	r3, #257	@ 0x101
 800a99c:	4617      	mov	r7, r2
 800a99e:	8183      	strh	r3, [r0, #12]
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	46a8      	mov	r8, r5
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	3501      	adds	r5, #1
 800a9aa:	f008 fb99 	bl	80130e0 <put_memory>
 800a9ae:	42af      	cmp	r7, r5
 800a9b0:	60a4      	str	r4, [r4, #8]
 800a9b2:	f884 800c 	strb.w	r8, [r4, #12]
 800a9b6:	f104 041c 	add.w	r4, r4, #28
 800a9ba:	d1f3      	bne.n	800a9a4 <rmw_uxrce_init_topic_memory+0x20>
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop

0800a9c4 <rmw_uxrce_init_static_input_buffer_memory>:
 800a9c4:	b1ea      	cbz	r2, 800aa02 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	7b05      	ldrb	r5, [r0, #12]
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	b9b5      	cbnz	r5, 800a9fe <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a9d0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800a9d4:	e9c0 5500 	strd	r5, r5, [r0]
 800a9d8:	6083      	str	r3, [r0, #8]
 800a9da:	f240 1301 	movw	r3, #257	@ 0x101
 800a9de:	4617      	mov	r7, r2
 800a9e0:	8183      	strh	r3, [r0, #12]
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	46a8      	mov	r8, r5
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	3501      	adds	r5, #1
 800a9ec:	f008 fb78 	bl	80130e0 <put_memory>
 800a9f0:	42af      	cmp	r7, r5
 800a9f2:	60a4      	str	r4, [r4, #8]
 800a9f4:	f884 800c 	strb.w	r8, [r4, #12]
 800a9f8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800a9fc:	d1f3      	bne.n	800a9e6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa02:	4770      	bx	lr

0800aa04 <rmw_uxrce_init_init_options_impl_memory>:
 800aa04:	b1e2      	cbz	r2, 800aa40 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800aa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0a:	7b05      	ldrb	r5, [r0, #12]
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	b9ad      	cbnz	r5, 800aa3c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800aa10:	232c      	movs	r3, #44	@ 0x2c
 800aa12:	e9c0 5500 	strd	r5, r5, [r0]
 800aa16:	6083      	str	r3, [r0, #8]
 800aa18:	f240 1301 	movw	r3, #257	@ 0x101
 800aa1c:	4617      	mov	r7, r2
 800aa1e:	8183      	strh	r3, [r0, #12]
 800aa20:	460c      	mov	r4, r1
 800aa22:	46a8      	mov	r8, r5
 800aa24:	4621      	mov	r1, r4
 800aa26:	4630      	mov	r0, r6
 800aa28:	3501      	adds	r5, #1
 800aa2a:	f008 fb59 	bl	80130e0 <put_memory>
 800aa2e:	42af      	cmp	r7, r5
 800aa30:	60a4      	str	r4, [r4, #8]
 800aa32:	f884 800c 	strb.w	r8, [r4, #12]
 800aa36:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800aa3a:	d1f3      	bne.n	800aa24 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop

0800aa44 <rmw_uxrce_init_wait_set_memory>:
 800aa44:	b1e2      	cbz	r2, 800aa80 <rmw_uxrce_init_wait_set_memory+0x3c>
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	7b05      	ldrb	r5, [r0, #12]
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	b9ad      	cbnz	r5, 800aa7c <rmw_uxrce_init_wait_set_memory+0x38>
 800aa50:	231c      	movs	r3, #28
 800aa52:	e9c0 5500 	strd	r5, r5, [r0]
 800aa56:	6083      	str	r3, [r0, #8]
 800aa58:	f240 1301 	movw	r3, #257	@ 0x101
 800aa5c:	4617      	mov	r7, r2
 800aa5e:	8183      	strh	r3, [r0, #12]
 800aa60:	460c      	mov	r4, r1
 800aa62:	46a8      	mov	r8, r5
 800aa64:	4621      	mov	r1, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	3501      	adds	r5, #1
 800aa6a:	f008 fb39 	bl	80130e0 <put_memory>
 800aa6e:	42af      	cmp	r7, r5
 800aa70:	60a4      	str	r4, [r4, #8]
 800aa72:	f884 800c 	strb.w	r8, [r4, #12]
 800aa76:	f104 041c 	add.w	r4, r4, #28
 800aa7a:	d1f3      	bne.n	800aa64 <rmw_uxrce_init_wait_set_memory+0x20>
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop

0800aa84 <rmw_uxrce_init_guard_condition_memory>:
 800aa84:	b1e2      	cbz	r2, 800aac0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800aa86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8a:	7b05      	ldrb	r5, [r0, #12]
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b9ad      	cbnz	r5, 800aabc <rmw_uxrce_init_guard_condition_memory+0x38>
 800aa90:	2320      	movs	r3, #32
 800aa92:	e9c0 5500 	strd	r5, r5, [r0]
 800aa96:	6083      	str	r3, [r0, #8]
 800aa98:	f240 1301 	movw	r3, #257	@ 0x101
 800aa9c:	4617      	mov	r7, r2
 800aa9e:	8183      	strh	r3, [r0, #12]
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	46a8      	mov	r8, r5
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	f008 fb19 	bl	80130e0 <put_memory>
 800aaae:	42af      	cmp	r7, r5
 800aab0:	60a4      	str	r4, [r4, #8]
 800aab2:	f884 800c 	strb.w	r8, [r4, #12]
 800aab6:	f104 0420 	add.w	r4, r4, #32
 800aaba:	d1f3      	bne.n	800aaa4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop

0800aac4 <rmw_uxrce_fini_session_memory>:
 800aac4:	4601      	mov	r1, r0
 800aac6:	4801      	ldr	r0, [pc, #4]	@ (800aacc <rmw_uxrce_fini_session_memory+0x8>)
 800aac8:	f008 bb0a 	b.w	80130e0 <put_memory>
 800aacc:	2000aa74 	.word	0x2000aa74

0800aad0 <rmw_uxrce_fini_node_memory>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4604      	mov	r4, r0
 800aad4:	6800      	ldr	r0, [r0, #0]
 800aad6:	b128      	cbz	r0, 800aae4 <rmw_uxrce_fini_node_memory+0x14>
 800aad8:	4b07      	ldr	r3, [pc, #28]	@ (800aaf8 <rmw_uxrce_fini_node_memory+0x28>)
 800aada:	6819      	ldr	r1, [r3, #0]
 800aadc:	f7f5 fba0 	bl	8000220 <strcmp>
 800aae0:	b940      	cbnz	r0, 800aaf4 <rmw_uxrce_fini_node_memory+0x24>
 800aae2:	6020      	str	r0, [r4, #0]
 800aae4:	6861      	ldr	r1, [r4, #4]
 800aae6:	b129      	cbz	r1, 800aaf4 <rmw_uxrce_fini_node_memory+0x24>
 800aae8:	2500      	movs	r5, #0
 800aaea:	4804      	ldr	r0, [pc, #16]	@ (800aafc <rmw_uxrce_fini_node_memory+0x2c>)
 800aaec:	610d      	str	r5, [r1, #16]
 800aaee:	f008 faf7 	bl	80130e0 <put_memory>
 800aaf2:	6065      	str	r5, [r4, #4]
 800aaf4:	bd38      	pop	{r3, r4, r5, pc}
 800aaf6:	bf00      	nop
 800aaf8:	080171c4 	.word	0x080171c4
 800aafc:	2000aa44 	.word	0x2000aa44

0800ab00 <rmw_uxrce_fini_publisher_memory>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	4604      	mov	r4, r0
 800ab04:	6800      	ldr	r0, [r0, #0]
 800ab06:	b128      	cbz	r0, 800ab14 <rmw_uxrce_fini_publisher_memory+0x14>
 800ab08:	4b06      	ldr	r3, [pc, #24]	@ (800ab24 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ab0a:	6819      	ldr	r1, [r3, #0]
 800ab0c:	f7f5 fb88 	bl	8000220 <strcmp>
 800ab10:	b938      	cbnz	r0, 800ab22 <rmw_uxrce_fini_publisher_memory+0x22>
 800ab12:	6020      	str	r0, [r4, #0]
 800ab14:	6861      	ldr	r1, [r4, #4]
 800ab16:	b121      	cbz	r1, 800ab22 <rmw_uxrce_fini_publisher_memory+0x22>
 800ab18:	4803      	ldr	r0, [pc, #12]	@ (800ab28 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ab1a:	f008 fae1 	bl	80130e0 <put_memory>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	6063      	str	r3, [r4, #4]
 800ab22:	bd10      	pop	{r4, pc}
 800ab24:	080171c4 	.word	0x080171c4
 800ab28:	2000aa54 	.word	0x2000aa54

0800ab2c <rmw_uxrce_fini_subscription_memory>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	4604      	mov	r4, r0
 800ab30:	6800      	ldr	r0, [r0, #0]
 800ab32:	b128      	cbz	r0, 800ab40 <rmw_uxrce_fini_subscription_memory+0x14>
 800ab34:	4b06      	ldr	r3, [pc, #24]	@ (800ab50 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ab36:	6819      	ldr	r1, [r3, #0]
 800ab38:	f7f5 fb72 	bl	8000220 <strcmp>
 800ab3c:	b938      	cbnz	r0, 800ab4e <rmw_uxrce_fini_subscription_memory+0x22>
 800ab3e:	6020      	str	r0, [r4, #0]
 800ab40:	6861      	ldr	r1, [r4, #4]
 800ab42:	b121      	cbz	r1, 800ab4e <rmw_uxrce_fini_subscription_memory+0x22>
 800ab44:	4803      	ldr	r0, [pc, #12]	@ (800ab54 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ab46:	f008 facb 	bl	80130e0 <put_memory>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	6063      	str	r3, [r4, #4]
 800ab4e:	bd10      	pop	{r4, pc}
 800ab50:	080171c4 	.word	0x080171c4
 800ab54:	2000aa94 	.word	0x2000aa94

0800ab58 <rmw_uxrce_fini_service_memory>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	6800      	ldr	r0, [r0, #0]
 800ab5e:	b128      	cbz	r0, 800ab6c <rmw_uxrce_fini_service_memory+0x14>
 800ab60:	4b06      	ldr	r3, [pc, #24]	@ (800ab7c <rmw_uxrce_fini_service_memory+0x24>)
 800ab62:	6819      	ldr	r1, [r3, #0]
 800ab64:	f7f5 fb5c 	bl	8000220 <strcmp>
 800ab68:	b938      	cbnz	r0, 800ab7a <rmw_uxrce_fini_service_memory+0x22>
 800ab6a:	6020      	str	r0, [r4, #0]
 800ab6c:	6861      	ldr	r1, [r4, #4]
 800ab6e:	b121      	cbz	r1, 800ab7a <rmw_uxrce_fini_service_memory+0x22>
 800ab70:	4803      	ldr	r0, [pc, #12]	@ (800ab80 <rmw_uxrce_fini_service_memory+0x28>)
 800ab72:	f008 fab5 	bl	80130e0 <put_memory>
 800ab76:	2300      	movs	r3, #0
 800ab78:	6063      	str	r3, [r4, #4]
 800ab7a:	bd10      	pop	{r4, pc}
 800ab7c:	080171c4 	.word	0x080171c4
 800ab80:	2000aa64 	.word	0x2000aa64

0800ab84 <rmw_uxrce_fini_client_memory>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4604      	mov	r4, r0
 800ab88:	6800      	ldr	r0, [r0, #0]
 800ab8a:	b128      	cbz	r0, 800ab98 <rmw_uxrce_fini_client_memory+0x14>
 800ab8c:	4b06      	ldr	r3, [pc, #24]	@ (800aba8 <rmw_uxrce_fini_client_memory+0x24>)
 800ab8e:	6819      	ldr	r1, [r3, #0]
 800ab90:	f7f5 fb46 	bl	8000220 <strcmp>
 800ab94:	b938      	cbnz	r0, 800aba6 <rmw_uxrce_fini_client_memory+0x22>
 800ab96:	6020      	str	r0, [r4, #0]
 800ab98:	6861      	ldr	r1, [r4, #4]
 800ab9a:	b121      	cbz	r1, 800aba6 <rmw_uxrce_fini_client_memory+0x22>
 800ab9c:	4803      	ldr	r0, [pc, #12]	@ (800abac <rmw_uxrce_fini_client_memory+0x28>)
 800ab9e:	f008 fa9f 	bl	80130e0 <put_memory>
 800aba2:	2300      	movs	r3, #0
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	bd10      	pop	{r4, pc}
 800aba8:	080171c4 	.word	0x080171c4
 800abac:	20006174 	.word	0x20006174

0800abb0 <rmw_uxrce_fini_topic_memory>:
 800abb0:	b510      	push	{r4, lr}
 800abb2:	4604      	mov	r4, r0
 800abb4:	4621      	mov	r1, r4
 800abb6:	4803      	ldr	r0, [pc, #12]	@ (800abc4 <rmw_uxrce_fini_topic_memory+0x14>)
 800abb8:	f008 fa92 	bl	80130e0 <put_memory>
 800abbc:	2300      	movs	r3, #0
 800abbe:	61a3      	str	r3, [r4, #24]
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	bf00      	nop
 800abc4:	2000aaa4 	.word	0x2000aaa4

0800abc8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800abc8:	b082      	sub	sp, #8
 800abca:	b530      	push	{r4, r5, lr}
 800abcc:	4925      	ldr	r1, [pc, #148]	@ (800ac64 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800abce:	680d      	ldr	r5, [r1, #0]
 800abd0:	ac03      	add	r4, sp, #12
 800abd2:	e884 000c 	stmia.w	r4, {r2, r3}
 800abd6:	461c      	mov	r4, r3
 800abd8:	2d00      	cmp	r5, #0
 800abda:	d041      	beq.n	800ac60 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800abdc:	462b      	mov	r3, r5
 800abde:	2100      	movs	r1, #0
 800abe0:	689a      	ldr	r2, [r3, #8]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800abe8:	4290      	cmp	r0, r2
 800abea:	bf08      	it	eq
 800abec:	3101      	addeq	r1, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f6      	bne.n	800abe0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800abf2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d029      	beq.n	800ac4e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800abfa:	d907      	bls.n	800ac0c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d005      	beq.n	800ac0c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac00:	2100      	movs	r1, #0
 800ac02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac06:	4608      	mov	r0, r1
 800ac08:	b002      	add	sp, #8
 800ac0a:	4770      	bx	lr
 800ac0c:	b314      	cbz	r4, 800ac54 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac0e:	428c      	cmp	r4, r1
 800ac10:	d820      	bhi.n	800ac54 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac12:	2d00      	cmp	r5, #0
 800ac14:	d0f4      	beq.n	800ac00 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ac16:	2100      	movs	r1, #0
 800ac18:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ac1c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ac20:	e002      	b.n	800ac28 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ac22:	686d      	ldr	r5, [r5, #4]
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	d0ec      	beq.n	800ac02 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ac28:	68ab      	ldr	r3, [r5, #8]
 800ac2a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ac2e:	4290      	cmp	r0, r2
 800ac30:	d1f7      	bne.n	800ac22 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac32:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ac36:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ac3a:	4562      	cmp	r2, ip
 800ac3c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ac40:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ac44:	daed      	bge.n	800ac22 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac46:	4694      	mov	ip, r2
 800ac48:	461c      	mov	r4, r3
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	e7e9      	b.n	800ac22 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac4e:	b10c      	cbz	r4, 800ac54 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac50:	428c      	cmp	r4, r1
 800ac52:	d9d5      	bls.n	800ac00 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ac54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac58:	4802      	ldr	r0, [pc, #8]	@ (800ac64 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ac5a:	b002      	add	sp, #8
 800ac5c:	f008 ba30 	b.w	80130c0 <get_memory>
 800ac60:	4629      	mov	r1, r5
 800ac62:	e7c6      	b.n	800abf2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ac64:	2000aa84 	.word	0x2000aa84

0800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ac68:	4b11      	ldr	r3, [pc, #68]	@ (800acb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	b530      	push	{r4, r5, lr}
 800ac6e:	b1e3      	cbz	r3, 800acaa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ac70:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ac74:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ac78:	2400      	movs	r4, #0
 800ac7a:	e001      	b.n	800ac80 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	b193      	cbz	r3, 800aca6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ac86:	4288      	cmp	r0, r1
 800ac88:	d1f8      	bne.n	800ac7c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ac8a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ac8e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ac92:	4571      	cmp	r1, lr
 800ac94:	eb72 050c 	sbcs.w	r5, r2, ip
 800ac98:	daf0      	bge.n	800ac7c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ac9a:	461c      	mov	r4, r3
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	468e      	mov	lr, r1
 800aca0:	4694      	mov	ip, r2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1ec      	bne.n	800ac80 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800aca6:	4620      	mov	r0, r4
 800aca8:	bd30      	pop	{r4, r5, pc}
 800acaa:	461c      	mov	r4, r3
 800acac:	4620      	mov	r0, r4
 800acae:	bd30      	pop	{r4, r5, pc}
 800acb0:	2000aa84 	.word	0x2000aa84
 800acb4:	00000000 	.word	0x00000000

0800acb8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	4b3c      	ldr	r3, [pc, #240]	@ (800adb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800acbe:	ed2d 8b06 	vpush	{d8-d10}
 800acc2:	681f      	ldr	r7, [r3, #0]
 800acc4:	b08d      	sub	sp, #52	@ 0x34
 800acc6:	f008 fe17 	bl	80138f8 <rmw_uros_epoch_nanos>
 800acca:	2f00      	cmp	r7, #0
 800accc:	d05d      	beq.n	800ad8a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800acce:	46b8      	mov	r8, r7
 800acd0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800ad98 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800acd4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800acd8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800acdc:	2b04      	cmp	r3, #4
 800acde:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800ada0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ace2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ada8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ace6:	4681      	mov	r9, r0
 800ace8:	468a      	mov	sl, r1
 800acea:	ac04      	add	r4, sp, #16
 800acec:	d03f      	beq.n	800ad6e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800acee:	2b05      	cmp	r3, #5
 800acf0:	d044      	beq.n	800ad7c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d03b      	beq.n	800ad6e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800acf6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800acfa:	ed8d ab06 	vstr	d10, [sp, #24]
 800acfe:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ad02:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ad06:	ab08      	add	r3, sp, #32
 800ad08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ad0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad12:	f007 ff21 	bl	8012b58 <rmw_time_equal>
 800ad16:	b118      	cbz	r0, 800ad20 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ad18:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ad1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ad20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad24:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ad28:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ad2c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ad30:	f007 ff66 	bl	8012c00 <rmw_time_total_nsec>
 800ad34:	1830      	adds	r0, r6, r0
 800ad36:	eb47 0101 	adc.w	r1, r7, r1
 800ad3a:	4548      	cmp	r0, r9
 800ad3c:	eb71 030a 	sbcs.w	r3, r1, sl
 800ad40:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ad44:	db05      	blt.n	800ad52 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ad46:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ad4a:	4591      	cmp	r9, r2
 800ad4c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ad50:	da03      	bge.n	800ad5a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ad52:	4817      	ldr	r0, [pc, #92]	@ (800adb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ad54:	4641      	mov	r1, r8
 800ad56:	f008 f9c3 	bl	80130e0 <put_memory>
 800ad5a:	f1bb 0f00 	cmp.w	fp, #0
 800ad5e:	d014      	beq.n	800ad8a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ad60:	46d8      	mov	r8, fp
 800ad62:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ad66:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	d1bf      	bne.n	800acee <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ad6e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ad72:	3340      	adds	r3, #64	@ 0x40
 800ad74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad7a:	e7c0      	b.n	800acfe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ad7c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ad80:	3348      	adds	r3, #72	@ 0x48
 800ad82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad88:	e7b9      	b.n	800acfe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ad8a:	b00d      	add	sp, #52	@ 0x34
 800ad8c:	ecbd 8b06 	vpop	{d8-d10}
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	f3af 8000 	nop.w
	...
 800ada0:	00000001 	.word	0x00000001
 800ada4:	00000000 	.word	0x00000000
 800ada8:	0000001e 	.word	0x0000001e
 800adac:	00000000 	.word	0x00000000
 800adb0:	2000aa84 	.word	0x2000aa84

0800adb4 <run_xrce_session>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	788c      	ldrb	r4, [r1, #2]
 800adb8:	b086      	sub	sp, #24
 800adba:	2c01      	cmp	r4, #1
 800adbc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800adc0:	d00c      	beq.n	800addc <run_xrce_session+0x28>
 800adc2:	4619      	mov	r1, r3
 800adc4:	2301      	movs	r3, #1
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	f10d 020e 	add.w	r2, sp, #14
 800adcc:	f10d 0317 	add.w	r3, sp, #23
 800add0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800add4:	f002 fa52 	bl	800d27c <uxr_run_session_until_all_status>
 800add8:	b006      	add	sp, #24
 800adda:	bd10      	pop	{r4, pc}
 800addc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ade0:	f001 fe66 	bl	800cab0 <uxr_flash_output_streams>
 800ade4:	4620      	mov	r0, r4
 800ade6:	b006      	add	sp, #24
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	bf00      	nop

0800adec <convert_qos_profile>:
 800adec:	7a4a      	ldrb	r2, [r1, #9]
 800adee:	f891 c008 	ldrb.w	ip, [r1, #8]
 800adf2:	2a02      	cmp	r2, #2
 800adf4:	bf18      	it	ne
 800adf6:	2200      	movne	r2, #0
 800adf8:	7002      	strb	r2, [r0, #0]
 800adfa:	780a      	ldrb	r2, [r1, #0]
 800adfc:	8889      	ldrh	r1, [r1, #4]
 800adfe:	8081      	strh	r1, [r0, #4]
 800ae00:	f1ac 0c02 	sub.w	ip, ip, #2
 800ae04:	f1a2 0202 	sub.w	r2, r2, #2
 800ae08:	fabc fc8c 	clz	ip, ip
 800ae0c:	fab2 f282 	clz	r2, r2
 800ae10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ae14:	0952      	lsrs	r2, r2, #5
 800ae16:	f880 c001 	strb.w	ip, [r0, #1]
 800ae1a:	7082      	strb	r2, [r0, #2]
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop

0800ae20 <generate_type_name>:
 800ae20:	b530      	push	{r4, r5, lr}
 800ae22:	2300      	movs	r3, #0
 800ae24:	700b      	strb	r3, [r1, #0]
 800ae26:	6803      	ldr	r3, [r0, #0]
 800ae28:	b087      	sub	sp, #28
 800ae2a:	4614      	mov	r4, r2
 800ae2c:	b1d3      	cbz	r3, 800ae64 <generate_type_name+0x44>
 800ae2e:	4a0f      	ldr	r2, [pc, #60]	@ (800ae6c <generate_type_name+0x4c>)
 800ae30:	4615      	mov	r5, r2
 800ae32:	9203      	str	r2, [sp, #12]
 800ae34:	9500      	str	r5, [sp, #0]
 800ae36:	6842      	ldr	r2, [r0, #4]
 800ae38:	480d      	ldr	r0, [pc, #52]	@ (800ae70 <generate_type_name+0x50>)
 800ae3a:	9001      	str	r0, [sp, #4]
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	490d      	ldr	r1, [pc, #52]	@ (800ae74 <generate_type_name+0x54>)
 800ae40:	9204      	str	r2, [sp, #16]
 800ae42:	9105      	str	r1, [sp, #20]
 800ae44:	9102      	str	r1, [sp, #8]
 800ae46:	4a0c      	ldr	r2, [pc, #48]	@ (800ae78 <generate_type_name+0x58>)
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f00a fb83 	bl	8015554 <sniprintf>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	db05      	blt.n	800ae5e <generate_type_name+0x3e>
 800ae52:	4284      	cmp	r4, r0
 800ae54:	bfd4      	ite	le
 800ae56:	2000      	movle	r0, #0
 800ae58:	2001      	movgt	r0, #1
 800ae5a:	b007      	add	sp, #28
 800ae5c:	bd30      	pop	{r4, r5, pc}
 800ae5e:	2000      	movs	r0, #0
 800ae60:	b007      	add	sp, #28
 800ae62:	bd30      	pop	{r4, r5, pc}
 800ae64:	4b05      	ldr	r3, [pc, #20]	@ (800ae7c <generate_type_name+0x5c>)
 800ae66:	4a01      	ldr	r2, [pc, #4]	@ (800ae6c <generate_type_name+0x4c>)
 800ae68:	461d      	mov	r5, r3
 800ae6a:	e7e2      	b.n	800ae32 <generate_type_name+0x12>
 800ae6c:	0801692c 	.word	0x0801692c
 800ae70:	08016944 	.word	0x08016944
 800ae74:	08016940 	.word	0x08016940
 800ae78:	08016930 	.word	0x08016930
 800ae7c:	08016bc0 	.word	0x08016bc0

0800ae80 <generate_topic_name>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	4614      	mov	r4, r2
 800ae86:	9000      	str	r0, [sp, #0]
 800ae88:	4b08      	ldr	r3, [pc, #32]	@ (800aeac <generate_topic_name+0x2c>)
 800ae8a:	4a09      	ldr	r2, [pc, #36]	@ (800aeb0 <generate_topic_name+0x30>)
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	4621      	mov	r1, r4
 800ae90:	f00a fb60 	bl	8015554 <sniprintf>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	db05      	blt.n	800aea4 <generate_topic_name+0x24>
 800ae98:	4284      	cmp	r4, r0
 800ae9a:	bfd4      	ite	le
 800ae9c:	2000      	movle	r0, #0
 800ae9e:	2001      	movgt	r0, #1
 800aea0:	b002      	add	sp, #8
 800aea2:	bd10      	pop	{r4, pc}
 800aea4:	2000      	movs	r0, #0
 800aea6:	b002      	add	sp, #8
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	08016e00 	.word	0x08016e00
 800aeb0:	08016948 	.word	0x08016948

0800aeb4 <is_uxrce_rmw_identifier_valid>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	b140      	cbz	r0, 800aecc <is_uxrce_rmw_identifier_valid+0x18>
 800aeba:	f008 f969 	bl	8013190 <rmw_get_implementation_identifier>
 800aebe:	4601      	mov	r1, r0
 800aec0:	4620      	mov	r0, r4
 800aec2:	f7f5 f9ad 	bl	8000220 <strcmp>
 800aec6:	fab0 f080 	clz	r0, r0
 800aeca:	0940      	lsrs	r0, r0, #5
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop

0800aed0 <get_message_typesupport_handle>:
 800aed0:	6883      	ldr	r3, [r0, #8]
 800aed2:	4718      	bx	r3

0800aed4 <get_message_typesupport_handle_function>:
 800aed4:	b510      	push	{r4, lr}
 800aed6:	4604      	mov	r4, r0
 800aed8:	6800      	ldr	r0, [r0, #0]
 800aeda:	f7f5 f9a1 	bl	8000220 <strcmp>
 800aede:	2800      	cmp	r0, #0
 800aee0:	bf0c      	ite	eq
 800aee2:	4620      	moveq	r0, r4
 800aee4:	2000      	movne	r0, #0
 800aee6:	bd10      	pop	{r4, pc}

0800aee8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800aee8:	4b04      	ldr	r3, [pc, #16]	@ (800aefc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	b10a      	cbz	r2, 800aef2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800aeee:	4803      	ldr	r0, [pc, #12]	@ (800aefc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800aef0:	4770      	bx	lr
 800aef2:	4a03      	ldr	r2, [pc, #12]	@ (800af00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800aef4:	4801      	ldr	r0, [pc, #4]	@ (800aefc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	4770      	bx	lr
 800aefc:	20000034 	.word	0x20000034
 800af00:	200000b0 	.word	0x200000b0

0800af04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800af04:	4a02      	ldr	r2, [pc, #8]	@ (800af10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800af06:	4b03      	ldr	r3, [pc, #12]	@ (800af14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800af08:	6812      	ldr	r2, [r2, #0]
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	200000b0 	.word	0x200000b0
 800af14:	20000034 	.word	0x20000034

0800af18 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800af18:	f008 bd2a 	b.w	8013970 <std_msgs__msg__Int32__init>

0800af1c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800af1c:	f008 bd2c 	b.w	8013978 <std_msgs__msg__Int32__fini>

0800af20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800af20:	4b04      	ldr	r3, [pc, #16]	@ (800af34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	b10a      	cbz	r2, 800af2a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800af26:	4803      	ldr	r0, [pc, #12]	@ (800af34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800af28:	4770      	bx	lr
 800af2a:	4a03      	ldr	r2, [pc, #12]	@ (800af38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800af2c:	4801      	ldr	r0, [pc, #4]	@ (800af34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	4770      	bx	lr
 800af34:	2000007c 	.word	0x2000007c
 800af38:	200000b4 	.word	0x200000b4

0800af3c <_Int32__max_serialized_size>:
 800af3c:	b508      	push	{r3, lr}
 800af3e:	2104      	movs	r1, #4
 800af40:	2000      	movs	r0, #0
 800af42:	f001 f807 	bl	800bf54 <ucdr_alignment>
 800af46:	3004      	adds	r0, #4
 800af48:	bd08      	pop	{r3, pc}
 800af4a:	bf00      	nop

0800af4c <_Int32__cdr_deserialize>:
 800af4c:	b109      	cbz	r1, 800af52 <_Int32__cdr_deserialize+0x6>
 800af4e:	f000 bf19 	b.w	800bd84 <ucdr_deserialize_int32_t>
 800af52:	4608      	mov	r0, r1
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop

0800af58 <get_serialized_size_std_msgs__msg__Int32>:
 800af58:	b138      	cbz	r0, 800af6a <get_serialized_size_std_msgs__msg__Int32+0x12>
 800af5a:	b508      	push	{r3, lr}
 800af5c:	460b      	mov	r3, r1
 800af5e:	4618      	mov	r0, r3
 800af60:	2104      	movs	r1, #4
 800af62:	f000 fff7 	bl	800bf54 <ucdr_alignment>
 800af66:	3004      	adds	r0, #4
 800af68:	bd08      	pop	{r3, pc}
 800af6a:	4770      	bx	lr

0800af6c <_Int32__cdr_serialize>:
 800af6c:	460a      	mov	r2, r1
 800af6e:	b118      	cbz	r0, 800af78 <_Int32__cdr_serialize+0xc>
 800af70:	6801      	ldr	r1, [r0, #0]
 800af72:	4610      	mov	r0, r2
 800af74:	f000 be6e 	b.w	800bc54 <ucdr_serialize_int32_t>
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop

0800af7c <_Int32__get_serialized_size>:
 800af7c:	b130      	cbz	r0, 800af8c <_Int32__get_serialized_size+0x10>
 800af7e:	b508      	push	{r3, lr}
 800af80:	2104      	movs	r1, #4
 800af82:	2000      	movs	r0, #0
 800af84:	f000 ffe6 	bl	800bf54 <ucdr_alignment>
 800af88:	3004      	adds	r0, #4
 800af8a:	bd08      	pop	{r3, pc}
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop

0800af90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800af90:	4800      	ldr	r0, [pc, #0]	@ (800af94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800af92:	4770      	bx	lr
 800af94:	20000088 	.word	0x20000088

0800af98 <ucdr_serialize_bool>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	460d      	mov	r5, r1
 800af9c:	2101      	movs	r1, #1
 800af9e:	4604      	mov	r4, r0
 800afa0:	f000 ff8c 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800afa4:	b148      	cbz	r0, 800afba <ucdr_serialize_bool+0x22>
 800afa6:	68a3      	ldr	r3, [r4, #8]
 800afa8:	701d      	strb	r5, [r3, #0]
 800afaa:	68a2      	ldr	r2, [r4, #8]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	2101      	movs	r1, #1
 800afb0:	440a      	add	r2, r1
 800afb2:	440b      	add	r3, r1
 800afb4:	60a2      	str	r2, [r4, #8]
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	7561      	strb	r1, [r4, #21]
 800afba:	7da0      	ldrb	r0, [r4, #22]
 800afbc:	f080 0001 	eor.w	r0, r0, #1
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	bf00      	nop

0800afc4 <ucdr_deserialize_bool>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	460d      	mov	r5, r1
 800afc8:	2101      	movs	r1, #1
 800afca:	4604      	mov	r4, r0
 800afcc:	f000 ff76 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800afd0:	b160      	cbz	r0, 800afec <ucdr_deserialize_bool+0x28>
 800afd2:	68a2      	ldr	r2, [r4, #8]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800afda:	3900      	subs	r1, #0
 800afdc:	bf18      	it	ne
 800afde:	2101      	movne	r1, #1
 800afe0:	7029      	strb	r1, [r5, #0]
 800afe2:	3301      	adds	r3, #1
 800afe4:	2101      	movs	r1, #1
 800afe6:	60a2      	str	r2, [r4, #8]
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	7561      	strb	r1, [r4, #21]
 800afec:	7da0      	ldrb	r0, [r4, #22]
 800afee:	f080 0001 	eor.w	r0, r0, #1
 800aff2:	bd38      	pop	{r3, r4, r5, pc}

0800aff4 <ucdr_serialize_uint8_t>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	460d      	mov	r5, r1
 800aff8:	2101      	movs	r1, #1
 800affa:	4604      	mov	r4, r0
 800affc:	f000 ff5e 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b000:	b148      	cbz	r0, 800b016 <ucdr_serialize_uint8_t+0x22>
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	701d      	strb	r5, [r3, #0]
 800b006:	68a2      	ldr	r2, [r4, #8]
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	2101      	movs	r1, #1
 800b00c:	440a      	add	r2, r1
 800b00e:	440b      	add	r3, r1
 800b010:	60a2      	str	r2, [r4, #8]
 800b012:	6123      	str	r3, [r4, #16]
 800b014:	7561      	strb	r1, [r4, #21]
 800b016:	7da0      	ldrb	r0, [r4, #22]
 800b018:	f080 0001 	eor.w	r0, r0, #1
 800b01c:	bd38      	pop	{r3, r4, r5, pc}
 800b01e:	bf00      	nop

0800b020 <ucdr_deserialize_uint8_t>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	460d      	mov	r5, r1
 800b024:	2101      	movs	r1, #1
 800b026:	4604      	mov	r4, r0
 800b028:	f000 ff48 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b02c:	b150      	cbz	r0, 800b044 <ucdr_deserialize_uint8_t+0x24>
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	702b      	strb	r3, [r5, #0]
 800b034:	68a2      	ldr	r2, [r4, #8]
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	2101      	movs	r1, #1
 800b03a:	440a      	add	r2, r1
 800b03c:	440b      	add	r3, r1
 800b03e:	60a2      	str	r2, [r4, #8]
 800b040:	6123      	str	r3, [r4, #16]
 800b042:	7561      	strb	r1, [r4, #21]
 800b044:	7da0      	ldrb	r0, [r4, #22]
 800b046:	f080 0001 	eor.w	r0, r0, #1
 800b04a:	bd38      	pop	{r3, r4, r5, pc}

0800b04c <ucdr_serialize_uint16_t>:
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	460b      	mov	r3, r1
 800b054:	2102      	movs	r1, #2
 800b056:	4604      	mov	r4, r0
 800b058:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b05c:	f000 ff82 	bl	800bf64 <ucdr_buffer_alignment>
 800b060:	4601      	mov	r1, r0
 800b062:	4620      	mov	r0, r4
 800b064:	7d67      	ldrb	r7, [r4, #21]
 800b066:	f000 ffc1 	bl	800bfec <ucdr_advance_buffer>
 800b06a:	2102      	movs	r1, #2
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 ff19 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b072:	bb78      	cbnz	r0, 800b0d4 <ucdr_serialize_uint16_t+0x88>
 800b074:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b078:	42ab      	cmp	r3, r5
 800b07a:	d926      	bls.n	800b0ca <ucdr_serialize_uint16_t+0x7e>
 800b07c:	1b5e      	subs	r6, r3, r5
 800b07e:	60a3      	str	r3, [r4, #8]
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	f1c6 0802 	rsb	r8, r6, #2
 800b086:	4433      	add	r3, r6
 800b088:	6123      	str	r3, [r4, #16]
 800b08a:	4641      	mov	r1, r8
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 ff15 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b092:	2800      	cmp	r0, #0
 800b094:	d03b      	beq.n	800b10e <ucdr_serialize_uint16_t+0xc2>
 800b096:	7d23      	ldrb	r3, [r4, #20]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d04a      	beq.n	800b132 <ucdr_serialize_uint16_t+0xe6>
 800b09c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0a0:	702b      	strb	r3, [r5, #0]
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d040      	beq.n	800b128 <ucdr_serialize_uint16_t+0xdc>
 800b0a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0aa:	706b      	strb	r3, [r5, #1]
 800b0ac:	6923      	ldr	r3, [r4, #16]
 800b0ae:	68a2      	ldr	r2, [r4, #8]
 800b0b0:	7da0      	ldrb	r0, [r4, #22]
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	1b9e      	subs	r6, r3, r6
 800b0b6:	4442      	add	r2, r8
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	f080 0001 	eor.w	r0, r0, #1
 800b0be:	60a2      	str	r2, [r4, #8]
 800b0c0:	6126      	str	r6, [r4, #16]
 800b0c2:	7563      	strb	r3, [r4, #21]
 800b0c4:	b002      	add	sp, #8
 800b0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ca:	2102      	movs	r1, #2
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fef5 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b0d2:	b190      	cbz	r0, 800b0fa <ucdr_serialize_uint16_t+0xae>
 800b0d4:	7d23      	ldrb	r3, [r4, #20]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	d014      	beq.n	800b106 <ucdr_serialize_uint16_t+0xba>
 800b0dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0e8:	705a      	strb	r2, [r3, #1]
 800b0ea:	68a2      	ldr	r2, [r4, #8]
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	3202      	adds	r2, #2
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	2102      	movs	r1, #2
 800b0f4:	60a2      	str	r2, [r4, #8]
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	7561      	strb	r1, [r4, #21]
 800b0fa:	7da0      	ldrb	r0, [r4, #22]
 800b0fc:	f080 0001 	eor.w	r0, r0, #1
 800b100:	b002      	add	sp, #8
 800b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b106:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b10a:	801a      	strh	r2, [r3, #0]
 800b10c:	e7ed      	b.n	800b0ea <ucdr_serialize_uint16_t+0x9e>
 800b10e:	68a2      	ldr	r2, [r4, #8]
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	7da0      	ldrb	r0, [r4, #22]
 800b114:	7567      	strb	r7, [r4, #21]
 800b116:	1b92      	subs	r2, r2, r6
 800b118:	1b9b      	subs	r3, r3, r6
 800b11a:	f080 0001 	eor.w	r0, r0, #1
 800b11e:	60a2      	str	r2, [r4, #8]
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	b002      	add	sp, #8
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	68a3      	ldr	r3, [r4, #8]
 800b12a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	e7bc      	b.n	800b0ac <ucdr_serialize_uint16_t+0x60>
 800b132:	4628      	mov	r0, r5
 800b134:	f10d 0506 	add.w	r5, sp, #6
 800b138:	4629      	mov	r1, r5
 800b13a:	4632      	mov	r2, r6
 800b13c:	f00a fbb3 	bl	80158a6 <memcpy>
 800b140:	68a0      	ldr	r0, [r4, #8]
 800b142:	4642      	mov	r2, r8
 800b144:	19a9      	adds	r1, r5, r6
 800b146:	f00a fbae 	bl	80158a6 <memcpy>
 800b14a:	e7af      	b.n	800b0ac <ucdr_serialize_uint16_t+0x60>

0800b14c <ucdr_serialize_endian_uint16_t>:
 800b14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b150:	b083      	sub	sp, #12
 800b152:	460d      	mov	r5, r1
 800b154:	2102      	movs	r1, #2
 800b156:	4604      	mov	r4, r0
 800b158:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b15c:	f000 ff02 	bl	800bf64 <ucdr_buffer_alignment>
 800b160:	4601      	mov	r1, r0
 800b162:	4620      	mov	r0, r4
 800b164:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b168:	f000 ff40 	bl	800bfec <ucdr_advance_buffer>
 800b16c:	2102      	movs	r1, #2
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fe98 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b174:	bb70      	cbnz	r0, 800b1d4 <ucdr_serialize_endian_uint16_t+0x88>
 800b176:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b17a:	42be      	cmp	r6, r7
 800b17c:	d925      	bls.n	800b1ca <ucdr_serialize_endian_uint16_t+0x7e>
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	60a6      	str	r6, [r4, #8]
 800b182:	1bf6      	subs	r6, r6, r7
 800b184:	4433      	add	r3, r6
 800b186:	f1c6 0902 	rsb	r9, r6, #2
 800b18a:	6123      	str	r3, [r4, #16]
 800b18c:	4649      	mov	r1, r9
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fe94 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b194:	2800      	cmp	r0, #0
 800b196:	d039      	beq.n	800b20c <ucdr_serialize_endian_uint16_t+0xc0>
 800b198:	2d01      	cmp	r5, #1
 800b19a:	d04a      	beq.n	800b232 <ucdr_serialize_endian_uint16_t+0xe6>
 800b19c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1a0:	703b      	strb	r3, [r7, #0]
 800b1a2:	2e00      	cmp	r6, #0
 800b1a4:	d040      	beq.n	800b228 <ucdr_serialize_endian_uint16_t+0xdc>
 800b1a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1aa:	707b      	strb	r3, [r7, #1]
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	68a2      	ldr	r2, [r4, #8]
 800b1b0:	7da0      	ldrb	r0, [r4, #22]
 800b1b2:	3302      	adds	r3, #2
 800b1b4:	444a      	add	r2, r9
 800b1b6:	1b9b      	subs	r3, r3, r6
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	f080 0001 	eor.w	r0, r0, #1
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	7561      	strb	r1, [r4, #21]
 800b1c4:	b003      	add	sp, #12
 800b1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	2102      	movs	r1, #2
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fe75 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b1d2:	b188      	cbz	r0, 800b1f8 <ucdr_serialize_endian_uint16_t+0xac>
 800b1d4:	2d01      	cmp	r5, #1
 800b1d6:	68a3      	ldr	r3, [r4, #8]
 800b1d8:	d014      	beq.n	800b204 <ucdr_serialize_endian_uint16_t+0xb8>
 800b1da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	68a3      	ldr	r3, [r4, #8]
 800b1e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1e6:	705a      	strb	r2, [r3, #1]
 800b1e8:	68a2      	ldr	r2, [r4, #8]
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	3202      	adds	r2, #2
 800b1ee:	3302      	adds	r3, #2
 800b1f0:	2102      	movs	r1, #2
 800b1f2:	60a2      	str	r2, [r4, #8]
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	7561      	strb	r1, [r4, #21]
 800b1f8:	7da0      	ldrb	r0, [r4, #22]
 800b1fa:	f080 0001 	eor.w	r0, r0, #1
 800b1fe:	b003      	add	sp, #12
 800b200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b204:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	e7ed      	b.n	800b1e8 <ucdr_serialize_endian_uint16_t+0x9c>
 800b20c:	68a2      	ldr	r2, [r4, #8]
 800b20e:	6923      	ldr	r3, [r4, #16]
 800b210:	7da0      	ldrb	r0, [r4, #22]
 800b212:	f884 8015 	strb.w	r8, [r4, #21]
 800b216:	1b92      	subs	r2, r2, r6
 800b218:	1b9b      	subs	r3, r3, r6
 800b21a:	f080 0001 	eor.w	r0, r0, #1
 800b21e:	60a2      	str	r2, [r4, #8]
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	b003      	add	sp, #12
 800b224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	e7bc      	b.n	800b1ac <ucdr_serialize_endian_uint16_t+0x60>
 800b232:	f10d 0506 	add.w	r5, sp, #6
 800b236:	4629      	mov	r1, r5
 800b238:	4632      	mov	r2, r6
 800b23a:	4638      	mov	r0, r7
 800b23c:	f00a fb33 	bl	80158a6 <memcpy>
 800b240:	68a0      	ldr	r0, [r4, #8]
 800b242:	464a      	mov	r2, r9
 800b244:	19a9      	adds	r1, r5, r6
 800b246:	f00a fb2e 	bl	80158a6 <memcpy>
 800b24a:	e7af      	b.n	800b1ac <ucdr_serialize_endian_uint16_t+0x60>

0800b24c <ucdr_deserialize_uint16_t>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	460d      	mov	r5, r1
 800b252:	2102      	movs	r1, #2
 800b254:	4604      	mov	r4, r0
 800b256:	f000 fe85 	bl	800bf64 <ucdr_buffer_alignment>
 800b25a:	4601      	mov	r1, r0
 800b25c:	4620      	mov	r0, r4
 800b25e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b262:	f000 fec3 	bl	800bfec <ucdr_advance_buffer>
 800b266:	2102      	movs	r1, #2
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fe1b 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b26e:	bb60      	cbnz	r0, 800b2ca <ucdr_deserialize_uint16_t+0x7e>
 800b270:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b274:	42be      	cmp	r6, r7
 800b276:	d923      	bls.n	800b2c0 <ucdr_deserialize_uint16_t+0x74>
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	60a6      	str	r6, [r4, #8]
 800b27c:	1bf6      	subs	r6, r6, r7
 800b27e:	4433      	add	r3, r6
 800b280:	f1c6 0902 	rsb	r9, r6, #2
 800b284:	6123      	str	r3, [r4, #16]
 800b286:	4649      	mov	r1, r9
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 fe17 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d034      	beq.n	800b2fc <ucdr_deserialize_uint16_t+0xb0>
 800b292:	7d23      	ldrb	r3, [r4, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d042      	beq.n	800b31e <ucdr_deserialize_uint16_t+0xd2>
 800b298:	787b      	ldrb	r3, [r7, #1]
 800b29a:	702b      	strb	r3, [r5, #0]
 800b29c:	2e00      	cmp	r6, #0
 800b29e:	d03a      	beq.n	800b316 <ucdr_deserialize_uint16_t+0xca>
 800b2a0:	783b      	ldrb	r3, [r7, #0]
 800b2a2:	706b      	strb	r3, [r5, #1]
 800b2a4:	6923      	ldr	r3, [r4, #16]
 800b2a6:	68a2      	ldr	r2, [r4, #8]
 800b2a8:	7da0      	ldrb	r0, [r4, #22]
 800b2aa:	2102      	movs	r1, #2
 800b2ac:	3302      	adds	r3, #2
 800b2ae:	444a      	add	r2, r9
 800b2b0:	1b9b      	subs	r3, r3, r6
 800b2b2:	7561      	strb	r1, [r4, #21]
 800b2b4:	60a2      	str	r2, [r4, #8]
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	f080 0001 	eor.w	r0, r0, #1
 800b2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c0:	2102      	movs	r1, #2
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fdfa 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b2c8:	b180      	cbz	r0, 800b2ec <ucdr_deserialize_uint16_t+0xa0>
 800b2ca:	7d23      	ldrb	r3, [r4, #20]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	d011      	beq.n	800b2f6 <ucdr_deserialize_uint16_t+0xaa>
 800b2d2:	785b      	ldrb	r3, [r3, #1]
 800b2d4:	702b      	strb	r3, [r5, #0]
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	706b      	strb	r3, [r5, #1]
 800b2dc:	68a2      	ldr	r2, [r4, #8]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	3202      	adds	r2, #2
 800b2e2:	3302      	adds	r3, #2
 800b2e4:	2102      	movs	r1, #2
 800b2e6:	60a2      	str	r2, [r4, #8]
 800b2e8:	6123      	str	r3, [r4, #16]
 800b2ea:	7561      	strb	r1, [r4, #21]
 800b2ec:	7da0      	ldrb	r0, [r4, #22]
 800b2ee:	f080 0001 	eor.w	r0, r0, #1
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	802b      	strh	r3, [r5, #0]
 800b2fa:	e7ef      	b.n	800b2dc <ucdr_deserialize_uint16_t+0x90>
 800b2fc:	68a2      	ldr	r2, [r4, #8]
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	7da0      	ldrb	r0, [r4, #22]
 800b302:	f884 8015 	strb.w	r8, [r4, #21]
 800b306:	1b92      	subs	r2, r2, r6
 800b308:	1b9b      	subs	r3, r3, r6
 800b30a:	60a2      	str	r2, [r4, #8]
 800b30c:	6123      	str	r3, [r4, #16]
 800b30e:	f080 0001 	eor.w	r0, r0, #1
 800b312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	706b      	strb	r3, [r5, #1]
 800b31c:	e7c2      	b.n	800b2a4 <ucdr_deserialize_uint16_t+0x58>
 800b31e:	4639      	mov	r1, r7
 800b320:	4632      	mov	r2, r6
 800b322:	4628      	mov	r0, r5
 800b324:	f00a fabf 	bl	80158a6 <memcpy>
 800b328:	68a1      	ldr	r1, [r4, #8]
 800b32a:	464a      	mov	r2, r9
 800b32c:	19a8      	adds	r0, r5, r6
 800b32e:	f00a faba 	bl	80158a6 <memcpy>
 800b332:	e7b7      	b.n	800b2a4 <ucdr_deserialize_uint16_t+0x58>

0800b334 <ucdr_deserialize_endian_uint16_t>:
 800b334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	460e      	mov	r6, r1
 800b33a:	2102      	movs	r1, #2
 800b33c:	4604      	mov	r4, r0
 800b33e:	4615      	mov	r5, r2
 800b340:	f000 fe10 	bl	800bf64 <ucdr_buffer_alignment>
 800b344:	4601      	mov	r1, r0
 800b346:	4620      	mov	r0, r4
 800b348:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b34c:	f000 fe4e 	bl	800bfec <ucdr_advance_buffer>
 800b350:	2102      	movs	r1, #2
 800b352:	4620      	mov	r0, r4
 800b354:	f000 fda6 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b358:	bb70      	cbnz	r0, 800b3b8 <ucdr_deserialize_endian_uint16_t+0x84>
 800b35a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b35e:	4547      	cmp	r7, r8
 800b360:	d925      	bls.n	800b3ae <ucdr_deserialize_endian_uint16_t+0x7a>
 800b362:	6923      	ldr	r3, [r4, #16]
 800b364:	60a7      	str	r7, [r4, #8]
 800b366:	eba7 0708 	sub.w	r7, r7, r8
 800b36a:	443b      	add	r3, r7
 800b36c:	f1c7 0a02 	rsb	sl, r7, #2
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	4651      	mov	r1, sl
 800b374:	4620      	mov	r0, r4
 800b376:	f000 fda1 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d034      	beq.n	800b3e8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b37e:	2e01      	cmp	r6, #1
 800b380:	d043      	beq.n	800b40a <ucdr_deserialize_endian_uint16_t+0xd6>
 800b382:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b386:	702b      	strb	r3, [r5, #0]
 800b388:	2f00      	cmp	r7, #0
 800b38a:	d03a      	beq.n	800b402 <ucdr_deserialize_endian_uint16_t+0xce>
 800b38c:	f898 3000 	ldrb.w	r3, [r8]
 800b390:	706b      	strb	r3, [r5, #1]
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	68a2      	ldr	r2, [r4, #8]
 800b396:	7da0      	ldrb	r0, [r4, #22]
 800b398:	2102      	movs	r1, #2
 800b39a:	3302      	adds	r3, #2
 800b39c:	4452      	add	r2, sl
 800b39e:	1bdb      	subs	r3, r3, r7
 800b3a0:	7561      	strb	r1, [r4, #21]
 800b3a2:	60a2      	str	r2, [r4, #8]
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	f080 0001 	eor.w	r0, r0, #1
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	2102      	movs	r1, #2
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 fd83 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b3b6:	b178      	cbz	r0, 800b3d8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b3b8:	2e01      	cmp	r6, #1
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	d011      	beq.n	800b3e2 <ucdr_deserialize_endian_uint16_t+0xae>
 800b3be:	785b      	ldrb	r3, [r3, #1]
 800b3c0:	702b      	strb	r3, [r5, #0]
 800b3c2:	68a3      	ldr	r3, [r4, #8]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	706b      	strb	r3, [r5, #1]
 800b3c8:	68a2      	ldr	r2, [r4, #8]
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	3202      	adds	r2, #2
 800b3ce:	3302      	adds	r3, #2
 800b3d0:	2102      	movs	r1, #2
 800b3d2:	60a2      	str	r2, [r4, #8]
 800b3d4:	6123      	str	r3, [r4, #16]
 800b3d6:	7561      	strb	r1, [r4, #21]
 800b3d8:	7da0      	ldrb	r0, [r4, #22]
 800b3da:	f080 0001 	eor.w	r0, r0, #1
 800b3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	802b      	strh	r3, [r5, #0]
 800b3e6:	e7ef      	b.n	800b3c8 <ucdr_deserialize_endian_uint16_t+0x94>
 800b3e8:	68a2      	ldr	r2, [r4, #8]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	7da0      	ldrb	r0, [r4, #22]
 800b3ee:	f884 9015 	strb.w	r9, [r4, #21]
 800b3f2:	1bd2      	subs	r2, r2, r7
 800b3f4:	1bdb      	subs	r3, r3, r7
 800b3f6:	60a2      	str	r2, [r4, #8]
 800b3f8:	6123      	str	r3, [r4, #16]
 800b3fa:	f080 0001 	eor.w	r0, r0, #1
 800b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	706b      	strb	r3, [r5, #1]
 800b408:	e7c3      	b.n	800b392 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b40a:	4641      	mov	r1, r8
 800b40c:	463a      	mov	r2, r7
 800b40e:	4628      	mov	r0, r5
 800b410:	f00a fa49 	bl	80158a6 <memcpy>
 800b414:	68a1      	ldr	r1, [r4, #8]
 800b416:	4652      	mov	r2, sl
 800b418:	19e8      	adds	r0, r5, r7
 800b41a:	f00a fa44 	bl	80158a6 <memcpy>
 800b41e:	e7b8      	b.n	800b392 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b420 <ucdr_serialize_uint32_t>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	b082      	sub	sp, #8
 800b426:	4604      	mov	r4, r0
 800b428:	9101      	str	r1, [sp, #4]
 800b42a:	2104      	movs	r1, #4
 800b42c:	f000 fd9a 	bl	800bf64 <ucdr_buffer_alignment>
 800b430:	4601      	mov	r1, r0
 800b432:	4620      	mov	r0, r4
 800b434:	7d67      	ldrb	r7, [r4, #21]
 800b436:	f000 fdd9 	bl	800bfec <ucdr_advance_buffer>
 800b43a:	2104      	movs	r1, #4
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 fd31 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b442:	2800      	cmp	r0, #0
 800b444:	d139      	bne.n	800b4ba <ucdr_serialize_uint32_t+0x9a>
 800b446:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b44a:	42ab      	cmp	r3, r5
 800b44c:	d930      	bls.n	800b4b0 <ucdr_serialize_uint32_t+0x90>
 800b44e:	1b5e      	subs	r6, r3, r5
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	f1c6 0804 	rsb	r8, r6, #4
 800b458:	4433      	add	r3, r6
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	4641      	mov	r1, r8
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 fd2c 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b464:	2800      	cmp	r0, #0
 800b466:	d04c      	beq.n	800b502 <ucdr_serialize_uint32_t+0xe2>
 800b468:	7d23      	ldrb	r3, [r4, #20]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d063      	beq.n	800b536 <ucdr_serialize_uint32_t+0x116>
 800b46e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b472:	702b      	strb	r3, [r5, #0]
 800b474:	2e00      	cmp	r6, #0
 800b476:	d051      	beq.n	800b51c <ucdr_serialize_uint32_t+0xfc>
 800b478:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b47c:	706b      	strb	r3, [r5, #1]
 800b47e:	2e01      	cmp	r6, #1
 800b480:	d050      	beq.n	800b524 <ucdr_serialize_uint32_t+0x104>
 800b482:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b486:	70ab      	strb	r3, [r5, #2]
 800b488:	2e02      	cmp	r6, #2
 800b48a:	d04f      	beq.n	800b52c <ucdr_serialize_uint32_t+0x10c>
 800b48c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b490:	70eb      	strb	r3, [r5, #3]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	68a2      	ldr	r2, [r4, #8]
 800b496:	7da0      	ldrb	r0, [r4, #22]
 800b498:	3304      	adds	r3, #4
 800b49a:	1b9e      	subs	r6, r3, r6
 800b49c:	4442      	add	r2, r8
 800b49e:	2304      	movs	r3, #4
 800b4a0:	f080 0001 	eor.w	r0, r0, #1
 800b4a4:	60a2      	str	r2, [r4, #8]
 800b4a6:	6126      	str	r6, [r4, #16]
 800b4a8:	7563      	strb	r3, [r4, #21]
 800b4aa:	b002      	add	sp, #8
 800b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b0:	2104      	movs	r1, #4
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fd02 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b4b8:	b1d0      	cbz	r0, 800b4f0 <ucdr_serialize_uint32_t+0xd0>
 800b4ba:	7d23      	ldrb	r3, [r4, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	d01c      	beq.n	800b4fc <ucdr_serialize_uint32_t+0xdc>
 800b4c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4c6:	701a      	strb	r2, [r3, #0]
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4ce:	705a      	strb	r2, [r3, #1]
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4d6:	709a      	strb	r2, [r3, #2]
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4de:	70da      	strb	r2, [r3, #3]
 800b4e0:	68a2      	ldr	r2, [r4, #8]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	3204      	adds	r2, #4
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	2104      	movs	r1, #4
 800b4ea:	60a2      	str	r2, [r4, #8]
 800b4ec:	6123      	str	r3, [r4, #16]
 800b4ee:	7561      	strb	r1, [r4, #21]
 800b4f0:	7da0      	ldrb	r0, [r4, #22]
 800b4f2:	f080 0001 	eor.w	r0, r0, #1
 800b4f6:	b002      	add	sp, #8
 800b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fc:	9a01      	ldr	r2, [sp, #4]
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	e7ee      	b.n	800b4e0 <ucdr_serialize_uint32_t+0xc0>
 800b502:	68a2      	ldr	r2, [r4, #8]
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	7da0      	ldrb	r0, [r4, #22]
 800b508:	7567      	strb	r7, [r4, #21]
 800b50a:	1b92      	subs	r2, r2, r6
 800b50c:	1b9b      	subs	r3, r3, r6
 800b50e:	f080 0001 	eor.w	r0, r0, #1
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	b002      	add	sp, #8
 800b518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	68a3      	ldr	r3, [r4, #8]
 800b52e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	e7ad      	b.n	800b492 <ucdr_serialize_uint32_t+0x72>
 800b536:	4628      	mov	r0, r5
 800b538:	ad01      	add	r5, sp, #4
 800b53a:	4629      	mov	r1, r5
 800b53c:	4632      	mov	r2, r6
 800b53e:	f00a f9b2 	bl	80158a6 <memcpy>
 800b542:	68a0      	ldr	r0, [r4, #8]
 800b544:	4642      	mov	r2, r8
 800b546:	19a9      	adds	r1, r5, r6
 800b548:	f00a f9ad 	bl	80158a6 <memcpy>
 800b54c:	e7a1      	b.n	800b492 <ucdr_serialize_uint32_t+0x72>
 800b54e:	bf00      	nop

0800b550 <ucdr_serialize_endian_uint32_t>:
 800b550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b554:	b083      	sub	sp, #12
 800b556:	460d      	mov	r5, r1
 800b558:	2104      	movs	r1, #4
 800b55a:	4604      	mov	r4, r0
 800b55c:	9201      	str	r2, [sp, #4]
 800b55e:	f000 fd01 	bl	800bf64 <ucdr_buffer_alignment>
 800b562:	4601      	mov	r1, r0
 800b564:	4620      	mov	r0, r4
 800b566:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b56a:	f000 fd3f 	bl	800bfec <ucdr_advance_buffer>
 800b56e:	2104      	movs	r1, #4
 800b570:	4620      	mov	r0, r4
 800b572:	f000 fc97 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b576:	2800      	cmp	r0, #0
 800b578:	d138      	bne.n	800b5ec <ucdr_serialize_endian_uint32_t+0x9c>
 800b57a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b57e:	42b7      	cmp	r7, r6
 800b580:	d92f      	bls.n	800b5e2 <ucdr_serialize_endian_uint32_t+0x92>
 800b582:	6923      	ldr	r3, [r4, #16]
 800b584:	60a7      	str	r7, [r4, #8]
 800b586:	1bbf      	subs	r7, r7, r6
 800b588:	443b      	add	r3, r7
 800b58a:	f1c7 0904 	rsb	r9, r7, #4
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	4649      	mov	r1, r9
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fc92 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d04a      	beq.n	800b632 <ucdr_serialize_endian_uint32_t+0xe2>
 800b59c:	2d01      	cmp	r5, #1
 800b59e:	d063      	beq.n	800b668 <ucdr_serialize_endian_uint32_t+0x118>
 800b5a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5a4:	7033      	strb	r3, [r6, #0]
 800b5a6:	2f00      	cmp	r7, #0
 800b5a8:	d051      	beq.n	800b64e <ucdr_serialize_endian_uint32_t+0xfe>
 800b5aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5ae:	7073      	strb	r3, [r6, #1]
 800b5b0:	2f01      	cmp	r7, #1
 800b5b2:	d050      	beq.n	800b656 <ucdr_serialize_endian_uint32_t+0x106>
 800b5b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b5b8:	70b3      	strb	r3, [r6, #2]
 800b5ba:	2f02      	cmp	r7, #2
 800b5bc:	d04f      	beq.n	800b65e <ucdr_serialize_endian_uint32_t+0x10e>
 800b5be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5c2:	70f3      	strb	r3, [r6, #3]
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	68a2      	ldr	r2, [r4, #8]
 800b5c8:	7da0      	ldrb	r0, [r4, #22]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	444a      	add	r2, r9
 800b5ce:	1bdb      	subs	r3, r3, r7
 800b5d0:	2104      	movs	r1, #4
 800b5d2:	f080 0001 	eor.w	r0, r0, #1
 800b5d6:	60a2      	str	r2, [r4, #8]
 800b5d8:	6123      	str	r3, [r4, #16]
 800b5da:	7561      	strb	r1, [r4, #21]
 800b5dc:	b003      	add	sp, #12
 800b5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 fc69 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b5ea:	b1c8      	cbz	r0, 800b620 <ucdr_serialize_endian_uint32_t+0xd0>
 800b5ec:	2d01      	cmp	r5, #1
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	d01c      	beq.n	800b62c <ucdr_serialize_endian_uint32_t+0xdc>
 800b5f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5fe:	705a      	strb	r2, [r3, #1]
 800b600:	68a3      	ldr	r3, [r4, #8]
 800b602:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b606:	709a      	strb	r2, [r3, #2]
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b60e:	70da      	strb	r2, [r3, #3]
 800b610:	68a2      	ldr	r2, [r4, #8]
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	3204      	adds	r2, #4
 800b616:	3304      	adds	r3, #4
 800b618:	2104      	movs	r1, #4
 800b61a:	60a2      	str	r2, [r4, #8]
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	7561      	strb	r1, [r4, #21]
 800b620:	7da0      	ldrb	r0, [r4, #22]
 800b622:	f080 0001 	eor.w	r0, r0, #1
 800b626:	b003      	add	sp, #12
 800b628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b62c:	9a01      	ldr	r2, [sp, #4]
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	e7ee      	b.n	800b610 <ucdr_serialize_endian_uint32_t+0xc0>
 800b632:	68a2      	ldr	r2, [r4, #8]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	7da0      	ldrb	r0, [r4, #22]
 800b638:	f884 8015 	strb.w	r8, [r4, #21]
 800b63c:	1bd2      	subs	r2, r2, r7
 800b63e:	1bdb      	subs	r3, r3, r7
 800b640:	f080 0001 	eor.w	r0, r0, #1
 800b644:	60a2      	str	r2, [r4, #8]
 800b646:	6123      	str	r3, [r4, #16]
 800b648:	b003      	add	sp, #12
 800b64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	68a3      	ldr	r3, [r4, #8]
 800b660:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b664:	701a      	strb	r2, [r3, #0]
 800b666:	e7ad      	b.n	800b5c4 <ucdr_serialize_endian_uint32_t+0x74>
 800b668:	ad01      	add	r5, sp, #4
 800b66a:	4629      	mov	r1, r5
 800b66c:	463a      	mov	r2, r7
 800b66e:	4630      	mov	r0, r6
 800b670:	f00a f919 	bl	80158a6 <memcpy>
 800b674:	68a0      	ldr	r0, [r4, #8]
 800b676:	464a      	mov	r2, r9
 800b678:	19e9      	adds	r1, r5, r7
 800b67a:	f00a f914 	bl	80158a6 <memcpy>
 800b67e:	e7a1      	b.n	800b5c4 <ucdr_serialize_endian_uint32_t+0x74>

0800b680 <ucdr_deserialize_uint32_t>:
 800b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b684:	460d      	mov	r5, r1
 800b686:	2104      	movs	r1, #4
 800b688:	4604      	mov	r4, r0
 800b68a:	f000 fc6b 	bl	800bf64 <ucdr_buffer_alignment>
 800b68e:	4601      	mov	r1, r0
 800b690:	4620      	mov	r0, r4
 800b692:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b696:	f000 fca9 	bl	800bfec <ucdr_advance_buffer>
 800b69a:	2104      	movs	r1, #4
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fc01 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d138      	bne.n	800b718 <ucdr_deserialize_uint32_t+0x98>
 800b6a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b6aa:	42b7      	cmp	r7, r6
 800b6ac:	d92f      	bls.n	800b70e <ucdr_deserialize_uint32_t+0x8e>
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	60a7      	str	r7, [r4, #8]
 800b6b2:	1bbf      	subs	r7, r7, r6
 800b6b4:	443b      	add	r3, r7
 800b6b6:	f1c7 0904 	rsb	r9, r7, #4
 800b6ba:	6123      	str	r3, [r4, #16]
 800b6bc:	4649      	mov	r1, r9
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 fbfc 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d046      	beq.n	800b756 <ucdr_deserialize_uint32_t+0xd6>
 800b6c8:	7d23      	ldrb	r3, [r4, #20]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d05c      	beq.n	800b788 <ucdr_deserialize_uint32_t+0x108>
 800b6ce:	78f3      	ldrb	r3, [r6, #3]
 800b6d0:	702b      	strb	r3, [r5, #0]
 800b6d2:	2f00      	cmp	r7, #0
 800b6d4:	d04c      	beq.n	800b770 <ucdr_deserialize_uint32_t+0xf0>
 800b6d6:	78b3      	ldrb	r3, [r6, #2]
 800b6d8:	706b      	strb	r3, [r5, #1]
 800b6da:	2f01      	cmp	r7, #1
 800b6dc:	f105 0302 	add.w	r3, r5, #2
 800b6e0:	d04a      	beq.n	800b778 <ucdr_deserialize_uint32_t+0xf8>
 800b6e2:	7873      	ldrb	r3, [r6, #1]
 800b6e4:	70ab      	strb	r3, [r5, #2]
 800b6e6:	2f02      	cmp	r7, #2
 800b6e8:	f105 0303 	add.w	r3, r5, #3
 800b6ec:	d048      	beq.n	800b780 <ucdr_deserialize_uint32_t+0x100>
 800b6ee:	7833      	ldrb	r3, [r6, #0]
 800b6f0:	70eb      	strb	r3, [r5, #3]
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	68a2      	ldr	r2, [r4, #8]
 800b6f6:	7da0      	ldrb	r0, [r4, #22]
 800b6f8:	2104      	movs	r1, #4
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	444a      	add	r2, r9
 800b6fe:	1bdb      	subs	r3, r3, r7
 800b700:	7561      	strb	r1, [r4, #21]
 800b702:	60a2      	str	r2, [r4, #8]
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	f080 0001 	eor.w	r0, r0, #1
 800b70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70e:	2104      	movs	r1, #4
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fbd3 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b716:	b1b0      	cbz	r0, 800b746 <ucdr_deserialize_uint32_t+0xc6>
 800b718:	7d23      	ldrb	r3, [r4, #20]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	d017      	beq.n	800b750 <ucdr_deserialize_uint32_t+0xd0>
 800b720:	78db      	ldrb	r3, [r3, #3]
 800b722:	702b      	strb	r3, [r5, #0]
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	789b      	ldrb	r3, [r3, #2]
 800b728:	706b      	strb	r3, [r5, #1]
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	785b      	ldrb	r3, [r3, #1]
 800b72e:	70ab      	strb	r3, [r5, #2]
 800b730:	68a3      	ldr	r3, [r4, #8]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	70eb      	strb	r3, [r5, #3]
 800b736:	68a2      	ldr	r2, [r4, #8]
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	3204      	adds	r2, #4
 800b73c:	3304      	adds	r3, #4
 800b73e:	2104      	movs	r1, #4
 800b740:	60a2      	str	r2, [r4, #8]
 800b742:	6123      	str	r3, [r4, #16]
 800b744:	7561      	strb	r1, [r4, #21]
 800b746:	7da0      	ldrb	r0, [r4, #22]
 800b748:	f080 0001 	eor.w	r0, r0, #1
 800b74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	e7ef      	b.n	800b736 <ucdr_deserialize_uint32_t+0xb6>
 800b756:	68a2      	ldr	r2, [r4, #8]
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	7da0      	ldrb	r0, [r4, #22]
 800b75c:	f884 8015 	strb.w	r8, [r4, #21]
 800b760:	1bd2      	subs	r2, r2, r7
 800b762:	1bdb      	subs	r3, r3, r7
 800b764:	60a2      	str	r2, [r4, #8]
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	f080 0001 	eor.w	r0, r0, #1
 800b76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b770:	68a3      	ldr	r3, [r4, #8]
 800b772:	789b      	ldrb	r3, [r3, #2]
 800b774:	706b      	strb	r3, [r5, #1]
 800b776:	1cab      	adds	r3, r5, #2
 800b778:	68a2      	ldr	r2, [r4, #8]
 800b77a:	7852      	ldrb	r2, [r2, #1]
 800b77c:	f803 2b01 	strb.w	r2, [r3], #1
 800b780:	68a2      	ldr	r2, [r4, #8]
 800b782:	7812      	ldrb	r2, [r2, #0]
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e7b4      	b.n	800b6f2 <ucdr_deserialize_uint32_t+0x72>
 800b788:	4631      	mov	r1, r6
 800b78a:	463a      	mov	r2, r7
 800b78c:	4628      	mov	r0, r5
 800b78e:	f00a f88a 	bl	80158a6 <memcpy>
 800b792:	68a1      	ldr	r1, [r4, #8]
 800b794:	464a      	mov	r2, r9
 800b796:	19e8      	adds	r0, r5, r7
 800b798:	f00a f885 	bl	80158a6 <memcpy>
 800b79c:	e7a9      	b.n	800b6f2 <ucdr_deserialize_uint32_t+0x72>
 800b79e:	bf00      	nop

0800b7a0 <ucdr_deserialize_endian_uint32_t>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	460e      	mov	r6, r1
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	4615      	mov	r5, r2
 800b7ac:	f000 fbda 	bl	800bf64 <ucdr_buffer_alignment>
 800b7b0:	4601      	mov	r1, r0
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b7b8:	f000 fc18 	bl	800bfec <ucdr_advance_buffer>
 800b7bc:	2104      	movs	r1, #4
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 fb70 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d13c      	bne.n	800b842 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b7c8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b7cc:	42bb      	cmp	r3, r7
 800b7ce:	d933      	bls.n	800b838 <ucdr_deserialize_endian_uint32_t+0x98>
 800b7d0:	eba3 0807 	sub.w	r8, r3, r7
 800b7d4:	60a3      	str	r3, [r4, #8]
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	f1c8 0a04 	rsb	sl, r8, #4
 800b7dc:	4443      	add	r3, r8
 800b7de:	6123      	str	r3, [r4, #16]
 800b7e0:	4651      	mov	r1, sl
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fb6a 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d048      	beq.n	800b87e <ucdr_deserialize_endian_uint32_t+0xde>
 800b7ec:	2e01      	cmp	r6, #1
 800b7ee:	d061      	beq.n	800b8b4 <ucdr_deserialize_endian_uint32_t+0x114>
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	702b      	strb	r3, [r5, #0]
 800b7f4:	f1b8 0f00 	cmp.w	r8, #0
 800b7f8:	d050      	beq.n	800b89c <ucdr_deserialize_endian_uint32_t+0xfc>
 800b7fa:	78bb      	ldrb	r3, [r7, #2]
 800b7fc:	706b      	strb	r3, [r5, #1]
 800b7fe:	f1b8 0f01 	cmp.w	r8, #1
 800b802:	f105 0302 	add.w	r3, r5, #2
 800b806:	d04d      	beq.n	800b8a4 <ucdr_deserialize_endian_uint32_t+0x104>
 800b808:	787b      	ldrb	r3, [r7, #1]
 800b80a:	70ab      	strb	r3, [r5, #2]
 800b80c:	f1b8 0f02 	cmp.w	r8, #2
 800b810:	f105 0303 	add.w	r3, r5, #3
 800b814:	d04a      	beq.n	800b8ac <ucdr_deserialize_endian_uint32_t+0x10c>
 800b816:	783b      	ldrb	r3, [r7, #0]
 800b818:	70eb      	strb	r3, [r5, #3]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	68a2      	ldr	r2, [r4, #8]
 800b81e:	7da0      	ldrb	r0, [r4, #22]
 800b820:	2104      	movs	r1, #4
 800b822:	3304      	adds	r3, #4
 800b824:	4452      	add	r2, sl
 800b826:	eba3 0308 	sub.w	r3, r3, r8
 800b82a:	7561      	strb	r1, [r4, #21]
 800b82c:	60a2      	str	r2, [r4, #8]
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	f080 0001 	eor.w	r0, r0, #1
 800b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b838:	2104      	movs	r1, #4
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fb3e 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b840:	b1a8      	cbz	r0, 800b86e <ucdr_deserialize_endian_uint32_t+0xce>
 800b842:	2e01      	cmp	r6, #1
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	d017      	beq.n	800b878 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b848:	78db      	ldrb	r3, [r3, #3]
 800b84a:	702b      	strb	r3, [r5, #0]
 800b84c:	68a3      	ldr	r3, [r4, #8]
 800b84e:	789b      	ldrb	r3, [r3, #2]
 800b850:	706b      	strb	r3, [r5, #1]
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	785b      	ldrb	r3, [r3, #1]
 800b856:	70ab      	strb	r3, [r5, #2]
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	70eb      	strb	r3, [r5, #3]
 800b85e:	68a2      	ldr	r2, [r4, #8]
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	3204      	adds	r2, #4
 800b864:	3304      	adds	r3, #4
 800b866:	2104      	movs	r1, #4
 800b868:	60a2      	str	r2, [r4, #8]
 800b86a:	6123      	str	r3, [r4, #16]
 800b86c:	7561      	strb	r1, [r4, #21]
 800b86e:	7da0      	ldrb	r0, [r4, #22]
 800b870:	f080 0001 	eor.w	r0, r0, #1
 800b874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	e7ef      	b.n	800b85e <ucdr_deserialize_endian_uint32_t+0xbe>
 800b87e:	68a2      	ldr	r2, [r4, #8]
 800b880:	6923      	ldr	r3, [r4, #16]
 800b882:	7da0      	ldrb	r0, [r4, #22]
 800b884:	f884 9015 	strb.w	r9, [r4, #21]
 800b888:	eba2 0208 	sub.w	r2, r2, r8
 800b88c:	eba3 0308 	sub.w	r3, r3, r8
 800b890:	60a2      	str	r2, [r4, #8]
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	f080 0001 	eor.w	r0, r0, #1
 800b898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89c:	68a3      	ldr	r3, [r4, #8]
 800b89e:	789b      	ldrb	r3, [r3, #2]
 800b8a0:	706b      	strb	r3, [r5, #1]
 800b8a2:	1cab      	adds	r3, r5, #2
 800b8a4:	68a2      	ldr	r2, [r4, #8]
 800b8a6:	7852      	ldrb	r2, [r2, #1]
 800b8a8:	f803 2b01 	strb.w	r2, [r3], #1
 800b8ac:	68a2      	ldr	r2, [r4, #8]
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	701a      	strb	r2, [r3, #0]
 800b8b2:	e7b2      	b.n	800b81a <ucdr_deserialize_endian_uint32_t+0x7a>
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f009 fff4 	bl	80158a6 <memcpy>
 800b8be:	68a1      	ldr	r1, [r4, #8]
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	eb05 0008 	add.w	r0, r5, r8
 800b8c6:	f009 ffee 	bl	80158a6 <memcpy>
 800b8ca:	e7a6      	b.n	800b81a <ucdr_deserialize_endian_uint32_t+0x7a>

0800b8cc <ucdr_serialize_uint64_t>:
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	2108      	movs	r1, #8
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	e9cd 2300 	strd	r2, r3, [sp]
 800b8da:	f000 fb43 	bl	800bf64 <ucdr_buffer_alignment>
 800b8de:	4601      	mov	r1, r0
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	7d67      	ldrb	r7, [r4, #21]
 800b8e4:	f000 fb82 	bl	800bfec <ucdr_advance_buffer>
 800b8e8:	2108      	movs	r1, #8
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fada 	bl	800bea4 <ucdr_check_buffer_available_for>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d14e      	bne.n	800b992 <ucdr_serialize_uint64_t+0xc6>
 800b8f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b8f8:	42ab      	cmp	r3, r5
 800b8fa:	d945      	bls.n	800b988 <ucdr_serialize_uint64_t+0xbc>
 800b8fc:	1b5e      	subs	r6, r3, r5
 800b8fe:	60a3      	str	r3, [r4, #8]
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	f1c6 0808 	rsb	r8, r6, #8
 800b906:	4433      	add	r3, r6
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	4641      	mov	r1, r8
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 fad5 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b912:	2800      	cmp	r0, #0
 800b914:	d074      	beq.n	800ba00 <ucdr_serialize_uint64_t+0x134>
 800b916:	7d23      	ldrb	r3, [r4, #20]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	f000 809b 	beq.w	800ba54 <ucdr_serialize_uint64_t+0x188>
 800b91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b922:	702b      	strb	r3, [r5, #0]
 800b924:	2e00      	cmp	r6, #0
 800b926:	d078      	beq.n	800ba1a <ucdr_serialize_uint64_t+0x14e>
 800b928:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b92c:	706b      	strb	r3, [r5, #1]
 800b92e:	2e01      	cmp	r6, #1
 800b930:	d077      	beq.n	800ba22 <ucdr_serialize_uint64_t+0x156>
 800b932:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b936:	70ab      	strb	r3, [r5, #2]
 800b938:	2e02      	cmp	r6, #2
 800b93a:	d076      	beq.n	800ba2a <ucdr_serialize_uint64_t+0x15e>
 800b93c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b940:	70eb      	strb	r3, [r5, #3]
 800b942:	2e03      	cmp	r6, #3
 800b944:	d075      	beq.n	800ba32 <ucdr_serialize_uint64_t+0x166>
 800b946:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b94a:	712b      	strb	r3, [r5, #4]
 800b94c:	2e04      	cmp	r6, #4
 800b94e:	d074      	beq.n	800ba3a <ucdr_serialize_uint64_t+0x16e>
 800b950:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b954:	716b      	strb	r3, [r5, #5]
 800b956:	2e05      	cmp	r6, #5
 800b958:	d073      	beq.n	800ba42 <ucdr_serialize_uint64_t+0x176>
 800b95a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b95e:	71ab      	strb	r3, [r5, #6]
 800b960:	2e06      	cmp	r6, #6
 800b962:	d072      	beq.n	800ba4a <ucdr_serialize_uint64_t+0x17e>
 800b964:	f89d 3000 	ldrb.w	r3, [sp]
 800b968:	71eb      	strb	r3, [r5, #7]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	68a2      	ldr	r2, [r4, #8]
 800b96e:	7da0      	ldrb	r0, [r4, #22]
 800b970:	3308      	adds	r3, #8
 800b972:	1b9e      	subs	r6, r3, r6
 800b974:	4442      	add	r2, r8
 800b976:	2308      	movs	r3, #8
 800b978:	f080 0001 	eor.w	r0, r0, #1
 800b97c:	60a2      	str	r2, [r4, #8]
 800b97e:	6126      	str	r6, [r4, #16]
 800b980:	7563      	strb	r3, [r4, #21]
 800b982:	b002      	add	sp, #8
 800b984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b988:	2108      	movs	r1, #8
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 fa96 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800b990:	b350      	cbz	r0, 800b9e8 <ucdr_serialize_uint64_t+0x11c>
 800b992:	7d23      	ldrb	r3, [r4, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d02d      	beq.n	800b9f4 <ucdr_serialize_uint64_t+0x128>
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	68a3      	ldr	r3, [r4, #8]
 800b9a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9a6:	705a      	strb	r2, [r3, #1]
 800b9a8:	68a3      	ldr	r3, [r4, #8]
 800b9aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9ae:	709a      	strb	r2, [r3, #2]
 800b9b0:	68a3      	ldr	r3, [r4, #8]
 800b9b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9b6:	70da      	strb	r2, [r3, #3]
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b9be:	711a      	strb	r2, [r3, #4]
 800b9c0:	68a3      	ldr	r3, [r4, #8]
 800b9c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b9c6:	715a      	strb	r2, [r3, #5]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b9ce:	719a      	strb	r2, [r3, #6]
 800b9d0:	68a3      	ldr	r3, [r4, #8]
 800b9d2:	f89d 2000 	ldrb.w	r2, [sp]
 800b9d6:	71da      	strb	r2, [r3, #7]
 800b9d8:	68a2      	ldr	r2, [r4, #8]
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	3208      	adds	r2, #8
 800b9de:	3308      	adds	r3, #8
 800b9e0:	2108      	movs	r1, #8
 800b9e2:	60a2      	str	r2, [r4, #8]
 800b9e4:	6123      	str	r3, [r4, #16]
 800b9e6:	7561      	strb	r1, [r4, #21]
 800b9e8:	7da0      	ldrb	r0, [r4, #22]
 800b9ea:	f080 0001 	eor.w	r0, r0, #1
 800b9ee:	b002      	add	sp, #8
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	466b      	mov	r3, sp
 800b9f6:	cb03      	ldmia	r3!, {r0, r1}
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	6018      	str	r0, [r3, #0]
 800b9fc:	6059      	str	r1, [r3, #4]
 800b9fe:	e7eb      	b.n	800b9d8 <ucdr_serialize_uint64_t+0x10c>
 800ba00:	68a2      	ldr	r2, [r4, #8]
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	7da0      	ldrb	r0, [r4, #22]
 800ba06:	7567      	strb	r7, [r4, #21]
 800ba08:	1b92      	subs	r2, r2, r6
 800ba0a:	1b9b      	subs	r3, r3, r6
 800ba0c:	f080 0001 	eor.w	r0, r0, #1
 800ba10:	60a2      	str	r2, [r4, #8]
 800ba12:	6123      	str	r3, [r4, #16]
 800ba14:	b002      	add	sp, #8
 800ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1a:	68a3      	ldr	r3, [r4, #8]
 800ba1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	68a3      	ldr	r3, [r4, #8]
 800ba24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	68a3      	ldr	r3, [r4, #8]
 800ba4c:	f89d 2000 	ldrb.w	r2, [sp]
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	e78a      	b.n	800b96a <ucdr_serialize_uint64_t+0x9e>
 800ba54:	4628      	mov	r0, r5
 800ba56:	466d      	mov	r5, sp
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	f009 ff23 	bl	80158a6 <memcpy>
 800ba60:	68a0      	ldr	r0, [r4, #8]
 800ba62:	4642      	mov	r2, r8
 800ba64:	19a9      	adds	r1, r5, r6
 800ba66:	f009 ff1e 	bl	80158a6 <memcpy>
 800ba6a:	e77e      	b.n	800b96a <ucdr_serialize_uint64_t+0x9e>

0800ba6c <ucdr_serialize_int16_t>:
 800ba6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	460b      	mov	r3, r1
 800ba74:	2102      	movs	r1, #2
 800ba76:	4604      	mov	r4, r0
 800ba78:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ba7c:	f000 fa72 	bl	800bf64 <ucdr_buffer_alignment>
 800ba80:	4601      	mov	r1, r0
 800ba82:	4620      	mov	r0, r4
 800ba84:	7d67      	ldrb	r7, [r4, #21]
 800ba86:	f000 fab1 	bl	800bfec <ucdr_advance_buffer>
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 fa09 	bl	800bea4 <ucdr_check_buffer_available_for>
 800ba92:	bb78      	cbnz	r0, 800baf4 <ucdr_serialize_int16_t+0x88>
 800ba94:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ba98:	42ab      	cmp	r3, r5
 800ba9a:	d926      	bls.n	800baea <ucdr_serialize_int16_t+0x7e>
 800ba9c:	1b5e      	subs	r6, r3, r5
 800ba9e:	60a3      	str	r3, [r4, #8]
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	f1c6 0802 	rsb	r8, r6, #2
 800baa6:	4433      	add	r3, r6
 800baa8:	6123      	str	r3, [r4, #16]
 800baaa:	4641      	mov	r1, r8
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fa05 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d03b      	beq.n	800bb2e <ucdr_serialize_int16_t+0xc2>
 800bab6:	7d23      	ldrb	r3, [r4, #20]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d04a      	beq.n	800bb52 <ucdr_serialize_int16_t+0xe6>
 800babc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bac0:	702b      	strb	r3, [r5, #0]
 800bac2:	2e00      	cmp	r6, #0
 800bac4:	d040      	beq.n	800bb48 <ucdr_serialize_int16_t+0xdc>
 800bac6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800baca:	706b      	strb	r3, [r5, #1]
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	68a2      	ldr	r2, [r4, #8]
 800bad0:	7da0      	ldrb	r0, [r4, #22]
 800bad2:	3302      	adds	r3, #2
 800bad4:	1b9e      	subs	r6, r3, r6
 800bad6:	4442      	add	r2, r8
 800bad8:	2302      	movs	r3, #2
 800bada:	f080 0001 	eor.w	r0, r0, #1
 800bade:	60a2      	str	r2, [r4, #8]
 800bae0:	6126      	str	r6, [r4, #16]
 800bae2:	7563      	strb	r3, [r4, #21]
 800bae4:	b002      	add	sp, #8
 800bae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baea:	2102      	movs	r1, #2
 800baec:	4620      	mov	r0, r4
 800baee:	f000 f9e5 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800baf2:	b190      	cbz	r0, 800bb1a <ucdr_serialize_int16_t+0xae>
 800baf4:	7d23      	ldrb	r3, [r4, #20]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	d014      	beq.n	800bb26 <ucdr_serialize_int16_t+0xba>
 800bafc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	68a3      	ldr	r3, [r4, #8]
 800bb04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb08:	705a      	strb	r2, [r3, #1]
 800bb0a:	68a2      	ldr	r2, [r4, #8]
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	3202      	adds	r2, #2
 800bb10:	3302      	adds	r3, #2
 800bb12:	2102      	movs	r1, #2
 800bb14:	60a2      	str	r2, [r4, #8]
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	7561      	strb	r1, [r4, #21]
 800bb1a:	7da0      	ldrb	r0, [r4, #22]
 800bb1c:	f080 0001 	eor.w	r0, r0, #1
 800bb20:	b002      	add	sp, #8
 800bb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb2a:	801a      	strh	r2, [r3, #0]
 800bb2c:	e7ed      	b.n	800bb0a <ucdr_serialize_int16_t+0x9e>
 800bb2e:	68a2      	ldr	r2, [r4, #8]
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	7da0      	ldrb	r0, [r4, #22]
 800bb34:	7567      	strb	r7, [r4, #21]
 800bb36:	1b92      	subs	r2, r2, r6
 800bb38:	1b9b      	subs	r3, r3, r6
 800bb3a:	f080 0001 	eor.w	r0, r0, #1
 800bb3e:	60a2      	str	r2, [r4, #8]
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	b002      	add	sp, #8
 800bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb4e:	701a      	strb	r2, [r3, #0]
 800bb50:	e7bc      	b.n	800bacc <ucdr_serialize_int16_t+0x60>
 800bb52:	4628      	mov	r0, r5
 800bb54:	f10d 0506 	add.w	r5, sp, #6
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4632      	mov	r2, r6
 800bb5c:	f009 fea3 	bl	80158a6 <memcpy>
 800bb60:	68a0      	ldr	r0, [r4, #8]
 800bb62:	4642      	mov	r2, r8
 800bb64:	19a9      	adds	r1, r5, r6
 800bb66:	f009 fe9e 	bl	80158a6 <memcpy>
 800bb6a:	e7af      	b.n	800bacc <ucdr_serialize_int16_t+0x60>

0800bb6c <ucdr_deserialize_int16_t>:
 800bb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	460d      	mov	r5, r1
 800bb72:	2102      	movs	r1, #2
 800bb74:	4604      	mov	r4, r0
 800bb76:	f000 f9f5 	bl	800bf64 <ucdr_buffer_alignment>
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb82:	f000 fa33 	bl	800bfec <ucdr_advance_buffer>
 800bb86:	2102      	movs	r1, #2
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 f98b 	bl	800bea4 <ucdr_check_buffer_available_for>
 800bb8e:	bb60      	cbnz	r0, 800bbea <ucdr_deserialize_int16_t+0x7e>
 800bb90:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bb94:	42be      	cmp	r6, r7
 800bb96:	d923      	bls.n	800bbe0 <ucdr_deserialize_int16_t+0x74>
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	60a6      	str	r6, [r4, #8]
 800bb9c:	1bf6      	subs	r6, r6, r7
 800bb9e:	4433      	add	r3, r6
 800bba0:	f1c6 0902 	rsb	r9, r6, #2
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	4649      	mov	r1, r9
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 f987 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d034      	beq.n	800bc1c <ucdr_deserialize_int16_t+0xb0>
 800bbb2:	7d23      	ldrb	r3, [r4, #20]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d042      	beq.n	800bc3e <ucdr_deserialize_int16_t+0xd2>
 800bbb8:	787b      	ldrb	r3, [r7, #1]
 800bbba:	702b      	strb	r3, [r5, #0]
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	d03a      	beq.n	800bc36 <ucdr_deserialize_int16_t+0xca>
 800bbc0:	783b      	ldrb	r3, [r7, #0]
 800bbc2:	706b      	strb	r3, [r5, #1]
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	68a2      	ldr	r2, [r4, #8]
 800bbc8:	7da0      	ldrb	r0, [r4, #22]
 800bbca:	2102      	movs	r1, #2
 800bbcc:	3302      	adds	r3, #2
 800bbce:	444a      	add	r2, r9
 800bbd0:	1b9b      	subs	r3, r3, r6
 800bbd2:	7561      	strb	r1, [r4, #21]
 800bbd4:	60a2      	str	r2, [r4, #8]
 800bbd6:	6123      	str	r3, [r4, #16]
 800bbd8:	f080 0001 	eor.w	r0, r0, #1
 800bbdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 f96a 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800bbe8:	b180      	cbz	r0, 800bc0c <ucdr_deserialize_int16_t+0xa0>
 800bbea:	7d23      	ldrb	r3, [r4, #20]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	d011      	beq.n	800bc16 <ucdr_deserialize_int16_t+0xaa>
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	702b      	strb	r3, [r5, #0]
 800bbf6:	68a3      	ldr	r3, [r4, #8]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	706b      	strb	r3, [r5, #1]
 800bbfc:	68a2      	ldr	r2, [r4, #8]
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	3202      	adds	r2, #2
 800bc02:	3302      	adds	r3, #2
 800bc04:	2102      	movs	r1, #2
 800bc06:	60a2      	str	r2, [r4, #8]
 800bc08:	6123      	str	r3, [r4, #16]
 800bc0a:	7561      	strb	r1, [r4, #21]
 800bc0c:	7da0      	ldrb	r0, [r4, #22]
 800bc0e:	f080 0001 	eor.w	r0, r0, #1
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	802b      	strh	r3, [r5, #0]
 800bc1a:	e7ef      	b.n	800bbfc <ucdr_deserialize_int16_t+0x90>
 800bc1c:	68a2      	ldr	r2, [r4, #8]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	7da0      	ldrb	r0, [r4, #22]
 800bc22:	f884 8015 	strb.w	r8, [r4, #21]
 800bc26:	1b92      	subs	r2, r2, r6
 800bc28:	1b9b      	subs	r3, r3, r6
 800bc2a:	60a2      	str	r2, [r4, #8]
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	f080 0001 	eor.w	r0, r0, #1
 800bc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	706b      	strb	r3, [r5, #1]
 800bc3c:	e7c2      	b.n	800bbc4 <ucdr_deserialize_int16_t+0x58>
 800bc3e:	4639      	mov	r1, r7
 800bc40:	4632      	mov	r2, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	f009 fe2f 	bl	80158a6 <memcpy>
 800bc48:	68a1      	ldr	r1, [r4, #8]
 800bc4a:	464a      	mov	r2, r9
 800bc4c:	19a8      	adds	r0, r5, r6
 800bc4e:	f009 fe2a 	bl	80158a6 <memcpy>
 800bc52:	e7b7      	b.n	800bbc4 <ucdr_deserialize_int16_t+0x58>

0800bc54 <ucdr_serialize_int32_t>:
 800bc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	9101      	str	r1, [sp, #4]
 800bc5e:	2104      	movs	r1, #4
 800bc60:	f000 f980 	bl	800bf64 <ucdr_buffer_alignment>
 800bc64:	4601      	mov	r1, r0
 800bc66:	4620      	mov	r0, r4
 800bc68:	7d67      	ldrb	r7, [r4, #21]
 800bc6a:	f000 f9bf 	bl	800bfec <ucdr_advance_buffer>
 800bc6e:	2104      	movs	r1, #4
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 f917 	bl	800bea4 <ucdr_check_buffer_available_for>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d139      	bne.n	800bcee <ucdr_serialize_int32_t+0x9a>
 800bc7a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc7e:	42ab      	cmp	r3, r5
 800bc80:	d930      	bls.n	800bce4 <ucdr_serialize_int32_t+0x90>
 800bc82:	1b5e      	subs	r6, r3, r5
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	f1c6 0804 	rsb	r8, r6, #4
 800bc8c:	4433      	add	r3, r6
 800bc8e:	6123      	str	r3, [r4, #16]
 800bc90:	4641      	mov	r1, r8
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 f912 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d04c      	beq.n	800bd36 <ucdr_serialize_int32_t+0xe2>
 800bc9c:	7d23      	ldrb	r3, [r4, #20]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d063      	beq.n	800bd6a <ucdr_serialize_int32_t+0x116>
 800bca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bca6:	702b      	strb	r3, [r5, #0]
 800bca8:	2e00      	cmp	r6, #0
 800bcaa:	d051      	beq.n	800bd50 <ucdr_serialize_int32_t+0xfc>
 800bcac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcb0:	706b      	strb	r3, [r5, #1]
 800bcb2:	2e01      	cmp	r6, #1
 800bcb4:	d050      	beq.n	800bd58 <ucdr_serialize_int32_t+0x104>
 800bcb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bcba:	70ab      	strb	r3, [r5, #2]
 800bcbc:	2e02      	cmp	r6, #2
 800bcbe:	d04f      	beq.n	800bd60 <ucdr_serialize_int32_t+0x10c>
 800bcc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bcc4:	70eb      	strb	r3, [r5, #3]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	68a2      	ldr	r2, [r4, #8]
 800bcca:	7da0      	ldrb	r0, [r4, #22]
 800bccc:	3304      	adds	r3, #4
 800bcce:	1b9e      	subs	r6, r3, r6
 800bcd0:	4442      	add	r2, r8
 800bcd2:	2304      	movs	r3, #4
 800bcd4:	f080 0001 	eor.w	r0, r0, #1
 800bcd8:	60a2      	str	r2, [r4, #8]
 800bcda:	6126      	str	r6, [r4, #16]
 800bcdc:	7563      	strb	r3, [r4, #21]
 800bcde:	b002      	add	sp, #8
 800bce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce4:	2104      	movs	r1, #4
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 f8e8 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800bcec:	b1d0      	cbz	r0, 800bd24 <ucdr_serialize_int32_t+0xd0>
 800bcee:	7d23      	ldrb	r3, [r4, #20]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	d01c      	beq.n	800bd30 <ucdr_serialize_int32_t+0xdc>
 800bcf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	68a3      	ldr	r3, [r4, #8]
 800bcfe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd02:	705a      	strb	r2, [r3, #1]
 800bd04:	68a3      	ldr	r3, [r4, #8]
 800bd06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd0a:	709a      	strb	r2, [r3, #2]
 800bd0c:	68a3      	ldr	r3, [r4, #8]
 800bd0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd12:	70da      	strb	r2, [r3, #3]
 800bd14:	68a2      	ldr	r2, [r4, #8]
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	3204      	adds	r2, #4
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	2104      	movs	r1, #4
 800bd1e:	60a2      	str	r2, [r4, #8]
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	7561      	strb	r1, [r4, #21]
 800bd24:	7da0      	ldrb	r0, [r4, #22]
 800bd26:	f080 0001 	eor.w	r0, r0, #1
 800bd2a:	b002      	add	sp, #8
 800bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd30:	9a01      	ldr	r2, [sp, #4]
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	e7ee      	b.n	800bd14 <ucdr_serialize_int32_t+0xc0>
 800bd36:	68a2      	ldr	r2, [r4, #8]
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	7da0      	ldrb	r0, [r4, #22]
 800bd3c:	7567      	strb	r7, [r4, #21]
 800bd3e:	1b92      	subs	r2, r2, r6
 800bd40:	1b9b      	subs	r3, r3, r6
 800bd42:	f080 0001 	eor.w	r0, r0, #1
 800bd46:	60a2      	str	r2, [r4, #8]
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	b002      	add	sp, #8
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd5e:	701a      	strb	r2, [r3, #0]
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	e7ad      	b.n	800bcc6 <ucdr_serialize_int32_t+0x72>
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	ad01      	add	r5, sp, #4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4632      	mov	r2, r6
 800bd72:	f009 fd98 	bl	80158a6 <memcpy>
 800bd76:	68a0      	ldr	r0, [r4, #8]
 800bd78:	4642      	mov	r2, r8
 800bd7a:	19a9      	adds	r1, r5, r6
 800bd7c:	f009 fd93 	bl	80158a6 <memcpy>
 800bd80:	e7a1      	b.n	800bcc6 <ucdr_serialize_int32_t+0x72>
 800bd82:	bf00      	nop

0800bd84 <ucdr_deserialize_int32_t>:
 800bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd88:	460d      	mov	r5, r1
 800bd8a:	2104      	movs	r1, #4
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	f000 f8e9 	bl	800bf64 <ucdr_buffer_alignment>
 800bd92:	4601      	mov	r1, r0
 800bd94:	4620      	mov	r0, r4
 800bd96:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd9a:	f000 f927 	bl	800bfec <ucdr_advance_buffer>
 800bd9e:	2104      	movs	r1, #4
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 f87f 	bl	800bea4 <ucdr_check_buffer_available_for>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d138      	bne.n	800be1c <ucdr_deserialize_int32_t+0x98>
 800bdaa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bdae:	42b7      	cmp	r7, r6
 800bdb0:	d92f      	bls.n	800be12 <ucdr_deserialize_int32_t+0x8e>
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	60a7      	str	r7, [r4, #8]
 800bdb6:	1bbf      	subs	r7, r7, r6
 800bdb8:	443b      	add	r3, r7
 800bdba:	f1c7 0904 	rsb	r9, r7, #4
 800bdbe:	6123      	str	r3, [r4, #16]
 800bdc0:	4649      	mov	r1, r9
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 f87a 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d046      	beq.n	800be5a <ucdr_deserialize_int32_t+0xd6>
 800bdcc:	7d23      	ldrb	r3, [r4, #20]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d05c      	beq.n	800be8c <ucdr_deserialize_int32_t+0x108>
 800bdd2:	78f3      	ldrb	r3, [r6, #3]
 800bdd4:	702b      	strb	r3, [r5, #0]
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	d04c      	beq.n	800be74 <ucdr_deserialize_int32_t+0xf0>
 800bdda:	78b3      	ldrb	r3, [r6, #2]
 800bddc:	706b      	strb	r3, [r5, #1]
 800bdde:	2f01      	cmp	r7, #1
 800bde0:	f105 0302 	add.w	r3, r5, #2
 800bde4:	d04a      	beq.n	800be7c <ucdr_deserialize_int32_t+0xf8>
 800bde6:	7873      	ldrb	r3, [r6, #1]
 800bde8:	70ab      	strb	r3, [r5, #2]
 800bdea:	2f02      	cmp	r7, #2
 800bdec:	f105 0303 	add.w	r3, r5, #3
 800bdf0:	d048      	beq.n	800be84 <ucdr_deserialize_int32_t+0x100>
 800bdf2:	7833      	ldrb	r3, [r6, #0]
 800bdf4:	70eb      	strb	r3, [r5, #3]
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	68a2      	ldr	r2, [r4, #8]
 800bdfa:	7da0      	ldrb	r0, [r4, #22]
 800bdfc:	2104      	movs	r1, #4
 800bdfe:	3304      	adds	r3, #4
 800be00:	444a      	add	r2, r9
 800be02:	1bdb      	subs	r3, r3, r7
 800be04:	7561      	strb	r1, [r4, #21]
 800be06:	60a2      	str	r2, [r4, #8]
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	f080 0001 	eor.w	r0, r0, #1
 800be0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be12:	2104      	movs	r1, #4
 800be14:	4620      	mov	r0, r4
 800be16:	f000 f851 	bl	800bebc <ucdr_check_final_buffer_behavior>
 800be1a:	b1b0      	cbz	r0, 800be4a <ucdr_deserialize_int32_t+0xc6>
 800be1c:	7d23      	ldrb	r3, [r4, #20]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	d017      	beq.n	800be54 <ucdr_deserialize_int32_t+0xd0>
 800be24:	78db      	ldrb	r3, [r3, #3]
 800be26:	702b      	strb	r3, [r5, #0]
 800be28:	68a3      	ldr	r3, [r4, #8]
 800be2a:	789b      	ldrb	r3, [r3, #2]
 800be2c:	706b      	strb	r3, [r5, #1]
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	785b      	ldrb	r3, [r3, #1]
 800be32:	70ab      	strb	r3, [r5, #2]
 800be34:	68a3      	ldr	r3, [r4, #8]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	70eb      	strb	r3, [r5, #3]
 800be3a:	68a2      	ldr	r2, [r4, #8]
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	3204      	adds	r2, #4
 800be40:	3304      	adds	r3, #4
 800be42:	2104      	movs	r1, #4
 800be44:	60a2      	str	r2, [r4, #8]
 800be46:	6123      	str	r3, [r4, #16]
 800be48:	7561      	strb	r1, [r4, #21]
 800be4a:	7da0      	ldrb	r0, [r4, #22]
 800be4c:	f080 0001 	eor.w	r0, r0, #1
 800be50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	e7ef      	b.n	800be3a <ucdr_deserialize_int32_t+0xb6>
 800be5a:	68a2      	ldr	r2, [r4, #8]
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	7da0      	ldrb	r0, [r4, #22]
 800be60:	f884 8015 	strb.w	r8, [r4, #21]
 800be64:	1bd2      	subs	r2, r2, r7
 800be66:	1bdb      	subs	r3, r3, r7
 800be68:	60a2      	str	r2, [r4, #8]
 800be6a:	6123      	str	r3, [r4, #16]
 800be6c:	f080 0001 	eor.w	r0, r0, #1
 800be70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	789b      	ldrb	r3, [r3, #2]
 800be78:	706b      	strb	r3, [r5, #1]
 800be7a:	1cab      	adds	r3, r5, #2
 800be7c:	68a2      	ldr	r2, [r4, #8]
 800be7e:	7852      	ldrb	r2, [r2, #1]
 800be80:	f803 2b01 	strb.w	r2, [r3], #1
 800be84:	68a2      	ldr	r2, [r4, #8]
 800be86:	7812      	ldrb	r2, [r2, #0]
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	e7b4      	b.n	800bdf6 <ucdr_deserialize_int32_t+0x72>
 800be8c:	4631      	mov	r1, r6
 800be8e:	463a      	mov	r2, r7
 800be90:	4628      	mov	r0, r5
 800be92:	f009 fd08 	bl	80158a6 <memcpy>
 800be96:	68a1      	ldr	r1, [r4, #8]
 800be98:	464a      	mov	r2, r9
 800be9a:	19e8      	adds	r0, r5, r7
 800be9c:	f009 fd03 	bl	80158a6 <memcpy>
 800bea0:	e7a9      	b.n	800bdf6 <ucdr_deserialize_int32_t+0x72>
 800bea2:	bf00      	nop

0800bea4 <ucdr_check_buffer_available_for>:
 800bea4:	7d83      	ldrb	r3, [r0, #22]
 800bea6:	b93b      	cbnz	r3, 800beb8 <ucdr_check_buffer_available_for+0x14>
 800bea8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800beac:	4419      	add	r1, r3
 800beae:	4288      	cmp	r0, r1
 800beb0:	bf34      	ite	cc
 800beb2:	2000      	movcc	r0, #0
 800beb4:	2001      	movcs	r0, #1
 800beb6:	4770      	bx	lr
 800beb8:	2000      	movs	r0, #0
 800beba:	4770      	bx	lr

0800bebc <ucdr_check_final_buffer_behavior>:
 800bebc:	7d83      	ldrb	r3, [r0, #22]
 800bebe:	b943      	cbnz	r3, 800bed2 <ucdr_check_final_buffer_behavior+0x16>
 800bec0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bec4:	4291      	cmp	r1, r2
 800bec6:	b510      	push	{r4, lr}
 800bec8:	4604      	mov	r4, r0
 800beca:	d205      	bcs.n	800bed8 <ucdr_check_final_buffer_behavior+0x1c>
 800becc:	2301      	movs	r3, #1
 800bece:	4618      	mov	r0, r3
 800bed0:	bd10      	pop	{r4, pc}
 800bed2:	2300      	movs	r3, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	4770      	bx	lr
 800bed8:	6982      	ldr	r2, [r0, #24]
 800beda:	b13a      	cbz	r2, 800beec <ucdr_check_final_buffer_behavior+0x30>
 800bedc:	69c1      	ldr	r1, [r0, #28]
 800bede:	4790      	blx	r2
 800bee0:	f080 0301 	eor.w	r3, r0, #1
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	75a0      	strb	r0, [r4, #22]
 800bee8:	4618      	mov	r0, r3
 800beea:	bd10      	pop	{r4, pc}
 800beec:	2001      	movs	r0, #1
 800beee:	75a0      	strb	r0, [r4, #22]
 800bef0:	e7fa      	b.n	800bee8 <ucdr_check_final_buffer_behavior+0x2c>
 800bef2:	bf00      	nop

0800bef4 <ucdr_set_on_full_buffer_callback>:
 800bef4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop

0800befc <ucdr_init_buffer_origin_offset_endian>:
 800befc:	b410      	push	{r4}
 800befe:	9c01      	ldr	r4, [sp, #4]
 800bf00:	6001      	str	r1, [r0, #0]
 800bf02:	440a      	add	r2, r1
 800bf04:	6042      	str	r2, [r0, #4]
 800bf06:	190a      	adds	r2, r1, r4
 800bf08:	441c      	add	r4, r3
 800bf0a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bf0e:	6082      	str	r2, [r0, #8]
 800bf10:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bf14:	7503      	strb	r3, [r0, #20]
 800bf16:	2200      	movs	r2, #0
 800bf18:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bf1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf20:	7542      	strb	r2, [r0, #21]
 800bf22:	7582      	strb	r2, [r0, #22]
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop

0800bf28 <ucdr_init_buffer_origin_offset>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	9c04      	ldr	r4, [sp, #16]
 800bf2e:	9400      	str	r4, [sp, #0]
 800bf30:	2401      	movs	r4, #1
 800bf32:	9401      	str	r4, [sp, #4]
 800bf34:	f7ff ffe2 	bl	800befc <ucdr_init_buffer_origin_offset_endian>
 800bf38:	b002      	add	sp, #8
 800bf3a:	bd10      	pop	{r4, pc}

0800bf3c <ucdr_init_buffer_origin>:
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	2400      	movs	r4, #0
 800bf42:	9400      	str	r4, [sp, #0]
 800bf44:	f7ff fff0 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800bf48:	b002      	add	sp, #8
 800bf4a:	bd10      	pop	{r4, pc}

0800bf4c <ucdr_init_buffer>:
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f7ff bff5 	b.w	800bf3c <ucdr_init_buffer_origin>
 800bf52:	bf00      	nop

0800bf54 <ucdr_alignment>:
 800bf54:	fbb0 f3f1 	udiv	r3, r0, r1
 800bf58:	fb03 0011 	mls	r0, r3, r1, r0
 800bf5c:	1a08      	subs	r0, r1, r0
 800bf5e:	3901      	subs	r1, #1
 800bf60:	4008      	ands	r0, r1
 800bf62:	4770      	bx	lr

0800bf64 <ucdr_buffer_alignment>:
 800bf64:	7d43      	ldrb	r3, [r0, #21]
 800bf66:	428b      	cmp	r3, r1
 800bf68:	d208      	bcs.n	800bf7c <ucdr_buffer_alignment+0x18>
 800bf6a:	6900      	ldr	r0, [r0, #16]
 800bf6c:	fbb0 f3f1 	udiv	r3, r0, r1
 800bf70:	fb01 0013 	mls	r0, r1, r3, r0
 800bf74:	1a08      	subs	r0, r1, r0
 800bf76:	3901      	subs	r1, #1
 800bf78:	4008      	ands	r0, r1
 800bf7a:	4770      	bx	lr
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	4770      	bx	lr

0800bf80 <ucdr_align_to>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	460d      	mov	r5, r1
 800bf86:	f7ff ffed 	bl	800bf64 <ucdr_buffer_alignment>
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	6921      	ldr	r1, [r4, #16]
 800bf8e:	7565      	strb	r5, [r4, #21]
 800bf90:	181a      	adds	r2, r3, r0
 800bf92:	6863      	ldr	r3, [r4, #4]
 800bf94:	4293      	cmp	r3, r2
 800bf96:	4408      	add	r0, r1
 800bf98:	bf28      	it	cs
 800bf9a:	4613      	movcs	r3, r2
 800bf9c:	6120      	str	r0, [r4, #16]
 800bf9e:	60a3      	str	r3, [r4, #8]
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop

0800bfa4 <ucdr_buffer_length>:
 800bfa4:	6882      	ldr	r2, [r0, #8]
 800bfa6:	6800      	ldr	r0, [r0, #0]
 800bfa8:	1a10      	subs	r0, r2, r0
 800bfaa:	4770      	bx	lr

0800bfac <ucdr_buffer_remaining>:
 800bfac:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bfb0:	1a10      	subs	r0, r2, r0
 800bfb2:	4770      	bx	lr

0800bfb4 <ucdr_check_final_buffer_behavior_array>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	7d83      	ldrb	r3, [r0, #22]
 800bfb8:	b963      	cbnz	r3, 800bfd4 <ucdr_check_final_buffer_behavior_array+0x20>
 800bfba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	d308      	bcc.n	800bfd8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bfc6:	b139      	cbz	r1, 800bfd8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bfc8:	6983      	ldr	r3, [r0, #24]
 800bfca:	b163      	cbz	r3, 800bfe6 <ucdr_check_final_buffer_behavior_array+0x32>
 800bfcc:	69c1      	ldr	r1, [r0, #28]
 800bfce:	4798      	blx	r3
 800bfd0:	75a0      	strb	r0, [r4, #22]
 800bfd2:	b108      	cbz	r0, 800bfd8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff ffe7 	bl	800bfac <ucdr_buffer_remaining>
 800bfde:	42a8      	cmp	r0, r5
 800bfe0:	bf28      	it	cs
 800bfe2:	4628      	movcs	r0, r5
 800bfe4:	bd38      	pop	{r3, r4, r5, pc}
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	7583      	strb	r3, [r0, #22]
 800bfea:	e7f3      	b.n	800bfd4 <ucdr_check_final_buffer_behavior_array+0x20>

0800bfec <ucdr_advance_buffer>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
 800bff2:	f7ff ff57 	bl	800bea4 <ucdr_check_buffer_available_for>
 800bff6:	b178      	cbz	r0, 800c018 <ucdr_advance_buffer+0x2c>
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	68a2      	ldr	r2, [r4, #8]
 800bffc:	442b      	add	r3, r5
 800bffe:	6123      	str	r3, [r4, #16]
 800c000:	2301      	movs	r3, #1
 800c002:	442a      	add	r2, r5
 800c004:	7563      	strb	r3, [r4, #21]
 800c006:	60a2      	str	r2, [r4, #8]
 800c008:	bd38      	pop	{r3, r4, r5, pc}
 800c00a:	68a2      	ldr	r2, [r4, #8]
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	4402      	add	r2, r0
 800c010:	4403      	add	r3, r0
 800c012:	1a2d      	subs	r5, r5, r0
 800c014:	60a2      	str	r2, [r4, #8]
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	4629      	mov	r1, r5
 800c01a:	2201      	movs	r2, #1
 800c01c:	4620      	mov	r0, r4
 800c01e:	f7ff ffc9 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 800c022:	2800      	cmp	r0, #0
 800c024:	d1f1      	bne.n	800c00a <ucdr_advance_buffer+0x1e>
 800c026:	2301      	movs	r3, #1
 800c028:	7563      	strb	r3, [r4, #21]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}

0800c02c <uxr_buffer_delete_entity>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	2300      	movs	r3, #0
 800c030:	b08e      	sub	sp, #56	@ 0x38
 800c032:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c036:	2303      	movs	r3, #3
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	2204      	movs	r2, #4
 800c03c:	ab06      	add	r3, sp, #24
 800c03e:	4604      	mov	r4, r0
 800c040:	9103      	str	r1, [sp, #12]
 800c042:	f001 fb43 	bl	800d6cc <uxr_prepare_stream_to_write_submessage>
 800c046:	b918      	cbnz	r0, 800c050 <uxr_buffer_delete_entity+0x24>
 800c048:	4604      	mov	r4, r0
 800c04a:	4620      	mov	r0, r4
 800c04c:	b00e      	add	sp, #56	@ 0x38
 800c04e:	bd10      	pop	{r4, pc}
 800c050:	9902      	ldr	r1, [sp, #8]
 800c052:	aa05      	add	r2, sp, #20
 800c054:	4620      	mov	r0, r4
 800c056:	f001 fc6f 	bl	800d938 <uxr_init_base_object_request>
 800c05a:	a905      	add	r1, sp, #20
 800c05c:	4604      	mov	r4, r0
 800c05e:	a806      	add	r0, sp, #24
 800c060:	f003 fb52 	bl	800f708 <uxr_serialize_DELETE_Payload>
 800c064:	4620      	mov	r0, r4
 800c066:	b00e      	add	sp, #56	@ 0x38
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	bf00      	nop

0800c06c <uxr_common_create_entity>:
 800c06c:	b510      	push	{r4, lr}
 800c06e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c072:	b08c      	sub	sp, #48	@ 0x30
 800c074:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c078:	f1bc 0f01 	cmp.w	ip, #1
 800c07c:	bf0c      	ite	eq
 800c07e:	f003 0201 	andeq.w	r2, r3, #1
 800c082:	2200      	movne	r2, #0
 800c084:	330e      	adds	r3, #14
 800c086:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c08a:	9101      	str	r1, [sp, #4]
 800c08c:	441a      	add	r2, r3
 800c08e:	2301      	movs	r3, #1
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	9903      	ldr	r1, [sp, #12]
 800c094:	ab04      	add	r3, sp, #16
 800c096:	b292      	uxth	r2, r2
 800c098:	4604      	mov	r4, r0
 800c09a:	f001 fb17 	bl	800d6cc <uxr_prepare_stream_to_write_submessage>
 800c09e:	b918      	cbnz	r0, 800c0a8 <uxr_common_create_entity+0x3c>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	b00c      	add	sp, #48	@ 0x30
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	9902      	ldr	r1, [sp, #8]
 800c0aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f001 fc43 	bl	800d938 <uxr_init_base_object_request>
 800c0b2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	a804      	add	r0, sp, #16
 800c0b8:	f003 fa82 	bl	800f5c0 <uxr_serialize_CREATE_Payload>
 800c0bc:	4620      	mov	r0, r4
 800c0be:	b00c      	add	sp, #48	@ 0x30
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	bf00      	nop

0800c0c4 <uxr_buffer_create_participant_bin>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c0ca:	ac11      	add	r4, sp, #68	@ 0x44
 800c0cc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c0d6:	7223      	strb	r3, [r4, #8]
 800c0d8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c0da:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c0de:	2201      	movs	r2, #1
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	7122      	strb	r2, [r4, #4]
 800c0e6:	f88d 1014 	strb.w	r1, [sp, #20]
 800c0ea:	b1cb      	cbz	r3, 800c120 <uxr_buffer_create_participant_bin+0x5c>
 800c0ec:	f88d 201c 	strb.w	r2, [sp, #28]
 800c0f0:	9308      	str	r3, [sp, #32]
 800c0f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0f6:	a915      	add	r1, sp, #84	@ 0x54
 800c0f8:	a809      	add	r0, sp, #36	@ 0x24
 800c0fa:	f7ff ff27 	bl	800bf4c <ucdr_init_buffer>
 800c0fe:	a905      	add	r1, sp, #20
 800c100:	a809      	add	r0, sp, #36	@ 0x24
 800c102:	f002 fe3f 	bl	800ed84 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c108:	9600      	str	r6, [sp, #0]
 800c10a:	9401      	str	r4, [sp, #4]
 800c10c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c110:	60e3      	str	r3, [r4, #12]
 800c112:	4628      	mov	r0, r5
 800c114:	b29b      	uxth	r3, r3
 800c116:	f7ff ffa9 	bl	800c06c <uxr_common_create_entity>
 800c11a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	f88d 301c 	strb.w	r3, [sp, #28]
 800c124:	e7e5      	b.n	800c0f2 <uxr_buffer_create_participant_bin+0x2e>
 800c126:	bf00      	nop

0800c128 <uxr_buffer_create_topic_bin>:
 800c128:	b570      	push	{r4, r5, r6, lr}
 800c12a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c12e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c132:	9105      	str	r1, [sp, #20]
 800c134:	4605      	mov	r5, r0
 800c136:	a997      	add	r1, sp, #604	@ 0x25c
 800c138:	4618      	mov	r0, r3
 800c13a:	2302      	movs	r3, #2
 800c13c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c140:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c144:	f000 fa58 	bl	800c5f8 <uxr_object_id_to_raw>
 800c148:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c14a:	9306      	str	r3, [sp, #24]
 800c14c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c14e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c150:	2303      	movs	r3, #3
 800c152:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c156:	2301      	movs	r3, #1
 800c158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c15c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c160:	a917      	add	r1, sp, #92	@ 0x5c
 800c162:	2300      	movs	r3, #0
 800c164:	a80b      	add	r0, sp, #44	@ 0x2c
 800c166:	f88d 301c 	strb.w	r3, [sp, #28]
 800c16a:	f7ff feef 	bl	800bf4c <ucdr_init_buffer>
 800c16e:	a906      	add	r1, sp, #24
 800c170:	a80b      	add	r0, sp, #44	@ 0x2c
 800c172:	f002 fe29 	bl	800edc8 <uxr_serialize_OBJK_Topic_Binary>
 800c176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c178:	9316      	str	r3, [sp, #88]	@ 0x58
 800c17a:	ac13      	add	r4, sp, #76	@ 0x4c
 800c17c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c180:	9600      	str	r6, [sp, #0]
 800c182:	9401      	str	r4, [sp, #4]
 800c184:	b29b      	uxth	r3, r3
 800c186:	4628      	mov	r0, r5
 800c188:	f7ff ff70 	bl	800c06c <uxr_common_create_entity>
 800c18c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c190:	bd70      	pop	{r4, r5, r6, pc}
 800c192:	bf00      	nop

0800c194 <uxr_buffer_create_publisher_bin>:
 800c194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c196:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c19a:	4605      	mov	r5, r0
 800c19c:	9105      	str	r1, [sp, #20]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	2603      	movs	r6, #3
 800c1a2:	a992      	add	r1, sp, #584	@ 0x248
 800c1a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c1a8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c1ac:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c1b0:	f000 fa22 	bl	800c5f8 <uxr_object_id_to_raw>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1ba:	a912      	add	r1, sp, #72	@ 0x48
 800c1bc:	a806      	add	r0, sp, #24
 800c1be:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c1c2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c1c6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c1ca:	f7ff febf 	bl	800bf4c <ucdr_init_buffer>
 800c1ce:	a993      	add	r1, sp, #588	@ 0x24c
 800c1d0:	a806      	add	r0, sp, #24
 800c1d2:	f002 fead 	bl	800ef30 <uxr_serialize_OBJK_Publisher_Binary>
 800c1d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1da:	ac0e      	add	r4, sp, #56	@ 0x38
 800c1dc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c1e0:	9700      	str	r7, [sp, #0]
 800c1e2:	9401      	str	r4, [sp, #4]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f7ff ff40 	bl	800c06c <uxr_common_create_entity>
 800c1ec:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f2:	bf00      	nop

0800c1f4 <uxr_buffer_create_subscriber_bin>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c1fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c1fe:	9105      	str	r1, [sp, #20]
 800c200:	4605      	mov	r5, r0
 800c202:	a992      	add	r1, sp, #584	@ 0x248
 800c204:	4618      	mov	r0, r3
 800c206:	2304      	movs	r3, #4
 800c208:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c20c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c210:	f000 f9f2 	bl	800c5f8 <uxr_object_id_to_raw>
 800c214:	2300      	movs	r3, #0
 800c216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c21a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c21e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c222:	a912      	add	r1, sp, #72	@ 0x48
 800c224:	2303      	movs	r3, #3
 800c226:	a806      	add	r0, sp, #24
 800c228:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c22c:	f7ff fe8e 	bl	800bf4c <ucdr_init_buffer>
 800c230:	a993      	add	r1, sp, #588	@ 0x24c
 800c232:	a806      	add	r0, sp, #24
 800c234:	f002 ff2c 	bl	800f090 <uxr_serialize_OBJK_Subscriber_Binary>
 800c238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c23a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c23c:	ac0e      	add	r4, sp, #56	@ 0x38
 800c23e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c242:	9600      	str	r6, [sp, #0]
 800c244:	9401      	str	r4, [sp, #4]
 800c246:	b29b      	uxth	r3, r3
 800c248:	4628      	mov	r0, r5
 800c24a:	f7ff ff0f 	bl	800c06c <uxr_common_create_entity>
 800c24e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c252:	bd70      	pop	{r4, r5, r6, pc}

0800c254 <uxr_buffer_create_datawriter_bin>:
 800c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c25c:	ac1d      	add	r4, sp, #116	@ 0x74
 800c25e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c262:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800c266:	9105      	str	r1, [sp, #20]
 800c268:	4606      	mov	r6, r0
 800c26a:	a9a1      	add	r1, sp, #644	@ 0x284
 800c26c:	4618      	mov	r0, r3
 800c26e:	2305      	movs	r3, #5
 800c270:	7123      	strb	r3, [r4, #4]
 800c272:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800c276:	2703      	movs	r7, #3
 800c278:	f000 f9be 	bl	800c5f8 <uxr_object_id_to_raw>
 800c27c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c27e:	7227      	strb	r7, [r4, #8]
 800c280:	a90e      	add	r1, sp, #56	@ 0x38
 800c282:	f000 f9b9 	bl	800c5f8 <uxr_object_id_to_raw>
 800c286:	2300      	movs	r3, #0
 800c288:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c28c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800c290:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c294:	3d00      	subs	r5, #0
 800c296:	bf18      	it	ne
 800c298:	2501      	movne	r5, #1
 800c29a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c29e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c2a2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c2a6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c2b0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c2b4:	bb8a      	cbnz	r2, 800c31a <uxr_buffer_create_datawriter_bin+0xc6>
 800c2b6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c2ba:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c2be:	f04f 0c13 	mov.w	ip, #19
 800c2c2:	250b      	movs	r5, #11
 800c2c4:	2221      	movs	r2, #33	@ 0x21
 800c2c6:	2111      	movs	r1, #17
 800c2c8:	2009      	movs	r0, #9
 800c2ca:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800c2ce:	b923      	cbnz	r3, 800c2da <uxr_buffer_create_datawriter_bin+0x86>
 800c2d0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c2d4:	4672      	mov	r2, lr
 800c2d6:	4661      	mov	r1, ip
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d025      	beq.n	800c32e <uxr_buffer_create_datawriter_bin+0xda>
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d029      	beq.n	800c33a <uxr_buffer_create_datawriter_bin+0xe6>
 800c2e6:	b32b      	cbz	r3, 800c334 <uxr_buffer_create_datawriter_bin+0xe0>
 800c2e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2ec:	a921      	add	r1, sp, #132	@ 0x84
 800c2ee:	a806      	add	r0, sp, #24
 800c2f0:	f7ff fe2c 	bl	800bf4c <ucdr_init_buffer>
 800c2f4:	a90e      	add	r1, sp, #56	@ 0x38
 800c2f6:	a806      	add	r0, sp, #24
 800c2f8:	f002 ff7c 	bl	800f1f4 <uxr_serialize_OBJK_DataWriter_Binary>
 800c2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fe:	f8cd 8000 	str.w	r8, [sp]
 800c302:	9401      	str	r4, [sp, #4]
 800c304:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c308:	60e3      	str	r3, [r4, #12]
 800c30a:	4630      	mov	r0, r6
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	f7ff fead 	bl	800c06c <uxr_common_create_entity>
 800c312:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c31a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c31e:	f04f 0c12 	mov.w	ip, #18
 800c322:	250a      	movs	r5, #10
 800c324:	2220      	movs	r2, #32
 800c326:	2110      	movs	r1, #16
 800c328:	2008      	movs	r0, #8
 800c32a:	2702      	movs	r7, #2
 800c32c:	e7cd      	b.n	800c2ca <uxr_buffer_create_datawriter_bin+0x76>
 800c32e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c332:	e7d9      	b.n	800c2e8 <uxr_buffer_create_datawriter_bin+0x94>
 800c334:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c338:	e7d6      	b.n	800c2e8 <uxr_buffer_create_datawriter_bin+0x94>
 800c33a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c33e:	e7d3      	b.n	800c2e8 <uxr_buffer_create_datawriter_bin+0x94>

0800c340 <uxr_buffer_create_datareader_bin>:
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c348:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c34a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c34e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800c352:	9105      	str	r1, [sp, #20]
 800c354:	4606      	mov	r6, r0
 800c356:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c358:	4618      	mov	r0, r3
 800c35a:	2306      	movs	r3, #6
 800c35c:	7123      	strb	r3, [r4, #4]
 800c35e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800c362:	2703      	movs	r7, #3
 800c364:	f000 f948 	bl	800c5f8 <uxr_object_id_to_raw>
 800c368:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c36a:	7227      	strb	r7, [r4, #8]
 800c36c:	a90e      	add	r1, sp, #56	@ 0x38
 800c36e:	f000 f943 	bl	800c5f8 <uxr_object_id_to_raw>
 800c372:	2300      	movs	r3, #0
 800c374:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c378:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800c37c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800c380:	3d00      	subs	r5, #0
 800c382:	bf18      	it	ne
 800c384:	2501      	movne	r5, #1
 800c386:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c38a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c38e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c392:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c396:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c39a:	2301      	movs	r3, #1
 800c39c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c3a0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c3a4:	bb8a      	cbnz	r2, 800c40a <uxr_buffer_create_datareader_bin+0xca>
 800c3a6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c3aa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c3ae:	f04f 0c13 	mov.w	ip, #19
 800c3b2:	250b      	movs	r5, #11
 800c3b4:	2221      	movs	r2, #33	@ 0x21
 800c3b6:	2111      	movs	r1, #17
 800c3b8:	2009      	movs	r0, #9
 800c3ba:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800c3be:	b923      	cbnz	r3, 800c3ca <uxr_buffer_create_datareader_bin+0x8a>
 800c3c0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c3c4:	4672      	mov	r2, lr
 800c3c6:	4661      	mov	r1, ip
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d025      	beq.n	800c41e <uxr_buffer_create_datareader_bin+0xde>
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d029      	beq.n	800c42a <uxr_buffer_create_datareader_bin+0xea>
 800c3d6:	b32b      	cbz	r3, 800c424 <uxr_buffer_create_datareader_bin+0xe4>
 800c3d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3dc:	a923      	add	r1, sp, #140	@ 0x8c
 800c3de:	a806      	add	r0, sp, #24
 800c3e0:	f7ff fdb4 	bl	800bf4c <ucdr_init_buffer>
 800c3e4:	a90e      	add	r1, sp, #56	@ 0x38
 800c3e6:	a806      	add	r0, sp, #24
 800c3e8:	f002 fec8 	bl	800f17c <uxr_serialize_OBJK_DataReader_Binary>
 800c3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ee:	f8cd 8000 	str.w	r8, [sp]
 800c3f2:	9401      	str	r4, [sp, #4]
 800c3f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c3f8:	60e3      	str	r3, [r4, #12]
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	f7ff fe35 	bl	800c06c <uxr_common_create_entity>
 800c402:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c40e:	f04f 0c12 	mov.w	ip, #18
 800c412:	250a      	movs	r5, #10
 800c414:	2220      	movs	r2, #32
 800c416:	2110      	movs	r1, #16
 800c418:	2008      	movs	r0, #8
 800c41a:	2702      	movs	r7, #2
 800c41c:	e7cd      	b.n	800c3ba <uxr_buffer_create_datareader_bin+0x7a>
 800c41e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c422:	e7d9      	b.n	800c3d8 <uxr_buffer_create_datareader_bin+0x98>
 800c424:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c428:	e7d6      	b.n	800c3d8 <uxr_buffer_create_datareader_bin+0x98>
 800c42a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c42e:	e7d3      	b.n	800c3d8 <uxr_buffer_create_datareader_bin+0x98>

0800c430 <get_custom_error>:
 800c430:	4b01      	ldr	r3, [pc, #4]	@ (800c438 <get_custom_error+0x8>)
 800c432:	7818      	ldrb	r0, [r3, #0]
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	2000aac4 	.word	0x2000aac4

0800c43c <recv_custom_msg>:
 800c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	4693      	mov	fp, r2
 800c442:	b089      	sub	sp, #36	@ 0x24
 800c444:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	468a      	mov	sl, r1
 800c44c:	2100      	movs	r1, #0
 800c44e:	4604      	mov	r4, r0
 800c450:	f88d 101e 	strb.w	r1, [sp, #30]
 800c454:	b322      	cbz	r2, 800c4a0 <recv_custom_msg+0x64>
 800c456:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800c45a:	f10d 081f 	add.w	r8, sp, #31
 800c45e:	af05      	add	r7, sp, #20
 800c460:	f10d 061e 	add.w	r6, sp, #30
 800c464:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800c468:	e002      	b.n	800c470 <recv_custom_msg+0x34>
 800c46a:	9b05      	ldr	r3, [sp, #20]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	dd0f      	ble.n	800c490 <recv_custom_msg+0x54>
 800c470:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800c474:	4623      	mov	r3, r4
 800c476:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c47a:	e9cd 5600 	strd	r5, r6, [sp]
 800c47e:	4622      	mov	r2, r4
 800c480:	4648      	mov	r0, r9
 800c482:	f001 fc87 	bl	800dd94 <uxr_read_framed_msg>
 800c486:	2800      	cmp	r0, #0
 800c488:	d0ef      	beq.n	800c46a <recv_custom_msg+0x2e>
 800c48a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c48e:	b1b3      	cbz	r3, 800c4be <recv_custom_msg+0x82>
 800c490:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d0 <recv_custom_msg+0x94>)
 800c492:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c496:	701a      	strb	r2, [r3, #0]
 800c498:	2000      	movs	r0, #0
 800c49a:	b009      	add	sp, #36	@ 0x24
 800c49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a0:	f10d 021f 	add.w	r2, sp, #31
 800c4a4:	9200      	str	r2, [sp, #0]
 800c4a6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800c4aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	47a8      	blx	r5
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0ec      	beq.n	800c490 <recv_custom_msg+0x54>
 800c4b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1e8      	bne.n	800c490 <recv_custom_msg+0x54>
 800c4be:	f8cb 0000 	str.w	r0, [fp]
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	f8ca 4000 	str.w	r4, [sl]
 800c4c8:	b009      	add	sp, #36	@ 0x24
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	bf00      	nop
 800c4d0:	2000aac4 	.word	0x2000aac4

0800c4d4 <send_custom_msg>:
 800c4d4:	b530      	push	{r4, r5, lr}
 800c4d6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800c4da:	b087      	sub	sp, #28
 800c4dc:	4615      	mov	r5, r2
 800c4de:	b974      	cbnz	r4, 800c4fe <send_custom_msg+0x2a>
 800c4e0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800c4e4:	f10d 0317 	add.w	r3, sp, #23
 800c4e8:	47a0      	blx	r4
 800c4ea:	b108      	cbz	r0, 800c4f0 <send_custom_msg+0x1c>
 800c4ec:	42a8      	cmp	r0, r5
 800c4ee:	d015      	beq.n	800c51c <send_custom_msg+0x48>
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c524 <send_custom_msg+0x50>)
 800c4f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800c4f6:	701a      	strb	r2, [r3, #0]
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	b007      	add	sp, #28
 800c4fc:	bd30      	pop	{r4, r5, pc}
 800c4fe:	460b      	mov	r3, r1
 800c500:	2200      	movs	r2, #0
 800c502:	f10d 0117 	add.w	r1, sp, #23
 800c506:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c50a:	4602      	mov	r2, r0
 800c50c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800c510:	9500      	str	r5, [sp, #0]
 800c512:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800c516:	f001 fa45 	bl	800d9a4 <uxr_write_framed_msg>
 800c51a:	e7e6      	b.n	800c4ea <send_custom_msg+0x16>
 800c51c:	2001      	movs	r0, #1
 800c51e:	b007      	add	sp, #28
 800c520:	bd30      	pop	{r4, r5, pc}
 800c522:	bf00      	nop
 800c524:	2000aac4 	.word	0x2000aac4

0800c528 <uxr_set_custom_transport_callbacks>:
 800c528:	b410      	push	{r4}
 800c52a:	9c01      	ldr	r4, [sp, #4]
 800c52c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800c530:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800c534:	9b02      	ldr	r3, [sp, #8]
 800c536:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800c53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c53e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800c542:	4770      	bx	lr

0800c544 <uxr_init_custom_transport>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800c54a:	b303      	cbz	r3, 800c58e <uxr_init_custom_transport+0x4a>
 800c54c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800c550:	4604      	mov	r4, r0
 800c552:	b1e2      	cbz	r2, 800c58e <uxr_init_custom_transport+0x4a>
 800c554:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800c558:	b1ca      	cbz	r2, 800c58e <uxr_init_custom_transport+0x4a>
 800c55a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800c55e:	b1b2      	cbz	r2, 800c58e <uxr_init_custom_transport+0x4a>
 800c560:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800c564:	4798      	blx	r3
 800c566:	4605      	mov	r5, r0
 800c568:	b188      	cbz	r0, 800c58e <uxr_init_custom_transport+0x4a>
 800c56a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800c56e:	b98b      	cbnz	r3, 800c594 <uxr_init_custom_transport+0x50>
 800c570:	490b      	ldr	r1, [pc, #44]	@ (800c5a0 <uxr_init_custom_transport+0x5c>)
 800c572:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a4 <uxr_init_custom_transport+0x60>)
 800c574:	4a0c      	ldr	r2, [pc, #48]	@ (800c5a8 <uxr_init_custom_transport+0x64>)
 800c576:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800c57a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c57e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800c582:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800c586:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800c58a:	4628      	mov	r0, r5
 800c58c:	bd38      	pop	{r3, r4, r5, pc}
 800c58e:	2500      	movs	r5, #0
 800c590:	4628      	mov	r0, r5
 800c592:	bd38      	pop	{r3, r4, r5, pc}
 800c594:	2100      	movs	r1, #0
 800c596:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800c59a:	f001 f9fd 	bl	800d998 <uxr_init_framing_io>
 800c59e:	e7e7      	b.n	800c570 <uxr_init_custom_transport+0x2c>
 800c5a0:	0800c4d5 	.word	0x0800c4d5
 800c5a4:	0800c43d 	.word	0x0800c43d
 800c5a8:	0800c431 	.word	0x0800c431

0800c5ac <uxr_close_custom_transport>:
 800c5ac:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800c5b0:	4718      	bx	r3
 800c5b2:	bf00      	nop

0800c5b4 <uxr_object_id>:
 800c5b4:	b082      	sub	sp, #8
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f88d 1006 	strb.w	r1, [sp, #6]
 800c5bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c5c0:	f360 030f 	bfi	r3, r0, #0, #16
 800c5c4:	f362 431f 	bfi	r3, r2, #16, #16
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	b002      	add	sp, #8
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop

0800c5d0 <uxr_object_id_from_raw>:
 800c5d0:	7843      	ldrb	r3, [r0, #1]
 800c5d2:	7801      	ldrb	r1, [r0, #0]
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	f003 020f 	and.w	r2, r3, #15
 800c5da:	f88d 2006 	strb.w	r2, [sp, #6]
 800c5de:	091b      	lsrs	r3, r3, #4
 800c5e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c5e4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f363 000f 	bfi	r0, r3, #0, #16
 800c5ee:	f362 401f 	bfi	r0, r2, #16, #16
 800c5f2:	b002      	add	sp, #8
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop

0800c5f8 <uxr_object_id_to_raw>:
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c5fe:	b082      	sub	sp, #8
 800c600:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c604:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c608:	f881 c000 	strb.w	ip, [r1]
 800c60c:	7048      	strb	r0, [r1, #1]
 800c60e:	b002      	add	sp, #8
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop

0800c614 <uxr_buffer_request_data>:
 800c614:	b530      	push	{r4, r5, lr}
 800c616:	b095      	sub	sp, #84	@ 0x54
 800c618:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c61c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800c61e:	9303      	str	r3, [sp, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	2d00      	cmp	r5, #0
 800c624:	bf14      	ite	ne
 800c626:	2101      	movne	r1, #1
 800c628:	4611      	moveq	r1, r2
 800c62a:	4604      	mov	r4, r0
 800c62c:	f88d 301c 	strb.w	r3, [sp, #28]
 800c630:	f88d 201d 	strb.w	r2, [sp, #29]
 800c634:	f88d 201e 	strb.w	r2, [sp, #30]
 800c638:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800c63c:	d021      	beq.n	800c682 <uxr_buffer_request_data+0x6e>
 800c63e:	682a      	ldr	r2, [r5, #0]
 800c640:	686b      	ldr	r3, [r5, #4]
 800c642:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800c646:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800c64a:	2210      	movs	r2, #16
 800c64c:	2308      	movs	r3, #8
 800c64e:	2100      	movs	r1, #0
 800c650:	e9cd 3100 	strd	r3, r1, [sp]
 800c654:	4620      	mov	r0, r4
 800c656:	9905      	ldr	r1, [sp, #20]
 800c658:	ab0c      	add	r3, sp, #48	@ 0x30
 800c65a:	f001 f837 	bl	800d6cc <uxr_prepare_stream_to_write_submessage>
 800c65e:	b918      	cbnz	r0, 800c668 <uxr_buffer_request_data+0x54>
 800c660:	4604      	mov	r4, r0
 800c662:	4620      	mov	r0, r4
 800c664:	b015      	add	sp, #84	@ 0x54
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	9904      	ldr	r1, [sp, #16]
 800c66a:	aa06      	add	r2, sp, #24
 800c66c:	4620      	mov	r0, r4
 800c66e:	f001 f963 	bl	800d938 <uxr_init_base_object_request>
 800c672:	a906      	add	r1, sp, #24
 800c674:	4604      	mov	r4, r0
 800c676:	a80c      	add	r0, sp, #48	@ 0x30
 800c678:	f003 f8f0 	bl	800f85c <uxr_serialize_READ_DATA_Payload>
 800c67c:	4620      	mov	r0, r4
 800c67e:	b015      	add	sp, #84	@ 0x54
 800c680:	bd30      	pop	{r4, r5, pc}
 800c682:	2208      	movs	r2, #8
 800c684:	e7e2      	b.n	800c64c <uxr_buffer_request_data+0x38>
 800c686:	bf00      	nop

0800c688 <uxr_buffer_cancel_data>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	b094      	sub	sp, #80	@ 0x50
 800c68c:	2300      	movs	r3, #0
 800c68e:	9202      	str	r2, [sp, #8]
 800c690:	9205      	str	r2, [sp, #20]
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c69a:	f88d 301e 	strb.w	r3, [sp, #30]
 800c69e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800c6a2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800c6a6:	2308      	movs	r3, #8
 800c6a8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	2210      	movs	r2, #16
 800c6b0:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	9103      	str	r1, [sp, #12]
 800c6b6:	f001 f809 	bl	800d6cc <uxr_prepare_stream_to_write_submessage>
 800c6ba:	b918      	cbnz	r0, 800c6c4 <uxr_buffer_cancel_data+0x3c>
 800c6bc:	4604      	mov	r4, r0
 800c6be:	4620      	mov	r0, r4
 800c6c0:	b014      	add	sp, #80	@ 0x50
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	9905      	ldr	r1, [sp, #20]
 800c6c6:	aa06      	add	r2, sp, #24
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f001 f935 	bl	800d938 <uxr_init_base_object_request>
 800c6ce:	a906      	add	r1, sp, #24
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	a80c      	add	r0, sp, #48	@ 0x30
 800c6d4:	f003 f8c2 	bl	800f85c <uxr_serialize_READ_DATA_Payload>
 800c6d8:	4620      	mov	r0, r4
 800c6da:	b014      	add	sp, #80	@ 0x50
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	bf00      	nop

0800c6e0 <read_submessage_format>:
 800c6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	b095      	sub	sp, #84	@ 0x54
 800c6e6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800c6ea:	b113      	cbz	r3, 800c6f2 <read_submessage_format+0x12>
 800c6ec:	b015      	add	sp, #84	@ 0x54
 800c6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	4615      	mov	r5, r2
 800c6f6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c6fa:	4607      	mov	r7, r0
 800c6fc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800c6fe:	9004      	str	r0, [sp, #16]
 800c700:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800c702:	9005      	str	r0, [sp, #20]
 800c704:	1a52      	subs	r2, r2, r1
 800c706:	a80c      	add	r0, sp, #48	@ 0x30
 800c708:	4699      	mov	r9, r3
 800c70a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800c70e:	f7ff fc1d 	bl	800bf4c <ucdr_init_buffer>
 800c712:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c716:	a80c      	add	r0, sp, #48	@ 0x30
 800c718:	f7ff fbec 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 800c71c:	69e2      	ldr	r2, [r4, #28]
 800c71e:	b19a      	cbz	r2, 800c748 <read_submessage_format+0x68>
 800c720:	f1b8 0f07 	cmp.w	r8, #7
 800c724:	f882 9014 	strb.w	r9, [r2, #20]
 800c728:	d040      	beq.n	800c7ac <read_submessage_format+0xcc>
 800c72a:	f1b8 0f08 	cmp.w	r8, #8
 800c72e:	d02e      	beq.n	800c78e <read_submessage_format+0xae>
 800c730:	f1b8 0f06 	cmp.w	r8, #6
 800c734:	d011      	beq.n	800c75a <read_submessage_format+0x7a>
 800c736:	2301      	movs	r3, #1
 800c738:	7513      	strb	r3, [r2, #20]
 800c73a:	4629      	mov	r1, r5
 800c73c:	4620      	mov	r0, r4
 800c73e:	f7ff fc55 	bl	800bfec <ucdr_advance_buffer>
 800c742:	b015      	add	sp, #84	@ 0x54
 800c744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c748:	f1b8 0f07 	cmp.w	r8, #7
 800c74c:	d02e      	beq.n	800c7ac <read_submessage_format+0xcc>
 800c74e:	f1b8 0f08 	cmp.w	r8, #8
 800c752:	d01c      	beq.n	800c78e <read_submessage_format+0xae>
 800c754:	f1b8 0f06 	cmp.w	r8, #6
 800c758:	d1ef      	bne.n	800c73a <read_submessage_format+0x5a>
 800c75a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800c75e:	f1b8 0f00 	cmp.w	r8, #0
 800c762:	d011      	beq.n	800c788 <read_submessage_format+0xa8>
 800c764:	ab0c      	add	r3, sp, #48	@ 0x30
 800c766:	e9cd 3500 	strd	r3, r5, [sp]
 800c76a:	2306      	movs	r3, #6
 800c76c:	f88d 3016 	strb.w	r3, [sp, #22]
 800c770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c774:	9302      	str	r3, [sp, #8]
 800c776:	4632      	mov	r2, r6
 800c778:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800c77c:	4638      	mov	r0, r7
 800c77e:	47c0      	blx	r8
 800c780:	2301      	movs	r3, #1
 800c782:	69e2      	ldr	r2, [r4, #28]
 800c784:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800c788:	2a00      	cmp	r2, #0
 800c78a:	d1d4      	bne.n	800c736 <read_submessage_format+0x56>
 800c78c:	e7d5      	b.n	800c73a <read_submessage_format+0x5a>
 800c78e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c792:	2b00      	cmp	r3, #0
 800c794:	d0f8      	beq.n	800c788 <read_submessage_format+0xa8>
 800c796:	a906      	add	r1, sp, #24
 800c798:	a80c      	add	r0, sp, #48	@ 0x30
 800c79a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800c79e:	f003 f923 	bl	800f9e8 <uxr_deserialize_SampleIdentity>
 800c7a2:	b9a0      	cbnz	r0, 800c7ce <read_submessage_format+0xee>
 800c7a4:	69e2      	ldr	r2, [r4, #28]
 800c7a6:	2a00      	cmp	r2, #0
 800c7a8:	d1c5      	bne.n	800c736 <read_submessage_format+0x56>
 800c7aa:	e7c6      	b.n	800c73a <read_submessage_format+0x5a>
 800c7ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7b0:	b13b      	cbz	r3, 800c7c2 <read_submessage_format+0xe2>
 800c7b2:	a906      	add	r1, sp, #24
 800c7b4:	a80c      	add	r0, sp, #48	@ 0x30
 800c7b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800c7ba:	f002 fde9 	bl	800f390 <uxr_deserialize_BaseObjectRequest>
 800c7be:	bb60      	cbnz	r0, 800c81a <read_submessage_format+0x13a>
 800c7c0:	69e2      	ldr	r2, [r4, #28]
 800c7c2:	68a3      	ldr	r3, [r4, #8]
 800c7c4:	442b      	add	r3, r5
 800c7c6:	60a3      	str	r3, [r4, #8]
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	d1b4      	bne.n	800c736 <read_submessage_format+0x56>
 800c7cc:	e7b5      	b.n	800c73a <read_submessage_format+0x5a>
 800c7ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800c7d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7d4:	1a52      	subs	r2, r2, r1
 800c7d6:	eba8 0803 	sub.w	r8, r8, r3
 800c7da:	a80c      	add	r0, sp, #48	@ 0x30
 800c7dc:	f7ff fbb6 	bl	800bf4c <ucdr_init_buffer>
 800c7e0:	44a8      	add	r8, r5
 800c7e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c7e6:	a80c      	add	r0, sp, #48	@ 0x30
 800c7e8:	f7ff fb84 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 800c7ec:	fa1f f888 	uxth.w	r8, r8
 800c7f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	f8cd 8004 	str.w	r8, [sp, #4]
 800c7f8:	2108      	movs	r1, #8
 800c7fa:	f88d 1016 	strb.w	r1, [sp, #22]
 800c7fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800c802:	9102      	str	r1, [sp, #8]
 800c804:	ab06      	add	r3, sp, #24
 800c806:	4632      	mov	r2, r6
 800c808:	9905      	ldr	r1, [sp, #20]
 800c80a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800c80e:	4638      	mov	r0, r7
 800c810:	47b0      	blx	r6
 800c812:	2301      	movs	r3, #1
 800c814:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800c818:	e7c4      	b.n	800c7a4 <read_submessage_format+0xc4>
 800c81a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800c81e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c820:	1a52      	subs	r2, r2, r1
 800c822:	a80c      	add	r0, sp, #48	@ 0x30
 800c824:	eba8 0803 	sub.w	r8, r8, r3
 800c828:	f7ff fb90 	bl	800bf4c <ucdr_init_buffer>
 800c82c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c830:	a80c      	add	r0, sp, #48	@ 0x30
 800c832:	f7ff fb5f 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 800c836:	ab0c      	add	r3, sp, #48	@ 0x30
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800c83e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c842:	44a8      	add	r8, r5
 800c844:	fa1f f888 	uxth.w	r8, r8
 800c848:	f8cd 8004 	str.w	r8, [sp, #4]
 800c84c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800c850:	2107      	movs	r1, #7
 800c852:	f88d 1016 	strb.w	r1, [sp, #22]
 800c856:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800c85a:	9102      	str	r1, [sp, #8]
 800c85c:	4632      	mov	r2, r6
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800c864:	9905      	ldr	r1, [sp, #20]
 800c866:	4638      	mov	r0, r7
 800c868:	47b0      	blx	r6
 800c86a:	2301      	movs	r3, #1
 800c86c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800c870:	e7a6      	b.n	800c7c0 <read_submessage_format+0xe0>
 800c872:	bf00      	nop

0800c874 <on_get_fragmentation_info>:
 800c874:	b500      	push	{lr}
 800c876:	b08b      	sub	sp, #44	@ 0x2c
 800c878:	4601      	mov	r1, r0
 800c87a:	2204      	movs	r2, #4
 800c87c:	a802      	add	r0, sp, #8
 800c87e:	f7ff fb65 	bl	800bf4c <ucdr_init_buffer>
 800c882:	f10d 0305 	add.w	r3, sp, #5
 800c886:	f10d 0206 	add.w	r2, sp, #6
 800c88a:	a901      	add	r1, sp, #4
 800c88c:	a802      	add	r0, sp, #8
 800c88e:	f001 fe67 	bl	800e560 <uxr_read_submessage_header>
 800c892:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c896:	2b0d      	cmp	r3, #13
 800c898:	d003      	beq.n	800c8a2 <on_get_fragmentation_info+0x2e>
 800c89a:	2000      	movs	r0, #0
 800c89c:	b00b      	add	sp, #44	@ 0x2c
 800c89e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c8a6:	f013 0f02 	tst.w	r3, #2
 800c8aa:	bf14      	ite	ne
 800c8ac:	2002      	movne	r0, #2
 800c8ae:	2001      	moveq	r0, #1
 800c8b0:	b00b      	add	sp, #44	@ 0x2c
 800c8b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8b6:	bf00      	nop

0800c8b8 <read_submessage_get_info>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	2500      	movs	r5, #0
 800c8bc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800c8c6:	460e      	mov	r6, r1
 800c8c8:	a810      	add	r0, sp, #64	@ 0x40
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c8d0:	f008 ff20 	bl	8015714 <memset>
 800c8d4:	a903      	add	r1, sp, #12
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f002 ff02 	bl	800f6e0 <uxr_deserialize_GET_INFO_Payload>
 800c8dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c8e0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f001 f81f 	bl	800d928 <uxr_session_header_offset>
 800c8ea:	462b      	mov	r3, r5
 800c8ec:	9000      	str	r0, [sp, #0]
 800c8ee:	220c      	movs	r2, #12
 800c8f0:	a905      	add	r1, sp, #20
 800c8f2:	a808      	add	r0, sp, #32
 800c8f4:	f7ff fb18 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800c8f8:	a910      	add	r1, sp, #64	@ 0x40
 800c8fa:	a808      	add	r0, sp, #32
 800c8fc:	f002 ff62 	bl	800f7c4 <uxr_serialize_INFO_Payload>
 800c900:	9b08      	ldr	r3, [sp, #32]
 800c902:	462a      	mov	r2, r5
 800c904:	4629      	mov	r1, r5
 800c906:	4620      	mov	r0, r4
 800c908:	f000 ffb8 	bl	800d87c <uxr_stamp_session_header>
 800c90c:	a808      	add	r0, sp, #32
 800c90e:	f7ff fb49 	bl	800bfa4 <ucdr_buffer_length>
 800c912:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c914:	4602      	mov	r2, r0
 800c916:	a905      	add	r1, sp, #20
 800c918:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c91c:	47a0      	blx	r4
 800c91e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800c922:	bd70      	pop	{r4, r5, r6, pc}

0800c924 <write_submessage_acknack.isra.0>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	b092      	sub	sp, #72	@ 0x48
 800c928:	4605      	mov	r5, r0
 800c92a:	460e      	mov	r6, r1
 800c92c:	4614      	mov	r4, r2
 800c92e:	f000 fffb 	bl	800d928 <uxr_session_header_offset>
 800c932:	a905      	add	r1, sp, #20
 800c934:	9000      	str	r0, [sp, #0]
 800c936:	2300      	movs	r3, #0
 800c938:	a80a      	add	r0, sp, #40	@ 0x28
 800c93a:	2211      	movs	r2, #17
 800c93c:	f7ff faf4 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800c940:	2218      	movs	r2, #24
 800c942:	fb02 5404 	mla	r4, r2, r4, r5
 800c946:	2300      	movs	r3, #0
 800c948:	2205      	movs	r2, #5
 800c94a:	3450      	adds	r4, #80	@ 0x50
 800c94c:	210a      	movs	r1, #10
 800c94e:	a80a      	add	r0, sp, #40	@ 0x28
 800c950:	f001 fdec 	bl	800e52c <uxr_buffer_submessage_header>
 800c954:	a903      	add	r1, sp, #12
 800c956:	4620      	mov	r0, r4
 800c958:	f007 fb4e 	bl	8013ff8 <uxr_compute_acknack>
 800c95c:	ba40      	rev16	r0, r0
 800c95e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800c962:	a903      	add	r1, sp, #12
 800c964:	a80a      	add	r0, sp, #40	@ 0x28
 800c966:	f88d 6010 	strb.w	r6, [sp, #16]
 800c96a:	f002 ff9b 	bl	800f8a4 <uxr_serialize_ACKNACK_Payload>
 800c96e:	2200      	movs	r2, #0
 800c970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c972:	4611      	mov	r1, r2
 800c974:	4628      	mov	r0, r5
 800c976:	f000 ff81 	bl	800d87c <uxr_stamp_session_header>
 800c97a:	a80a      	add	r0, sp, #40	@ 0x28
 800c97c:	f7ff fb12 	bl	800bfa4 <ucdr_buffer_length>
 800c980:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c982:	4602      	mov	r2, r0
 800c984:	a905      	add	r1, sp, #20
 800c986:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c98a:	47a0      	blx	r4
 800c98c:	b012      	add	sp, #72	@ 0x48
 800c98e:	bd70      	pop	{r4, r5, r6, pc}

0800c990 <uxr_init_session>:
 800c990:	b510      	push	{r4, lr}
 800c992:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c9c8 <uxr_init_session+0x38>
 800c996:	2300      	movs	r3, #0
 800c998:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800c99c:	4604      	mov	r4, r0
 800c99e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800c9a2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800c9a6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800c9aa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800c9ae:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800c9b2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800c9b6:	2181      	movs	r1, #129	@ 0x81
 800c9b8:	f000 fecc 	bl	800d754 <uxr_init_session_info>
 800c9bc:	f104 0008 	add.w	r0, r4, #8
 800c9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9c4:	f001 bcce 	b.w	800e364 <uxr_init_stream_storage>
	...

0800c9d0 <uxr_set_status_callback>:
 800c9d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop

0800c9d8 <uxr_set_topic_callback>:
 800c9d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop

0800c9e0 <uxr_set_request_callback>:
 800c9e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop

0800c9e8 <uxr_set_reply_callback>:
 800c9e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop

0800c9f0 <uxr_create_output_best_effort_stream>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	e9cd 2100 	strd	r2, r1, [sp]
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	f000 ff95 	bl	800d928 <uxr_session_header_offset>
 800c9fe:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ca02:	4603      	mov	r3, r0
 800ca04:	f104 0008 	add.w	r0, r4, #8
 800ca08:	b004      	add	sp, #16
 800ca0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca0e:	f001 bcf3 	b.w	800e3f8 <uxr_add_output_best_effort_buffer>
 800ca12:	bf00      	nop

0800ca14 <uxr_create_output_reliable_stream>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	b088      	sub	sp, #32
 800ca18:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	9303      	str	r3, [sp, #12]
 800ca20:	f000 ff82 	bl	800d928 <uxr_session_header_offset>
 800ca24:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ca28:	9000      	str	r0, [sp, #0]
 800ca2a:	9905      	ldr	r1, [sp, #20]
 800ca2c:	f104 0008 	add.w	r0, r4, #8
 800ca30:	f001 fcf6 	bl	800e420 <uxr_add_output_reliable_buffer>
 800ca34:	2200      	movs	r2, #0
 800ca36:	b2c3      	uxtb	r3, r0
 800ca38:	f363 0207 	bfi	r2, r3, #0, #8
 800ca3c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ca40:	f363 220f 	bfi	r2, r3, #8, #8
 800ca44:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ca48:	f363 4217 	bfi	r2, r3, #16, #8
 800ca4c:	0e03      	lsrs	r3, r0, #24
 800ca4e:	f363 621f 	bfi	r2, r3, #24, #8
 800ca52:	4610      	mov	r0, r2
 800ca54:	b008      	add	sp, #32
 800ca56:	bd10      	pop	{r4, pc}

0800ca58 <uxr_create_input_best_effort_stream>:
 800ca58:	b082      	sub	sp, #8
 800ca5a:	3008      	adds	r0, #8
 800ca5c:	b002      	add	sp, #8
 800ca5e:	f001 bcf9 	b.w	800e454 <uxr_add_input_best_effort_buffer>
 800ca62:	bf00      	nop

0800ca64 <uxr_create_input_reliable_stream>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	4c0b      	ldr	r4, [pc, #44]	@ (800ca98 <uxr_create_input_reliable_stream+0x34>)
 800ca6a:	9400      	str	r4, [sp, #0]
 800ca6c:	3008      	adds	r0, #8
 800ca6e:	f001 fd07 	bl	800e480 <uxr_add_input_reliable_buffer>
 800ca72:	2200      	movs	r2, #0
 800ca74:	b2c3      	uxtb	r3, r0
 800ca76:	f363 0207 	bfi	r2, r3, #0, #8
 800ca7a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ca7e:	f363 220f 	bfi	r2, r3, #8, #8
 800ca82:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ca86:	f363 4217 	bfi	r2, r3, #16, #8
 800ca8a:	0e03      	lsrs	r3, r0, #24
 800ca8c:	f363 621f 	bfi	r2, r3, #24, #8
 800ca90:	4610      	mov	r0, r2
 800ca92:	b004      	add	sp, #16
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	bf00      	nop
 800ca98:	0800c875 	.word	0x0800c875

0800ca9c <uxr_epoch_nanos>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4604      	mov	r4, r0
 800caa0:	f001 fda4 	bl	800e5ec <uxr_nanos>
 800caa4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800caa8:	1ac0      	subs	r0, r0, r3
 800caaa:	eb61 0102 	sbc.w	r1, r1, r2
 800caae:	bd10      	pop	{r4, pc}

0800cab0 <uxr_flash_output_streams>:
 800cab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab4:	7e03      	ldrb	r3, [r0, #24]
 800cab6:	b084      	sub	sp, #16
 800cab8:	4604      	mov	r4, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d035      	beq.n	800cb2a <uxr_flash_output_streams+0x7a>
 800cabe:	f04f 0900 	mov.w	r9, #0
 800cac2:	4648      	mov	r0, r9
 800cac4:	f10d 0802 	add.w	r8, sp, #2
 800cac8:	af03      	add	r7, sp, #12
 800caca:	ae02      	add	r6, sp, #8
 800cacc:	e006      	b.n	800cadc <uxr_flash_output_streams+0x2c>
 800cace:	7e23      	ldrb	r3, [r4, #24]
 800cad0:	f109 0901 	add.w	r9, r9, #1
 800cad4:	fa5f f089 	uxtb.w	r0, r9
 800cad8:	4283      	cmp	r3, r0
 800cada:	d926      	bls.n	800cb2a <uxr_flash_output_streams+0x7a>
 800cadc:	2201      	movs	r2, #1
 800cade:	4611      	mov	r1, r2
 800cae0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800cae4:	f001 fbea 	bl	800e2bc <uxr_stream_id>
 800cae8:	3508      	adds	r5, #8
 800caea:	4684      	mov	ip, r0
 800caec:	4643      	mov	r3, r8
 800caee:	463a      	mov	r2, r7
 800caf0:	4631      	mov	r1, r6
 800caf2:	4628      	mov	r0, r5
 800caf4:	f8cd c004 	str.w	ip, [sp, #4]
 800caf8:	f007 fb04 	bl	8014104 <uxr_prepare_best_effort_buffer_to_send>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d0e6      	beq.n	800cace <uxr_flash_output_streams+0x1e>
 800cb00:	9b02      	ldr	r3, [sp, #8]
 800cb02:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cb06:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 feb6 	bl	800d87c <uxr_stamp_session_header>
 800cb10:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cb12:	9a03      	ldr	r2, [sp, #12]
 800cb14:	685d      	ldr	r5, [r3, #4]
 800cb16:	6818      	ldr	r0, [r3, #0]
 800cb18:	9902      	ldr	r1, [sp, #8]
 800cb1a:	47a8      	blx	r5
 800cb1c:	f109 0901 	add.w	r9, r9, #1
 800cb20:	7e23      	ldrb	r3, [r4, #24]
 800cb22:	fa5f f089 	uxtb.w	r0, r9
 800cb26:	4283      	cmp	r3, r0
 800cb28:	d8d8      	bhi.n	800cadc <uxr_flash_output_streams+0x2c>
 800cb2a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cb2e:	b38b      	cbz	r3, 800cb94 <uxr_flash_output_streams+0xe4>
 800cb30:	f04f 0900 	mov.w	r9, #0
 800cb34:	f10d 0802 	add.w	r8, sp, #2
 800cb38:	af03      	add	r7, sp, #12
 800cb3a:	ae02      	add	r6, sp, #8
 800cb3c:	4648      	mov	r0, r9
 800cb3e:	2201      	movs	r2, #1
 800cb40:	2102      	movs	r1, #2
 800cb42:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800cb46:	f001 fbb9 	bl	800e2bc <uxr_stream_id>
 800cb4a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cb4e:	3520      	adds	r5, #32
 800cb50:	9001      	str	r0, [sp, #4]
 800cb52:	e00d      	b.n	800cb70 <uxr_flash_output_streams+0xc0>
 800cb54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cb58:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cb5c:	9b02      	ldr	r3, [sp, #8]
 800cb5e:	f000 fe8d 	bl	800d87c <uxr_stamp_session_header>
 800cb62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cb64:	9a03      	ldr	r2, [sp, #12]
 800cb66:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cb6a:	9902      	ldr	r1, [sp, #8]
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	47d0      	blx	sl
 800cb70:	4643      	mov	r3, r8
 800cb72:	463a      	mov	r2, r7
 800cb74:	4631      	mov	r1, r6
 800cb76:	4628      	mov	r0, r5
 800cb78:	f007 fce2 	bl	8014540 <uxr_prepare_next_reliable_buffer_to_send>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	4620      	mov	r0, r4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1e7      	bne.n	800cb54 <uxr_flash_output_streams+0xa4>
 800cb84:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cb88:	f109 0901 	add.w	r9, r9, #1
 800cb8c:	fa5f f089 	uxtb.w	r0, r9
 800cb90:	4283      	cmp	r3, r0
 800cb92:	d8d4      	bhi.n	800cb3e <uxr_flash_output_streams+0x8e>
 800cb94:	b004      	add	sp, #16
 800cb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9a:	bf00      	nop

0800cb9c <read_submessage_info>:
 800cb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba0:	460d      	mov	r5, r1
 800cba2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cba6:	4669      	mov	r1, sp
 800cba8:	4607      	mov	r7, r0
 800cbaa:	4628      	mov	r0, r5
 800cbac:	f002 fca6 	bl	800f4fc <uxr_deserialize_BaseObjectReply>
 800cbb0:	a902      	add	r1, sp, #8
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cbba:	f7fe fa03 	bl	800afc4 <ucdr_deserialize_bool>
 800cbbe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cbc2:	4004      	ands	r4, r0
 800cbc4:	b2e4      	uxtb	r4, r4
 800cbc6:	b95b      	cbnz	r3, 800cbe0 <read_submessage_info+0x44>
 800cbc8:	a987      	add	r1, sp, #540	@ 0x21c
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7fe f9fa 	bl	800afc4 <ucdr_deserialize_bool>
 800cbd0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cbd4:	4606      	mov	r6, r0
 800cbd6:	b94b      	cbnz	r3, 800cbec <read_submessage_info+0x50>
 800cbd8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe0:	a903      	add	r1, sp, #12
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f002 fb32 	bl	800f24c <uxr_deserialize_ObjectVariant>
 800cbe8:	4004      	ands	r4, r0
 800cbea:	e7ed      	b.n	800cbc8 <read_submessage_info+0x2c>
 800cbec:	a988      	add	r1, sp, #544	@ 0x220
 800cbee:	4628      	mov	r0, r5
 800cbf0:	f7fe fa16 	bl	800b020 <ucdr_deserialize_uint8_t>
 800cbf4:	4234      	tst	r4, r6
 800cbf6:	d0ef      	beq.n	800cbd8 <read_submessage_info+0x3c>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d0ed      	beq.n	800cbd8 <read_submessage_info+0x3c>
 800cbfc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cc00:	2b0d      	cmp	r3, #13
 800cc02:	d1e9      	bne.n	800cbd8 <read_submessage_info+0x3c>
 800cc04:	a98a      	add	r1, sp, #552	@ 0x228
 800cc06:	4628      	mov	r0, r5
 800cc08:	f7fe ffb0 	bl	800bb6c <ucdr_deserialize_int16_t>
 800cc0c:	b140      	cbz	r0, 800cc20 <read_submessage_info+0x84>
 800cc0e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	dd07      	ble.n	800cc26 <read_submessage_info+0x8a>
 800cc16:	f1b8 0f00 	cmp.w	r8, #0
 800cc1a:	bf14      	ite	ne
 800cc1c:	2001      	movne	r0, #1
 800cc1e:	2002      	moveq	r0, #2
 800cc20:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cc24:	e7d8      	b.n	800cbd8 <read_submessage_info+0x3c>
 800cc26:	2000      	movs	r0, #0
 800cc28:	e7fa      	b.n	800cc20 <read_submessage_info+0x84>
 800cc2a:	bf00      	nop

0800cc2c <read_submessage_list>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	b097      	sub	sp, #92	@ 0x5c
 800cc32:	4ec1      	ldr	r6, [pc, #772]	@ (800cf38 <read_submessage_list+0x30c>)
 800cc34:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	f04f 0801 	mov.w	r8, #1
 800cc3e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cc42:	aa0c      	add	r2, sp, #48	@ 0x30
 800cc44:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f001 fc89 	bl	800e560 <uxr_read_submessage_header>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	f000 813e 	beq.w	800ced0 <read_submessage_list+0x2a4>
 800cc54:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800cc58:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800cc5c:	3b02      	subs	r3, #2
 800cc5e:	2b0d      	cmp	r3, #13
 800cc60:	d8ed      	bhi.n	800cc3e <read_submessage_list+0x12>
 800cc62:	a101      	add	r1, pc, #4	@ (adr r1, 800cc68 <read_submessage_list+0x3c>)
 800cc64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc68:	0800cec7 	.word	0x0800cec7
 800cc6c:	0800cc3f 	.word	0x0800cc3f
 800cc70:	0800ceb7 	.word	0x0800ceb7
 800cc74:	0800ce55 	.word	0x0800ce55
 800cc78:	0800ce4b 	.word	0x0800ce4b
 800cc7c:	0800cc3f 	.word	0x0800cc3f
 800cc80:	0800cc3f 	.word	0x0800cc3f
 800cc84:	0800cdab 	.word	0x0800cdab
 800cc88:	0800cd3b 	.word	0x0800cd3b
 800cc8c:	0800ccfb 	.word	0x0800ccfb
 800cc90:	0800cc3f 	.word	0x0800cc3f
 800cc94:	0800cc3f 	.word	0x0800cc3f
 800cc98:	0800cc3f 	.word	0x0800cc3f
 800cc9c:	0800cca1 	.word	0x0800cca1
 800cca0:	a910      	add	r1, sp, #64	@ 0x40
 800cca2:	4628      	mov	r0, r5
 800cca4:	f002 fe4e 	bl	800f944 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cca8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ccac:	f1b9 0f00 	cmp.w	r9, #0
 800ccb0:	f000 8116 	beq.w	800cee0 <read_submessage_list+0x2b4>
 800ccb4:	f001 fc9a 	bl	800e5ec <uxr_nanos>
 800ccb8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	468c      	mov	ip, r1
 800ccc4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ccc8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cccc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ccce:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ccd0:	468c      	mov	ip, r1
 800ccd2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ccd6:	46e2      	mov	sl, ip
 800ccd8:	46bc      	mov	ip, r7
 800ccda:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ccde:	fbc0 7106 	smlal	r7, r1, r0, r6
 800cce2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800cce6:	e9cd 7100 	strd	r7, r1, [sp]
 800ccea:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ccee:	9106      	str	r1, [sp, #24]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	47c8      	blx	r9
 800ccf4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800ccf8:	e7a1      	b.n	800cc3e <read_submessage_list+0x12>
 800ccfa:	a910      	add	r1, sp, #64	@ 0x40
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f002 fe0f 	bl	800f920 <uxr_deserialize_HEARTBEAT_Payload>
 800cd02:	2100      	movs	r1, #0
 800cd04:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cd08:	f001 fb02 	bl	800e310 <uxr_stream_id_from_raw>
 800cd0c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cd10:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cd12:	4639      	mov	r1, r7
 800cd14:	f104 0008 	add.w	r0, r4, #8
 800cd18:	f001 fbe8 	bl	800e4ec <uxr_get_input_reliable_stream>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d08e      	beq.n	800cc3e <read_submessage_list+0x12>
 800cd20:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800cd24:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800cd28:	f007 f95a 	bl	8013fe0 <uxr_process_heartbeat>
 800cd2c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800cd30:	463a      	mov	r2, r7
 800cd32:	4620      	mov	r0, r4
 800cd34:	f7ff fdf6 	bl	800c924 <write_submessage_acknack.isra.0>
 800cd38:	e781      	b.n	800cc3e <read_submessage_list+0x12>
 800cd3a:	a910      	add	r1, sp, #64	@ 0x40
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f002 fdc7 	bl	800f8d0 <uxr_deserialize_ACKNACK_Payload>
 800cd42:	2100      	movs	r1, #0
 800cd44:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cd48:	f001 fae2 	bl	800e310 <uxr_stream_id_from_raw>
 800cd4c:	900d      	str	r0, [sp, #52]	@ 0x34
 800cd4e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cd52:	f104 0008 	add.w	r0, r4, #8
 800cd56:	f001 fbb5 	bl	800e4c4 <uxr_get_output_reliable_stream>
 800cd5a:	4607      	mov	r7, r0
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	f43f af6e 	beq.w	800cc3e <read_submessage_list+0x12>
 800cd62:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800cd66:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800cd6a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800cd6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800cd72:	b289      	uxth	r1, r1
 800cd74:	f007 fc8e 	bl	8014694 <uxr_process_acknack>
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f007 fc4b 	bl	8014614 <uxr_begin_output_nack_buffer_it>
 800cd7e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800cd82:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800cd86:	e006      	b.n	800cd96 <read_submessage_list+0x16a>
 800cd88:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cd8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd8c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800cd90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	47c8      	blx	r9
 800cd96:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800cd9a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cd9c:	4651      	mov	r1, sl
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f007 fc3a 	bl	8014618 <uxr_next_reliable_nack_buffer_to_send>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d1ef      	bne.n	800cd88 <read_submessage_list+0x15c>
 800cda8:	e749      	b.n	800cc3e <read_submessage_list+0x12>
 800cdaa:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800cdae:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800cdb2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800cdb6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800cdba:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800cdbe:	4651      	mov	r1, sl
 800cdc0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800cdc4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800cdc8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800cdcc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800cdd6:	f002 fadb 	bl	800f390 <uxr_deserialize_BaseObjectRequest>
 800cdda:	4650      	mov	r0, sl
 800cddc:	a90f      	add	r1, sp, #60	@ 0x3c
 800cdde:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800cde2:	f000 fdc7 	bl	800d974 <uxr_parse_base_object_request>
 800cde6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800cdea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cdec:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800cdf0:	9110      	str	r1, [sp, #64]	@ 0x40
 800cdf2:	3f04      	subs	r7, #4
 800cdf4:	f009 090e 	and.w	r9, r9, #14
 800cdf8:	b2bf      	uxth	r7, r7
 800cdfa:	f1bb 0f00 	cmp.w	fp, #0
 800cdfe:	d006      	beq.n	800ce0e <read_submessage_list+0x1e2>
 800ce00:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4652      	mov	r2, sl
 800ce08:	2300      	movs	r3, #0
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	47d8      	blx	fp
 800ce0e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ce10:	b16a      	cbz	r2, 800ce2e <read_submessage_list+0x202>
 800ce12:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ce14:	2100      	movs	r1, #0
 800ce16:	3802      	subs	r0, #2
 800ce18:	e002      	b.n	800ce20 <read_submessage_list+0x1f4>
 800ce1a:	3101      	adds	r1, #1
 800ce1c:	4291      	cmp	r1, r2
 800ce1e:	d006      	beq.n	800ce2e <read_submessage_list+0x202>
 800ce20:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ce24:	4553      	cmp	r3, sl
 800ce26:	d1f8      	bne.n	800ce1a <read_submessage_list+0x1ee>
 800ce28:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	545a      	strb	r2, [r3, r1]
 800ce2e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ce32:	9102      	str	r1, [sp, #8]
 800ce34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ce36:	9101      	str	r1, [sp, #4]
 800ce38:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ce3a:	9100      	str	r1, [sp, #0]
 800ce3c:	464b      	mov	r3, r9
 800ce3e:	463a      	mov	r2, r7
 800ce40:	4629      	mov	r1, r5
 800ce42:	4620      	mov	r0, r4
 800ce44:	f7ff fc4c 	bl	800c6e0 <read_submessage_format>
 800ce48:	e6f9      	b.n	800cc3e <read_submessage_list+0x12>
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f7ff fea5 	bl	800cb9c <read_submessage_info>
 800ce52:	e6f4      	b.n	800cc3e <read_submessage_list+0x12>
 800ce54:	2a00      	cmp	r2, #0
 800ce56:	d03e      	beq.n	800ced6 <read_submessage_list+0x2aa>
 800ce58:	a910      	add	r1, sp, #64	@ 0x40
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f002 fc94 	bl	800f788 <uxr_deserialize_STATUS_Payload>
 800ce60:	a90e      	add	r1, sp, #56	@ 0x38
 800ce62:	aa0d      	add	r2, sp, #52	@ 0x34
 800ce64:	a810      	add	r0, sp, #64	@ 0x40
 800ce66:	f000 fd85 	bl	800d974 <uxr_parse_base_object_request>
 800ce6a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ce6e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ce70:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ce74:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ce78:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ce7a:	f1ba 0f00 	cmp.w	sl, #0
 800ce7e:	d006      	beq.n	800ce8e <read_submessage_list+0x262>
 800ce80:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	463a      	mov	r2, r7
 800ce88:	464b      	mov	r3, r9
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	47d0      	blx	sl
 800ce8e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ce90:	2a00      	cmp	r2, #0
 800ce92:	f43f aed4 	beq.w	800cc3e <read_submessage_list+0x12>
 800ce96:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ce98:	2100      	movs	r1, #0
 800ce9a:	3802      	subs	r0, #2
 800ce9c:	e003      	b.n	800cea6 <read_submessage_list+0x27a>
 800ce9e:	3101      	adds	r1, #1
 800cea0:	4291      	cmp	r1, r2
 800cea2:	f43f aecc 	beq.w	800cc3e <read_submessage_list+0x12>
 800cea6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ceaa:	42bb      	cmp	r3, r7
 800ceac:	d1f7      	bne.n	800ce9e <read_submessage_list+0x272>
 800ceae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ceb0:	f803 9001 	strb.w	r9, [r3, r1]
 800ceb4:	e6c3      	b.n	800cc3e <read_submessage_list+0x12>
 800ceb6:	2a00      	cmp	r2, #0
 800ceb8:	f47f aec1 	bne.w	800cc3e <read_submessage_list+0x12>
 800cebc:	4629      	mov	r1, r5
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 fc9e 	bl	800d800 <uxr_read_create_session_status>
 800cec4:	e6bb      	b.n	800cc3e <read_submessage_list+0x12>
 800cec6:	4629      	mov	r1, r5
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff fcf5 	bl	800c8b8 <read_submessage_get_info>
 800cece:	e6b6      	b.n	800cc3e <read_submessage_list+0x12>
 800ced0:	b017      	add	sp, #92	@ 0x5c
 800ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced6:	4629      	mov	r1, r5
 800ced8:	4620      	mov	r0, r4
 800ceda:	f000 fc9d 	bl	800d818 <uxr_read_delete_session_status>
 800cede:	e6ae      	b.n	800cc3e <read_submessage_list+0x12>
 800cee0:	f001 fb84 	bl	800e5ec <uxr_nanos>
 800cee4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cee6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cee8:	464f      	mov	r7, r9
 800ceea:	fbc3 2706 	smlal	r2, r7, r3, r6
 800ceee:	1812      	adds	r2, r2, r0
 800cef0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cef2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cef4:	eb47 0101 	adc.w	r1, r7, r1
 800cef8:	464f      	mov	r7, r9
 800cefa:	fbc3 0706 	smlal	r0, r7, r3, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	4684      	mov	ip, r0
 800cf02:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800cf06:	fbc7 0906 	smlal	r0, r9, r7, r6
 800cf0a:	eb1c 0c00 	adds.w	ip, ip, r0
 800cf0e:	464f      	mov	r7, r9
 800cf10:	eb43 0307 	adc.w	r3, r3, r7
 800cf14:	ebb2 0c0c 	subs.w	ip, r2, ip
 800cf18:	eb61 0303 	sbc.w	r3, r1, r3
 800cf1c:	0fda      	lsrs	r2, r3, #31
 800cf1e:	eb12 020c 	adds.w	r2, r2, ip
 800cf22:	f143 0300 	adc.w	r3, r3, #0
 800cf26:	0852      	lsrs	r2, r2, #1
 800cf28:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800cf2c:	105b      	asrs	r3, r3, #1
 800cf2e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800cf32:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800cf36:	e6dd      	b.n	800ccf4 <read_submessage_list+0xc8>
 800cf38:	3b9aca00 	.word	0x3b9aca00

0800cf3c <listen_message_reliably>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	1e0b      	subs	r3, r1, #0
 800cf42:	b09d      	sub	sp, #116	@ 0x74
 800cf44:	bfb8      	it	lt
 800cf46:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	f001 fb33 	bl	800e5b8 <uxr_millis>
 800cf52:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800cf56:	4681      	mov	r9, r0
 800cf58:	2a00      	cmp	r2, #0
 800cf5a:	f000 80a1 	beq.w	800d0a0 <listen_message_reliably+0x164>
 800cf5e:	2600      	movs	r6, #0
 800cf60:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cf64:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800cf68:	9303      	str	r3, [sp, #12]
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	e00f      	b.n	800cf90 <listen_message_reliably+0x54>
 800cf70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf74:	9903      	ldr	r1, [sp, #12]
 800cf76:	455a      	cmp	r2, fp
 800cf78:	f106 0601 	add.w	r6, r6, #1
 800cf7c:	eb73 0101 	sbcs.w	r1, r3, r1
 800cf80:	b2f0      	uxtb	r0, r6
 800cf82:	da01      	bge.n	800cf88 <listen_message_reliably+0x4c>
 800cf84:	4693      	mov	fp, r2
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800cf8c:	4283      	cmp	r3, r0
 800cf8e:	d960      	bls.n	800d052 <listen_message_reliably+0x116>
 800cf90:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800cf94:	2102      	movs	r1, #2
 800cf96:	2201      	movs	r2, #1
 800cf98:	f001 f990 	bl	800e2bc <uxr_stream_id>
 800cf9c:	00e4      	lsls	r4, r4, #3
 800cf9e:	f104 0520 	add.w	r5, r4, #32
 800cfa2:	4445      	add	r5, r8
 800cfa4:	4601      	mov	r1, r0
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	464a      	mov	r2, r9
 800cfaa:	4628      	mov	r0, r5
 800cfac:	9109      	str	r1, [sp, #36]	@ 0x24
 800cfae:	f007 fb07 	bl	80145c0 <uxr_update_output_stream_heartbeat_timestamp>
 800cfb2:	eb08 0304 	add.w	r3, r8, r4
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d0da      	beq.n	800cf70 <listen_message_reliably+0x34>
 800cfba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800cfbe:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800cfc2:	9304      	str	r3, [sp, #16]
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	f000 fcaf 	bl	800d928 <uxr_session_header_offset>
 800cfca:	3501      	adds	r5, #1
 800cfcc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800cfd0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cfd4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800cfd8:	2300      	movs	r3, #0
 800cfda:	2211      	movs	r2, #17
 800cfdc:	9000      	str	r0, [sp, #0]
 800cfde:	a90c      	add	r1, sp, #48	@ 0x30
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	f7fe ffa1 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2205      	movs	r2, #5
 800cfea:	210b      	movs	r1, #11
 800cfec:	4650      	mov	r0, sl
 800cfee:	f001 fa9d 	bl	800e52c <uxr_buffer_submessage_header>
 800cff2:	8968      	ldrh	r0, [r5, #10]
 800cff4:	2101      	movs	r1, #1
 800cff6:	f007 fba5 	bl	8014744 <uxr_seq_num_add>
 800cffa:	892b      	ldrh	r3, [r5, #8]
 800cffc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d000:	4602      	mov	r2, r0
 800d002:	9b04      	ldr	r3, [sp, #16]
 800d004:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d008:	a90a      	add	r1, sp, #40	@ 0x28
 800d00a:	4650      	mov	r0, sl
 800d00c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d010:	f002 fc72 	bl	800f8f8 <uxr_serialize_HEARTBEAT_Payload>
 800d014:	2200      	movs	r2, #0
 800d016:	4611      	mov	r1, r2
 800d018:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d01a:	4640      	mov	r0, r8
 800d01c:	f000 fc2e 	bl	800d87c <uxr_stamp_session_header>
 800d020:	4650      	mov	r0, sl
 800d022:	f7fe ffbf 	bl	800bfa4 <ucdr_buffer_length>
 800d026:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d02a:	4602      	mov	r2, r0
 800d02c:	a90c      	add	r1, sp, #48	@ 0x30
 800d02e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d032:	4444      	add	r4, r8
 800d034:	47a8      	blx	r5
 800d036:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d03a:	9903      	ldr	r1, [sp, #12]
 800d03c:	455a      	cmp	r2, fp
 800d03e:	f106 0601 	add.w	r6, r6, #1
 800d042:	eb73 0101 	sbcs.w	r1, r3, r1
 800d046:	b2f0      	uxtb	r0, r6
 800d048:	db9c      	blt.n	800cf84 <listen_message_reliably+0x48>
 800d04a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d04e:	4283      	cmp	r3, r0
 800d050:	d89e      	bhi.n	800cf90 <listen_message_reliably+0x54>
 800d052:	9a03      	ldr	r2, [sp, #12]
 800d054:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d058:	429a      	cmp	r2, r3
 800d05a:	bf08      	it	eq
 800d05c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d060:	d01e      	beq.n	800d0a0 <listen_message_reliably+0x164>
 800d062:	ebab 0309 	sub.w	r3, fp, r9
 800d066:	9905      	ldr	r1, [sp, #20]
 800d068:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bf08      	it	eq
 800d070:	2301      	moveq	r3, #1
 800d072:	4299      	cmp	r1, r3
 800d074:	bfa8      	it	ge
 800d076:	4619      	movge	r1, r3
 800d078:	6894      	ldr	r4, [r2, #8]
 800d07a:	6810      	ldr	r0, [r2, #0]
 800d07c:	4689      	mov	r9, r1
 800d07e:	460b      	mov	r3, r1
 800d080:	aa08      	add	r2, sp, #32
 800d082:	a907      	add	r1, sp, #28
 800d084:	47a0      	blx	r4
 800d086:	b968      	cbnz	r0, 800d0a4 <listen_message_reliably+0x168>
 800d088:	9b05      	ldr	r3, [sp, #20]
 800d08a:	eba3 0309 	sub.w	r3, r3, r9
 800d08e:	2b00      	cmp	r3, #0
 800d090:	9305      	str	r3, [sp, #20]
 800d092:	f73f af5c 	bgt.w	800cf4e <listen_message_reliably+0x12>
 800d096:	4604      	mov	r4, r0
 800d098:	4620      	mov	r0, r4
 800d09a:	b01d      	add	sp, #116	@ 0x74
 800d09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a0:	9b05      	ldr	r3, [sp, #20]
 800d0a2:	e7e0      	b.n	800d066 <listen_message_reliably+0x12a>
 800d0a4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	a80c      	add	r0, sp, #48	@ 0x30
 800d0ac:	f7fe ff4e 	bl	800bf4c <ucdr_init_buffer>
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	f10d 031a 	add.w	r3, sp, #26
 800d0b6:	aa06      	add	r2, sp, #24
 800d0b8:	a90c      	add	r1, sp, #48	@ 0x30
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	f88d 5018 	strb.w	r5, [sp, #24]
 800d0c0:	f000 fbf0 	bl	800d8a4 <uxr_read_session_header>
 800d0c4:	b918      	cbnz	r0, 800d0ce <listen_message_reliably+0x192>
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	b01d      	add	sp, #116	@ 0x74
 800d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d0d4:	f001 f91c 	bl	800e310 <uxr_stream_id_from_raw>
 800d0d8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d0dc:	2d01      	cmp	r5, #1
 800d0de:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d0e2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d0e6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d0ea:	d04b      	beq.n	800d184 <listen_message_reliably+0x248>
 800d0ec:	2d02      	cmp	r5, #2
 800d0ee:	d00f      	beq.n	800d110 <listen_message_reliably+0x1d4>
 800d0f0:	2d00      	cmp	r5, #0
 800d0f2:	d1e8      	bne.n	800d0c6 <listen_message_reliably+0x18a>
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f001 f90a 	bl	800e310 <uxr_stream_id_from_raw>
 800d0fc:	a90c      	add	r1, sp, #48	@ 0x30
 800d0fe:	4602      	mov	r2, r0
 800d100:	4640      	mov	r0, r8
 800d102:	920a      	str	r2, [sp, #40]	@ 0x28
 800d104:	f7ff fd92 	bl	800cc2c <read_submessage_list>
 800d108:	4620      	mov	r0, r4
 800d10a:	b01d      	add	sp, #116	@ 0x74
 800d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d110:	4631      	mov	r1, r6
 800d112:	f108 0008 	add.w	r0, r8, #8
 800d116:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d11a:	f001 f9e7 	bl	800e4ec <uxr_get_input_reliable_stream>
 800d11e:	4607      	mov	r7, r0
 800d120:	b338      	cbz	r0, 800d172 <listen_message_reliably+0x236>
 800d122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d124:	9203      	str	r2, [sp, #12]
 800d126:	a80c      	add	r0, sp, #48	@ 0x30
 800d128:	f7fe ff40 	bl	800bfac <ucdr_buffer_remaining>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f10d 0019 	add.w	r0, sp, #25
 800d132:	9000      	str	r0, [sp, #0]
 800d134:	9a03      	ldr	r2, [sp, #12]
 800d136:	4651      	mov	r1, sl
 800d138:	4638      	mov	r0, r7
 800d13a:	f006 fe57 	bl	8013dec <uxr_receive_reliable_message>
 800d13e:	b1c0      	cbz	r0, 800d172 <listen_message_reliably+0x236>
 800d140:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d144:	b393      	cbz	r3, 800d1ac <listen_message_reliably+0x270>
 800d146:	ad14      	add	r5, sp, #80	@ 0x50
 800d148:	f04f 0a02 	mov.w	sl, #2
 800d14c:	e00a      	b.n	800d164 <listen_message_reliably+0x228>
 800d14e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d152:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d156:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d15a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d15c:	4629      	mov	r1, r5
 800d15e:	4640      	mov	r0, r8
 800d160:	f7ff fd64 	bl	800cc2c <read_submessage_list>
 800d164:	2204      	movs	r2, #4
 800d166:	4629      	mov	r1, r5
 800d168:	4638      	mov	r0, r7
 800d16a:	f006 febf 	bl	8013eec <uxr_next_input_reliable_buffer_available>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d1ed      	bne.n	800d14e <listen_message_reliably+0x212>
 800d172:	4640      	mov	r0, r8
 800d174:	4632      	mov	r2, r6
 800d176:	4649      	mov	r1, r9
 800d178:	f7ff fbd4 	bl	800c924 <write_submessage_acknack.isra.0>
 800d17c:	4620      	mov	r0, r4
 800d17e:	b01d      	add	sp, #116	@ 0x74
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d184:	4631      	mov	r1, r6
 800d186:	f108 0008 	add.w	r0, r8, #8
 800d18a:	f001 f9a5 	bl	800e4d8 <uxr_get_input_best_effort_stream>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d099      	beq.n	800d0c6 <listen_message_reliably+0x18a>
 800d192:	4651      	mov	r1, sl
 800d194:	f006 fd96 	bl	8013cc4 <uxr_receive_best_effort_message>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d094      	beq.n	800d0c6 <listen_message_reliably+0x18a>
 800d19c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d1a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1a2:	a90c      	add	r1, sp, #48	@ 0x30
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	f7ff fd41 	bl	800cc2c <read_submessage_list>
 800d1aa:	e78c      	b.n	800d0c6 <listen_message_reliably+0x18a>
 800d1ac:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d1b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1b2:	a90c      	add	r1, sp, #48	@ 0x30
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	f7ff fd39 	bl	800cc2c <read_submessage_list>
 800d1ba:	e7c4      	b.n	800d146 <listen_message_reliably+0x20a>

0800d1bc <uxr_run_session_timeout>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f001 f9f9 	bl	800e5b8 <uxr_millis>
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f7ff fc71 	bl	800cab0 <uxr_flash_output_streams>
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7ff feb3 	bl	800cf3c <listen_message_reliably>
 800d1d6:	f001 f9ef 	bl	800e5b8 <uxr_millis>
 800d1da:	1b83      	subs	r3, r0, r6
 800d1dc:	1ae9      	subs	r1, r5, r3
 800d1de:	2900      	cmp	r1, #0
 800d1e0:	dcf6      	bgt.n	800d1d0 <uxr_run_session_timeout+0x14>
 800d1e2:	f104 0008 	add.w	r0, r4, #8
 800d1e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1ea:	f001 b989 	b.w	800e500 <uxr_output_streams_confirmed>
 800d1ee:	bf00      	nop

0800d1f0 <uxr_run_session_until_data>:
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	f001 f9df 	bl	800e5b8 <uxr_millis>
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f7ff fc57 	bl	800cab0 <uxr_flash_output_streams>
 800d202:	2300      	movs	r3, #0
 800d204:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d208:	4629      	mov	r1, r5
 800d20a:	e005      	b.n	800d218 <uxr_run_session_until_data+0x28>
 800d20c:	f001 f9d4 	bl	800e5b8 <uxr_millis>
 800d210:	1b83      	subs	r3, r0, r6
 800d212:	1ae9      	subs	r1, r5, r3
 800d214:	2900      	cmp	r1, #0
 800d216:	dd07      	ble.n	800d228 <uxr_run_session_until_data+0x38>
 800d218:	4620      	mov	r0, r4
 800d21a:	f7ff fe8f 	bl	800cf3c <listen_message_reliably>
 800d21e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d222:	2800      	cmp	r0, #0
 800d224:	d0f2      	beq.n	800d20c <uxr_run_session_until_data+0x1c>
 800d226:	bd70      	pop	{r4, r5, r6, pc}
 800d228:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	bf00      	nop

0800d230 <uxr_run_session_until_confirm_delivery>:
 800d230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d234:	4606      	mov	r6, r0
 800d236:	460d      	mov	r5, r1
 800d238:	f001 f9be 	bl	800e5b8 <uxr_millis>
 800d23c:	4607      	mov	r7, r0
 800d23e:	4630      	mov	r0, r6
 800d240:	f7ff fc36 	bl	800cab0 <uxr_flash_output_streams>
 800d244:	2d00      	cmp	r5, #0
 800d246:	f106 0808 	add.w	r8, r6, #8
 800d24a:	bfa8      	it	ge
 800d24c:	462c      	movge	r4, r5
 800d24e:	da07      	bge.n	800d260 <uxr_run_session_until_confirm_delivery+0x30>
 800d250:	e00e      	b.n	800d270 <uxr_run_session_until_confirm_delivery+0x40>
 800d252:	f7ff fe73 	bl	800cf3c <listen_message_reliably>
 800d256:	f001 f9af 	bl	800e5b8 <uxr_millis>
 800d25a:	1bc3      	subs	r3, r0, r7
 800d25c:	1aec      	subs	r4, r5, r3
 800d25e:	d407      	bmi.n	800d270 <uxr_run_session_until_confirm_delivery+0x40>
 800d260:	4640      	mov	r0, r8
 800d262:	f001 f94d 	bl	800e500 <uxr_output_streams_confirmed>
 800d266:	4603      	mov	r3, r0
 800d268:	4621      	mov	r1, r4
 800d26a:	4630      	mov	r0, r6
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0f0      	beq.n	800d252 <uxr_run_session_until_confirm_delivery+0x22>
 800d270:	4640      	mov	r0, r8
 800d272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d276:	f001 b943 	b.w	800e500 <uxr_output_streams_confirmed>
 800d27a:	bf00      	nop

0800d27c <uxr_run_session_until_all_status>:
 800d27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d280:	9c08      	ldr	r4, [sp, #32]
 800d282:	4606      	mov	r6, r0
 800d284:	460f      	mov	r7, r1
 800d286:	4691      	mov	r9, r2
 800d288:	461d      	mov	r5, r3
 800d28a:	f7ff fc11 	bl	800cab0 <uxr_flash_output_streams>
 800d28e:	b124      	cbz	r4, 800d29a <uxr_run_session_until_all_status+0x1e>
 800d290:	4622      	mov	r2, r4
 800d292:	21ff      	movs	r1, #255	@ 0xff
 800d294:	4628      	mov	r0, r5
 800d296:	f008 fa3d 	bl	8015714 <memset>
 800d29a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d29e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d2a0:	f001 f98a 	bl	800e5b8 <uxr_millis>
 800d2a4:	3d01      	subs	r5, #1
 800d2a6:	f1a9 0902 	sub.w	r9, r9, #2
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f7ff fe44 	bl	800cf3c <listen_message_reliably>
 800d2b4:	f001 f980 	bl	800e5b8 <uxr_millis>
 800d2b8:	eba0 0008 	sub.w	r0, r0, r8
 800d2bc:	1a39      	subs	r1, r7, r0
 800d2be:	b344      	cbz	r4, 800d312 <uxr_run_session_until_all_status+0x96>
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	46ac      	mov	ip, r5
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e002      	b.n	800d2ce <uxr_run_session_until_all_status+0x52>
 800d2c8:	42a3      	cmp	r3, r4
 800d2ca:	d20d      	bcs.n	800d2e8 <uxr_run_session_until_all_status+0x6c>
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d2d2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d2d6:	d1f7      	bne.n	800d2c8 <uxr_run_session_until_all_status+0x4c>
 800d2d8:	42a3      	cmp	r3, r4
 800d2da:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d2de:	d213      	bcs.n	800d308 <uxr_run_session_until_all_status+0x8c>
 800d2e0:	2a00      	cmp	r2, #0
 800d2e2:	d0f3      	beq.n	800d2cc <uxr_run_session_until_all_status+0x50>
 800d2e4:	2900      	cmp	r1, #0
 800d2e6:	dce2      	bgt.n	800d2ae <uxr_run_session_until_all_status+0x32>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d2ec:	442c      	add	r4, r5
 800d2ee:	e001      	b.n	800d2f4 <uxr_run_session_until_all_status+0x78>
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d812      	bhi.n	800d31a <uxr_run_session_until_all_status+0x9e>
 800d2f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d2f8:	4284      	cmp	r4, r0
 800d2fa:	d1f9      	bne.n	800d2f0 <uxr_run_session_until_all_status+0x74>
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	bf8c      	ite	hi
 800d300:	2000      	movhi	r0, #0
 800d302:	2001      	movls	r0, #1
 800d304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d308:	2900      	cmp	r1, #0
 800d30a:	dded      	ble.n	800d2e8 <uxr_run_session_until_all_status+0x6c>
 800d30c:	2a00      	cmp	r2, #0
 800d30e:	d1ce      	bne.n	800d2ae <uxr_run_session_until_all_status+0x32>
 800d310:	e7ea      	b.n	800d2e8 <uxr_run_session_until_all_status+0x6c>
 800d312:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d314:	2001      	movs	r0, #1
 800d316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31a:	2000      	movs	r0, #0
 800d31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d320 <wait_session_status>:
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	4604      	mov	r4, r0
 800d326:	b09d      	sub	sp, #116	@ 0x74
 800d328:	20ff      	movs	r0, #255	@ 0xff
 800d32a:	7160      	strb	r0, [r4, #5]
 800d32c:	9303      	str	r3, [sp, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 80b6 	beq.w	800d4a0 <wait_session_status+0x180>
 800d334:	468a      	mov	sl, r1
 800d336:	4691      	mov	r9, r2
 800d338:	f04f 0b00 	mov.w	fp, #0
 800d33c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d33e:	464a      	mov	r2, r9
 800d340:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d344:	4651      	mov	r1, sl
 800d346:	47a8      	blx	r5
 800d348:	f001 f936 	bl	800e5b8 <uxr_millis>
 800d34c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d350:	4605      	mov	r5, r0
 800d352:	e009      	b.n	800d368 <wait_session_status+0x48>
 800d354:	f001 f930 	bl	800e5b8 <uxr_millis>
 800d358:	1b40      	subs	r0, r0, r5
 800d35a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d35e:	2b00      	cmp	r3, #0
 800d360:	dd40      	ble.n	800d3e4 <wait_session_status+0xc4>
 800d362:	7960      	ldrb	r0, [r4, #5]
 800d364:	28ff      	cmp	r0, #255	@ 0xff
 800d366:	d145      	bne.n	800d3f4 <wait_session_status+0xd4>
 800d368:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d36a:	a908      	add	r1, sp, #32
 800d36c:	6896      	ldr	r6, [r2, #8]
 800d36e:	6810      	ldr	r0, [r2, #0]
 800d370:	aa09      	add	r2, sp, #36	@ 0x24
 800d372:	47b0      	blx	r6
 800d374:	2800      	cmp	r0, #0
 800d376:	d0ed      	beq.n	800d354 <wait_session_status+0x34>
 800d378:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d37c:	a80c      	add	r0, sp, #48	@ 0x30
 800d37e:	f7fe fde5 	bl	800bf4c <ucdr_init_buffer>
 800d382:	2600      	movs	r6, #0
 800d384:	f10d 031e 	add.w	r3, sp, #30
 800d388:	aa07      	add	r2, sp, #28
 800d38a:	a90c      	add	r1, sp, #48	@ 0x30
 800d38c:	4620      	mov	r0, r4
 800d38e:	f88d 601c 	strb.w	r6, [sp, #28]
 800d392:	f000 fa87 	bl	800d8a4 <uxr_read_session_header>
 800d396:	2800      	cmp	r0, #0
 800d398:	d0dc      	beq.n	800d354 <wait_session_status+0x34>
 800d39a:	4631      	mov	r1, r6
 800d39c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d3a0:	f000 ffb6 	bl	800e310 <uxr_stream_id_from_raw>
 800d3a4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d3a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d3ac:	9302      	str	r3, [sp, #8]
 800d3ae:	2f01      	cmp	r7, #1
 800d3b0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d3b4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d3b8:	d05c      	beq.n	800d474 <wait_session_status+0x154>
 800d3ba:	2f02      	cmp	r7, #2
 800d3bc:	d020      	beq.n	800d400 <wait_session_status+0xe0>
 800d3be:	2f00      	cmp	r7, #0
 800d3c0:	d1c8      	bne.n	800d354 <wait_session_status+0x34>
 800d3c2:	4639      	mov	r1, r7
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	f000 ffa3 	bl	800e310 <uxr_stream_id_from_raw>
 800d3ca:	a90c      	add	r1, sp, #48	@ 0x30
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff fc2b 	bl	800cc2c <read_submessage_list>
 800d3d6:	f001 f8ef 	bl	800e5b8 <uxr_millis>
 800d3da:	1b40      	subs	r0, r0, r5
 800d3dc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	dcbe      	bgt.n	800d362 <wait_session_status+0x42>
 800d3e4:	9b03      	ldr	r3, [sp, #12]
 800d3e6:	7960      	ldrb	r0, [r4, #5]
 800d3e8:	f10b 0b01 	add.w	fp, fp, #1
 800d3ec:	455b      	cmp	r3, fp
 800d3ee:	d001      	beq.n	800d3f4 <wait_session_status+0xd4>
 800d3f0:	28ff      	cmp	r0, #255	@ 0xff
 800d3f2:	d0a3      	beq.n	800d33c <wait_session_status+0x1c>
 800d3f4:	38ff      	subs	r0, #255	@ 0xff
 800d3f6:	bf18      	it	ne
 800d3f8:	2001      	movne	r0, #1
 800d3fa:	b01d      	add	sp, #116	@ 0x74
 800d3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d400:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	4631      	mov	r1, r6
 800d408:	f104 0008 	add.w	r0, r4, #8
 800d40c:	f001 f86e 	bl	800e4ec <uxr_get_input_reliable_stream>
 800d410:	4680      	mov	r8, r0
 800d412:	b348      	cbz	r0, 800d468 <wait_session_status+0x148>
 800d414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d416:	9205      	str	r2, [sp, #20]
 800d418:	a80c      	add	r0, sp, #48	@ 0x30
 800d41a:	f7fe fdc7 	bl	800bfac <ucdr_buffer_remaining>
 800d41e:	4603      	mov	r3, r0
 800d420:	f10d 001d 	add.w	r0, sp, #29
 800d424:	9000      	str	r0, [sp, #0]
 800d426:	9a05      	ldr	r2, [sp, #20]
 800d428:	9902      	ldr	r1, [sp, #8]
 800d42a:	4640      	mov	r0, r8
 800d42c:	f006 fcde 	bl	8013dec <uxr_receive_reliable_message>
 800d430:	b1d0      	cbz	r0, 800d468 <wait_session_status+0x148>
 800d432:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d03a      	beq.n	800d4b0 <wait_session_status+0x190>
 800d43a:	9f04      	ldr	r7, [sp, #16]
 800d43c:	e00a      	b.n	800d454 <wait_session_status+0x134>
 800d43e:	f04f 0302 	mov.w	r3, #2
 800d442:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d446:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d44a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d44e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d450:	f7ff fbec 	bl	800cc2c <read_submessage_list>
 800d454:	a914      	add	r1, sp, #80	@ 0x50
 800d456:	2204      	movs	r2, #4
 800d458:	4640      	mov	r0, r8
 800d45a:	f006 fd47 	bl	8013eec <uxr_next_input_reliable_buffer_available>
 800d45e:	4603      	mov	r3, r0
 800d460:	a914      	add	r1, sp, #80	@ 0x50
 800d462:	4620      	mov	r0, r4
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1ea      	bne.n	800d43e <wait_session_status+0x11e>
 800d468:	9904      	ldr	r1, [sp, #16]
 800d46a:	4632      	mov	r2, r6
 800d46c:	4620      	mov	r0, r4
 800d46e:	f7ff fa59 	bl	800c924 <write_submessage_acknack.isra.0>
 800d472:	e76f      	b.n	800d354 <wait_session_status+0x34>
 800d474:	4631      	mov	r1, r6
 800d476:	f104 0008 	add.w	r0, r4, #8
 800d47a:	f001 f82d 	bl	800e4d8 <uxr_get_input_best_effort_stream>
 800d47e:	2800      	cmp	r0, #0
 800d480:	f43f af68 	beq.w	800d354 <wait_session_status+0x34>
 800d484:	9902      	ldr	r1, [sp, #8]
 800d486:	f006 fc1d 	bl	8013cc4 <uxr_receive_best_effort_message>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	f43f af62 	beq.w	800d354 <wait_session_status+0x34>
 800d490:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d494:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d496:	a90c      	add	r1, sp, #48	@ 0x30
 800d498:	4620      	mov	r0, r4
 800d49a:	f7ff fbc7 	bl	800cc2c <read_submessage_list>
 800d49e:	e759      	b.n	800d354 <wait_session_status+0x34>
 800d4a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d4a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d4a6:	47a0      	blx	r4
 800d4a8:	2001      	movs	r0, #1
 800d4aa:	b01d      	add	sp, #116	@ 0x74
 800d4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d4b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4b6:	a90c      	add	r1, sp, #48	@ 0x30
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f7ff fbb7 	bl	800cc2c <read_submessage_list>
 800d4be:	e7bc      	b.n	800d43a <wait_session_status+0x11a>

0800d4c0 <uxr_delete_session_retries>:
 800d4c0:	b530      	push	{r4, r5, lr}
 800d4c2:	b08f      	sub	sp, #60	@ 0x3c
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	f000 fa2e 	bl	800d928 <uxr_session_header_offset>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2210      	movs	r2, #16
 800d4d0:	9000      	str	r0, [sp, #0]
 800d4d2:	a902      	add	r1, sp, #8
 800d4d4:	a806      	add	r0, sp, #24
 800d4d6:	f7fe fd27 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800d4da:	a906      	add	r1, sp, #24
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 f973 	bl	800d7c8 <uxr_buffer_delete_session>
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4611      	mov	r1, r2
 800d4e6:	9b06      	ldr	r3, [sp, #24]
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 f9c7 	bl	800d87c <uxr_stamp_session_header>
 800d4ee:	a806      	add	r0, sp, #24
 800d4f0:	f7fe fd58 	bl	800bfa4 <ucdr_buffer_length>
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	a902      	add	r1, sp, #8
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f7ff ff10 	bl	800d320 <wait_session_status>
 800d500:	b118      	cbz	r0, 800d50a <uxr_delete_session_retries+0x4a>
 800d502:	7960      	ldrb	r0, [r4, #5]
 800d504:	fab0 f080 	clz	r0, r0
 800d508:	0940      	lsrs	r0, r0, #5
 800d50a:	b00f      	add	sp, #60	@ 0x3c
 800d50c:	bd30      	pop	{r4, r5, pc}
 800d50e:	bf00      	nop

0800d510 <uxr_create_session>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	f100 0b08 	add.w	fp, r0, #8
 800d518:	b0ab      	sub	sp, #172	@ 0xac
 800d51a:	4604      	mov	r4, r0
 800d51c:	4658      	mov	r0, fp
 800d51e:	f000 ff2b 	bl	800e378 <uxr_reset_stream_storage>
 800d522:	4620      	mov	r0, r4
 800d524:	f000 fa00 	bl	800d928 <uxr_session_header_offset>
 800d528:	2300      	movs	r3, #0
 800d52a:	9000      	str	r0, [sp, #0]
 800d52c:	221c      	movs	r2, #28
 800d52e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d530:	a812      	add	r0, sp, #72	@ 0x48
 800d532:	f7fe fcf9 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800d536:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d538:	8a1a      	ldrh	r2, [r3, #16]
 800d53a:	3a04      	subs	r2, #4
 800d53c:	b292      	uxth	r2, r2
 800d53e:	a912      	add	r1, sp, #72	@ 0x48
 800d540:	4620      	mov	r0, r4
 800d542:	f000 f917 	bl	800d774 <uxr_buffer_create_session>
 800d546:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 f983 	bl	800d854 <uxr_stamp_create_session_header>
 800d54e:	a812      	add	r0, sp, #72	@ 0x48
 800d550:	f7fe fd28 	bl	800bfa4 <ucdr_buffer_length>
 800d554:	23ff      	movs	r3, #255	@ 0xff
 800d556:	7163      	strb	r3, [r4, #5]
 800d558:	230a      	movs	r3, #10
 800d55a:	46da      	mov	sl, fp
 800d55c:	9303      	str	r3, [sp, #12]
 800d55e:	4683      	mov	fp, r0
 800d560:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d562:	465a      	mov	r2, fp
 800d564:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d568:	a90b      	add	r1, sp, #44	@ 0x2c
 800d56a:	47a8      	blx	r5
 800d56c:	f001 f824 	bl	800e5b8 <uxr_millis>
 800d570:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d574:	4605      	mov	r5, r0
 800d576:	e009      	b.n	800d58c <uxr_create_session+0x7c>
 800d578:	f001 f81e 	bl	800e5b8 <uxr_millis>
 800d57c:	1b40      	subs	r0, r0, r5
 800d57e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d582:	2b00      	cmp	r3, #0
 800d584:	7962      	ldrb	r2, [r4, #5]
 800d586:	dd38      	ble.n	800d5fa <uxr_create_session+0xea>
 800d588:	2aff      	cmp	r2, #255	@ 0xff
 800d58a:	d13c      	bne.n	800d606 <uxr_create_session+0xf6>
 800d58c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d58e:	a907      	add	r1, sp, #28
 800d590:	6896      	ldr	r6, [r2, #8]
 800d592:	6810      	ldr	r0, [r2, #0]
 800d594:	aa08      	add	r2, sp, #32
 800d596:	47b0      	blx	r6
 800d598:	2800      	cmp	r0, #0
 800d59a:	d0ed      	beq.n	800d578 <uxr_create_session+0x68>
 800d59c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d5a0:	a81a      	add	r0, sp, #104	@ 0x68
 800d5a2:	f7fe fcd3 	bl	800bf4c <ucdr_init_buffer>
 800d5a6:	2600      	movs	r6, #0
 800d5a8:	f10d 031a 	add.w	r3, sp, #26
 800d5ac:	aa06      	add	r2, sp, #24
 800d5ae:	a91a      	add	r1, sp, #104	@ 0x68
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f88d 6018 	strb.w	r6, [sp, #24]
 800d5b6:	f000 f975 	bl	800d8a4 <uxr_read_session_header>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d0dc      	beq.n	800d578 <uxr_create_session+0x68>
 800d5be:	4631      	mov	r1, r6
 800d5c0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d5c4:	f000 fea4 	bl	800e310 <uxr_stream_id_from_raw>
 800d5c8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d5cc:	2e01      	cmp	r6, #1
 800d5ce:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d5d2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d5d6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d5da:	d053      	beq.n	800d684 <uxr_create_session+0x174>
 800d5dc:	2e02      	cmp	r6, #2
 800d5de:	d018      	beq.n	800d612 <uxr_create_session+0x102>
 800d5e0:	2e00      	cmp	r6, #0
 800d5e2:	d1c9      	bne.n	800d578 <uxr_create_session+0x68>
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f000 fe92 	bl	800e310 <uxr_stream_id_from_raw>
 800d5ec:	a91a      	add	r1, sp, #104	@ 0x68
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f7ff fb1a 	bl	800cc2c <read_submessage_list>
 800d5f8:	e7be      	b.n	800d578 <uxr_create_session+0x68>
 800d5fa:	9b03      	ldr	r3, [sp, #12]
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	d001      	beq.n	800d606 <uxr_create_session+0xf6>
 800d602:	2aff      	cmp	r2, #255	@ 0xff
 800d604:	d0ac      	beq.n	800d560 <uxr_create_session+0x50>
 800d606:	2a00      	cmp	r2, #0
 800d608:	d051      	beq.n	800d6ae <uxr_create_session+0x19e>
 800d60a:	2000      	movs	r0, #0
 800d60c:	b02b      	add	sp, #172	@ 0xac
 800d60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d612:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d616:	9304      	str	r3, [sp, #16]
 800d618:	4639      	mov	r1, r7
 800d61a:	4650      	mov	r0, sl
 800d61c:	f000 ff66 	bl	800e4ec <uxr_get_input_reliable_stream>
 800d620:	4680      	mov	r8, r0
 800d622:	b348      	cbz	r0, 800d678 <uxr_create_session+0x168>
 800d624:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d626:	9205      	str	r2, [sp, #20]
 800d628:	a81a      	add	r0, sp, #104	@ 0x68
 800d62a:	f7fe fcbf 	bl	800bfac <ucdr_buffer_remaining>
 800d62e:	4603      	mov	r3, r0
 800d630:	f10d 0019 	add.w	r0, sp, #25
 800d634:	9000      	str	r0, [sp, #0]
 800d636:	9a05      	ldr	r2, [sp, #20]
 800d638:	4649      	mov	r1, r9
 800d63a:	4640      	mov	r0, r8
 800d63c:	f006 fbd6 	bl	8013dec <uxr_receive_reliable_message>
 800d640:	b1d0      	cbz	r0, 800d678 <uxr_create_session+0x168>
 800d642:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d038      	beq.n	800d6bc <uxr_create_session+0x1ac>
 800d64a:	9e04      	ldr	r6, [sp, #16]
 800d64c:	e00a      	b.n	800d664 <uxr_create_session+0x154>
 800d64e:	f04f 0302 	mov.w	r3, #2
 800d652:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d656:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800d65a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d65e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d660:	f7ff fae4 	bl	800cc2c <read_submessage_list>
 800d664:	a922      	add	r1, sp, #136	@ 0x88
 800d666:	2204      	movs	r2, #4
 800d668:	4640      	mov	r0, r8
 800d66a:	f006 fc3f 	bl	8013eec <uxr_next_input_reliable_buffer_available>
 800d66e:	4603      	mov	r3, r0
 800d670:	a922      	add	r1, sp, #136	@ 0x88
 800d672:	4620      	mov	r0, r4
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1ea      	bne.n	800d64e <uxr_create_session+0x13e>
 800d678:	9904      	ldr	r1, [sp, #16]
 800d67a:	463a      	mov	r2, r7
 800d67c:	4620      	mov	r0, r4
 800d67e:	f7ff f951 	bl	800c924 <write_submessage_acknack.isra.0>
 800d682:	e779      	b.n	800d578 <uxr_create_session+0x68>
 800d684:	4639      	mov	r1, r7
 800d686:	4650      	mov	r0, sl
 800d688:	f000 ff26 	bl	800e4d8 <uxr_get_input_best_effort_stream>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f43f af73 	beq.w	800d578 <uxr_create_session+0x68>
 800d692:	4649      	mov	r1, r9
 800d694:	f006 fb16 	bl	8013cc4 <uxr_receive_best_effort_message>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f43f af6d 	beq.w	800d578 <uxr_create_session+0x68>
 800d69e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d6a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6a4:	a91a      	add	r1, sp, #104	@ 0x68
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f7ff fac0 	bl	800cc2c <read_submessage_list>
 800d6ac:	e764      	b.n	800d578 <uxr_create_session+0x68>
 800d6ae:	4650      	mov	r0, sl
 800d6b0:	f000 fe62 	bl	800e378 <uxr_reset_stream_storage>
 800d6b4:	2001      	movs	r0, #1
 800d6b6:	b02b      	add	sp, #172	@ 0xac
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d6c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6c2:	a91a      	add	r1, sp, #104	@ 0x68
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f7ff fab1 	bl	800cc2c <read_submessage_list>
 800d6ca:	e7be      	b.n	800d64a <uxr_create_session+0x13a>

0800d6cc <uxr_prepare_stream_to_write_submessage>:
 800d6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d0:	b082      	sub	sp, #8
 800d6d2:	4682      	mov	sl, r0
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4615      	mov	r5, r2
 800d6d8:	461e      	mov	r6, r3
 800d6da:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800d6de:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800d6e2:	9101      	str	r1, [sp, #4]
 800d6e4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d6e8:	f000 ff60 	bl	800e5ac <uxr_submessage_padding>
 800d6ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6f0:	f105 0904 	add.w	r9, r5, #4
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	4481      	add	r9, r0
 800d6f8:	d01d      	beq.n	800d736 <uxr_prepare_stream_to_write_submessage+0x6a>
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d116      	bne.n	800d72c <uxr_prepare_stream_to_write_submessage+0x60>
 800d6fe:	4621      	mov	r1, r4
 800d700:	f10a 0008 	add.w	r0, sl, #8
 800d704:	f000 fede 	bl	800e4c4 <uxr_get_output_reliable_stream>
 800d708:	4604      	mov	r4, r0
 800d70a:	b158      	cbz	r0, 800d724 <uxr_prepare_stream_to_write_submessage+0x58>
 800d70c:	4649      	mov	r1, r9
 800d70e:	4632      	mov	r2, r6
 800d710:	f006 fda8 	bl	8014264 <uxr_prepare_reliable_buffer_to_write>
 800d714:	4604      	mov	r4, r0
 800d716:	b12c      	cbz	r4, 800d724 <uxr_prepare_stream_to_write_submessage+0x58>
 800d718:	4643      	mov	r3, r8
 800d71a:	b2aa      	uxth	r2, r5
 800d71c:	4639      	mov	r1, r7
 800d71e:	4630      	mov	r0, r6
 800d720:	f000 ff04 	bl	800e52c <uxr_buffer_submessage_header>
 800d724:	4620      	mov	r0, r4
 800d726:	b002      	add	sp, #8
 800d728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72c:	2400      	movs	r4, #0
 800d72e:	4620      	mov	r0, r4
 800d730:	b002      	add	sp, #8
 800d732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d736:	4621      	mov	r1, r4
 800d738:	f10a 0008 	add.w	r0, sl, #8
 800d73c:	f000 feba 	bl	800e4b4 <uxr_get_output_best_effort_stream>
 800d740:	4604      	mov	r4, r0
 800d742:	2800      	cmp	r0, #0
 800d744:	d0ee      	beq.n	800d724 <uxr_prepare_stream_to_write_submessage+0x58>
 800d746:	4649      	mov	r1, r9
 800d748:	4632      	mov	r2, r6
 800d74a:	f006 fcbb 	bl	80140c4 <uxr_prepare_best_effort_buffer_to_write>
 800d74e:	4604      	mov	r4, r0
 800d750:	e7e1      	b.n	800d716 <uxr_prepare_stream_to_write_submessage+0x4a>
 800d752:	bf00      	nop

0800d754 <uxr_init_session_info>:
 800d754:	0e13      	lsrs	r3, r2, #24
 800d756:	7043      	strb	r3, [r0, #1]
 800d758:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d75c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d760:	7001      	strb	r1, [r0, #0]
 800d762:	70c3      	strb	r3, [r0, #3]
 800d764:	2109      	movs	r1, #9
 800d766:	23ff      	movs	r3, #255	@ 0xff
 800d768:	f880 c002 	strb.w	ip, [r0, #2]
 800d76c:	7102      	strb	r2, [r0, #4]
 800d76e:	80c1      	strh	r1, [r0, #6]
 800d770:	7143      	strb	r3, [r0, #5]
 800d772:	4770      	bx	lr

0800d774 <uxr_buffer_create_session>:
 800d774:	b530      	push	{r4, r5, lr}
 800d776:	b089      	sub	sp, #36	@ 0x24
 800d778:	2300      	movs	r3, #0
 800d77a:	4d12      	ldr	r5, [pc, #72]	@ (800d7c4 <uxr_buffer_create_session+0x50>)
 800d77c:	9307      	str	r3, [sp, #28]
 800d77e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d782:	2201      	movs	r2, #1
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	80c2      	strh	r2, [r0, #6]
 800d788:	f88d 2004 	strb.w	r2, [sp, #4]
 800d78c:	682a      	ldr	r2, [r5, #0]
 800d78e:	9200      	str	r2, [sp, #0]
 800d790:	88aa      	ldrh	r2, [r5, #4]
 800d792:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d796:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d79a:	9202      	str	r2, [sp, #8]
 800d79c:	460c      	mov	r4, r1
 800d79e:	7802      	ldrb	r2, [r0, #0]
 800d7a0:	9303      	str	r3, [sp, #12]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	f88d 200c 	strb.w	r2, [sp, #12]
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	2210      	movs	r2, #16
 800d7ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d7b0:	9306      	str	r3, [sp, #24]
 800d7b2:	f000 febb 	bl	800e52c <uxr_buffer_submessage_header>
 800d7b6:	4669      	mov	r1, sp
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f001 feff 	bl	800f5bc <uxr_serialize_CREATE_CLIENT_Payload>
 800d7be:	b009      	add	sp, #36	@ 0x24
 800d7c0:	bd30      	pop	{r4, r5, pc}
 800d7c2:	bf00      	nop
 800d7c4:	080166ec 	.word	0x080166ec

0800d7c8 <uxr_buffer_delete_session>:
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d7fc <uxr_buffer_delete_session+0x34>)
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800d7d2:	f8ad c006 	strh.w	ip, [sp, #6]
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	2202      	movs	r2, #2
 800d7da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d7de:	80c2      	strh	r2, [r0, #6]
 800d7e0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d7e4:	2204      	movs	r2, #4
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	2103      	movs	r1, #3
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 fe9e 	bl	800e52c <uxr_buffer_submessage_header>
 800d7f0:	a901      	add	r1, sp, #4
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f001 ff88 	bl	800f708 <uxr_serialize_DELETE_Payload>
 800d7f8:	b002      	add	sp, #8
 800d7fa:	bd10      	pop	{r4, pc}
 800d7fc:	080166ec 	.word	0x080166ec

0800d800 <uxr_read_create_session_status>:
 800d800:	b510      	push	{r4, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	4604      	mov	r4, r0
 800d806:	4608      	mov	r0, r1
 800d808:	a901      	add	r1, sp, #4
 800d80a:	f001 ff8d 	bl	800f728 <uxr_deserialize_STATUS_AGENT_Payload>
 800d80e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d812:	7163      	strb	r3, [r4, #5]
 800d814:	b008      	add	sp, #32
 800d816:	bd10      	pop	{r4, pc}

0800d818 <uxr_read_delete_session_status>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	4604      	mov	r4, r0
 800d81c:	b084      	sub	sp, #16
 800d81e:	4608      	mov	r0, r1
 800d820:	a902      	add	r1, sp, #8
 800d822:	f001 ffb1 	bl	800f788 <uxr_deserialize_STATUS_Payload>
 800d826:	88e3      	ldrh	r3, [r4, #6]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d001      	beq.n	800d830 <uxr_read_delete_session_status+0x18>
 800d82c:	b004      	add	sp, #16
 800d82e:	bd10      	pop	{r4, pc}
 800d830:	f10d 000a 	add.w	r0, sp, #10
 800d834:	f7fe fecc 	bl	800c5d0 <uxr_object_id_from_raw>
 800d838:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d83c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d840:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d844:	b29b      	uxth	r3, r3
 800d846:	2b02      	cmp	r3, #2
 800d848:	bf04      	itt	eq
 800d84a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800d84e:	7163      	strbeq	r3, [r4, #5]
 800d850:	b004      	add	sp, #16
 800d852:	bd10      	pop	{r4, pc}

0800d854 <uxr_stamp_create_session_header>:
 800d854:	b510      	push	{r4, lr}
 800d856:	2208      	movs	r2, #8
 800d858:	b08a      	sub	sp, #40	@ 0x28
 800d85a:	4604      	mov	r4, r0
 800d85c:	eb0d 0002 	add.w	r0, sp, r2
 800d860:	f7fe fb74 	bl	800bf4c <ucdr_init_buffer>
 800d864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d868:	9400      	str	r4, [sp, #0]
 800d86a:	2300      	movs	r3, #0
 800d86c:	461a      	mov	r2, r3
 800d86e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800d872:	a802      	add	r0, sp, #8
 800d874:	f001 f854 	bl	800e920 <uxr_serialize_message_header>
 800d878:	b00a      	add	sp, #40	@ 0x28
 800d87a:	bd10      	pop	{r4, pc}

0800d87c <uxr_stamp_session_header>:
 800d87c:	b530      	push	{r4, r5, lr}
 800d87e:	b08d      	sub	sp, #52	@ 0x34
 800d880:	4604      	mov	r4, r0
 800d882:	460d      	mov	r5, r1
 800d884:	9203      	str	r2, [sp, #12]
 800d886:	4619      	mov	r1, r3
 800d888:	a804      	add	r0, sp, #16
 800d88a:	2208      	movs	r2, #8
 800d88c:	f7fe fb5e 	bl	800bf4c <ucdr_init_buffer>
 800d890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	9400      	str	r4, [sp, #0]
 800d898:	462a      	mov	r2, r5
 800d89a:	a804      	add	r0, sp, #16
 800d89c:	f001 f840 	bl	800e920 <uxr_serialize_message_header>
 800d8a0:	b00d      	add	sp, #52	@ 0x34
 800d8a2:	bd30      	pop	{r4, r5, pc}

0800d8a4 <uxr_read_session_header>:
 800d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	4608      	mov	r0, r1
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4615      	mov	r5, r2
 800d8b2:	461e      	mov	r6, r3
 800d8b4:	f7fe fb7a 	bl	800bfac <ucdr_buffer_remaining>
 800d8b8:	2808      	cmp	r0, #8
 800d8ba:	d803      	bhi.n	800d8c4 <uxr_read_session_header+0x20>
 800d8bc:	2000      	movs	r0, #0
 800d8be:	b004      	add	sp, #16
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c4:	f10d 080c 	add.w	r8, sp, #12
 800d8c8:	4633      	mov	r3, r6
 800d8ca:	462a      	mov	r2, r5
 800d8cc:	f8cd 8000 	str.w	r8, [sp]
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f10d 010b 	add.w	r1, sp, #11
 800d8d6:	f001 f841 	bl	800e95c <uxr_deserialize_message_header>
 800d8da:	783a      	ldrb	r2, [r7, #0]
 800d8dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d1eb      	bne.n	800d8bc <uxr_read_session_header+0x18>
 800d8e4:	061b      	lsls	r3, r3, #24
 800d8e6:	d41c      	bmi.n	800d922 <uxr_read_session_header+0x7e>
 800d8e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d8ec:	787b      	ldrb	r3, [r7, #1]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d003      	beq.n	800d8fa <uxr_read_session_header+0x56>
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	f080 0001 	eor.w	r0, r0, #1
 800d8f8:	e7e1      	b.n	800d8be <uxr_read_session_header+0x1a>
 800d8fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d8fe:	78bb      	ldrb	r3, [r7, #2]
 800d900:	429a      	cmp	r2, r3
 800d902:	f107 0102 	add.w	r1, r7, #2
 800d906:	d1f4      	bne.n	800d8f2 <uxr_read_session_header+0x4e>
 800d908:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d90c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d910:	429a      	cmp	r2, r3
 800d912:	d1ee      	bne.n	800d8f2 <uxr_read_session_header+0x4e>
 800d914:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d918:	784b      	ldrb	r3, [r1, #1]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d1e9      	bne.n	800d8f2 <uxr_read_session_header+0x4e>
 800d91e:	2000      	movs	r0, #0
 800d920:	e7e8      	b.n	800d8f4 <uxr_read_session_header+0x50>
 800d922:	2001      	movs	r0, #1
 800d924:	e7cb      	b.n	800d8be <uxr_read_session_header+0x1a>
 800d926:	bf00      	nop

0800d928 <uxr_session_header_offset>:
 800d928:	f990 3000 	ldrsb.w	r3, [r0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bfac      	ite	ge
 800d930:	2008      	movge	r0, #8
 800d932:	2004      	movlt	r0, #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop

0800d938 <uxr_init_base_object_request>:
 800d938:	b510      	push	{r4, lr}
 800d93a:	88c3      	ldrh	r3, [r0, #6]
 800d93c:	b082      	sub	sp, #8
 800d93e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800d942:	9101      	str	r1, [sp, #4]
 800d944:	f1a3 010a 	sub.w	r1, r3, #10
 800d948:	b289      	uxth	r1, r1
 800d94a:	42a1      	cmp	r1, r4
 800d94c:	d80e      	bhi.n	800d96c <uxr_init_base_object_request+0x34>
 800d94e:	3301      	adds	r3, #1
 800d950:	b29c      	uxth	r4, r3
 800d952:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d956:	b2db      	uxtb	r3, r3
 800d958:	80c4      	strh	r4, [r0, #6]
 800d95a:	9801      	ldr	r0, [sp, #4]
 800d95c:	7011      	strb	r1, [r2, #0]
 800d95e:	7053      	strb	r3, [r2, #1]
 800d960:	1c91      	adds	r1, r2, #2
 800d962:	f7fe fe49 	bl	800c5f8 <uxr_object_id_to_raw>
 800d966:	4620      	mov	r0, r4
 800d968:	b002      	add	sp, #8
 800d96a:	bd10      	pop	{r4, pc}
 800d96c:	230a      	movs	r3, #10
 800d96e:	2100      	movs	r1, #0
 800d970:	461c      	mov	r4, r3
 800d972:	e7f1      	b.n	800d958 <uxr_init_base_object_request+0x20>

0800d974 <uxr_parse_base_object_request>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	4604      	mov	r4, r0
 800d978:	3002      	adds	r0, #2
 800d97a:	460d      	mov	r5, r1
 800d97c:	4616      	mov	r6, r2
 800d97e:	f7fe fe27 	bl	800c5d0 <uxr_object_id_from_raw>
 800d982:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800d986:	8028      	strh	r0, [r5, #0]
 800d988:	806b      	strh	r3, [r5, #2]
 800d98a:	7822      	ldrb	r2, [r4, #0]
 800d98c:	7863      	ldrb	r3, [r4, #1]
 800d98e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d992:	8033      	strh	r3, [r6, #0]
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	bf00      	nop

0800d998 <uxr_init_framing_io>:
 800d998:	2300      	movs	r3, #0
 800d99a:	7041      	strb	r1, [r0, #1]
 800d99c:	7003      	strb	r3, [r0, #0]
 800d99e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop

0800d9a4 <uxr_write_framed_msg>:
 800d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	4617      	mov	r7, r2
 800d9aa:	7842      	ldrb	r2, [r0, #1]
 800d9ac:	b083      	sub	sp, #12
 800d9ae:	460e      	mov	r6, r1
 800d9b0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800d9b4:	469a      	mov	sl, r3
 800d9b6:	2901      	cmp	r1, #1
 800d9b8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800d9bc:	4604      	mov	r4, r0
 800d9be:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800d9c2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800d9c6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800d9ca:	f240 8137 	bls.w	800dc3c <uxr_write_framed_msg+0x298>
 800d9ce:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800d9d2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800d9d6:	2901      	cmp	r1, #1
 800d9d8:	f04f 0202 	mov.w	r2, #2
 800d9dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d9e0:	f240 808f 	bls.w	800db02 <uxr_write_framed_msg+0x15e>
 800d9e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9e6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800d9ea:	b2dd      	uxtb	r5, r3
 800d9ec:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800d9f0:	2203      	movs	r2, #3
 800d9f2:	2901      	cmp	r1, #1
 800d9f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d9f8:	f240 809a 	bls.w	800db30 <uxr_write_framed_msg+0x18c>
 800d9fc:	18a1      	adds	r1, r4, r2
 800d9fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da00:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800da04:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800da08:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800da0c:	3201      	adds	r2, #1
 800da0e:	2801      	cmp	r0, #1
 800da10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da14:	f240 80a0 	bls.w	800db58 <uxr_write_framed_msg+0x1b4>
 800da18:	18a0      	adds	r0, r4, r2
 800da1a:	3201      	adds	r2, #1
 800da1c:	b2d2      	uxtb	r2, r2
 800da1e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800da22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da26:	2b00      	cmp	r3, #0
 800da28:	f000 80a9 	beq.w	800db7e <uxr_write_framed_msg+0x1da>
 800da2c:	f04f 0900 	mov.w	r9, #0
 800da30:	46c8      	mov	r8, r9
 800da32:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800da36:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800da3a:	2901      	cmp	r1, #1
 800da3c:	f240 80c3 	bls.w	800dbc6 <uxr_write_framed_msg+0x222>
 800da40:	2a29      	cmp	r2, #41	@ 0x29
 800da42:	f200 809f 	bhi.w	800db84 <uxr_write_framed_msg+0x1e0>
 800da46:	18a1      	adds	r1, r4, r2
 800da48:	3201      	adds	r2, #1
 800da4a:	b2d2      	uxtb	r2, r2
 800da4c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800da50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da54:	ea89 0303 	eor.w	r3, r9, r3
 800da58:	498c      	ldr	r1, [pc, #560]	@ (800dc8c <uxr_write_framed_msg+0x2e8>)
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	f108 0801 	add.w	r8, r8, #1
 800da60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800da64:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800da68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da6a:	4543      	cmp	r3, r8
 800da6c:	d8e1      	bhi.n	800da32 <uxr_write_framed_msg+0x8e>
 800da6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800da72:	fa5f f889 	uxtb.w	r8, r9
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	f04f 0900 	mov.w	r9, #0
 800da7c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800da80:	fa5f f18a 	uxtb.w	r1, sl
 800da84:	2901      	cmp	r1, #1
 800da86:	d921      	bls.n	800dacc <uxr_write_framed_msg+0x128>
 800da88:	2a29      	cmp	r2, #41	@ 0x29
 800da8a:	f240 80af 	bls.w	800dbec <uxr_write_framed_msg+0x248>
 800da8e:	2500      	movs	r5, #0
 800da90:	e000      	b.n	800da94 <uxr_write_framed_msg+0xf0>
 800da92:	b160      	cbz	r0, 800daae <uxr_write_framed_msg+0x10a>
 800da94:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800da98:	1b52      	subs	r2, r2, r5
 800da9a:	465b      	mov	r3, fp
 800da9c:	4421      	add	r1, r4
 800da9e:	4638      	mov	r0, r7
 800daa0:	47b0      	blx	r6
 800daa2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800daa6:	4405      	add	r5, r0
 800daa8:	4295      	cmp	r5, r2
 800daaa:	d3f2      	bcc.n	800da92 <uxr_write_framed_msg+0xee>
 800daac:	d003      	beq.n	800dab6 <uxr_write_framed_msg+0x112>
 800daae:	2000      	movs	r0, #0
 800dab0:	b003      	add	sp, #12
 800dab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab6:	fa5f f18a 	uxtb.w	r1, sl
 800daba:	f04f 0300 	mov.w	r3, #0
 800dabe:	2901      	cmp	r1, #1
 800dac0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dac4:	f04f 0200 	mov.w	r2, #0
 800dac8:	f200 8090 	bhi.w	800dbec <uxr_write_framed_msg+0x248>
 800dacc:	1c51      	adds	r1, r2, #1
 800dace:	b2c9      	uxtb	r1, r1
 800dad0:	2929      	cmp	r1, #41	@ 0x29
 800dad2:	d8dc      	bhi.n	800da8e <uxr_write_framed_msg+0xea>
 800dad4:	18a5      	adds	r5, r4, r2
 800dad6:	4421      	add	r1, r4
 800dad8:	3202      	adds	r2, #2
 800dada:	f088 0820 	eor.w	r8, r8, #32
 800dade:	4648      	mov	r0, r9
 800dae0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800dae4:	b2d2      	uxtb	r2, r2
 800dae6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800daea:	f04f 0901 	mov.w	r9, #1
 800daee:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800daf2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f040 8085 	bne.w	800dc06 <uxr_write_framed_msg+0x262>
 800dafc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db00:	e7bc      	b.n	800da7c <uxr_write_framed_msg+0xd8>
 800db02:	4611      	mov	r1, r2
 800db04:	f04f 0c03 	mov.w	ip, #3
 800db08:	2204      	movs	r2, #4
 800db0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db0c:	4421      	add	r1, r4
 800db0e:	b2dd      	uxtb	r5, r3
 800db10:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800db14:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800db18:	44a4      	add	ip, r4
 800db1a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800db1e:	f080 0020 	eor.w	r0, r0, #32
 800db22:	2901      	cmp	r1, #1
 800db24:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800db28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800db2c:	f63f af66 	bhi.w	800d9fc <uxr_write_framed_msg+0x58>
 800db30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db32:	18a0      	adds	r0, r4, r2
 800db34:	f085 0520 	eor.w	r5, r5, #32
 800db38:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800db3c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800db40:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800db44:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800db48:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800db4c:	3202      	adds	r2, #2
 800db4e:	2801      	cmp	r0, #1
 800db50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800db54:	f63f af60 	bhi.w	800da18 <uxr_write_framed_msg+0x74>
 800db58:	1c50      	adds	r0, r2, #1
 800db5a:	18a5      	adds	r5, r4, r2
 800db5c:	fa54 f080 	uxtab	r0, r4, r0
 800db60:	3202      	adds	r2, #2
 800db62:	f081 0120 	eor.w	r1, r1, #32
 800db66:	b2d2      	uxtb	r2, r2
 800db68:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800db6c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800db70:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800db74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f47f af57 	bne.w	800da2c <uxr_write_framed_msg+0x88>
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	4698      	mov	r8, r3
 800db82:	e779      	b.n	800da78 <uxr_write_framed_msg+0xd4>
 800db84:	2500      	movs	r5, #0
 800db86:	e001      	b.n	800db8c <uxr_write_framed_msg+0x1e8>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d090      	beq.n	800daae <uxr_write_framed_msg+0x10a>
 800db8c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800db90:	1b52      	subs	r2, r2, r5
 800db92:	465b      	mov	r3, fp
 800db94:	4421      	add	r1, r4
 800db96:	4638      	mov	r0, r7
 800db98:	47b0      	blx	r6
 800db9a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800db9e:	4405      	add	r5, r0
 800dba0:	4295      	cmp	r5, r2
 800dba2:	d3f1      	bcc.n	800db88 <uxr_write_framed_msg+0x1e4>
 800dba4:	d183      	bne.n	800daae <uxr_write_framed_msg+0x10a>
 800dba6:	f04f 0300 	mov.w	r3, #0
 800dbaa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dbae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbb0:	4543      	cmp	r3, r8
 800dbb2:	d964      	bls.n	800dc7e <uxr_write_framed_msg+0x2da>
 800dbb4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800dbb8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800dbbc:	2901      	cmp	r1, #1
 800dbbe:	f04f 0200 	mov.w	r2, #0
 800dbc2:	f63f af3d 	bhi.w	800da40 <uxr_write_framed_msg+0x9c>
 800dbc6:	1c51      	adds	r1, r2, #1
 800dbc8:	b2c9      	uxtb	r1, r1
 800dbca:	2929      	cmp	r1, #41	@ 0x29
 800dbcc:	d8da      	bhi.n	800db84 <uxr_write_framed_msg+0x1e0>
 800dbce:	18a0      	adds	r0, r4, r2
 800dbd0:	4421      	add	r1, r4
 800dbd2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800dbd6:	3202      	adds	r2, #2
 800dbd8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800dbdc:	b2d2      	uxtb	r2, r2
 800dbde:	f083 0020 	eor.w	r0, r3, #32
 800dbe2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800dbe6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dbea:	e733      	b.n	800da54 <uxr_write_framed_msg+0xb0>
 800dbec:	18a1      	adds	r1, r4, r2
 800dbee:	3201      	adds	r2, #1
 800dbf0:	4648      	mov	r0, r9
 800dbf2:	b2d2      	uxtb	r2, r2
 800dbf4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800dbf8:	f04f 0901 	mov.w	r9, #1
 800dbfc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dc00:	2800      	cmp	r0, #0
 800dc02:	f43f af7b 	beq.w	800dafc <uxr_write_framed_msg+0x158>
 800dc06:	2500      	movs	r5, #0
 800dc08:	e002      	b.n	800dc10 <uxr_write_framed_msg+0x26c>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f43f af4f 	beq.w	800daae <uxr_write_framed_msg+0x10a>
 800dc10:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800dc14:	1b52      	subs	r2, r2, r5
 800dc16:	465b      	mov	r3, fp
 800dc18:	4421      	add	r1, r4
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	47b0      	blx	r6
 800dc1e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dc22:	4405      	add	r5, r0
 800dc24:	4295      	cmp	r5, r2
 800dc26:	d3f0      	bcc.n	800dc0a <uxr_write_framed_msg+0x266>
 800dc28:	f47f af41 	bne.w	800daae <uxr_write_framed_msg+0x10a>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dc32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc34:	b298      	uxth	r0, r3
 800dc36:	b003      	add	sp, #12
 800dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc3c:	217d      	movs	r1, #125	@ 0x7d
 800dc3e:	f082 0220 	eor.w	r2, r2, #32
 800dc42:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800dc46:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800dc4a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800dc4e:	2901      	cmp	r1, #1
 800dc50:	f04f 0203 	mov.w	r2, #3
 800dc54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dc58:	d804      	bhi.n	800dc64 <uxr_write_framed_msg+0x2c0>
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	f04f 0c04 	mov.w	ip, #4
 800dc60:	2205      	movs	r2, #5
 800dc62:	e752      	b.n	800db0a <uxr_write_framed_msg+0x166>
 800dc64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc66:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800dc6a:	b2dd      	uxtb	r5, r3
 800dc6c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800dc70:	2204      	movs	r2, #4
 800dc72:	2901      	cmp	r1, #1
 800dc74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dc78:	f63f aec0 	bhi.w	800d9fc <uxr_write_framed_msg+0x58>
 800dc7c:	e758      	b.n	800db30 <uxr_write_framed_msg+0x18c>
 800dc7e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800dc82:	fa5f f889 	uxtb.w	r8, r9
 800dc86:	9301      	str	r3, [sp, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	e6f5      	b.n	800da78 <uxr_write_framed_msg+0xd4>
 800dc8c:	08016e44 	.word	0x08016e44

0800dc90 <uxr_framing_read_transport>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	4604      	mov	r4, r0
 800dc96:	b083      	sub	sp, #12
 800dc98:	461f      	mov	r7, r3
 800dc9a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800dc9e:	4689      	mov	r9, r1
 800dca0:	4692      	mov	sl, r2
 800dca2:	f000 fc89 	bl	800e5b8 <uxr_millis>
 800dca6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dcaa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800dcae:	42b3      	cmp	r3, r6
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	d061      	beq.n	800dd78 <uxr_framing_read_transport+0xe8>
 800dcb4:	d81c      	bhi.n	800dcf0 <uxr_framing_read_transport+0x60>
 800dcb6:	1e75      	subs	r5, r6, #1
 800dcb8:	1aed      	subs	r5, r5, r3
 800dcba:	b2ed      	uxtb	r5, r5
 800dcbc:	2600      	movs	r6, #0
 800dcbe:	455d      	cmp	r5, fp
 800dcc0:	d81f      	bhi.n	800dd02 <uxr_framing_read_transport+0x72>
 800dcc2:	19ab      	adds	r3, r5, r6
 800dcc4:	455b      	cmp	r3, fp
 800dcc6:	bf84      	itt	hi
 800dcc8:	ebab 0605 	subhi.w	r6, fp, r5
 800dccc:	b2f6      	uxtbhi	r6, r6
 800dcce:	b9ed      	cbnz	r5, 800dd0c <uxr_framing_read_transport+0x7c>
 800dcd0:	f04f 0b00 	mov.w	fp, #0
 800dcd4:	f000 fc70 	bl	800e5b8 <uxr_millis>
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	eba0 0808 	sub.w	r8, r0, r8
 800dcde:	eba3 0308 	sub.w	r3, r3, r8
 800dce2:	4658      	mov	r0, fp
 800dce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dce8:	603b      	str	r3, [r7, #0]
 800dcea:	b003      	add	sp, #12
 800dcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	2e00      	cmp	r6, #0
 800dcf2:	d049      	beq.n	800dd88 <uxr_framing_read_transport+0xf8>
 800dcf4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800dcf8:	b2ed      	uxtb	r5, r5
 800dcfa:	3e01      	subs	r6, #1
 800dcfc:	455d      	cmp	r5, fp
 800dcfe:	b2f6      	uxtb	r6, r6
 800dd00:	d9df      	bls.n	800dcc2 <uxr_framing_read_transport+0x32>
 800dd02:	fa5f f58b 	uxtb.w	r5, fp
 800dd06:	2600      	movs	r6, #0
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	d0e1      	beq.n	800dcd0 <uxr_framing_read_transport+0x40>
 800dd0c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800dd10:	3102      	adds	r1, #2
 800dd12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	4421      	add	r1, r4
 800dd1a:	462a      	mov	r2, r5
 800dd1c:	4650      	mov	r0, sl
 800dd1e:	47c8      	blx	r9
 800dd20:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dd24:	4a1a      	ldr	r2, [pc, #104]	@ (800dd90 <uxr_framing_read_transport+0x100>)
 800dd26:	4403      	add	r3, r0
 800dd28:	0859      	lsrs	r1, r3, #1
 800dd2a:	fba2 2101 	umull	r2, r1, r2, r1
 800dd2e:	0889      	lsrs	r1, r1, #2
 800dd30:	222a      	movs	r2, #42	@ 0x2a
 800dd32:	fb02 3111 	mls	r1, r2, r1, r3
 800dd36:	4683      	mov	fp, r0
 800dd38:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d0c7      	beq.n	800dcd0 <uxr_framing_read_transport+0x40>
 800dd40:	42a8      	cmp	r0, r5
 800dd42:	d1c7      	bne.n	800dcd4 <uxr_framing_read_transport+0x44>
 800dd44:	2e00      	cmp	r6, #0
 800dd46:	d0c5      	beq.n	800dcd4 <uxr_framing_read_transport+0x44>
 800dd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	3102      	adds	r1, #2
 800dd4e:	4632      	mov	r2, r6
 800dd50:	4421      	add	r1, r4
 800dd52:	2300      	movs	r3, #0
 800dd54:	4650      	mov	r0, sl
 800dd56:	47c8      	blx	r9
 800dd58:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800dd5c:	4a0c      	ldr	r2, [pc, #48]	@ (800dd90 <uxr_framing_read_transport+0x100>)
 800dd5e:	180b      	adds	r3, r1, r0
 800dd60:	0859      	lsrs	r1, r3, #1
 800dd62:	fba2 1201 	umull	r1, r2, r2, r1
 800dd66:	0892      	lsrs	r2, r2, #2
 800dd68:	212a      	movs	r1, #42	@ 0x2a
 800dd6a:	fb01 3312 	mls	r3, r1, r2, r3
 800dd6e:	eb00 0b05 	add.w	fp, r0, r5
 800dd72:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800dd76:	e7ad      	b.n	800dcd4 <uxr_framing_read_transport+0x44>
 800dd78:	2600      	movs	r6, #0
 800dd7a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800dd7e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800dd80:	d9bf      	bls.n	800dd02 <uxr_framing_read_transport+0x72>
 800dd82:	2102      	movs	r1, #2
 800dd84:	2529      	movs	r5, #41	@ 0x29
 800dd86:	e7c4      	b.n	800dd12 <uxr_framing_read_transport+0x82>
 800dd88:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800dd8c:	b2ed      	uxtb	r5, r5
 800dd8e:	e796      	b.n	800dcbe <uxr_framing_read_transport+0x2e>
 800dd90:	30c30c31 	.word	0x30c30c31

0800dd94 <uxr_read_framed_msg>:
 800dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd98:	461e      	mov	r6, r3
 800dd9a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800dd9e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800dda2:	429d      	cmp	r5, r3
 800dda4:	b083      	sub	sp, #12
 800dda6:	4604      	mov	r4, r0
 800dda8:	4688      	mov	r8, r1
 800ddaa:	4691      	mov	r9, r2
 800ddac:	f000 8188 	beq.w	800e0c0 <uxr_read_framed_msg+0x32c>
 800ddb0:	7823      	ldrb	r3, [r4, #0]
 800ddb2:	4dc1      	ldr	r5, [pc, #772]	@ (800e0b8 <uxr_read_framed_msg+0x324>)
 800ddb4:	4fc1      	ldr	r7, [pc, #772]	@ (800e0bc <uxr_read_framed_msg+0x328>)
 800ddb6:	2b07      	cmp	r3, #7
 800ddb8:	d8fd      	bhi.n	800ddb6 <uxr_read_framed_msg+0x22>
 800ddba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ddbe:	0115      	.short	0x0115
 800ddc0:	00d600f6 	.word	0x00d600f6
 800ddc4:	009000b9 	.word	0x009000b9
 800ddc8:	0030004d 	.word	0x0030004d
 800ddcc:	0008      	.short	0x0008
 800ddce:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ddd2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ddd6:	4299      	cmp	r1, r3
 800ddd8:	f000 814a 	beq.w	800e070 <uxr_read_framed_msg+0x2dc>
 800dddc:	18e2      	adds	r2, r4, r3
 800ddde:	7892      	ldrb	r2, [r2, #2]
 800dde0:	2a7d      	cmp	r2, #125	@ 0x7d
 800dde2:	f000 8199 	beq.w	800e118 <uxr_read_framed_msg+0x384>
 800dde6:	3301      	adds	r3, #1
 800dde8:	0858      	lsrs	r0, r3, #1
 800ddea:	fba5 1000 	umull	r1, r0, r5, r0
 800ddee:	0880      	lsrs	r0, r0, #2
 800ddf0:	212a      	movs	r1, #42	@ 0x2a
 800ddf2:	fb01 3310 	mls	r3, r1, r0, r3
 800ddf6:	2a7e      	cmp	r2, #126	@ 0x7e
 800ddf8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ddfc:	f000 8252 	beq.w	800e2a4 <uxr_read_framed_msg+0x510>
 800de00:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800de02:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800de04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800de08:	b29b      	uxth	r3, r3
 800de0a:	2200      	movs	r2, #0
 800de0c:	4299      	cmp	r1, r3
 800de0e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800de10:	7022      	strb	r2, [r4, #0]
 800de12:	f000 8179 	beq.w	800e108 <uxr_read_framed_msg+0x374>
 800de16:	2000      	movs	r0, #0
 800de18:	b003      	add	sp, #12
 800de1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800de22:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800de26:	4299      	cmp	r1, r3
 800de28:	f000 8131 	beq.w	800e08e <uxr_read_framed_msg+0x2fa>
 800de2c:	18e2      	adds	r2, r4, r3
 800de2e:	7890      	ldrb	r0, [r2, #2]
 800de30:	287d      	cmp	r0, #125	@ 0x7d
 800de32:	f000 8190 	beq.w	800e156 <uxr_read_framed_msg+0x3c2>
 800de36:	3301      	adds	r3, #1
 800de38:	085a      	lsrs	r2, r3, #1
 800de3a:	fba5 1202 	umull	r1, r2, r5, r2
 800de3e:	0892      	lsrs	r2, r2, #2
 800de40:	212a      	movs	r1, #42	@ 0x2a
 800de42:	fb01 3312 	mls	r3, r1, r2, r3
 800de46:	287e      	cmp	r0, #126	@ 0x7e
 800de48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800de4c:	f000 821a 	beq.w	800e284 <uxr_read_framed_msg+0x4f0>
 800de50:	2307      	movs	r3, #7
 800de52:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800de54:	7023      	strb	r3, [r4, #0]
 800de56:	e7ae      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800de58:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800de5a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800de5e:	459e      	cmp	lr, r3
 800de60:	d938      	bls.n	800ded4 <uxr_read_framed_msg+0x140>
 800de62:	ee07 8a90 	vmov	s15, r8
 800de66:	212a      	movs	r1, #42	@ 0x2a
 800de68:	e020      	b.n	800deac <uxr_read_framed_msg+0x118>
 800de6a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800de6e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800de72:	f000 80d4 	beq.w	800e01e <uxr_read_framed_msg+0x28a>
 800de76:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800de7a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800de7e:	f000 8219 	beq.w	800e2b4 <uxr_read_framed_msg+0x520>
 800de82:	f806 c003 	strb.w	ip, [r6, r3]
 800de86:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800de8a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800de8c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800de90:	ea8a 000c 	eor.w	r0, sl, ip
 800de94:	b2c0      	uxtb	r0, r0
 800de96:	3301      	adds	r3, #1
 800de98:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800dea2:	4573      	cmp	r3, lr
 800dea4:	8663      	strh	r3, [r4, #50]	@ 0x32
 800dea6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800dea8:	f080 8120 	bcs.w	800e0ec <uxr_read_framed_msg+0x358>
 800deac:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800deb0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800deb4:	f100 0c01 	add.w	ip, r0, #1
 800deb8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800debc:	fba5 8202 	umull	r8, r2, r5, r2
 800dec0:	0892      	lsrs	r2, r2, #2
 800dec2:	4582      	cmp	sl, r0
 800dec4:	eb04 0b00 	add.w	fp, r4, r0
 800dec8:	fb01 c212 	mls	r2, r1, r2, ip
 800decc:	d1cd      	bne.n	800de6a <uxr_read_framed_msg+0xd6>
 800dece:	ee17 8a90 	vmov	r8, s15
 800ded2:	459e      	cmp	lr, r3
 800ded4:	f040 8111 	bne.w	800e0fa <uxr_read_framed_msg+0x366>
 800ded8:	2306      	movs	r3, #6
 800deda:	7023      	strb	r3, [r4, #0]
 800dedc:	e76b      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800dede:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800dee2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800dee6:	4298      	cmp	r0, r3
 800dee8:	f000 80c2 	beq.w	800e070 <uxr_read_framed_msg+0x2dc>
 800deec:	18e2      	adds	r2, r4, r3
 800deee:	7891      	ldrb	r1, [r2, #2]
 800def0:	297d      	cmp	r1, #125	@ 0x7d
 800def2:	f000 814c 	beq.w	800e18e <uxr_read_framed_msg+0x3fa>
 800def6:	3301      	adds	r3, #1
 800def8:	085a      	lsrs	r2, r3, #1
 800defa:	fba5 0202 	umull	r0, r2, r5, r2
 800defe:	0892      	lsrs	r2, r2, #2
 800df00:	202a      	movs	r0, #42	@ 0x2a
 800df02:	fb00 3312 	mls	r3, r0, r2, r3
 800df06:	297e      	cmp	r1, #126	@ 0x7e
 800df08:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800df0c:	f000 81ca 	beq.w	800e2a4 <uxr_read_framed_msg+0x510>
 800df10:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800df12:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800df16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df18:	b29b      	uxth	r3, r3
 800df1a:	2000      	movs	r0, #0
 800df1c:	428b      	cmp	r3, r1
 800df1e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800df20:	8660      	strh	r0, [r4, #50]	@ 0x32
 800df22:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800df24:	f240 80df 	bls.w	800e0e6 <uxr_read_framed_msg+0x352>
 800df28:	7020      	strb	r0, [r4, #0]
 800df2a:	b003      	add	sp, #12
 800df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df30:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800df34:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800df38:	4299      	cmp	r1, r3
 800df3a:	f000 80a8 	beq.w	800e08e <uxr_read_framed_msg+0x2fa>
 800df3e:	18e2      	adds	r2, r4, r3
 800df40:	7890      	ldrb	r0, [r2, #2]
 800df42:	287d      	cmp	r0, #125	@ 0x7d
 800df44:	f000 8164 	beq.w	800e210 <uxr_read_framed_msg+0x47c>
 800df48:	3301      	adds	r3, #1
 800df4a:	085a      	lsrs	r2, r3, #1
 800df4c:	fba5 1202 	umull	r1, r2, r5, r2
 800df50:	0892      	lsrs	r2, r2, #2
 800df52:	212a      	movs	r1, #42	@ 0x2a
 800df54:	fb01 3312 	mls	r3, r1, r2, r3
 800df58:	287e      	cmp	r0, #126	@ 0x7e
 800df5a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800df5e:	f000 8191 	beq.w	800e284 <uxr_read_framed_msg+0x4f0>
 800df62:	2304      	movs	r3, #4
 800df64:	8620      	strh	r0, [r4, #48]	@ 0x30
 800df66:	7023      	strb	r3, [r4, #0]
 800df68:	e725      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800df6a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800df6e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800df72:	4290      	cmp	r0, r2
 800df74:	f000 80b3 	beq.w	800e0de <uxr_read_framed_msg+0x34a>
 800df78:	18a3      	adds	r3, r4, r2
 800df7a:	7899      	ldrb	r1, [r3, #2]
 800df7c:	297d      	cmp	r1, #125	@ 0x7d
 800df7e:	f000 8164 	beq.w	800e24a <uxr_read_framed_msg+0x4b6>
 800df82:	3201      	adds	r2, #1
 800df84:	0850      	lsrs	r0, r2, #1
 800df86:	fba5 3000 	umull	r3, r0, r5, r0
 800df8a:	0880      	lsrs	r0, r0, #2
 800df8c:	232a      	movs	r3, #42	@ 0x2a
 800df8e:	fb03 2210 	mls	r2, r3, r0, r2
 800df92:	297e      	cmp	r1, #126	@ 0x7e
 800df94:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800df98:	f000 8188 	beq.w	800e2ac <uxr_read_framed_msg+0x518>
 800df9c:	7863      	ldrb	r3, [r4, #1]
 800df9e:	428b      	cmp	r3, r1
 800dfa0:	bf0c      	ite	eq
 800dfa2:	2303      	moveq	r3, #3
 800dfa4:	2300      	movne	r3, #0
 800dfa6:	7023      	strb	r3, [r4, #0]
 800dfa8:	e705      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800dfaa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800dfae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4299      	cmp	r1, r3
 800dfb6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800dfba:	d06c      	beq.n	800e096 <uxr_read_framed_msg+0x302>
 800dfbc:	18e2      	adds	r2, r4, r3
 800dfbe:	7890      	ldrb	r0, [r2, #2]
 800dfc0:	287d      	cmp	r0, #125	@ 0x7d
 800dfc2:	f000 8101 	beq.w	800e1c8 <uxr_read_framed_msg+0x434>
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	085a      	lsrs	r2, r3, #1
 800dfca:	fba5 1202 	umull	r1, r2, r5, r2
 800dfce:	0892      	lsrs	r2, r2, #2
 800dfd0:	212a      	movs	r1, #42	@ 0x2a
 800dfd2:	fb01 3312 	mls	r3, r1, r2, r3
 800dfd6:	287e      	cmp	r0, #126	@ 0x7e
 800dfd8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800dfdc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800dfe0:	d059      	beq.n	800e096 <uxr_read_framed_msg+0x302>
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	7023      	strb	r3, [r4, #0]
 800dfe6:	e6e6      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800dfe8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800dfec:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dff0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800dff4:	1c51      	adds	r1, r2, #1
 800dff6:	084b      	lsrs	r3, r1, #1
 800dff8:	fba5 c303 	umull	ip, r3, r5, r3
 800dffc:	089b      	lsrs	r3, r3, #2
 800dffe:	fb0e 1313 	mls	r3, lr, r3, r1
 800e002:	4592      	cmp	sl, r2
 800e004:	eb04 0002 	add.w	r0, r4, r2
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	f43f af04 	beq.w	800de16 <uxr_read_framed_msg+0x82>
 800e00e:	7883      	ldrb	r3, [r0, #2]
 800e010:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e014:	2b7e      	cmp	r3, #126	@ 0x7e
 800e016:	d1ed      	bne.n	800dff4 <uxr_read_framed_msg+0x260>
 800e018:	2301      	movs	r3, #1
 800e01a:	7023      	strb	r3, [r4, #0]
 800e01c:	e6cb      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800e01e:	f100 0c01 	add.w	ip, r0, #1
 800e022:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e026:	fba5 8202 	umull	r8, r2, r5, r2
 800e02a:	0892      	lsrs	r2, r2, #2
 800e02c:	fb01 c212 	mls	r2, r1, r2, ip
 800e030:	eb04 0c02 	add.w	ip, r4, r2
 800e034:	b2d2      	uxtb	r2, r2
 800e036:	4592      	cmp	sl, r2
 800e038:	f100 0002 	add.w	r0, r0, #2
 800e03c:	f43f af47 	beq.w	800dece <uxr_read_framed_msg+0x13a>
 800e040:	0842      	lsrs	r2, r0, #1
 800e042:	f89c a002 	ldrb.w	sl, [ip, #2]
 800e046:	fba5 8202 	umull	r8, r2, r5, r2
 800e04a:	0892      	lsrs	r2, r2, #2
 800e04c:	fb01 0012 	mls	r0, r1, r2, r0
 800e050:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800e054:	f08a 0c20 	eor.w	ip, sl, #32
 800e058:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800e05c:	f47f af11 	bne.w	800de82 <uxr_read_framed_msg+0xee>
 800e060:	459e      	cmp	lr, r3
 800e062:	ee17 8a90 	vmov	r8, s15
 800e066:	f43f af37 	beq.w	800ded8 <uxr_read_framed_msg+0x144>
 800e06a:	2301      	movs	r3, #1
 800e06c:	7023      	strb	r3, [r4, #0]
 800e06e:	e6a2      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800e070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	2301      	movs	r3, #1
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e07a:	464a      	mov	r2, r9
 800e07c:	4641      	mov	r1, r8
 800e07e:	4620      	mov	r0, r4
 800e080:	f7ff fe06 	bl	800dc90 <uxr_framing_read_transport>
 800e084:	2800      	cmp	r0, #0
 800e086:	f43f aec6 	beq.w	800de16 <uxr_read_framed_msg+0x82>
 800e08a:	7823      	ldrb	r3, [r4, #0]
 800e08c:	e693      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800e08e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	2302      	movs	r3, #2
 800e094:	e7ef      	b.n	800e076 <uxr_read_framed_msg+0x2e2>
 800e096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	2304      	movs	r3, #4
 800e09c:	9301      	str	r3, [sp, #4]
 800e09e:	464a      	mov	r2, r9
 800e0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0a2:	4641      	mov	r1, r8
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f7ff fdf3 	bl	800dc90 <uxr_framing_read_transport>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d1ed      	bne.n	800e08a <uxr_read_framed_msg+0x2f6>
 800e0ae:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e0b2:	2b7e      	cmp	r3, #126	@ 0x7e
 800e0b4:	d0e9      	beq.n	800e08a <uxr_read_framed_msg+0x2f6>
 800e0b6:	e6ae      	b.n	800de16 <uxr_read_framed_msg+0x82>
 800e0b8:	30c30c31 	.word	0x30c30c31
 800e0bc:	08016e44 	.word	0x08016e44
 800e0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	2305      	movs	r3, #5
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0ca:	f7ff fde1 	bl	800dc90 <uxr_framing_read_transport>
 800e0ce:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e0d2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	f43f ae9d 	beq.w	800de16 <uxr_read_framed_msg+0x82>
 800e0dc:	e668      	b.n	800ddb0 <uxr_read_framed_msg+0x1c>
 800e0de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e7c7      	b.n	800e076 <uxr_read_framed_msg+0x2e2>
 800e0e6:	2305      	movs	r3, #5
 800e0e8:	7023      	strb	r3, [r4, #0]
 800e0ea:	e664      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800e0ec:	ee17 8a90 	vmov	r8, s15
 800e0f0:	f43f aef2 	beq.w	800ded8 <uxr_read_framed_msg+0x144>
 800e0f4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e0f8:	d08e      	beq.n	800e018 <uxr_read_framed_msg+0x284>
 800e0fa:	ebae 0303 	sub.w	r3, lr, r3
 800e0fe:	3302      	adds	r3, #2
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	e7b7      	b.n	800e078 <uxr_read_framed_msg+0x2e4>
 800e108:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e10a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e10e:	7013      	strb	r3, [r2, #0]
 800e110:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800e112:	b003      	add	sp, #12
 800e114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e118:	f103 0c01 	add.w	ip, r3, #1
 800e11c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e120:	fba5 0202 	umull	r0, r2, r5, r2
 800e124:	0892      	lsrs	r2, r2, #2
 800e126:	202a      	movs	r0, #42	@ 0x2a
 800e128:	fb00 c212 	mls	r2, r0, r2, ip
 800e12c:	fa5f fc82 	uxtb.w	ip, r2
 800e130:	4561      	cmp	r1, ip
 800e132:	d09d      	beq.n	800e070 <uxr_read_framed_msg+0x2dc>
 800e134:	3302      	adds	r3, #2
 800e136:	4422      	add	r2, r4
 800e138:	0859      	lsrs	r1, r3, #1
 800e13a:	7892      	ldrb	r2, [r2, #2]
 800e13c:	fba5 c101 	umull	ip, r1, r5, r1
 800e140:	0889      	lsrs	r1, r1, #2
 800e142:	fb00 3311 	mls	r3, r0, r1, r3
 800e146:	2a7e      	cmp	r2, #126	@ 0x7e
 800e148:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e14c:	f000 80aa 	beq.w	800e2a4 <uxr_read_framed_msg+0x510>
 800e150:	f082 0220 	eor.w	r2, r2, #32
 800e154:	e654      	b.n	800de00 <uxr_read_framed_msg+0x6c>
 800e156:	1c58      	adds	r0, r3, #1
 800e158:	0842      	lsrs	r2, r0, #1
 800e15a:	fba5 c202 	umull	ip, r2, r5, r2
 800e15e:	0892      	lsrs	r2, r2, #2
 800e160:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e164:	fb0c 0212 	mls	r2, ip, r2, r0
 800e168:	b2d0      	uxtb	r0, r2
 800e16a:	4281      	cmp	r1, r0
 800e16c:	d08f      	beq.n	800e08e <uxr_read_framed_msg+0x2fa>
 800e16e:	4422      	add	r2, r4
 800e170:	3302      	adds	r3, #2
 800e172:	7890      	ldrb	r0, [r2, #2]
 800e174:	085a      	lsrs	r2, r3, #1
 800e176:	fba5 1202 	umull	r1, r2, r5, r2
 800e17a:	0892      	lsrs	r2, r2, #2
 800e17c:	fb0c 3312 	mls	r3, ip, r2, r3
 800e180:	287e      	cmp	r0, #126	@ 0x7e
 800e182:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e186:	d07d      	beq.n	800e284 <uxr_read_framed_msg+0x4f0>
 800e188:	f080 0020 	eor.w	r0, r0, #32
 800e18c:	e660      	b.n	800de50 <uxr_read_framed_msg+0xbc>
 800e18e:	1c59      	adds	r1, r3, #1
 800e190:	084a      	lsrs	r2, r1, #1
 800e192:	fba5 c202 	umull	ip, r2, r5, r2
 800e196:	0892      	lsrs	r2, r2, #2
 800e198:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e19c:	fb0c 1212 	mls	r2, ip, r2, r1
 800e1a0:	b2d1      	uxtb	r1, r2
 800e1a2:	4288      	cmp	r0, r1
 800e1a4:	f43f af64 	beq.w	800e070 <uxr_read_framed_msg+0x2dc>
 800e1a8:	4422      	add	r2, r4
 800e1aa:	3302      	adds	r3, #2
 800e1ac:	7891      	ldrb	r1, [r2, #2]
 800e1ae:	085a      	lsrs	r2, r3, #1
 800e1b0:	fba5 0202 	umull	r0, r2, r5, r2
 800e1b4:	0892      	lsrs	r2, r2, #2
 800e1b6:	fb0c 3312 	mls	r3, ip, r2, r3
 800e1ba:	297e      	cmp	r1, #126	@ 0x7e
 800e1bc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e1c0:	d070      	beq.n	800e2a4 <uxr_read_framed_msg+0x510>
 800e1c2:	f081 0120 	eor.w	r1, r1, #32
 800e1c6:	e6a3      	b.n	800df10 <uxr_read_framed_msg+0x17c>
 800e1c8:	f103 0c01 	add.w	ip, r3, #1
 800e1cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e1d0:	fba5 0202 	umull	r0, r2, r5, r2
 800e1d4:	0892      	lsrs	r2, r2, #2
 800e1d6:	202a      	movs	r0, #42	@ 0x2a
 800e1d8:	fb00 c212 	mls	r2, r0, r2, ip
 800e1dc:	fa5f fc82 	uxtb.w	ip, r2
 800e1e0:	4561      	cmp	r1, ip
 800e1e2:	f43f af58 	beq.w	800e096 <uxr_read_framed_msg+0x302>
 800e1e6:	4422      	add	r2, r4
 800e1e8:	3302      	adds	r3, #2
 800e1ea:	7891      	ldrb	r1, [r2, #2]
 800e1ec:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800e1f0:	085a      	lsrs	r2, r3, #1
 800e1f2:	fba5 c202 	umull	ip, r2, r5, r2
 800e1f6:	0892      	lsrs	r2, r2, #2
 800e1f8:	fb00 3312 	mls	r3, r0, r2, r3
 800e1fc:	297e      	cmp	r1, #126	@ 0x7e
 800e1fe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e202:	f43f af48 	beq.w	800e096 <uxr_read_framed_msg+0x302>
 800e206:	f081 0120 	eor.w	r1, r1, #32
 800e20a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800e20e:	e6e8      	b.n	800dfe2 <uxr_read_framed_msg+0x24e>
 800e210:	1c58      	adds	r0, r3, #1
 800e212:	0842      	lsrs	r2, r0, #1
 800e214:	fba5 c202 	umull	ip, r2, r5, r2
 800e218:	0892      	lsrs	r2, r2, #2
 800e21a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e21e:	fb0c 0212 	mls	r2, ip, r2, r0
 800e222:	b2d0      	uxtb	r0, r2
 800e224:	4281      	cmp	r1, r0
 800e226:	f43f af32 	beq.w	800e08e <uxr_read_framed_msg+0x2fa>
 800e22a:	4422      	add	r2, r4
 800e22c:	3302      	adds	r3, #2
 800e22e:	7890      	ldrb	r0, [r2, #2]
 800e230:	085a      	lsrs	r2, r3, #1
 800e232:	fba5 1202 	umull	r1, r2, r5, r2
 800e236:	0892      	lsrs	r2, r2, #2
 800e238:	fb0c 3312 	mls	r3, ip, r2, r3
 800e23c:	287e      	cmp	r0, #126	@ 0x7e
 800e23e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e242:	d01f      	beq.n	800e284 <uxr_read_framed_msg+0x4f0>
 800e244:	f080 0020 	eor.w	r0, r0, #32
 800e248:	e68b      	b.n	800df62 <uxr_read_framed_msg+0x1ce>
 800e24a:	1c51      	adds	r1, r2, #1
 800e24c:	084b      	lsrs	r3, r1, #1
 800e24e:	fba5 c303 	umull	ip, r3, r5, r3
 800e252:	089b      	lsrs	r3, r3, #2
 800e254:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e258:	fb0c 1313 	mls	r3, ip, r3, r1
 800e25c:	b2d9      	uxtb	r1, r3
 800e25e:	4288      	cmp	r0, r1
 800e260:	f43f af3d 	beq.w	800e0de <uxr_read_framed_msg+0x34a>
 800e264:	3202      	adds	r2, #2
 800e266:	4423      	add	r3, r4
 800e268:	0850      	lsrs	r0, r2, #1
 800e26a:	789b      	ldrb	r3, [r3, #2]
 800e26c:	fba5 1000 	umull	r1, r0, r5, r0
 800e270:	0880      	lsrs	r0, r0, #2
 800e272:	fb0c 2210 	mls	r2, ip, r0, r2
 800e276:	2b7e      	cmp	r3, #126	@ 0x7e
 800e278:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e27c:	d016      	beq.n	800e2ac <uxr_read_framed_msg+0x518>
 800e27e:	f083 0120 	eor.w	r1, r3, #32
 800e282:	e68b      	b.n	800df9c <uxr_read_framed_msg+0x208>
 800e284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	2302      	movs	r3, #2
 800e28a:	9301      	str	r3, [sp, #4]
 800e28c:	464a      	mov	r2, r9
 800e28e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e290:	4641      	mov	r1, r8
 800e292:	4620      	mov	r0, r4
 800e294:	f7ff fcfc 	bl	800dc90 <uxr_framing_read_transport>
 800e298:	2800      	cmp	r0, #0
 800e29a:	f47f aef6 	bne.w	800e08a <uxr_read_framed_msg+0x2f6>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	7023      	strb	r3, [r4, #0]
 800e2a2:	e588      	b.n	800ddb6 <uxr_read_framed_msg+0x22>
 800e2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e7ee      	b.n	800e28a <uxr_read_framed_msg+0x4f6>
 800e2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	2303      	movs	r3, #3
 800e2b2:	e7ea      	b.n	800e28a <uxr_read_framed_msg+0x4f6>
 800e2b4:	ee17 8a90 	vmov	r8, s15
 800e2b8:	e6ae      	b.n	800e018 <uxr_read_framed_msg+0x284>
 800e2ba:	bf00      	nop

0800e2bc <uxr_stream_id>:
 800e2bc:	2901      	cmp	r1, #1
 800e2be:	b082      	sub	sp, #8
 800e2c0:	d01d      	beq.n	800e2fe <uxr_stream_id+0x42>
 800e2c2:	2902      	cmp	r1, #2
 800e2c4:	f04f 0c00 	mov.w	ip, #0
 800e2c8:	d01e      	beq.n	800e308 <uxr_stream_id+0x4c>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f36c 0307 	bfi	r3, ip, #0, #8
 800e2d0:	f360 230f 	bfi	r3, r0, #8, #8
 800e2d4:	f361 4317 	bfi	r3, r1, #16, #8
 800e2d8:	f362 631f 	bfi	r3, r2, #24, #8
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	2000      	movs	r0, #0
 800e2e0:	f362 0007 	bfi	r0, r2, #0, #8
 800e2e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e2e8:	f362 200f 	bfi	r0, r2, #8, #8
 800e2ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e2f0:	f362 4017 	bfi	r0, r2, #16, #8
 800e2f4:	0e1b      	lsrs	r3, r3, #24
 800e2f6:	f363 601f 	bfi	r0, r3, #24, #8
 800e2fa:	b002      	add	sp, #8
 800e2fc:	4770      	bx	lr
 800e2fe:	f100 0c01 	add.w	ip, r0, #1
 800e302:	fa5f fc8c 	uxtb.w	ip, ip
 800e306:	e7e0      	b.n	800e2ca <uxr_stream_id+0xe>
 800e308:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e30c:	e7dd      	b.n	800e2ca <uxr_stream_id+0xe>
 800e30e:	bf00      	nop

0800e310 <uxr_stream_id_from_raw>:
 800e310:	b082      	sub	sp, #8
 800e312:	b130      	cbz	r0, 800e322 <uxr_stream_id_from_raw+0x12>
 800e314:	0603      	lsls	r3, r0, #24
 800e316:	d420      	bmi.n	800e35a <uxr_stream_id_from_raw+0x4a>
 800e318:	1e42      	subs	r2, r0, #1
 800e31a:	b2d2      	uxtb	r2, r2
 800e31c:	f04f 0c01 	mov.w	ip, #1
 800e320:	e001      	b.n	800e326 <uxr_stream_id_from_raw+0x16>
 800e322:	4684      	mov	ip, r0
 800e324:	4602      	mov	r2, r0
 800e326:	2300      	movs	r3, #0
 800e328:	f360 0307 	bfi	r3, r0, #0, #8
 800e32c:	f362 230f 	bfi	r3, r2, #8, #8
 800e330:	f36c 4317 	bfi	r3, ip, #16, #8
 800e334:	f361 631f 	bfi	r3, r1, #24, #8
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	2000      	movs	r0, #0
 800e33c:	f362 0007 	bfi	r0, r2, #0, #8
 800e340:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e344:	f362 200f 	bfi	r0, r2, #8, #8
 800e348:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e34c:	f362 4017 	bfi	r0, r2, #16, #8
 800e350:	0e1b      	lsrs	r3, r3, #24
 800e352:	f363 601f 	bfi	r0, r3, #24, #8
 800e356:	b002      	add	sp, #8
 800e358:	4770      	bx	lr
 800e35a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e35e:	f04f 0c02 	mov.w	ip, #2
 800e362:	e7e0      	b.n	800e326 <uxr_stream_id_from_raw+0x16>

0800e364 <uxr_init_stream_storage>:
 800e364:	2300      	movs	r3, #0
 800e366:	7403      	strb	r3, [r0, #16]
 800e368:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e36c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e370:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop

0800e378 <uxr_reset_stream_storage>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	7c03      	ldrb	r3, [r0, #16]
 800e37c:	4604      	mov	r4, r0
 800e37e:	b153      	cbz	r3, 800e396 <uxr_reset_stream_storage+0x1e>
 800e380:	4606      	mov	r6, r0
 800e382:	2500      	movs	r5, #0
 800e384:	4630      	mov	r0, r6
 800e386:	f005 fe97 	bl	80140b8 <uxr_reset_output_best_effort_stream>
 800e38a:	7c23      	ldrb	r3, [r4, #16]
 800e38c:	3501      	adds	r5, #1
 800e38e:	42ab      	cmp	r3, r5
 800e390:	f106 0610 	add.w	r6, r6, #16
 800e394:	d8f6      	bhi.n	800e384 <uxr_reset_stream_storage+0xc>
 800e396:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e39a:	b163      	cbz	r3, 800e3b6 <uxr_reset_stream_storage+0x3e>
 800e39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3a0:	2500      	movs	r5, #0
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f005 fc8a 	bl	8013cbc <uxr_reset_input_best_effort_stream>
 800e3a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e3ac:	3501      	adds	r5, #1
 800e3ae:	42ab      	cmp	r3, r5
 800e3b0:	f106 0602 	add.w	r6, r6, #2
 800e3b4:	d8f5      	bhi.n	800e3a2 <uxr_reset_stream_storage+0x2a>
 800e3b6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e3ba:	b163      	cbz	r3, 800e3d6 <uxr_reset_stream_storage+0x5e>
 800e3bc:	f104 0618 	add.w	r6, r4, #24
 800e3c0:	2500      	movs	r5, #0
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f005 ff24 	bl	8014210 <uxr_reset_output_reliable_stream>
 800e3c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	42ab      	cmp	r3, r5
 800e3d0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e3d4:	d8f5      	bhi.n	800e3c2 <uxr_reset_stream_storage+0x4a>
 800e3d6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e3da:	b163      	cbz	r3, 800e3f6 <uxr_reset_stream_storage+0x7e>
 800e3dc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e3e0:	2500      	movs	r5, #0
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f005 fcde 	bl	8013da4 <uxr_reset_input_reliable_stream>
 800e3e8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e3ec:	3501      	adds	r5, #1
 800e3ee:	42ab      	cmp	r3, r5
 800e3f0:	f106 0618 	add.w	r6, r6, #24
 800e3f4:	d8f5      	bhi.n	800e3e2 <uxr_reset_stream_storage+0x6a>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}

0800e3f8 <uxr_add_output_best_effort_buffer>:
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	7c04      	ldrb	r4, [r0, #16]
 800e3fc:	f104 0c01 	add.w	ip, r4, #1
 800e400:	b082      	sub	sp, #8
 800e402:	f880 c010 	strb.w	ip, [r0, #16]
 800e406:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e40a:	f005 fe4b 	bl	80140a4 <uxr_init_output_best_effort_stream>
 800e40e:	2201      	movs	r2, #1
 800e410:	4611      	mov	r1, r2
 800e412:	4620      	mov	r0, r4
 800e414:	b002      	add	sp, #8
 800e416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e41a:	f7ff bf4f 	b.w	800e2bc <uxr_stream_id>
 800e41e:	bf00      	nop

0800e420 <uxr_add_output_reliable_buffer>:
 800e420:	b510      	push	{r4, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	4684      	mov	ip, r0
 800e426:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e42a:	9000      	str	r0, [sp, #0]
 800e42c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e430:	2028      	movs	r0, #40	@ 0x28
 800e432:	fb00 c004 	mla	r0, r0, r4, ip
 800e436:	f104 0e01 	add.w	lr, r4, #1
 800e43a:	3018      	adds	r0, #24
 800e43c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e440:	f005 feae 	bl	80141a0 <uxr_init_output_reliable_stream>
 800e444:	2201      	movs	r2, #1
 800e446:	2102      	movs	r1, #2
 800e448:	4620      	mov	r0, r4
 800e44a:	b004      	add	sp, #16
 800e44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e450:	f7ff bf34 	b.w	800e2bc <uxr_stream_id>

0800e454 <uxr_add_input_best_effort_buffer>:
 800e454:	b510      	push	{r4, lr}
 800e456:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e45a:	4603      	mov	r3, r0
 800e45c:	1c62      	adds	r2, r4, #1
 800e45e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800e462:	b082      	sub	sp, #8
 800e464:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e46c:	f005 fc22 	bl	8013cb4 <uxr_init_input_best_effort_stream>
 800e470:	2200      	movs	r2, #0
 800e472:	2101      	movs	r1, #1
 800e474:	4620      	mov	r0, r4
 800e476:	b002      	add	sp, #8
 800e478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e47c:	f7ff bf1e 	b.w	800e2bc <uxr_stream_id>

0800e480 <uxr_add_input_reliable_buffer>:
 800e480:	b510      	push	{r4, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	4684      	mov	ip, r0
 800e486:	9806      	ldr	r0, [sp, #24]
 800e488:	9000      	str	r0, [sp, #0]
 800e48a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e48e:	2018      	movs	r0, #24
 800e490:	fb00 c004 	mla	r0, r0, r4, ip
 800e494:	f104 0e01 	add.w	lr, r4, #1
 800e498:	3048      	adds	r0, #72	@ 0x48
 800e49a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e49e:	f005 fc55 	bl	8013d4c <uxr_init_input_reliable_stream>
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	2102      	movs	r1, #2
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	b004      	add	sp, #16
 800e4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ae:	f7ff bf05 	b.w	800e2bc <uxr_stream_id>
 800e4b2:	bf00      	nop

0800e4b4 <uxr_get_output_best_effort_stream>:
 800e4b4:	7c03      	ldrb	r3, [r0, #16]
 800e4b6:	428b      	cmp	r3, r1
 800e4b8:	bf8c      	ite	hi
 800e4ba:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e4be:	2000      	movls	r0, #0
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop

0800e4c4 <uxr_get_output_reliable_stream>:
 800e4c4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e4c8:	428b      	cmp	r3, r1
 800e4ca:	bf83      	ittte	hi
 800e4cc:	2328      	movhi	r3, #40	@ 0x28
 800e4ce:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e4d2:	3018      	addhi	r0, #24
 800e4d4:	2000      	movls	r0, #0
 800e4d6:	4770      	bx	lr

0800e4d8 <uxr_get_input_best_effort_stream>:
 800e4d8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e4dc:	428b      	cmp	r3, r1
 800e4de:	bf86      	itte	hi
 800e4e0:	3121      	addhi	r1, #33	@ 0x21
 800e4e2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e4e6:	2000      	movls	r0, #0
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <uxr_get_input_reliable_stream>:
 800e4ec:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e4f0:	428b      	cmp	r3, r1
 800e4f2:	bf83      	ittte	hi
 800e4f4:	2318      	movhi	r3, #24
 800e4f6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e4fa:	3048      	addhi	r0, #72	@ 0x48
 800e4fc:	2000      	movls	r0, #0
 800e4fe:	4770      	bx	lr

0800e500 <uxr_output_streams_confirmed>:
 800e500:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e504:	b183      	cbz	r3, 800e528 <uxr_output_streams_confirmed+0x28>
 800e506:	b570      	push	{r4, r5, r6, lr}
 800e508:	4606      	mov	r6, r0
 800e50a:	f100 0518 	add.w	r5, r0, #24
 800e50e:	2400      	movs	r4, #0
 800e510:	e001      	b.n	800e516 <uxr_output_streams_confirmed+0x16>
 800e512:	3528      	adds	r5, #40	@ 0x28
 800e514:	b138      	cbz	r0, 800e526 <uxr_output_streams_confirmed+0x26>
 800e516:	4628      	mov	r0, r5
 800e518:	f006 f8ea 	bl	80146f0 <uxr_is_output_up_to_date>
 800e51c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e520:	3401      	adds	r4, #1
 800e522:	42a3      	cmp	r3, r4
 800e524:	d8f5      	bhi.n	800e512 <uxr_output_streams_confirmed+0x12>
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	2001      	movs	r0, #1
 800e52a:	4770      	bx	lr

0800e52c <uxr_buffer_submessage_header>:
 800e52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52e:	4604      	mov	r4, r0
 800e530:	460e      	mov	r6, r1
 800e532:	2104      	movs	r1, #4
 800e534:	4615      	mov	r5, r2
 800e536:	461f      	mov	r7, r3
 800e538:	f7fd fd22 	bl	800bf80 <ucdr_align_to>
 800e53c:	2301      	movs	r3, #1
 800e53e:	ea47 0203 	orr.w	r2, r7, r3
 800e542:	4631      	mov	r1, r6
 800e544:	7523      	strb	r3, [r4, #20]
 800e546:	4620      	mov	r0, r4
 800e548:	462b      	mov	r3, r5
 800e54a:	f000 fa27 	bl	800e99c <uxr_serialize_submessage_header>
 800e54e:	4620      	mov	r0, r4
 800e550:	f7fd fd2c 	bl	800bfac <ucdr_buffer_remaining>
 800e554:	42a8      	cmp	r0, r5
 800e556:	bf34      	ite	cc
 800e558:	2000      	movcc	r0, #0
 800e55a:	2001      	movcs	r0, #1
 800e55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e55e:	bf00      	nop

0800e560 <uxr_read_submessage_header>:
 800e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e564:	4604      	mov	r4, r0
 800e566:	460d      	mov	r5, r1
 800e568:	2104      	movs	r1, #4
 800e56a:	4616      	mov	r6, r2
 800e56c:	4698      	mov	r8, r3
 800e56e:	f7fd fd07 	bl	800bf80 <ucdr_align_to>
 800e572:	4620      	mov	r0, r4
 800e574:	f7fd fd1a 	bl	800bfac <ucdr_buffer_remaining>
 800e578:	2803      	cmp	r0, #3
 800e57a:	bf8c      	ite	hi
 800e57c:	2701      	movhi	r7, #1
 800e57e:	2700      	movls	r7, #0
 800e580:	d802      	bhi.n	800e588 <uxr_read_submessage_header+0x28>
 800e582:	4638      	mov	r0, r7
 800e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e588:	4633      	mov	r3, r6
 800e58a:	4642      	mov	r2, r8
 800e58c:	4620      	mov	r0, r4
 800e58e:	4629      	mov	r1, r5
 800e590:	f000 fa18 	bl	800e9c4 <uxr_deserialize_submessage_header>
 800e594:	f898 3000 	ldrb.w	r3, [r8]
 800e598:	f003 0201 	and.w	r2, r3, #1
 800e59c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e5a0:	f888 3000 	strb.w	r3, [r8]
 800e5a4:	7522      	strb	r2, [r4, #20]
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5ac <uxr_submessage_padding>:
 800e5ac:	f010 0003 	ands.w	r0, r0, #3
 800e5b0:	bf18      	it	ne
 800e5b2:	f1c0 0004 	rsbne	r0, r0, #4
 800e5b6:	4770      	bx	lr

0800e5b8 <uxr_millis>:
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	4669      	mov	r1, sp
 800e5be:	2001      	movs	r0, #1
 800e5c0:	f7f2 feb6 	bl	8001330 <clock_gettime>
 800e5c4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e5c8:	4906      	ldr	r1, [pc, #24]	@ (800e5e4 <uxr_millis+0x2c>)
 800e5ca:	fba0 0301 	umull	r0, r3, r0, r1
 800e5ce:	1900      	adds	r0, r0, r4
 800e5d0:	fb01 3102 	mla	r1, r1, r2, r3
 800e5d4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e5d8:	4a03      	ldr	r2, [pc, #12]	@ (800e5e8 <uxr_millis+0x30>)
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f7f1 fe88 	bl	80002f0 <__aeabi_ldivmod>
 800e5e0:	b004      	add	sp, #16
 800e5e2:	bd10      	pop	{r4, pc}
 800e5e4:	3b9aca00 	.word	0x3b9aca00
 800e5e8:	000f4240 	.word	0x000f4240

0800e5ec <uxr_nanos>:
 800e5ec:	b510      	push	{r4, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	4669      	mov	r1, sp
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	f7f2 fe9c 	bl	8001330 <clock_gettime>
 800e5f8:	4a06      	ldr	r2, [pc, #24]	@ (800e614 <uxr_nanos+0x28>)
 800e5fa:	9800      	ldr	r0, [sp, #0]
 800e5fc:	9902      	ldr	r1, [sp, #8]
 800e5fe:	9c01      	ldr	r4, [sp, #4]
 800e600:	fba0 0302 	umull	r0, r3, r0, r2
 800e604:	1840      	adds	r0, r0, r1
 800e606:	fb02 3304 	mla	r3, r2, r4, r3
 800e60a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e60e:	b004      	add	sp, #16
 800e610:	bd10      	pop	{r4, pc}
 800e612:	bf00      	nop
 800e614:	3b9aca00 	.word	0x3b9aca00

0800e618 <on_full_output_buffer_fragmented>:
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	460c      	mov	r4, r1
 800e61e:	b08a      	sub	sp, #40	@ 0x28
 800e620:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e624:	4606      	mov	r6, r0
 800e626:	f104 0008 	add.w	r0, r4, #8
 800e62a:	f7ff ff4b 	bl	800e4c4 <uxr_get_output_reliable_stream>
 800e62e:	4605      	mov	r5, r0
 800e630:	f006 f868 	bl	8014704 <get_available_free_slots>
 800e634:	b968      	cbnz	r0, 800e652 <on_full_output_buffer_fragmented+0x3a>
 800e636:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e63a:	4620      	mov	r0, r4
 800e63c:	4798      	blx	r3
 800e63e:	b918      	cbnz	r0, 800e648 <on_full_output_buffer_fragmented+0x30>
 800e640:	2001      	movs	r0, #1
 800e642:	b00a      	add	sp, #40	@ 0x28
 800e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e648:	4628      	mov	r0, r5
 800e64a:	f006 f85b 	bl	8014704 <get_available_free_slots>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d0f6      	beq.n	800e640 <on_full_output_buffer_fragmented+0x28>
 800e652:	8929      	ldrh	r1, [r5, #8]
 800e654:	89eb      	ldrh	r3, [r5, #14]
 800e656:	7b28      	ldrb	r0, [r5, #12]
 800e658:	686a      	ldr	r2, [r5, #4]
 800e65a:	fbb2 f8f1 	udiv	r8, r2, r1
 800e65e:	fbb3 f2f1 	udiv	r2, r3, r1
 800e662:	fb01 3112 	mls	r1, r1, r2, r3
 800e666:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e66a:	b289      	uxth	r1, r1
 800e66c:	fb08 f101 	mul.w	r1, r8, r1
 800e670:	30fc      	adds	r0, #252	@ 0xfc
 800e672:	f1a8 0804 	sub.w	r8, r8, #4
 800e676:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e67a:	4440      	add	r0, r8
 800e67c:	b287      	uxth	r7, r0
 800e67e:	1bdb      	subs	r3, r3, r7
 800e680:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	3104      	adds	r1, #4
 800e688:	4419      	add	r1, r3
 800e68a:	4642      	mov	r2, r8
 800e68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	a802      	add	r0, sp, #8
 800e694:	2300      	movs	r3, #0
 800e696:	f7fd fc47 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800e69a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e69e:	f102 0308 	add.w	r3, r2, #8
 800e6a2:	4543      	cmp	r3, r8
 800e6a4:	d928      	bls.n	800e6f8 <on_full_output_buffer_fragmented+0xe0>
 800e6a6:	463a      	mov	r2, r7
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	210d      	movs	r1, #13
 800e6ac:	a802      	add	r0, sp, #8
 800e6ae:	f7ff ff3d 	bl	800e52c <uxr_buffer_submessage_header>
 800e6b2:	8929      	ldrh	r1, [r5, #8]
 800e6b4:	89eb      	ldrh	r3, [r5, #14]
 800e6b6:	fbb3 f2f1 	udiv	r2, r3, r1
 800e6ba:	fb01 3312 	mls	r3, r1, r2, r3
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	686a      	ldr	r2, [r5, #4]
 800e6c2:	fbb2 f2f1 	udiv	r2, r2, r1
 800e6c6:	fb02 f303 	mul.w	r3, r2, r3
 800e6ca:	682a      	ldr	r2, [r5, #0]
 800e6cc:	f842 8003 	str.w	r8, [r2, r3]
 800e6d0:	89e8      	ldrh	r0, [r5, #14]
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	f006 f836 	bl	8014744 <uxr_seq_num_add>
 800e6d8:	9904      	ldr	r1, [sp, #16]
 800e6da:	9a03      	ldr	r2, [sp, #12]
 800e6dc:	81e8      	strh	r0, [r5, #14]
 800e6de:	1a52      	subs	r2, r2, r1
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	f7fd fc33 	bl	800bf4c <ucdr_init_buffer>
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	490f      	ldr	r1, [pc, #60]	@ (800e728 <on_full_output_buffer_fragmented+0x110>)
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	f7fd fc02 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	b00a      	add	sp, #40	@ 0x28
 800e6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f8:	b292      	uxth	r2, r2
 800e6fa:	2302      	movs	r3, #2
 800e6fc:	210d      	movs	r1, #13
 800e6fe:	a802      	add	r0, sp, #8
 800e700:	f7ff ff14 	bl	800e52c <uxr_buffer_submessage_header>
 800e704:	8928      	ldrh	r0, [r5, #8]
 800e706:	89eb      	ldrh	r3, [r5, #14]
 800e708:	fbb3 f1f0 	udiv	r1, r3, r0
 800e70c:	fb00 3311 	mls	r3, r0, r1, r3
 800e710:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e714:	6869      	ldr	r1, [r5, #4]
 800e716:	fbb1 f1f0 	udiv	r1, r1, r0
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	fb01 f303 	mul.w	r3, r1, r3
 800e720:	6829      	ldr	r1, [r5, #0]
 800e722:	3208      	adds	r2, #8
 800e724:	50ca      	str	r2, [r1, r3]
 800e726:	e7d3      	b.n	800e6d0 <on_full_output_buffer_fragmented+0xb8>
 800e728:	0800e619 	.word	0x0800e619

0800e72c <uxr_prepare_output_stream>:
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	b087      	sub	sp, #28
 800e730:	2707      	movs	r7, #7
 800e732:	9202      	str	r2, [sp, #8]
 800e734:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e736:	9103      	str	r1, [sp, #12]
 800e738:	2500      	movs	r5, #0
 800e73a:	3204      	adds	r2, #4
 800e73c:	e9cd 7500 	strd	r7, r5, [sp]
 800e740:	461c      	mov	r4, r3
 800e742:	4606      	mov	r6, r0
 800e744:	f7fe ffc2 	bl	800d6cc <uxr_prepare_stream_to_write_submessage>
 800e748:	f080 0201 	eor.w	r2, r0, #1
 800e74c:	b2d2      	uxtb	r2, r2
 800e74e:	75a2      	strb	r2, [r4, #22]
 800e750:	b112      	cbz	r2, 800e758 <uxr_prepare_output_stream+0x2c>
 800e752:	4628      	mov	r0, r5
 800e754:	b007      	add	sp, #28
 800e756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e758:	aa05      	add	r2, sp, #20
 800e75a:	9902      	ldr	r1, [sp, #8]
 800e75c:	4630      	mov	r0, r6
 800e75e:	f7ff f8eb 	bl	800d938 <uxr_init_base_object_request>
 800e762:	a905      	add	r1, sp, #20
 800e764:	4605      	mov	r5, r0
 800e766:	4620      	mov	r0, r4
 800e768:	f001 f88c 	bl	800f884 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e76c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e770:	69a6      	ldr	r6, [r4, #24]
 800e772:	69e7      	ldr	r7, [r4, #28]
 800e774:	1a52      	subs	r2, r2, r1
 800e776:	4620      	mov	r0, r4
 800e778:	f7fd fbe8 	bl	800bf4c <ucdr_init_buffer>
 800e77c:	4620      	mov	r0, r4
 800e77e:	463a      	mov	r2, r7
 800e780:	4631      	mov	r1, r6
 800e782:	f7fd fbb7 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 800e786:	4628      	mov	r0, r5
 800e788:	b007      	add	sp, #28
 800e78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e78c <uxr_prepare_output_stream_fragmented>:
 800e78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e790:	b091      	sub	sp, #68	@ 0x44
 800e792:	4605      	mov	r5, r0
 800e794:	9105      	str	r1, [sp, #20]
 800e796:	3008      	adds	r0, #8
 800e798:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e79c:	461e      	mov	r6, r3
 800e79e:	9204      	str	r2, [sp, #16]
 800e7a0:	f7ff fe90 	bl	800e4c4 <uxr_get_output_reliable_stream>
 800e7a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	f000 8091 	beq.w	800e8d0 <uxr_prepare_output_stream_fragmented+0x144>
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	f000 808d 	beq.w	800e8d0 <uxr_prepare_output_stream_fragmented+0x144>
 800e7b6:	f005 ffa5 	bl	8014704 <get_available_free_slots>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	f000 8083 	beq.w	800e8c6 <uxr_prepare_output_stream_fragmented+0x13a>
 800e7c0:	8922      	ldrh	r2, [r4, #8]
 800e7c2:	89e7      	ldrh	r7, [r4, #14]
 800e7c4:	fbb7 f9f2 	udiv	r9, r7, r2
 800e7c8:	fb02 7919 	mls	r9, r2, r9, r7
 800e7cc:	fa1f f989 	uxth.w	r9, r9
 800e7d0:	6863      	ldr	r3, [r4, #4]
 800e7d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	9203      	str	r2, [sp, #12]
 800e7da:	fb02 f909 	mul.w	r9, r2, r9
 800e7de:	f109 0904 	add.w	r9, r9, #4
 800e7e2:	4499      	add	r9, r3
 800e7e4:	7b23      	ldrb	r3, [r4, #12]
 800e7e6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e7ea:	4543      	cmp	r3, r8
 800e7ec:	f1a2 0b04 	sub.w	fp, r2, #4
 800e7f0:	d37a      	bcc.n	800e8e8 <uxr_prepare_output_stream_fragmented+0x15c>
 800e7f2:	f1ab 0a04 	sub.w	sl, fp, #4
 800e7f6:	ebaa 0a03 	sub.w	sl, sl, r3
 800e7fa:	465a      	mov	r2, fp
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4649      	mov	r1, r9
 800e800:	a808      	add	r0, sp, #32
 800e802:	f8cd 8000 	str.w	r8, [sp]
 800e806:	f7fd fb8f 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 800e80a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e80c:	fa1f fa8a 	uxth.w	sl, sl
 800e810:	4652      	mov	r2, sl
 800e812:	f103 0a08 	add.w	sl, r3, #8
 800e816:	45da      	cmp	sl, fp
 800e818:	bf34      	ite	cc
 800e81a:	2302      	movcc	r3, #2
 800e81c:	2300      	movcs	r3, #0
 800e81e:	210d      	movs	r1, #13
 800e820:	a808      	add	r0, sp, #32
 800e822:	f7ff fe83 	bl	800e52c <uxr_buffer_submessage_header>
 800e826:	8921      	ldrh	r1, [r4, #8]
 800e828:	fbb7 f2f1 	udiv	r2, r7, r1
 800e82c:	fb01 7212 	mls	r2, r1, r2, r7
 800e830:	b292      	uxth	r2, r2
 800e832:	6863      	ldr	r3, [r4, #4]
 800e834:	fbb3 f3f1 	udiv	r3, r3, r1
 800e838:	fb02 f303 	mul.w	r3, r2, r3
 800e83c:	6822      	ldr	r2, [r4, #0]
 800e83e:	4638      	mov	r0, r7
 800e840:	f842 b003 	str.w	fp, [r2, r3]
 800e844:	2101      	movs	r1, #1
 800e846:	f005 ff7d 	bl	8014744 <uxr_seq_num_add>
 800e84a:	9b03      	ldr	r3, [sp, #12]
 800e84c:	f108 0104 	add.w	r1, r8, #4
 800e850:	f1a3 0208 	sub.w	r2, r3, #8
 800e854:	eba2 0208 	sub.w	r2, r2, r8
 800e858:	4449      	add	r1, r9
 800e85a:	4607      	mov	r7, r0
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7fd fb75 	bl	800bf4c <ucdr_init_buffer>
 800e862:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e864:	81e7      	strh	r7, [r4, #14]
 800e866:	1d1a      	adds	r2, r3, #4
 800e868:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e86c:	bf28      	it	cs
 800e86e:	2200      	movcs	r2, #0
 800e870:	2300      	movs	r3, #0
 800e872:	b292      	uxth	r2, r2
 800e874:	2107      	movs	r1, #7
 800e876:	4630      	mov	r0, r6
 800e878:	f7ff fe58 	bl	800e52c <uxr_buffer_submessage_header>
 800e87c:	9904      	ldr	r1, [sp, #16]
 800e87e:	aa07      	add	r2, sp, #28
 800e880:	4628      	mov	r0, r5
 800e882:	f7ff f859 	bl	800d938 <uxr_init_base_object_request>
 800e886:	4604      	mov	r4, r0
 800e888:	b318      	cbz	r0, 800e8d2 <uxr_prepare_output_stream_fragmented+0x146>
 800e88a:	a907      	add	r1, sp, #28
 800e88c:	4630      	mov	r0, r6
 800e88e:	f000 fff9 	bl	800f884 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e892:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e896:	4630      	mov	r0, r6
 800e898:	1a52      	subs	r2, r2, r1
 800e89a:	f7fd fb57 	bl	800bf4c <ucdr_init_buffer>
 800e89e:	9b05      	ldr	r3, [sp, #20]
 800e8a0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e8a4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e8a6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e8aa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e8ac:	491b      	ldr	r1, [pc, #108]	@ (800e91c <uxr_prepare_output_stream_fragmented+0x190>)
 800e8ae:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	f7fd fb1b 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 800e8be:	4620      	mov	r0, r4
 800e8c0:	b011      	add	sp, #68	@ 0x44
 800e8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e8c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	4798      	blx	r3
 800e8ce:	b920      	cbnz	r0, 800e8da <uxr_prepare_output_stream_fragmented+0x14e>
 800e8d0:	2400      	movs	r4, #0
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	b011      	add	sp, #68	@ 0x44
 800e8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f005 ff12 	bl	8014704 <get_available_free_slots>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	f47f af6d 	bne.w	800e7c0 <uxr_prepare_output_stream_fragmented+0x34>
 800e8e6:	e7f3      	b.n	800e8d0 <uxr_prepare_output_stream_fragmented+0x144>
 800e8e8:	4638      	mov	r0, r7
 800e8ea:	2101      	movs	r1, #1
 800e8ec:	f005 ff2a 	bl	8014744 <uxr_seq_num_add>
 800e8f0:	8921      	ldrh	r1, [r4, #8]
 800e8f2:	fbb0 f2f1 	udiv	r2, r0, r1
 800e8f6:	fb01 0912 	mls	r9, r1, r2, r0
 800e8fa:	fa1f f289 	uxth.w	r2, r9
 800e8fe:	6863      	ldr	r3, [r4, #4]
 800e900:	fbb3 f9f1 	udiv	r9, r3, r1
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	fb02 f909 	mul.w	r9, r2, r9
 800e90a:	f109 0904 	add.w	r9, r9, #4
 800e90e:	4499      	add	r9, r3
 800e910:	4607      	mov	r7, r0
 800e912:	7b23      	ldrb	r3, [r4, #12]
 800e914:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e918:	e76b      	b.n	800e7f2 <uxr_prepare_output_stream_fragmented+0x66>
 800e91a:	bf00      	nop
 800e91c:	0800e619 	.word	0x0800e619

0800e920 <uxr_serialize_message_header>:
 800e920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e922:	b083      	sub	sp, #12
 800e924:	4616      	mov	r6, r2
 800e926:	4604      	mov	r4, r0
 800e928:	9301      	str	r3, [sp, #4]
 800e92a:	460d      	mov	r5, r1
 800e92c:	9f08      	ldr	r7, [sp, #32]
 800e92e:	f7fc fb61 	bl	800aff4 <ucdr_serialize_uint8_t>
 800e932:	4631      	mov	r1, r6
 800e934:	4620      	mov	r0, r4
 800e936:	f7fc fb5d 	bl	800aff4 <ucdr_serialize_uint8_t>
 800e93a:	9a01      	ldr	r2, [sp, #4]
 800e93c:	2101      	movs	r1, #1
 800e93e:	4620      	mov	r0, r4
 800e940:	f7fc fc04 	bl	800b14c <ucdr_serialize_endian_uint16_t>
 800e944:	062b      	lsls	r3, r5, #24
 800e946:	d501      	bpl.n	800e94c <uxr_serialize_message_header+0x2c>
 800e948:	b003      	add	sp, #12
 800e94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e94c:	2204      	movs	r2, #4
 800e94e:	4639      	mov	r1, r7
 800e950:	4620      	mov	r0, r4
 800e952:	b003      	add	sp, #12
 800e954:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e958:	f005 b874 	b.w	8013a44 <ucdr_serialize_array_uint8_t>

0800e95c <uxr_deserialize_message_header>:
 800e95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e95e:	b083      	sub	sp, #12
 800e960:	4616      	mov	r6, r2
 800e962:	4604      	mov	r4, r0
 800e964:	9301      	str	r3, [sp, #4]
 800e966:	460d      	mov	r5, r1
 800e968:	9f08      	ldr	r7, [sp, #32]
 800e96a:	f7fc fb59 	bl	800b020 <ucdr_deserialize_uint8_t>
 800e96e:	4631      	mov	r1, r6
 800e970:	4620      	mov	r0, r4
 800e972:	f7fc fb55 	bl	800b020 <ucdr_deserialize_uint8_t>
 800e976:	9a01      	ldr	r2, [sp, #4]
 800e978:	2101      	movs	r1, #1
 800e97a:	4620      	mov	r0, r4
 800e97c:	f7fc fcda 	bl	800b334 <ucdr_deserialize_endian_uint16_t>
 800e980:	f995 3000 	ldrsb.w	r3, [r5]
 800e984:	2b00      	cmp	r3, #0
 800e986:	da01      	bge.n	800e98c <uxr_deserialize_message_header+0x30>
 800e988:	b003      	add	sp, #12
 800e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98c:	2204      	movs	r2, #4
 800e98e:	4639      	mov	r1, r7
 800e990:	4620      	mov	r0, r4
 800e992:	b003      	add	sp, #12
 800e994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e998:	f005 b8b8 	b.w	8013b0c <ucdr_deserialize_array_uint8_t>

0800e99c <uxr_serialize_submessage_header>:
 800e99c:	b530      	push	{r4, r5, lr}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	4615      	mov	r5, r2
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	f7fc fb25 	bl	800aff4 <ucdr_serialize_uint8_t>
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f7fc fb21 	bl	800aff4 <ucdr_serialize_uint8_t>
 800e9b2:	9a01      	ldr	r2, [sp, #4]
 800e9b4:	2101      	movs	r1, #1
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	b003      	add	sp, #12
 800e9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9be:	f7fc bbc5 	b.w	800b14c <ucdr_serialize_endian_uint16_t>
 800e9c2:	bf00      	nop

0800e9c4 <uxr_deserialize_submessage_header>:
 800e9c4:	b530      	push	{r4, r5, lr}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	4615      	mov	r5, r2
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	f7fc fb27 	bl	800b020 <ucdr_deserialize_uint8_t>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7fc fb23 	bl	800b020 <ucdr_deserialize_uint8_t>
 800e9da:	9a01      	ldr	r2, [sp, #4]
 800e9dc:	2101      	movs	r1, #1
 800e9de:	4620      	mov	r0, r4
 800e9e0:	b003      	add	sp, #12
 800e9e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9e6:	f7fc bca5 	b.w	800b334 <ucdr_deserialize_endian_uint16_t>
 800e9ea:	bf00      	nop

0800e9ec <uxr_serialize_CLIENT_Representation>:
 800e9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f0:	2204      	movs	r2, #4
 800e9f2:	460e      	mov	r6, r1
 800e9f4:	4605      	mov	r5, r0
 800e9f6:	f005 f825 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	1d31      	adds	r1, r6, #4
 800ea00:	4628      	mov	r0, r5
 800ea02:	f005 f81f 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800ea06:	4038      	ands	r0, r7
 800ea08:	2202      	movs	r2, #2
 800ea0a:	1db1      	adds	r1, r6, #6
 800ea0c:	b2c7      	uxtb	r7, r0
 800ea0e:	4628      	mov	r0, r5
 800ea10:	f005 f818 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800ea14:	2204      	movs	r2, #4
 800ea16:	4007      	ands	r7, r0
 800ea18:	f106 0108 	add.w	r1, r6, #8
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f005 f811 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800ea22:	7b31      	ldrb	r1, [r6, #12]
 800ea24:	4007      	ands	r7, r0
 800ea26:	4628      	mov	r0, r5
 800ea28:	f7fc fae4 	bl	800aff4 <ucdr_serialize_uint8_t>
 800ea2c:	7b71      	ldrb	r1, [r6, #13]
 800ea2e:	4007      	ands	r7, r0
 800ea30:	4628      	mov	r0, r5
 800ea32:	f7fc fab1 	bl	800af98 <ucdr_serialize_bool>
 800ea36:	7b73      	ldrb	r3, [r6, #13]
 800ea38:	ea07 0800 	and.w	r8, r7, r0
 800ea3c:	b93b      	cbnz	r3, 800ea4e <uxr_serialize_CLIENT_Representation+0x62>
 800ea3e:	8bb1      	ldrh	r1, [r6, #28]
 800ea40:	4628      	mov	r0, r5
 800ea42:	f7fc fb03 	bl	800b04c <ucdr_serialize_uint16_t>
 800ea46:	ea08 0000 	and.w	r0, r8, r0
 800ea4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea4e:	6931      	ldr	r1, [r6, #16]
 800ea50:	4628      	mov	r0, r5
 800ea52:	f7fc fce5 	bl	800b420 <ucdr_serialize_uint32_t>
 800ea56:	6933      	ldr	r3, [r6, #16]
 800ea58:	b1e3      	cbz	r3, 800ea94 <uxr_serialize_CLIENT_Representation+0xa8>
 800ea5a:	b1c0      	cbz	r0, 800ea8e <uxr_serialize_CLIENT_Representation+0xa2>
 800ea5c:	4637      	mov	r7, r6
 800ea5e:	f04f 0900 	mov.w	r9, #0
 800ea62:	e001      	b.n	800ea68 <uxr_serialize_CLIENT_Representation+0x7c>
 800ea64:	3708      	adds	r7, #8
 800ea66:	b194      	cbz	r4, 800ea8e <uxr_serialize_CLIENT_Representation+0xa2>
 800ea68:	6979      	ldr	r1, [r7, #20]
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f005 f90a 	bl	8013c84 <ucdr_serialize_string>
 800ea70:	69b9      	ldr	r1, [r7, #24]
 800ea72:	4604      	mov	r4, r0
 800ea74:	4628      	mov	r0, r5
 800ea76:	f005 f905 	bl	8013c84 <ucdr_serialize_string>
 800ea7a:	6933      	ldr	r3, [r6, #16]
 800ea7c:	f109 0901 	add.w	r9, r9, #1
 800ea80:	4004      	ands	r4, r0
 800ea82:	4599      	cmp	r9, r3
 800ea84:	b2e4      	uxtb	r4, r4
 800ea86:	d3ed      	bcc.n	800ea64 <uxr_serialize_CLIENT_Representation+0x78>
 800ea88:	ea08 0804 	and.w	r8, r8, r4
 800ea8c:	e7d7      	b.n	800ea3e <uxr_serialize_CLIENT_Representation+0x52>
 800ea8e:	f04f 0800 	mov.w	r8, #0
 800ea92:	e7d4      	b.n	800ea3e <uxr_serialize_CLIENT_Representation+0x52>
 800ea94:	ea08 0800 	and.w	r8, r8, r0
 800ea98:	e7d1      	b.n	800ea3e <uxr_serialize_CLIENT_Representation+0x52>
 800ea9a:	bf00      	nop

0800ea9c <uxr_deserialize_CLIENT_Representation>:
 800ea9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa0:	2204      	movs	r2, #4
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	f005 f831 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800eaaa:	2202      	movs	r2, #2
 800eaac:	4607      	mov	r7, r0
 800eaae:	1d21      	adds	r1, r4, #4
 800eab0:	4628      	mov	r0, r5
 800eab2:	f005 f82b 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800eab6:	4038      	ands	r0, r7
 800eab8:	2202      	movs	r2, #2
 800eaba:	1da1      	adds	r1, r4, #6
 800eabc:	b2c6      	uxtb	r6, r0
 800eabe:	4628      	mov	r0, r5
 800eac0:	f005 f824 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800eac4:	2204      	movs	r2, #4
 800eac6:	4006      	ands	r6, r0
 800eac8:	f104 0108 	add.w	r1, r4, #8
 800eacc:	4628      	mov	r0, r5
 800eace:	f005 f81d 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800ead2:	f104 010c 	add.w	r1, r4, #12
 800ead6:	4006      	ands	r6, r0
 800ead8:	4628      	mov	r0, r5
 800eada:	f7fc faa1 	bl	800b020 <ucdr_deserialize_uint8_t>
 800eade:	f104 010d 	add.w	r1, r4, #13
 800eae2:	ea06 0700 	and.w	r7, r6, r0
 800eae6:	4628      	mov	r0, r5
 800eae8:	f7fc fa6c 	bl	800afc4 <ucdr_deserialize_bool>
 800eaec:	7b63      	ldrb	r3, [r4, #13]
 800eaee:	4007      	ands	r7, r0
 800eaf0:	b93b      	cbnz	r3, 800eb02 <uxr_deserialize_CLIENT_Representation+0x66>
 800eaf2:	f104 011c 	add.w	r1, r4, #28
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7fc fba8 	bl	800b24c <ucdr_deserialize_uint16_t>
 800eafc:	4038      	ands	r0, r7
 800eafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb02:	f104 0110 	add.w	r1, r4, #16
 800eb06:	4628      	mov	r0, r5
 800eb08:	f7fc fdba 	bl	800b680 <ucdr_deserialize_uint32_t>
 800eb0c:	6923      	ldr	r3, [r4, #16]
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d903      	bls.n	800eb1a <uxr_deserialize_CLIENT_Representation+0x7e>
 800eb12:	2301      	movs	r3, #1
 800eb14:	75ab      	strb	r3, [r5, #22]
 800eb16:	2700      	movs	r7, #0
 800eb18:	e7eb      	b.n	800eaf2 <uxr_deserialize_CLIENT_Representation+0x56>
 800eb1a:	b30b      	cbz	r3, 800eb60 <uxr_deserialize_CLIENT_Representation+0xc4>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d0fa      	beq.n	800eb16 <uxr_deserialize_CLIENT_Representation+0x7a>
 800eb20:	46a0      	mov	r8, r4
 800eb22:	f04f 0900 	mov.w	r9, #0
 800eb26:	e001      	b.n	800eb2c <uxr_deserialize_CLIENT_Representation+0x90>
 800eb28:	2e00      	cmp	r6, #0
 800eb2a:	d0f4      	beq.n	800eb16 <uxr_deserialize_CLIENT_Representation+0x7a>
 800eb2c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800eb30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb34:	4628      	mov	r0, r5
 800eb36:	f005 f8b5 	bl	8013ca4 <ucdr_deserialize_string>
 800eb3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb3e:	4606      	mov	r6, r0
 800eb40:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800eb44:	4628      	mov	r0, r5
 800eb46:	f005 f8ad 	bl	8013ca4 <ucdr_deserialize_string>
 800eb4a:	6923      	ldr	r3, [r4, #16]
 800eb4c:	f109 0901 	add.w	r9, r9, #1
 800eb50:	4006      	ands	r6, r0
 800eb52:	4599      	cmp	r9, r3
 800eb54:	f108 0808 	add.w	r8, r8, #8
 800eb58:	b2f6      	uxtb	r6, r6
 800eb5a:	d3e5      	bcc.n	800eb28 <uxr_deserialize_CLIENT_Representation+0x8c>
 800eb5c:	4037      	ands	r7, r6
 800eb5e:	e7c8      	b.n	800eaf2 <uxr_deserialize_CLIENT_Representation+0x56>
 800eb60:	4007      	ands	r7, r0
 800eb62:	e7c6      	b.n	800eaf2 <uxr_deserialize_CLIENT_Representation+0x56>

0800eb64 <uxr_serialize_AGENT_Representation>:
 800eb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb68:	2204      	movs	r2, #4
 800eb6a:	460f      	mov	r7, r1
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	f004 ff69 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800eb72:	2202      	movs	r2, #2
 800eb74:	4604      	mov	r4, r0
 800eb76:	1d39      	adds	r1, r7, #4
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f004 ff63 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800eb7e:	4020      	ands	r0, r4
 800eb80:	2202      	movs	r2, #2
 800eb82:	1db9      	adds	r1, r7, #6
 800eb84:	b2c4      	uxtb	r4, r0
 800eb86:	4628      	mov	r0, r5
 800eb88:	f004 ff5c 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800eb8c:	7a39      	ldrb	r1, [r7, #8]
 800eb8e:	4004      	ands	r4, r0
 800eb90:	4628      	mov	r0, r5
 800eb92:	f7fc fa01 	bl	800af98 <ucdr_serialize_bool>
 800eb96:	7a3b      	ldrb	r3, [r7, #8]
 800eb98:	ea00 0804 	and.w	r8, r0, r4
 800eb9c:	b913      	cbnz	r3, 800eba4 <uxr_serialize_AGENT_Representation+0x40>
 800eb9e:	4640      	mov	r0, r8
 800eba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba4:	68f9      	ldr	r1, [r7, #12]
 800eba6:	4628      	mov	r0, r5
 800eba8:	f7fc fc3a 	bl	800b420 <ucdr_serialize_uint32_t>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	b303      	cbz	r3, 800ebf2 <uxr_serialize_AGENT_Representation+0x8e>
 800ebb0:	b1d0      	cbz	r0, 800ebe8 <uxr_serialize_AGENT_Representation+0x84>
 800ebb2:	463e      	mov	r6, r7
 800ebb4:	f04f 0900 	mov.w	r9, #0
 800ebb8:	e001      	b.n	800ebbe <uxr_serialize_AGENT_Representation+0x5a>
 800ebba:	3608      	adds	r6, #8
 800ebbc:	b1a4      	cbz	r4, 800ebe8 <uxr_serialize_AGENT_Representation+0x84>
 800ebbe:	6931      	ldr	r1, [r6, #16]
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f005 f85f 	bl	8013c84 <ucdr_serialize_string>
 800ebc6:	6971      	ldr	r1, [r6, #20]
 800ebc8:	4604      	mov	r4, r0
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f005 f85a 	bl	8013c84 <ucdr_serialize_string>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f109 0901 	add.w	r9, r9, #1
 800ebd6:	4004      	ands	r4, r0
 800ebd8:	4599      	cmp	r9, r3
 800ebda:	b2e4      	uxtb	r4, r4
 800ebdc:	d3ed      	bcc.n	800ebba <uxr_serialize_AGENT_Representation+0x56>
 800ebde:	ea08 0804 	and.w	r8, r8, r4
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebe8:	f04f 0800 	mov.w	r8, #0
 800ebec:	4640      	mov	r0, r8
 800ebee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebf2:	ea08 0800 	and.w	r8, r8, r0
 800ebf6:	e7d2      	b.n	800eb9e <uxr_serialize_AGENT_Representation+0x3a>

0800ebf8 <uxr_serialize_DATAWRITER_Representation>:
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	460d      	mov	r5, r1
 800ebfc:	7809      	ldrb	r1, [r1, #0]
 800ebfe:	4606      	mov	r6, r0
 800ec00:	f7fc f9f8 	bl	800aff4 <ucdr_serialize_uint8_t>
 800ec04:	4604      	mov	r4, r0
 800ec06:	b130      	cbz	r0, 800ec16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ec08:	782b      	ldrb	r3, [r5, #0]
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d00c      	beq.n	800ec28 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ec0e:	2b03      	cmp	r3, #3
 800ec10:	d010      	beq.n	800ec34 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d008      	beq.n	800ec28 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ec16:	2202      	movs	r2, #2
 800ec18:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f004 ff11 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800ec22:	4020      	ands	r0, r4
 800ec24:	b2c0      	uxtb	r0, r0
 800ec26:	bd70      	pop	{r4, r5, r6, pc}
 800ec28:	6869      	ldr	r1, [r5, #4]
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f005 f82a 	bl	8013c84 <ucdr_serialize_string>
 800ec30:	4604      	mov	r4, r0
 800ec32:	e7f0      	b.n	800ec16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ec34:	4629      	mov	r1, r5
 800ec36:	4630      	mov	r0, r6
 800ec38:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ec3c:	3104      	adds	r1, #4
 800ec3e:	f004 fff5 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800ec42:	4604      	mov	r4, r0
 800ec44:	e7e7      	b.n	800ec16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ec46:	bf00      	nop

0800ec48 <uxr_serialize_ObjectVariant.part.0>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	780b      	ldrb	r3, [r1, #0]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	460c      	mov	r4, r1
 800ec50:	4605      	mov	r5, r0
 800ec52:	2b0d      	cmp	r3, #13
 800ec54:	d854      	bhi.n	800ed00 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ec56:	e8df f003 	tbb	[pc, r3]
 800ec5a:	0730      	.short	0x0730
 800ec5c:	07071b1b 	.word	0x07071b1b
 800ec60:	0c530707 	.word	0x0c530707
 800ec64:	494e0c0c 	.word	0x494e0c0c
 800ec68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec6c:	3104      	adds	r1, #4
 800ec6e:	f7ff bfc3 	b.w	800ebf8 <uxr_serialize_DATAWRITER_Representation>
 800ec72:	7909      	ldrb	r1, [r1, #4]
 800ec74:	f7fc f9be 	bl	800aff4 <ucdr_serialize_uint8_t>
 800ec78:	b1e8      	cbz	r0, 800ecb6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ec7a:	7923      	ldrb	r3, [r4, #4]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d001      	beq.n	800ec84 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d13d      	bne.n	800ed00 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ec84:	68a1      	ldr	r1, [r4, #8]
 800ec86:	4628      	mov	r0, r5
 800ec88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec8c:	f004 bffa 	b.w	8013c84 <ucdr_serialize_string>
 800ec90:	7909      	ldrb	r1, [r1, #4]
 800ec92:	f7fc f9af 	bl	800aff4 <ucdr_serialize_uint8_t>
 800ec96:	4606      	mov	r6, r0
 800ec98:	b120      	cbz	r0, 800eca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ec9a:	7923      	ldrb	r3, [r4, #4]
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d039      	beq.n	800ed14 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800eca0:	2b03      	cmp	r3, #3
 800eca2:	d02f      	beq.n	800ed04 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800eca4:	2202      	movs	r2, #2
 800eca6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f004 feca 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800ecb0:	4030      	ands	r0, r6
 800ecb2:	b2c0      	uxtb	r0, r0
 800ecb4:	bd70      	pop	{r4, r5, r6, pc}
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	bd70      	pop	{r4, r5, r6, pc}
 800ecba:	7909      	ldrb	r1, [r1, #4]
 800ecbc:	f7fc f99a 	bl	800aff4 <ucdr_serialize_uint8_t>
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	b158      	cbz	r0, 800ecdc <uxr_serialize_ObjectVariant.part.0+0x94>
 800ecc4:	7923      	ldrb	r3, [r4, #4]
 800ecc6:	2b02      	cmp	r3, #2
 800ecc8:	d003      	beq.n	800ecd2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d028      	beq.n	800ed20 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d104      	bne.n	800ecdc <uxr_serialize_ObjectVariant.part.0+0x94>
 800ecd2:	68a1      	ldr	r1, [r4, #8]
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f004 ffd5 	bl	8013c84 <ucdr_serialize_string>
 800ecda:	4606      	mov	r6, r0
 800ecdc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ece0:	4628      	mov	r0, r5
 800ece2:	f7fc fec3 	bl	800ba6c <ucdr_serialize_int16_t>
 800ece6:	4030      	ands	r0, r6
 800ece8:	b2c0      	uxtb	r0, r0
 800ecea:	bd70      	pop	{r4, r5, r6, pc}
 800ecec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecf0:	3104      	adds	r1, #4
 800ecf2:	f7ff be7b 	b.w	800e9ec <uxr_serialize_CLIENT_Representation>
 800ecf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecfa:	3104      	adds	r1, #4
 800ecfc:	f7ff bf32 	b.w	800eb64 <uxr_serialize_AGENT_Representation>
 800ed00:	2001      	movs	r0, #1
 800ed02:	bd70      	pop	{r4, r5, r6, pc}
 800ed04:	68a2      	ldr	r2, [r4, #8]
 800ed06:	f104 010c 	add.w	r1, r4, #12
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	f004 ff8e 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800ed10:	4606      	mov	r6, r0
 800ed12:	e7c7      	b.n	800eca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ed14:	68a1      	ldr	r1, [r4, #8]
 800ed16:	4628      	mov	r0, r5
 800ed18:	f004 ffb4 	bl	8013c84 <ucdr_serialize_string>
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	e7c1      	b.n	800eca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ed20:	68a2      	ldr	r2, [r4, #8]
 800ed22:	f104 010c 	add.w	r1, r4, #12
 800ed26:	4628      	mov	r0, r5
 800ed28:	f004 ff80 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	e7d5      	b.n	800ecdc <uxr_serialize_ObjectVariant.part.0+0x94>

0800ed30 <uxr_deserialize_DATAWRITER_Representation>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	4606      	mov	r6, r0
 800ed34:	460d      	mov	r5, r1
 800ed36:	f7fc f973 	bl	800b020 <ucdr_deserialize_uint8_t>
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	b130      	cbz	r0, 800ed4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ed3e:	782b      	ldrb	r3, [r5, #0]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d00c      	beq.n	800ed5e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d012      	beq.n	800ed6e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d008      	beq.n	800ed5e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ed4c:	2202      	movs	r2, #2
 800ed4e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ed52:	4630      	mov	r0, r6
 800ed54:	f004 feda 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800ed58:	4020      	ands	r0, r4
 800ed5a:	b2c0      	uxtb	r0, r0
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}
 800ed5e:	6869      	ldr	r1, [r5, #4]
 800ed60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed64:	4630      	mov	r0, r6
 800ed66:	f004 ff9d 	bl	8013ca4 <ucdr_deserialize_string>
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	e7ee      	b.n	800ed4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ed6e:	1d2b      	adds	r3, r5, #4
 800ed70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed74:	f105 0108 	add.w	r1, r5, #8
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f004 ff69 	bl	8013c50 <ucdr_deserialize_sequence_uint8_t>
 800ed7e:	4604      	mov	r4, r0
 800ed80:	e7e4      	b.n	800ed4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ed82:	bf00      	nop

0800ed84 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	460d      	mov	r5, r1
 800ed88:	7809      	ldrb	r1, [r1, #0]
 800ed8a:	4606      	mov	r6, r0
 800ed8c:	f7fc f904 	bl	800af98 <ucdr_serialize_bool>
 800ed90:	782b      	ldrb	r3, [r5, #0]
 800ed92:	4604      	mov	r4, r0
 800ed94:	b94b      	cbnz	r3, 800edaa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ed96:	7a29      	ldrb	r1, [r5, #8]
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7fc f8fd 	bl	800af98 <ucdr_serialize_bool>
 800ed9e:	7a2b      	ldrb	r3, [r5, #8]
 800eda0:	4004      	ands	r4, r0
 800eda2:	b2e4      	uxtb	r4, r4
 800eda4:	b943      	cbnz	r3, 800edb8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800eda6:	4620      	mov	r0, r4
 800eda8:	bd70      	pop	{r4, r5, r6, pc}
 800edaa:	6869      	ldr	r1, [r5, #4]
 800edac:	4630      	mov	r0, r6
 800edae:	f004 ff69 	bl	8013c84 <ucdr_serialize_string>
 800edb2:	4004      	ands	r4, r0
 800edb4:	b2e4      	uxtb	r4, r4
 800edb6:	e7ee      	b.n	800ed96 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800edb8:	68e9      	ldr	r1, [r5, #12]
 800edba:	4630      	mov	r0, r6
 800edbc:	f004 ff62 	bl	8013c84 <ucdr_serialize_string>
 800edc0:	4004      	ands	r4, r0
 800edc2:	4620      	mov	r0, r4
 800edc4:	bd70      	pop	{r4, r5, r6, pc}
 800edc6:	bf00      	nop

0800edc8 <uxr_serialize_OBJK_Topic_Binary>:
 800edc8:	b570      	push	{r4, r5, r6, lr}
 800edca:	460d      	mov	r5, r1
 800edcc:	6809      	ldr	r1, [r1, #0]
 800edce:	4606      	mov	r6, r0
 800edd0:	f004 ff58 	bl	8013c84 <ucdr_serialize_string>
 800edd4:	7929      	ldrb	r1, [r5, #4]
 800edd6:	4604      	mov	r4, r0
 800edd8:	4630      	mov	r0, r6
 800edda:	f7fc f8dd 	bl	800af98 <ucdr_serialize_bool>
 800edde:	792b      	ldrb	r3, [r5, #4]
 800ede0:	4004      	ands	r4, r0
 800ede2:	b2e4      	uxtb	r4, r4
 800ede4:	b943      	cbnz	r3, 800edf8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ede6:	7b29      	ldrb	r1, [r5, #12]
 800ede8:	4630      	mov	r0, r6
 800edea:	f7fc f8d5 	bl	800af98 <ucdr_serialize_bool>
 800edee:	7b2b      	ldrb	r3, [r5, #12]
 800edf0:	4004      	ands	r4, r0
 800edf2:	b93b      	cbnz	r3, 800ee04 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800edf4:	4620      	mov	r0, r4
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	68a9      	ldr	r1, [r5, #8]
 800edfa:	4630      	mov	r0, r6
 800edfc:	f004 ff42 	bl	8013c84 <ucdr_serialize_string>
 800ee00:	4004      	ands	r4, r0
 800ee02:	e7f0      	b.n	800ede6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ee04:	6929      	ldr	r1, [r5, #16]
 800ee06:	4630      	mov	r0, r6
 800ee08:	f004 ff3c 	bl	8013c84 <ucdr_serialize_string>
 800ee0c:	4004      	ands	r4, r0
 800ee0e:	b2e4      	uxtb	r4, r4
 800ee10:	4620      	mov	r0, r4
 800ee12:	bd70      	pop	{r4, r5, r6, pc}

0800ee14 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee18:	460c      	mov	r4, r1
 800ee1a:	7809      	ldrb	r1, [r1, #0]
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	f7fc f8bb 	bl	800af98 <ucdr_serialize_bool>
 800ee22:	7823      	ldrb	r3, [r4, #0]
 800ee24:	4605      	mov	r5, r0
 800ee26:	b96b      	cbnz	r3, 800ee44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ee28:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f7fc f8b3 	bl	800af98 <ucdr_serialize_bool>
 800ee32:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ee36:	4005      	ands	r5, r0
 800ee38:	b2ed      	uxtb	r5, r5
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d169      	bne.n	800ef12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800ee3e:	4628      	mov	r0, r5
 800ee40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee44:	6861      	ldr	r1, [r4, #4]
 800ee46:	4630      	mov	r0, r6
 800ee48:	f7fc faea 	bl	800b420 <ucdr_serialize_uint32_t>
 800ee4c:	6863      	ldr	r3, [r4, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d06b      	beq.n	800ef2a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d067      	beq.n	800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ee56:	68a1      	ldr	r1, [r4, #8]
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f004 ff13 	bl	8013c84 <ucdr_serialize_string>
 800ee5e:	6863      	ldr	r3, [r4, #4]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d953      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d05e      	beq.n	800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ee68:	68e1      	ldr	r1, [r4, #12]
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f004 ff0a 	bl	8013c84 <ucdr_serialize_string>
 800ee70:	6863      	ldr	r3, [r4, #4]
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d94a      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d055      	beq.n	800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ee7a:	6921      	ldr	r1, [r4, #16]
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f004 ff01 	bl	8013c84 <ucdr_serialize_string>
 800ee82:	6863      	ldr	r3, [r4, #4]
 800ee84:	2b03      	cmp	r3, #3
 800ee86:	d941      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d04c      	beq.n	800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ee8c:	6961      	ldr	r1, [r4, #20]
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f004 fef8 	bl	8013c84 <ucdr_serialize_string>
 800ee94:	6863      	ldr	r3, [r4, #4]
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	d938      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d043      	beq.n	800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ee9e:	69a1      	ldr	r1, [r4, #24]
 800eea0:	4630      	mov	r0, r6
 800eea2:	f004 feef 	bl	8013c84 <ucdr_serialize_string>
 800eea6:	6863      	ldr	r3, [r4, #4]
 800eea8:	2b05      	cmp	r3, #5
 800eeaa:	d92f      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d03a      	beq.n	800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eeb0:	69e1      	ldr	r1, [r4, #28]
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f004 fee6 	bl	8013c84 <ucdr_serialize_string>
 800eeb8:	6863      	ldr	r3, [r4, #4]
 800eeba:	2b06      	cmp	r3, #6
 800eebc:	d926      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eebe:	b390      	cbz	r0, 800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eec0:	6a21      	ldr	r1, [r4, #32]
 800eec2:	4630      	mov	r0, r6
 800eec4:	f004 fede 	bl	8013c84 <ucdr_serialize_string>
 800eec8:	6863      	ldr	r3, [r4, #4]
 800eeca:	2b07      	cmp	r3, #7
 800eecc:	d91e      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eece:	b350      	cbz	r0, 800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eed0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800eed2:	4630      	mov	r0, r6
 800eed4:	f004 fed6 	bl	8013c84 <ucdr_serialize_string>
 800eed8:	6863      	ldr	r3, [r4, #4]
 800eeda:	2b08      	cmp	r3, #8
 800eedc:	d916      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eede:	b310      	cbz	r0, 800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eee0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800eee2:	4630      	mov	r0, r6
 800eee4:	f004 fece 	bl	8013c84 <ucdr_serialize_string>
 800eee8:	6863      	ldr	r3, [r4, #4]
 800eeea:	2b09      	cmp	r3, #9
 800eeec:	d90e      	bls.n	800ef0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eeee:	b1d0      	cbz	r0, 800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eef0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800eef4:	2709      	movs	r7, #9
 800eef6:	e000      	b.n	800eefa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800eef8:	b1a8      	cbz	r0, 800ef26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eefa:	f858 1b04 	ldr.w	r1, [r8], #4
 800eefe:	4630      	mov	r0, r6
 800ef00:	f004 fec0 	bl	8013c84 <ucdr_serialize_string>
 800ef04:	6862      	ldr	r2, [r4, #4]
 800ef06:	3701      	adds	r7, #1
 800ef08:	4297      	cmp	r7, r2
 800ef0a:	d3f5      	bcc.n	800eef8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ef0c:	4005      	ands	r5, r0
 800ef0e:	b2ed      	uxtb	r5, r5
 800ef10:	e78a      	b.n	800ee28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ef12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef14:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f004 fe87 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800ef1e:	4005      	ands	r5, r0
 800ef20:	4628      	mov	r0, r5
 800ef22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef26:	2500      	movs	r5, #0
 800ef28:	e77e      	b.n	800ee28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ef2a:	4028      	ands	r0, r5
 800ef2c:	b2c5      	uxtb	r5, r0
 800ef2e:	e77b      	b.n	800ee28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800ef30 <uxr_serialize_OBJK_Publisher_Binary>:
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	460d      	mov	r5, r1
 800ef34:	7809      	ldrb	r1, [r1, #0]
 800ef36:	4606      	mov	r6, r0
 800ef38:	f7fc f82e 	bl	800af98 <ucdr_serialize_bool>
 800ef3c:	782b      	ldrb	r3, [r5, #0]
 800ef3e:	4604      	mov	r4, r0
 800ef40:	b94b      	cbnz	r3, 800ef56 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ef42:	7a29      	ldrb	r1, [r5, #8]
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7fc f827 	bl	800af98 <ucdr_serialize_bool>
 800ef4a:	7a2b      	ldrb	r3, [r5, #8]
 800ef4c:	4004      	ands	r4, r0
 800ef4e:	b2e4      	uxtb	r4, r4
 800ef50:	b943      	cbnz	r3, 800ef64 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ef52:	4620      	mov	r0, r4
 800ef54:	bd70      	pop	{r4, r5, r6, pc}
 800ef56:	6869      	ldr	r1, [r5, #4]
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f004 fe93 	bl	8013c84 <ucdr_serialize_string>
 800ef5e:	4004      	ands	r4, r0
 800ef60:	b2e4      	uxtb	r4, r4
 800ef62:	e7ee      	b.n	800ef42 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ef64:	f105 010c 	add.w	r1, r5, #12
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f7ff ff53 	bl	800ee14 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ef6e:	4004      	ands	r4, r0
 800ef70:	4620      	mov	r0, r4
 800ef72:	bd70      	pop	{r4, r5, r6, pc}

0800ef74 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800ef74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef78:	460c      	mov	r4, r1
 800ef7a:	7809      	ldrb	r1, [r1, #0]
 800ef7c:	4606      	mov	r6, r0
 800ef7e:	f7fc f80b 	bl	800af98 <ucdr_serialize_bool>
 800ef82:	7823      	ldrb	r3, [r4, #0]
 800ef84:	4605      	mov	r5, r0
 800ef86:	b96b      	cbnz	r3, 800efa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800ef88:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f7fc f803 	bl	800af98 <ucdr_serialize_bool>
 800ef92:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ef96:	4005      	ands	r5, r0
 800ef98:	b2ed      	uxtb	r5, r5
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d169      	bne.n	800f072 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800ef9e:	4628      	mov	r0, r5
 800efa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa4:	6861      	ldr	r1, [r4, #4]
 800efa6:	4630      	mov	r0, r6
 800efa8:	f7fc fa3a 	bl	800b420 <ucdr_serialize_uint32_t>
 800efac:	6863      	ldr	r3, [r4, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d06b      	beq.n	800f08a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d067      	beq.n	800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800efb6:	68a1      	ldr	r1, [r4, #8]
 800efb8:	4630      	mov	r0, r6
 800efba:	f004 fe63 	bl	8013c84 <ucdr_serialize_string>
 800efbe:	6863      	ldr	r3, [r4, #4]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d953      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	d05e      	beq.n	800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800efc8:	68e1      	ldr	r1, [r4, #12]
 800efca:	4630      	mov	r0, r6
 800efcc:	f004 fe5a 	bl	8013c84 <ucdr_serialize_string>
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d94a      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d055      	beq.n	800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800efda:	6921      	ldr	r1, [r4, #16]
 800efdc:	4630      	mov	r0, r6
 800efde:	f004 fe51 	bl	8013c84 <ucdr_serialize_string>
 800efe2:	6863      	ldr	r3, [r4, #4]
 800efe4:	2b03      	cmp	r3, #3
 800efe6:	d941      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800efe8:	2800      	cmp	r0, #0
 800efea:	d04c      	beq.n	800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800efec:	6961      	ldr	r1, [r4, #20]
 800efee:	4630      	mov	r0, r6
 800eff0:	f004 fe48 	bl	8013c84 <ucdr_serialize_string>
 800eff4:	6863      	ldr	r3, [r4, #4]
 800eff6:	2b04      	cmp	r3, #4
 800eff8:	d938      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800effa:	2800      	cmp	r0, #0
 800effc:	d043      	beq.n	800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800effe:	69a1      	ldr	r1, [r4, #24]
 800f000:	4630      	mov	r0, r6
 800f002:	f004 fe3f 	bl	8013c84 <ucdr_serialize_string>
 800f006:	6863      	ldr	r3, [r4, #4]
 800f008:	2b05      	cmp	r3, #5
 800f00a:	d92f      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d03a      	beq.n	800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f010:	69e1      	ldr	r1, [r4, #28]
 800f012:	4630      	mov	r0, r6
 800f014:	f004 fe36 	bl	8013c84 <ucdr_serialize_string>
 800f018:	6863      	ldr	r3, [r4, #4]
 800f01a:	2b06      	cmp	r3, #6
 800f01c:	d926      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f01e:	b390      	cbz	r0, 800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f020:	6a21      	ldr	r1, [r4, #32]
 800f022:	4630      	mov	r0, r6
 800f024:	f004 fe2e 	bl	8013c84 <ucdr_serialize_string>
 800f028:	6863      	ldr	r3, [r4, #4]
 800f02a:	2b07      	cmp	r3, #7
 800f02c:	d91e      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f02e:	b350      	cbz	r0, 800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f030:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f032:	4630      	mov	r0, r6
 800f034:	f004 fe26 	bl	8013c84 <ucdr_serialize_string>
 800f038:	6863      	ldr	r3, [r4, #4]
 800f03a:	2b08      	cmp	r3, #8
 800f03c:	d916      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f03e:	b310      	cbz	r0, 800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f040:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f042:	4630      	mov	r0, r6
 800f044:	f004 fe1e 	bl	8013c84 <ucdr_serialize_string>
 800f048:	6863      	ldr	r3, [r4, #4]
 800f04a:	2b09      	cmp	r3, #9
 800f04c:	d90e      	bls.n	800f06c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f04e:	b1d0      	cbz	r0, 800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f050:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f054:	2709      	movs	r7, #9
 800f056:	e000      	b.n	800f05a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f058:	b1a8      	cbz	r0, 800f086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f05a:	f858 1b04 	ldr.w	r1, [r8], #4
 800f05e:	4630      	mov	r0, r6
 800f060:	f004 fe10 	bl	8013c84 <ucdr_serialize_string>
 800f064:	6862      	ldr	r2, [r4, #4]
 800f066:	3701      	adds	r7, #1
 800f068:	4297      	cmp	r7, r2
 800f06a:	d3f5      	bcc.n	800f058 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f06c:	4005      	ands	r5, r0
 800f06e:	b2ed      	uxtb	r5, r5
 800f070:	e78a      	b.n	800ef88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f072:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f074:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f078:	4630      	mov	r0, r6
 800f07a:	f004 fdd7 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800f07e:	4005      	ands	r5, r0
 800f080:	4628      	mov	r0, r5
 800f082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f086:	2500      	movs	r5, #0
 800f088:	e77e      	b.n	800ef88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f08a:	4028      	ands	r0, r5
 800f08c:	b2c5      	uxtb	r5, r0
 800f08e:	e77b      	b.n	800ef88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f090 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	460d      	mov	r5, r1
 800f094:	7809      	ldrb	r1, [r1, #0]
 800f096:	4606      	mov	r6, r0
 800f098:	f7fb ff7e 	bl	800af98 <ucdr_serialize_bool>
 800f09c:	782b      	ldrb	r3, [r5, #0]
 800f09e:	4604      	mov	r4, r0
 800f0a0:	b94b      	cbnz	r3, 800f0b6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f0a2:	7a29      	ldrb	r1, [r5, #8]
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7fb ff77 	bl	800af98 <ucdr_serialize_bool>
 800f0aa:	7a2b      	ldrb	r3, [r5, #8]
 800f0ac:	4004      	ands	r4, r0
 800f0ae:	b2e4      	uxtb	r4, r4
 800f0b0:	b943      	cbnz	r3, 800f0c4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	6869      	ldr	r1, [r5, #4]
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f004 fde3 	bl	8013c84 <ucdr_serialize_string>
 800f0be:	4004      	ands	r4, r0
 800f0c0:	b2e4      	uxtb	r4, r4
 800f0c2:	e7ee      	b.n	800f0a2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f0c4:	f105 010c 	add.w	r1, r5, #12
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f7ff ff53 	bl	800ef74 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f0ce:	4004      	ands	r4, r0
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	bd70      	pop	{r4, r5, r6, pc}

0800f0d4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f0d4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f0d8:	4688      	mov	r8, r1
 800f0da:	8809      	ldrh	r1, [r1, #0]
 800f0dc:	4681      	mov	r9, r0
 800f0de:	f7fb ffb5 	bl	800b04c <ucdr_serialize_uint16_t>
 800f0e2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	4648      	mov	r0, r9
 800f0ea:	f7fb ff55 	bl	800af98 <ucdr_serialize_bool>
 800f0ee:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f0f2:	4006      	ands	r6, r0
 800f0f4:	b2f5      	uxtb	r5, r6
 800f0f6:	b9eb      	cbnz	r3, 800f134 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f0f8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f0fc:	4648      	mov	r0, r9
 800f0fe:	f7fb ff4b 	bl	800af98 <ucdr_serialize_bool>
 800f102:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f106:	4005      	ands	r5, r0
 800f108:	bb7b      	cbnz	r3, 800f16a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f10a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f10e:	4648      	mov	r0, r9
 800f110:	f7fb ff42 	bl	800af98 <ucdr_serialize_bool>
 800f114:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f118:	4005      	ands	r5, r0
 800f11a:	b9f3      	cbnz	r3, 800f15a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f11c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f120:	4648      	mov	r0, r9
 800f122:	f7fb ff39 	bl	800af98 <ucdr_serialize_bool>
 800f126:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f12a:	4005      	ands	r5, r0
 800f12c:	b94b      	cbnz	r3, 800f142 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f12e:	4628      	mov	r0, r5
 800f130:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f134:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f138:	4648      	mov	r0, r9
 800f13a:	f7fb ff87 	bl	800b04c <ucdr_serialize_uint16_t>
 800f13e:	4005      	ands	r5, r0
 800f140:	e7da      	b.n	800f0f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f142:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f146:	f108 011c 	add.w	r1, r8, #28
 800f14a:	4648      	mov	r0, r9
 800f14c:	f004 fd6e 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800f150:	4028      	ands	r0, r5
 800f152:	b2c5      	uxtb	r5, r0
 800f154:	4628      	mov	r0, r5
 800f156:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f15a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f15e:	4648      	mov	r0, r9
 800f160:	f7fc f95e 	bl	800b420 <ucdr_serialize_uint32_t>
 800f164:	4028      	ands	r0, r5
 800f166:	b2c5      	uxtb	r5, r0
 800f168:	e7d8      	b.n	800f11c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f16a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f16e:	4648      	mov	r0, r9
 800f170:	f7fc f956 	bl	800b420 <ucdr_serialize_uint32_t>
 800f174:	4028      	ands	r0, r5
 800f176:	b2c5      	uxtb	r5, r0
 800f178:	e7c7      	b.n	800f10a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f17a:	bf00      	nop

0800f17c <uxr_serialize_OBJK_DataReader_Binary>:
 800f17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f17e:	2202      	movs	r2, #2
 800f180:	460c      	mov	r4, r1
 800f182:	4606      	mov	r6, r0
 800f184:	f004 fc5e 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f188:	78a1      	ldrb	r1, [r4, #2]
 800f18a:	4605      	mov	r5, r0
 800f18c:	4630      	mov	r0, r6
 800f18e:	f7fb ff03 	bl	800af98 <ucdr_serialize_bool>
 800f192:	78a3      	ldrb	r3, [r4, #2]
 800f194:	4005      	ands	r5, r0
 800f196:	b2ed      	uxtb	r5, r5
 800f198:	b90b      	cbnz	r3, 800f19e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f19a:	4628      	mov	r0, r5
 800f19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19e:	f104 0108 	add.w	r1, r4, #8
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	f7ff ff96 	bl	800f0d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f1a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f1ac:	4607      	mov	r7, r0
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f7fb fef2 	bl	800af98 <ucdr_serialize_bool>
 800f1b4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f1b8:	4038      	ands	r0, r7
 800f1ba:	b2c7      	uxtb	r7, r0
 800f1bc:	b95b      	cbnz	r3, 800f1d6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f1be:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f7fb fee8 	bl	800af98 <ucdr_serialize_bool>
 800f1c8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f1cc:	4007      	ands	r7, r0
 800f1ce:	b94b      	cbnz	r3, 800f1e4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f1d0:	403d      	ands	r5, r7
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f7fc fb76 	bl	800b8cc <ucdr_serialize_uint64_t>
 800f1e0:	4007      	ands	r7, r0
 800f1e2:	e7ec      	b.n	800f1be <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f1e4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f004 fd4c 	bl	8013c84 <ucdr_serialize_string>
 800f1ec:	4007      	ands	r7, r0
 800f1ee:	b2ff      	uxtb	r7, r7
 800f1f0:	e7ee      	b.n	800f1d0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f1f2:	bf00      	nop

0800f1f4 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	2202      	movs	r2, #2
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	f004 fc22 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f200:	78a9      	ldrb	r1, [r5, #2]
 800f202:	4604      	mov	r4, r0
 800f204:	4630      	mov	r0, r6
 800f206:	f7fb fec7 	bl	800af98 <ucdr_serialize_bool>
 800f20a:	78ab      	ldrb	r3, [r5, #2]
 800f20c:	4004      	ands	r4, r0
 800f20e:	b2e4      	uxtb	r4, r4
 800f210:	b90b      	cbnz	r3, 800f216 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f212:	4620      	mov	r0, r4
 800f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f216:	f105 0108 	add.w	r1, r5, #8
 800f21a:	4630      	mov	r0, r6
 800f21c:	f7ff ff5a 	bl	800f0d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f220:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800f224:	4607      	mov	r7, r0
 800f226:	4630      	mov	r0, r6
 800f228:	f7fb feb6 	bl	800af98 <ucdr_serialize_bool>
 800f22c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f230:	4038      	ands	r0, r7
 800f232:	b2c7      	uxtb	r7, r0
 800f234:	b913      	cbnz	r3, 800f23c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f236:	403c      	ands	r4, r7
 800f238:	4620      	mov	r0, r4
 800f23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800f240:	4630      	mov	r0, r6
 800f242:	f7fc fb43 	bl	800b8cc <ucdr_serialize_uint64_t>
 800f246:	4007      	ands	r7, r0
 800f248:	e7f5      	b.n	800f236 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f24a:	bf00      	nop

0800f24c <uxr_deserialize_ObjectVariant>:
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	4605      	mov	r5, r0
 800f250:	460e      	mov	r6, r1
 800f252:	f7fb fee5 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f256:	b168      	cbz	r0, 800f274 <uxr_deserialize_ObjectVariant+0x28>
 800f258:	7833      	ldrb	r3, [r6, #0]
 800f25a:	3b01      	subs	r3, #1
 800f25c:	4604      	mov	r4, r0
 800f25e:	2b0d      	cmp	r3, #13
 800f260:	d809      	bhi.n	800f276 <uxr_deserialize_ObjectVariant+0x2a>
 800f262:	e8df f003 	tbb	[pc, r3]
 800f266:	0a41      	.short	0x0a41
 800f268:	0a0a2323 	.word	0x0a0a2323
 800f26c:	10080a0a 	.word	0x10080a0a
 800f270:	565c1010 	.word	0x565c1010
 800f274:	2400      	movs	r4, #0
 800f276:	4620      	mov	r0, r4
 800f278:	bd70      	pop	{r4, r5, r6, pc}
 800f27a:	1d31      	adds	r1, r6, #4
 800f27c:	4628      	mov	r0, r5
 800f27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f282:	f7ff bd55 	b.w	800ed30 <uxr_deserialize_DATAWRITER_Representation>
 800f286:	1d31      	adds	r1, r6, #4
 800f288:	4628      	mov	r0, r5
 800f28a:	f7fb fec9 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f28e:	2800      	cmp	r0, #0
 800f290:	d0f0      	beq.n	800f274 <uxr_deserialize_ObjectVariant+0x28>
 800f292:	7933      	ldrb	r3, [r6, #4]
 800f294:	2b01      	cmp	r3, #1
 800f296:	d001      	beq.n	800f29c <uxr_deserialize_ObjectVariant+0x50>
 800f298:	2b02      	cmp	r3, #2
 800f29a:	d1ec      	bne.n	800f276 <uxr_deserialize_ObjectVariant+0x2a>
 800f29c:	68b1      	ldr	r1, [r6, #8]
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2a8:	f004 bcfc 	b.w	8013ca4 <ucdr_deserialize_string>
 800f2ac:	1d31      	adds	r1, r6, #4
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f7fb feb6 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	b170      	cbz	r0, 800f2d6 <uxr_deserialize_ObjectVariant+0x8a>
 800f2b8:	7933      	ldrb	r3, [r6, #4]
 800f2ba:	2b02      	cmp	r3, #2
 800f2bc:	d04c      	beq.n	800f358 <uxr_deserialize_ObjectVariant+0x10c>
 800f2be:	2b03      	cmp	r3, #3
 800f2c0:	d109      	bne.n	800f2d6 <uxr_deserialize_ObjectVariant+0x8a>
 800f2c2:	f106 0308 	add.w	r3, r6, #8
 800f2c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2ca:	f106 010c 	add.w	r1, r6, #12
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f004 fcbe 	bl	8013c50 <ucdr_deserialize_sequence_uint8_t>
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	2202      	movs	r2, #2
 800f2d8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f2dc:	4628      	mov	r0, r5
 800f2de:	f004 fc15 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f2e2:	4020      	ands	r0, r4
 800f2e4:	b2c4      	uxtb	r4, r0
 800f2e6:	e7c6      	b.n	800f276 <uxr_deserialize_ObjectVariant+0x2a>
 800f2e8:	1d31      	adds	r1, r6, #4
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f7fb fe98 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	b130      	cbz	r0, 800f302 <uxr_deserialize_ObjectVariant+0xb6>
 800f2f4:	7933      	ldrb	r3, [r6, #4]
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d036      	beq.n	800f368 <uxr_deserialize_ObjectVariant+0x11c>
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	d03c      	beq.n	800f378 <uxr_deserialize_ObjectVariant+0x12c>
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d032      	beq.n	800f368 <uxr_deserialize_ObjectVariant+0x11c>
 800f302:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f306:	4628      	mov	r0, r5
 800f308:	f7fc fc30 	bl	800bb6c <ucdr_deserialize_int16_t>
 800f30c:	4020      	ands	r0, r4
 800f30e:	b2c4      	uxtb	r4, r0
 800f310:	e7b1      	b.n	800f276 <uxr_deserialize_ObjectVariant+0x2a>
 800f312:	1d31      	adds	r1, r6, #4
 800f314:	4628      	mov	r0, r5
 800f316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f31a:	f7ff bbbf 	b.w	800ea9c <uxr_deserialize_CLIENT_Representation>
 800f31e:	2204      	movs	r2, #4
 800f320:	18b1      	adds	r1, r6, r2
 800f322:	4628      	mov	r0, r5
 800f324:	f004 fbf2 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f328:	2202      	movs	r2, #2
 800f32a:	f106 0108 	add.w	r1, r6, #8
 800f32e:	4604      	mov	r4, r0
 800f330:	4628      	mov	r0, r5
 800f332:	f004 fbeb 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f336:	2202      	movs	r2, #2
 800f338:	4004      	ands	r4, r0
 800f33a:	f106 010a 	add.w	r1, r6, #10
 800f33e:	4628      	mov	r0, r5
 800f340:	f004 fbe4 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f344:	b2e4      	uxtb	r4, r4
 800f346:	4603      	mov	r3, r0
 800f348:	f106 010c 	add.w	r1, r6, #12
 800f34c:	4628      	mov	r0, r5
 800f34e:	401c      	ands	r4, r3
 800f350:	f7fb fe38 	bl	800afc4 <ucdr_deserialize_bool>
 800f354:	4004      	ands	r4, r0
 800f356:	e78e      	b.n	800f276 <uxr_deserialize_ObjectVariant+0x2a>
 800f358:	68b1      	ldr	r1, [r6, #8]
 800f35a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f35e:	4628      	mov	r0, r5
 800f360:	f004 fca0 	bl	8013ca4 <ucdr_deserialize_string>
 800f364:	4604      	mov	r4, r0
 800f366:	e7b6      	b.n	800f2d6 <uxr_deserialize_ObjectVariant+0x8a>
 800f368:	68b1      	ldr	r1, [r6, #8]
 800f36a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f36e:	4628      	mov	r0, r5
 800f370:	f004 fc98 	bl	8013ca4 <ucdr_deserialize_string>
 800f374:	4604      	mov	r4, r0
 800f376:	e7c4      	b.n	800f302 <uxr_deserialize_ObjectVariant+0xb6>
 800f378:	f106 0308 	add.w	r3, r6, #8
 800f37c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f380:	f106 010c 	add.w	r1, r6, #12
 800f384:	4628      	mov	r0, r5
 800f386:	f004 fc63 	bl	8013c50 <ucdr_deserialize_sequence_uint8_t>
 800f38a:	4604      	mov	r4, r0
 800f38c:	e7b9      	b.n	800f302 <uxr_deserialize_ObjectVariant+0xb6>
 800f38e:	bf00      	nop

0800f390 <uxr_deserialize_BaseObjectRequest>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	2202      	movs	r2, #2
 800f394:	4605      	mov	r5, r0
 800f396:	460e      	mov	r6, r1
 800f398:	f004 fbb8 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f39c:	2202      	movs	r2, #2
 800f39e:	4604      	mov	r4, r0
 800f3a0:	18b1      	adds	r1, r6, r2
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f004 fbb2 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f3a8:	4020      	ands	r0, r4
 800f3aa:	b2c0      	uxtb	r0, r0
 800f3ac:	bd70      	pop	{r4, r5, r6, pc}
 800f3ae:	bf00      	nop

0800f3b0 <uxr_serialize_ActivityInfoVariant>:
 800f3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b4:	460d      	mov	r5, r1
 800f3b6:	7809      	ldrb	r1, [r1, #0]
 800f3b8:	4607      	mov	r7, r0
 800f3ba:	f7fb fe1b 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f3be:	4681      	mov	r9, r0
 800f3c0:	b138      	cbz	r0, 800f3d2 <uxr_serialize_ActivityInfoVariant+0x22>
 800f3c2:	782b      	ldrb	r3, [r5, #0]
 800f3c4:	2b06      	cmp	r3, #6
 800f3c6:	f000 8082 	beq.w	800f4ce <uxr_serialize_ActivityInfoVariant+0x11e>
 800f3ca:	2b0d      	cmp	r3, #13
 800f3cc:	d016      	beq.n	800f3fc <uxr_serialize_ActivityInfoVariant+0x4c>
 800f3ce:	2b05      	cmp	r3, #5
 800f3d0:	d002      	beq.n	800f3d8 <uxr_serialize_ActivityInfoVariant+0x28>
 800f3d2:	4648      	mov	r0, r9
 800f3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f7fc fb45 	bl	800ba6c <ucdr_serialize_int16_t>
 800f3e2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f3e6:	4681      	mov	r9, r0
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f7fc fa6f 	bl	800b8cc <ucdr_serialize_uint64_t>
 800f3ee:	ea09 0000 	and.w	r0, r9, r0
 800f3f2:	fa5f f980 	uxtb.w	r9, r0
 800f3f6:	4648      	mov	r0, r9
 800f3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3fc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f400:	4638      	mov	r0, r7
 800f402:	f7fc fb33 	bl	800ba6c <ucdr_serialize_int16_t>
 800f406:	68e9      	ldr	r1, [r5, #12]
 800f408:	4681      	mov	r9, r0
 800f40a:	4638      	mov	r0, r7
 800f40c:	f7fc f808 	bl	800b420 <ucdr_serialize_uint32_t>
 800f410:	68eb      	ldr	r3, [r5, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0eb      	beq.n	800f3ee <uxr_serialize_ActivityInfoVariant+0x3e>
 800f416:	b320      	cbz	r0, 800f462 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f418:	f105 080c 	add.w	r8, r5, #12
 800f41c:	2600      	movs	r6, #0
 800f41e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f422:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f426:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f42a:	4638      	mov	r0, r7
 800f42c:	f7fb fde2 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f430:	2800      	cmp	r0, #0
 800f432:	d053      	beq.n	800f4dc <uxr_serialize_ActivityInfoVariant+0x12c>
 800f434:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f438:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f43c:	0074      	lsls	r4, r6, #1
 800f43e:	00c9      	lsls	r1, r1, #3
 800f440:	2b03      	cmp	r3, #3
 800f442:	d854      	bhi.n	800f4ee <uxr_serialize_ActivityInfoVariant+0x13e>
 800f444:	e8df f003 	tbb	[pc, r3]
 800f448:	02102132 	.word	0x02102132
 800f44c:	4441      	add	r1, r8
 800f44e:	4638      	mov	r0, r7
 800f450:	6889      	ldr	r1, [r1, #8]
 800f452:	f004 fc17 	bl	8013c84 <ucdr_serialize_string>
 800f456:	68ea      	ldr	r2, [r5, #12]
 800f458:	3601      	adds	r6, #1
 800f45a:	4296      	cmp	r6, r2
 800f45c:	d242      	bcs.n	800f4e4 <uxr_serialize_ActivityInfoVariant+0x134>
 800f45e:	2800      	cmp	r0, #0
 800f460:	d1dd      	bne.n	800f41e <uxr_serialize_ActivityInfoVariant+0x6e>
 800f462:	f04f 0900 	mov.w	r9, #0
 800f466:	e7b4      	b.n	800f3d2 <uxr_serialize_ActivityInfoVariant+0x22>
 800f468:	3108      	adds	r1, #8
 800f46a:	4441      	add	r1, r8
 800f46c:	2210      	movs	r2, #16
 800f46e:	4638      	mov	r0, r7
 800f470:	f004 fae8 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f474:	4434      	add	r4, r6
 800f476:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f47a:	4604      	mov	r4, r0
 800f47c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f47e:	4638      	mov	r0, r7
 800f480:	f7fb ffce 	bl	800b420 <ucdr_serialize_uint32_t>
 800f484:	4020      	ands	r0, r4
 800f486:	b2c0      	uxtb	r0, r0
 800f488:	e7e5      	b.n	800f456 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f48a:	3108      	adds	r1, #8
 800f48c:	4441      	add	r1, r8
 800f48e:	2204      	movs	r2, #4
 800f490:	4638      	mov	r0, r7
 800f492:	f004 fad7 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f496:	4434      	add	r4, r6
 800f498:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f49c:	4604      	mov	r4, r0
 800f49e:	8b19      	ldrh	r1, [r3, #24]
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	f7fb fdd3 	bl	800b04c <ucdr_serialize_uint16_t>
 800f4a6:	4020      	ands	r0, r4
 800f4a8:	b2c0      	uxtb	r0, r0
 800f4aa:	e7d4      	b.n	800f456 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f4ac:	3108      	adds	r1, #8
 800f4ae:	4441      	add	r1, r8
 800f4b0:	2202      	movs	r2, #2
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	f004 fac6 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f4b8:	4434      	add	r4, r6
 800f4ba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f4be:	4604      	mov	r4, r0
 800f4c0:	7d99      	ldrb	r1, [r3, #22]
 800f4c2:	4638      	mov	r0, r7
 800f4c4:	f7fb fd96 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f4c8:	4020      	ands	r0, r4
 800f4ca:	b2c0      	uxtb	r0, r0
 800f4cc:	e7c3      	b.n	800f456 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f4ce:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d8:	f7fc bac8 	b.w	800ba6c <ucdr_serialize_int16_t>
 800f4dc:	68ea      	ldr	r2, [r5, #12]
 800f4de:	3601      	adds	r6, #1
 800f4e0:	42b2      	cmp	r2, r6
 800f4e2:	d8be      	bhi.n	800f462 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f4e4:	ea09 0900 	and.w	r9, r9, r0
 800f4e8:	fa5f f989 	uxtb.w	r9, r9
 800f4ec:	e771      	b.n	800f3d2 <uxr_serialize_ActivityInfoVariant+0x22>
 800f4ee:	68eb      	ldr	r3, [r5, #12]
 800f4f0:	3601      	adds	r6, #1
 800f4f2:	429e      	cmp	r6, r3
 800f4f4:	f10a 0a18 	add.w	sl, sl, #24
 800f4f8:	d395      	bcc.n	800f426 <uxr_serialize_ActivityInfoVariant+0x76>
 800f4fa:	e76a      	b.n	800f3d2 <uxr_serialize_ActivityInfoVariant+0x22>

0800f4fc <uxr_deserialize_BaseObjectReply>:
 800f4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f500:	2202      	movs	r2, #2
 800f502:	4606      	mov	r6, r0
 800f504:	460f      	mov	r7, r1
 800f506:	f004 fb01 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f50a:	2202      	movs	r2, #2
 800f50c:	18b9      	adds	r1, r7, r2
 800f50e:	4605      	mov	r5, r0
 800f510:	4630      	mov	r0, r6
 800f512:	f004 fafb 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f516:	1d39      	adds	r1, r7, #4
 800f518:	4680      	mov	r8, r0
 800f51a:	4630      	mov	r0, r6
 800f51c:	f7fb fd80 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f520:	1d79      	adds	r1, r7, #5
 800f522:	4604      	mov	r4, r0
 800f524:	4630      	mov	r0, r6
 800f526:	f7fb fd7b 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f52a:	ea05 0508 	and.w	r5, r5, r8
 800f52e:	402c      	ands	r4, r5
 800f530:	4020      	ands	r0, r4
 800f532:	b2c0      	uxtb	r0, r0
 800f534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f538 <uxr_serialize_ReadSpecification>:
 800f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53c:	460e      	mov	r6, r1
 800f53e:	7809      	ldrb	r1, [r1, #0]
 800f540:	4607      	mov	r7, r0
 800f542:	f7fb fd57 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f546:	7871      	ldrb	r1, [r6, #1]
 800f548:	4604      	mov	r4, r0
 800f54a:	4638      	mov	r0, r7
 800f54c:	f7fb fd52 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f550:	78b1      	ldrb	r1, [r6, #2]
 800f552:	4004      	ands	r4, r0
 800f554:	4638      	mov	r0, r7
 800f556:	f7fb fd1f 	bl	800af98 <ucdr_serialize_bool>
 800f55a:	78b3      	ldrb	r3, [r6, #2]
 800f55c:	b2e4      	uxtb	r4, r4
 800f55e:	4004      	ands	r4, r0
 800f560:	b94b      	cbnz	r3, 800f576 <uxr_serialize_ReadSpecification+0x3e>
 800f562:	7a31      	ldrb	r1, [r6, #8]
 800f564:	4638      	mov	r0, r7
 800f566:	f7fb fd17 	bl	800af98 <ucdr_serialize_bool>
 800f56a:	7a33      	ldrb	r3, [r6, #8]
 800f56c:	4004      	ands	r4, r0
 800f56e:	b943      	cbnz	r3, 800f582 <uxr_serialize_ReadSpecification+0x4a>
 800f570:	4620      	mov	r0, r4
 800f572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f576:	6871      	ldr	r1, [r6, #4]
 800f578:	4638      	mov	r0, r7
 800f57a:	f004 fb83 	bl	8013c84 <ucdr_serialize_string>
 800f57e:	4004      	ands	r4, r0
 800f580:	e7ef      	b.n	800f562 <uxr_serialize_ReadSpecification+0x2a>
 800f582:	8971      	ldrh	r1, [r6, #10]
 800f584:	4638      	mov	r0, r7
 800f586:	f7fb fd61 	bl	800b04c <ucdr_serialize_uint16_t>
 800f58a:	89b1      	ldrh	r1, [r6, #12]
 800f58c:	4605      	mov	r5, r0
 800f58e:	4638      	mov	r0, r7
 800f590:	f7fb fd5c 	bl	800b04c <ucdr_serialize_uint16_t>
 800f594:	89f1      	ldrh	r1, [r6, #14]
 800f596:	4005      	ands	r5, r0
 800f598:	4638      	mov	r0, r7
 800f59a:	f7fb fd57 	bl	800b04c <ucdr_serialize_uint16_t>
 800f59e:	8a31      	ldrh	r1, [r6, #16]
 800f5a0:	4680      	mov	r8, r0
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	f7fb fd52 	bl	800b04c <ucdr_serialize_uint16_t>
 800f5a8:	b2ed      	uxtb	r5, r5
 800f5aa:	4025      	ands	r5, r4
 800f5ac:	ea08 0505 	and.w	r5, r8, r5
 800f5b0:	ea00 0405 	and.w	r4, r0, r5
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ba:	bf00      	nop

0800f5bc <uxr_serialize_CREATE_CLIENT_Payload>:
 800f5bc:	f7ff ba16 	b.w	800e9ec <uxr_serialize_CLIENT_Representation>

0800f5c0 <uxr_serialize_CREATE_Payload>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	4607      	mov	r7, r0
 800f5c6:	460e      	mov	r6, r1
 800f5c8:	f004 fa3c 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f5cc:	2202      	movs	r2, #2
 800f5ce:	18b1      	adds	r1, r6, r2
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	f004 fa36 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f5d8:	7931      	ldrb	r1, [r6, #4]
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4638      	mov	r0, r7
 800f5de:	f7fb fd09 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f5e2:	b170      	cbz	r0, 800f602 <uxr_serialize_CREATE_Payload+0x42>
 800f5e4:	7933      	ldrb	r3, [r6, #4]
 800f5e6:	402c      	ands	r4, r5
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	b2e4      	uxtb	r4, r4
 800f5ec:	2b0d      	cmp	r3, #13
 800f5ee:	d809      	bhi.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f5f0:	e8df f003 	tbb	[pc, r3]
 800f5f4:	23230a4c 	.word	0x23230a4c
 800f5f8:	0a0a0a0a 	.word	0x0a0a0a0a
 800f5fc:	12121208 	.word	0x12121208
 800f600:	3e45      	.short	0x3e45
 800f602:	2400      	movs	r4, #0
 800f604:	4620      	mov	r0, r4
 800f606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f608:	f106 0108 	add.w	r1, r6, #8
 800f60c:	4638      	mov	r0, r7
 800f60e:	f7ff faf3 	bl	800ebf8 <uxr_serialize_DATAWRITER_Representation>
 800f612:	4004      	ands	r4, r0
 800f614:	4620      	mov	r0, r4
 800f616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f618:	7a31      	ldrb	r1, [r6, #8]
 800f61a:	4638      	mov	r0, r7
 800f61c:	f7fb fcea 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f620:	2800      	cmp	r0, #0
 800f622:	d0ee      	beq.n	800f602 <uxr_serialize_CREATE_Payload+0x42>
 800f624:	7a33      	ldrb	r3, [r6, #8]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d001      	beq.n	800f62e <uxr_serialize_CREATE_Payload+0x6e>
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	d1ea      	bne.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f62e:	68f1      	ldr	r1, [r6, #12]
 800f630:	4638      	mov	r0, r7
 800f632:	f004 fb27 	bl	8013c84 <ucdr_serialize_string>
 800f636:	4004      	ands	r4, r0
 800f638:	e7e4      	b.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f63a:	7a31      	ldrb	r1, [r6, #8]
 800f63c:	4638      	mov	r0, r7
 800f63e:	f7fb fcd9 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f642:	4605      	mov	r5, r0
 800f644:	b158      	cbz	r0, 800f65e <uxr_serialize_CREATE_Payload+0x9e>
 800f646:	7a33      	ldrb	r3, [r6, #8]
 800f648:	2b02      	cmp	r3, #2
 800f64a:	d034      	beq.n	800f6b6 <uxr_serialize_CREATE_Payload+0xf6>
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d106      	bne.n	800f65e <uxr_serialize_CREATE_Payload+0x9e>
 800f650:	68f2      	ldr	r2, [r6, #12]
 800f652:	f106 0110 	add.w	r1, r6, #16
 800f656:	4638      	mov	r0, r7
 800f658:	f004 fae8 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800f65c:	4605      	mov	r5, r0
 800f65e:	2202      	movs	r2, #2
 800f660:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f664:	4638      	mov	r0, r7
 800f666:	f004 f9ed 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f66a:	4028      	ands	r0, r5
 800f66c:	4004      	ands	r4, r0
 800f66e:	e7c9      	b.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f670:	f106 0108 	add.w	r1, r6, #8
 800f674:	4638      	mov	r0, r7
 800f676:	f7ff f9b9 	bl	800e9ec <uxr_serialize_CLIENT_Representation>
 800f67a:	4004      	ands	r4, r0
 800f67c:	e7c2      	b.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f67e:	f106 0108 	add.w	r1, r6, #8
 800f682:	4638      	mov	r0, r7
 800f684:	f7ff fa6e 	bl	800eb64 <uxr_serialize_AGENT_Representation>
 800f688:	4004      	ands	r4, r0
 800f68a:	e7bb      	b.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f68c:	7a31      	ldrb	r1, [r6, #8]
 800f68e:	4638      	mov	r0, r7
 800f690:	f7fb fcb0 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f694:	4605      	mov	r5, r0
 800f696:	b130      	cbz	r0, 800f6a6 <uxr_serialize_CREATE_Payload+0xe6>
 800f698:	7a33      	ldrb	r3, [r6, #8]
 800f69a:	2b02      	cmp	r3, #2
 800f69c:	d011      	beq.n	800f6c2 <uxr_serialize_CREATE_Payload+0x102>
 800f69e:	2b03      	cmp	r3, #3
 800f6a0:	d015      	beq.n	800f6ce <uxr_serialize_CREATE_Payload+0x10e>
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d00d      	beq.n	800f6c2 <uxr_serialize_CREATE_Payload+0x102>
 800f6a6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f6aa:	4638      	mov	r0, r7
 800f6ac:	f7fc f9de 	bl	800ba6c <ucdr_serialize_int16_t>
 800f6b0:	4028      	ands	r0, r5
 800f6b2:	4004      	ands	r4, r0
 800f6b4:	e7a6      	b.n	800f604 <uxr_serialize_CREATE_Payload+0x44>
 800f6b6:	68f1      	ldr	r1, [r6, #12]
 800f6b8:	4638      	mov	r0, r7
 800f6ba:	f004 fae3 	bl	8013c84 <ucdr_serialize_string>
 800f6be:	4605      	mov	r5, r0
 800f6c0:	e7cd      	b.n	800f65e <uxr_serialize_CREATE_Payload+0x9e>
 800f6c2:	68f1      	ldr	r1, [r6, #12]
 800f6c4:	4638      	mov	r0, r7
 800f6c6:	f004 fadd 	bl	8013c84 <ucdr_serialize_string>
 800f6ca:	4605      	mov	r5, r0
 800f6cc:	e7eb      	b.n	800f6a6 <uxr_serialize_CREATE_Payload+0xe6>
 800f6ce:	68f2      	ldr	r2, [r6, #12]
 800f6d0:	f106 0110 	add.w	r1, r6, #16
 800f6d4:	4638      	mov	r0, r7
 800f6d6:	f004 faa9 	bl	8013c2c <ucdr_serialize_sequence_uint8_t>
 800f6da:	4605      	mov	r5, r0
 800f6dc:	e7e3      	b.n	800f6a6 <uxr_serialize_CREATE_Payload+0xe6>
 800f6de:	bf00      	nop

0800f6e0 <uxr_deserialize_GET_INFO_Payload>:
 800f6e0:	b570      	push	{r4, r5, r6, lr}
 800f6e2:	2202      	movs	r2, #2
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	460e      	mov	r6, r1
 800f6e8:	f004 fa10 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	18b1      	adds	r1, r6, r2
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f004 fa0a 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f6f8:	1d31      	adds	r1, r6, #4
 800f6fa:	4004      	ands	r4, r0
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	f7fb ffbf 	bl	800b680 <ucdr_deserialize_uint32_t>
 800f702:	b2e4      	uxtb	r4, r4
 800f704:	4020      	ands	r0, r4
 800f706:	bd70      	pop	{r4, r5, r6, pc}

0800f708 <uxr_serialize_DELETE_Payload>:
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	2202      	movs	r2, #2
 800f70c:	4605      	mov	r5, r0
 800f70e:	460e      	mov	r6, r1
 800f710:	f004 f998 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f714:	2202      	movs	r2, #2
 800f716:	4604      	mov	r4, r0
 800f718:	18b1      	adds	r1, r6, r2
 800f71a:	4628      	mov	r0, r5
 800f71c:	f004 f992 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f720:	4020      	ands	r0, r4
 800f722:	b2c0      	uxtb	r0, r0
 800f724:	bd70      	pop	{r4, r5, r6, pc}
 800f726:	bf00      	nop

0800f728 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f72c:	4605      	mov	r5, r0
 800f72e:	460e      	mov	r6, r1
 800f730:	f7fb fc76 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f734:	1c71      	adds	r1, r6, #1
 800f736:	4604      	mov	r4, r0
 800f738:	4628      	mov	r0, r5
 800f73a:	f7fb fc71 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f73e:	2204      	movs	r2, #4
 800f740:	18b1      	adds	r1, r6, r2
 800f742:	4680      	mov	r8, r0
 800f744:	4628      	mov	r0, r5
 800f746:	f004 f9e1 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f74a:	f106 0108 	add.w	r1, r6, #8
 800f74e:	4607      	mov	r7, r0
 800f750:	2202      	movs	r2, #2
 800f752:	4628      	mov	r0, r5
 800f754:	f004 f9da 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f758:	ea04 0308 	and.w	r3, r4, r8
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	ea03 0407 	and.w	r4, r3, r7
 800f762:	2202      	movs	r2, #2
 800f764:	4607      	mov	r7, r0
 800f766:	f106 010a 	add.w	r1, r6, #10
 800f76a:	4628      	mov	r0, r5
 800f76c:	f004 f9ce 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f770:	f106 010c 	add.w	r1, r6, #12
 800f774:	4603      	mov	r3, r0
 800f776:	4628      	mov	r0, r5
 800f778:	461d      	mov	r5, r3
 800f77a:	f7fb fc23 	bl	800afc4 <ucdr_deserialize_bool>
 800f77e:	403c      	ands	r4, r7
 800f780:	4025      	ands	r5, r4
 800f782:	4028      	ands	r0, r5
 800f784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f788 <uxr_deserialize_STATUS_Payload>:
 800f788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f78c:	2202      	movs	r2, #2
 800f78e:	4606      	mov	r6, r0
 800f790:	460f      	mov	r7, r1
 800f792:	f004 f9bb 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f796:	2202      	movs	r2, #2
 800f798:	18b9      	adds	r1, r7, r2
 800f79a:	4605      	mov	r5, r0
 800f79c:	4630      	mov	r0, r6
 800f79e:	f004 f9b5 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f7a2:	1d39      	adds	r1, r7, #4
 800f7a4:	4680      	mov	r8, r0
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f7fb fc3a 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f7ac:	1d79      	adds	r1, r7, #5
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f7fb fc35 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f7b6:	ea05 0508 	and.w	r5, r5, r8
 800f7ba:	402c      	ands	r4, r5
 800f7bc:	4020      	ands	r0, r4
 800f7be:	b2c0      	uxtb	r0, r0
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7c4 <uxr_serialize_INFO_Payload>:
 800f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	f004 f939 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	18a1      	adds	r1, r4, r2
 800f7d6:	4680      	mov	r8, r0
 800f7d8:	4628      	mov	r0, r5
 800f7da:	f004 f933 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f7de:	7921      	ldrb	r1, [r4, #4]
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	f7fb fc06 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f7e8:	7961      	ldrb	r1, [r4, #5]
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f7fb fc01 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f7f2:	ea08 0807 	and.w	r8, r8, r7
 800f7f6:	ea06 0608 	and.w	r6, r6, r8
 800f7fa:	4006      	ands	r6, r0
 800f7fc:	7a21      	ldrb	r1, [r4, #8]
 800f7fe:	4628      	mov	r0, r5
 800f800:	f7fb fbca 	bl	800af98 <ucdr_serialize_bool>
 800f804:	7a23      	ldrb	r3, [r4, #8]
 800f806:	b2f7      	uxtb	r7, r6
 800f808:	4606      	mov	r6, r0
 800f80a:	b96b      	cbnz	r3, 800f828 <uxr_serialize_INFO_Payload+0x64>
 800f80c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f810:	4628      	mov	r0, r5
 800f812:	f7fb fbc1 	bl	800af98 <ucdr_serialize_bool>
 800f816:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f81a:	4030      	ands	r0, r6
 800f81c:	b2c6      	uxtb	r6, r0
 800f81e:	b983      	cbnz	r3, 800f842 <uxr_serialize_INFO_Payload+0x7e>
 800f820:	ea06 0007 	and.w	r0, r6, r7
 800f824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f828:	7b21      	ldrb	r1, [r4, #12]
 800f82a:	4628      	mov	r0, r5
 800f82c:	f7fb fbe2 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f830:	b188      	cbz	r0, 800f856 <uxr_serialize_INFO_Payload+0x92>
 800f832:	f104 010c 	add.w	r1, r4, #12
 800f836:	4628      	mov	r0, r5
 800f838:	f7ff fa06 	bl	800ec48 <uxr_serialize_ObjectVariant.part.0>
 800f83c:	4030      	ands	r0, r6
 800f83e:	b2c6      	uxtb	r6, r0
 800f840:	e7e4      	b.n	800f80c <uxr_serialize_INFO_Payload+0x48>
 800f842:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f846:	4628      	mov	r0, r5
 800f848:	f7ff fdb2 	bl	800f3b0 <uxr_serialize_ActivityInfoVariant>
 800f84c:	4006      	ands	r6, r0
 800f84e:	ea06 0007 	and.w	r0, r6, r7
 800f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f856:	4606      	mov	r6, r0
 800f858:	e7d8      	b.n	800f80c <uxr_serialize_INFO_Payload+0x48>
 800f85a:	bf00      	nop

0800f85c <uxr_serialize_READ_DATA_Payload>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	2202      	movs	r2, #2
 800f860:	4605      	mov	r5, r0
 800f862:	460e      	mov	r6, r1
 800f864:	f004 f8ee 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f868:	2202      	movs	r2, #2
 800f86a:	18b1      	adds	r1, r6, r2
 800f86c:	4604      	mov	r4, r0
 800f86e:	4628      	mov	r0, r5
 800f870:	f004 f8e8 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f874:	1d31      	adds	r1, r6, #4
 800f876:	4004      	ands	r4, r0
 800f878:	4628      	mov	r0, r5
 800f87a:	f7ff fe5d 	bl	800f538 <uxr_serialize_ReadSpecification>
 800f87e:	b2e4      	uxtb	r4, r4
 800f880:	4020      	ands	r0, r4
 800f882:	bd70      	pop	{r4, r5, r6, pc}

0800f884 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f884:	b570      	push	{r4, r5, r6, lr}
 800f886:	2202      	movs	r2, #2
 800f888:	4605      	mov	r5, r0
 800f88a:	460e      	mov	r6, r1
 800f88c:	f004 f8da 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f890:	2202      	movs	r2, #2
 800f892:	4604      	mov	r4, r0
 800f894:	18b1      	adds	r1, r6, r2
 800f896:	4628      	mov	r0, r5
 800f898:	f004 f8d4 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f89c:	4020      	ands	r0, r4
 800f89e:	b2c0      	uxtb	r0, r0
 800f8a0:	bd70      	pop	{r4, r5, r6, pc}
 800f8a2:	bf00      	nop

0800f8a4 <uxr_serialize_ACKNACK_Payload>:
 800f8a4:	b570      	push	{r4, r5, r6, lr}
 800f8a6:	460c      	mov	r4, r1
 800f8a8:	460e      	mov	r6, r1
 800f8aa:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	f7fb fbcc 	bl	800b04c <ucdr_serialize_uint16_t>
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	f004 f8c2 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f8c0:	7931      	ldrb	r1, [r6, #4]
 800f8c2:	4004      	ands	r4, r0
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7fb fb95 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f8ca:	b2e4      	uxtb	r4, r4
 800f8cc:	4020      	ands	r0, r4
 800f8ce:	bd70      	pop	{r4, r5, r6, pc}

0800f8d0 <uxr_deserialize_ACKNACK_Payload>:
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	460e      	mov	r6, r1
 800f8d6:	f7fb fcb9 	bl	800b24c <ucdr_deserialize_uint16_t>
 800f8da:	2202      	movs	r2, #2
 800f8dc:	18b1      	adds	r1, r6, r2
 800f8de:	4604      	mov	r4, r0
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f004 f913 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f8e6:	1d31      	adds	r1, r6, #4
 800f8e8:	4004      	ands	r4, r0
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7fb fb98 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f8f0:	b2e4      	uxtb	r4, r4
 800f8f2:	4020      	ands	r0, r4
 800f8f4:	bd70      	pop	{r4, r5, r6, pc}
 800f8f6:	bf00      	nop

0800f8f8 <uxr_serialize_HEARTBEAT_Payload>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	8809      	ldrh	r1, [r1, #0]
 800f8fe:	4606      	mov	r6, r0
 800f900:	f7fb fba4 	bl	800b04c <ucdr_serialize_uint16_t>
 800f904:	8869      	ldrh	r1, [r5, #2]
 800f906:	4604      	mov	r4, r0
 800f908:	4630      	mov	r0, r6
 800f90a:	f7fb fb9f 	bl	800b04c <ucdr_serialize_uint16_t>
 800f90e:	7929      	ldrb	r1, [r5, #4]
 800f910:	4004      	ands	r4, r0
 800f912:	4630      	mov	r0, r6
 800f914:	f7fb fb6e 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f918:	b2e4      	uxtb	r4, r4
 800f91a:	4020      	ands	r0, r4
 800f91c:	bd70      	pop	{r4, r5, r6, pc}
 800f91e:	bf00      	nop

0800f920 <uxr_deserialize_HEARTBEAT_Payload>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	4605      	mov	r5, r0
 800f924:	460e      	mov	r6, r1
 800f926:	f7fb fc91 	bl	800b24c <ucdr_deserialize_uint16_t>
 800f92a:	1cb1      	adds	r1, r6, #2
 800f92c:	4604      	mov	r4, r0
 800f92e:	4628      	mov	r0, r5
 800f930:	f7fb fc8c 	bl	800b24c <ucdr_deserialize_uint16_t>
 800f934:	1d31      	adds	r1, r6, #4
 800f936:	4004      	ands	r4, r0
 800f938:	4628      	mov	r0, r5
 800f93a:	f7fb fb71 	bl	800b020 <ucdr_deserialize_uint8_t>
 800f93e:	b2e4      	uxtb	r4, r4
 800f940:	4020      	ands	r0, r4
 800f942:	bd70      	pop	{r4, r5, r6, pc}

0800f944 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f948:	4605      	mov	r5, r0
 800f94a:	460e      	mov	r6, r1
 800f94c:	f7fc fa1a 	bl	800bd84 <ucdr_deserialize_int32_t>
 800f950:	1d31      	adds	r1, r6, #4
 800f952:	4607      	mov	r7, r0
 800f954:	4628      	mov	r0, r5
 800f956:	f7fb fe93 	bl	800b680 <ucdr_deserialize_uint32_t>
 800f95a:	f106 0108 	add.w	r1, r6, #8
 800f95e:	4680      	mov	r8, r0
 800f960:	4628      	mov	r0, r5
 800f962:	f7fc fa0f 	bl	800bd84 <ucdr_deserialize_int32_t>
 800f966:	f106 010c 	add.w	r1, r6, #12
 800f96a:	4604      	mov	r4, r0
 800f96c:	4628      	mov	r0, r5
 800f96e:	f7fb fe87 	bl	800b680 <ucdr_deserialize_uint32_t>
 800f972:	ea07 0708 	and.w	r7, r7, r8
 800f976:	403c      	ands	r4, r7
 800f978:	f106 0110 	add.w	r1, r6, #16
 800f97c:	4004      	ands	r4, r0
 800f97e:	4628      	mov	r0, r5
 800f980:	f7fc fa00 	bl	800bd84 <ucdr_deserialize_int32_t>
 800f984:	f106 0114 	add.w	r1, r6, #20
 800f988:	4607      	mov	r7, r0
 800f98a:	4628      	mov	r0, r5
 800f98c:	f7fb fe78 	bl	800b680 <ucdr_deserialize_uint32_t>
 800f990:	b2e4      	uxtb	r4, r4
 800f992:	403c      	ands	r4, r7
 800f994:	4020      	ands	r0, r4
 800f996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f99a:	bf00      	nop

0800f99c <uxr_serialize_SampleIdentity>:
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	220c      	movs	r2, #12
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	460d      	mov	r5, r1
 800f9a6:	f004 f84d 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f9aa:	2203      	movs	r2, #3
 800f9ac:	f105 010c 	add.w	r1, r5, #12
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f004 f846 	bl	8013a44 <ucdr_serialize_array_uint8_t>
 800f9b8:	7be9      	ldrb	r1, [r5, #15]
 800f9ba:	4680      	mov	r8, r0
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f7fb fb19 	bl	800aff4 <ucdr_serialize_uint8_t>
 800f9c2:	6929      	ldr	r1, [r5, #16]
 800f9c4:	4606      	mov	r6, r0
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f7fc f944 	bl	800bc54 <ucdr_serialize_int32_t>
 800f9cc:	6969      	ldr	r1, [r5, #20]
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	ea07 0708 	and.w	r7, r7, r8
 800f9d6:	461c      	mov	r4, r3
 800f9d8:	f7fb fd22 	bl	800b420 <ucdr_serialize_uint32_t>
 800f9dc:	403e      	ands	r6, r7
 800f9de:	4034      	ands	r4, r6
 800f9e0:	4020      	ands	r0, r4
 800f9e2:	b2c0      	uxtb	r0, r0
 800f9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f9e8 <uxr_deserialize_SampleIdentity>:
 800f9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ec:	220c      	movs	r2, #12
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	f004 f88b 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800f9f6:	2203      	movs	r2, #3
 800f9f8:	f105 010c 	add.w	r1, r5, #12
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f004 f884 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 800fa04:	f105 010f 	add.w	r1, r5, #15
 800fa08:	4680      	mov	r8, r0
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f7fb fb08 	bl	800b020 <ucdr_deserialize_uint8_t>
 800fa10:	f105 0110 	add.w	r1, r5, #16
 800fa14:	4606      	mov	r6, r0
 800fa16:	4620      	mov	r0, r4
 800fa18:	f7fc f9b4 	bl	800bd84 <ucdr_deserialize_int32_t>
 800fa1c:	f105 0114 	add.w	r1, r5, #20
 800fa20:	4603      	mov	r3, r0
 800fa22:	4620      	mov	r0, r4
 800fa24:	ea07 0708 	and.w	r7, r7, r8
 800fa28:	461c      	mov	r4, r3
 800fa2a:	f7fb fe29 	bl	800b680 <ucdr_deserialize_uint32_t>
 800fa2e:	403e      	ands	r6, r7
 800fa30:	4034      	ands	r4, r6
 800fa32:	4020      	ands	r0, r4
 800fa34:	b2c0      	uxtb	r0, r0
 800fa36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa3a:	bf00      	nop

0800fa3c <rcl_client_get_rmw_handle>:
 800fa3c:	b118      	cbz	r0, 800fa46 <rcl_client_get_rmw_handle+0xa>
 800fa3e:	6800      	ldr	r0, [r0, #0]
 800fa40:	b108      	cbz	r0, 800fa46 <rcl_client_get_rmw_handle+0xa>
 800fa42:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fa46:	4770      	bx	lr

0800fa48 <rcl_send_request>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	b1e8      	cbz	r0, 800fa8a <rcl_send_request+0x42>
 800fa4e:	4604      	mov	r4, r0
 800fa50:	6800      	ldr	r0, [r0, #0]
 800fa52:	b1d0      	cbz	r0, 800fa8a <rcl_send_request+0x42>
 800fa54:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800fa58:	b1bb      	cbz	r3, 800fa8a <rcl_send_request+0x42>
 800fa5a:	460e      	mov	r6, r1
 800fa5c:	b1d1      	cbz	r1, 800fa94 <rcl_send_request+0x4c>
 800fa5e:	4615      	mov	r5, r2
 800fa60:	b1c2      	cbz	r2, 800fa94 <rcl_send_request+0x4c>
 800fa62:	2105      	movs	r1, #5
 800fa64:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fa68:	f002 fd06 	bl	8012478 <__atomic_load_8>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	e9c5 0100 	strd	r0, r1, [r5]
 800fa72:	462a      	mov	r2, r5
 800fa74:	4631      	mov	r1, r6
 800fa76:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fa7a:	f003 fc01 	bl	8013280 <rmw_send_request>
 800fa7e:	4606      	mov	r6, r0
 800fa80:	b160      	cbz	r0, 800fa9c <rcl_send_request+0x54>
 800fa82:	2601      	movs	r6, #1
 800fa84:	4630      	mov	r0, r6
 800fa86:	b002      	add	sp, #8
 800fa88:	bd70      	pop	{r4, r5, r6, pc}
 800fa8a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800fa8e:	4630      	mov	r0, r6
 800fa90:	b002      	add	sp, #8
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	260b      	movs	r6, #11
 800fa96:	4630      	mov	r0, r6
 800fa98:	b002      	add	sp, #8
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}
 800fa9c:	6820      	ldr	r0, [r4, #0]
 800fa9e:	2105      	movs	r1, #5
 800faa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800faa4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800faa8:	9100      	str	r1, [sp, #0]
 800faaa:	f002 fd51 	bl	8012550 <__atomic_exchange_8>
 800faae:	4630      	mov	r0, r6
 800fab0:	b002      	add	sp, #8
 800fab2:	bd70      	pop	{r4, r5, r6, pc}
 800fab4:	0000      	movs	r0, r0
	...

0800fab8 <rcl_take_response>:
 800fab8:	b570      	push	{r4, r5, r6, lr}
 800faba:	468e      	mov	lr, r1
 800fabc:	460c      	mov	r4, r1
 800fabe:	4616      	mov	r6, r2
 800fac0:	4605      	mov	r5, r0
 800fac2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fac6:	b08c      	sub	sp, #48	@ 0x30
 800fac8:	f10d 0c18 	add.w	ip, sp, #24
 800facc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fad0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fad4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fad8:	b35d      	cbz	r5, 800fb32 <rcl_take_response+0x7a>
 800fada:	682b      	ldr	r3, [r5, #0]
 800fadc:	b34b      	cbz	r3, 800fb32 <rcl_take_response+0x7a>
 800fade:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fae2:	b330      	cbz	r0, 800fb32 <rcl_take_response+0x7a>
 800fae4:	b346      	cbz	r6, 800fb38 <rcl_take_response+0x80>
 800fae6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fb40 <rcl_take_response+0x88>
 800faea:	2300      	movs	r3, #0
 800faec:	f88d 3007 	strb.w	r3, [sp, #7]
 800faf0:	4632      	mov	r2, r6
 800faf2:	f10d 0307 	add.w	r3, sp, #7
 800faf6:	a902      	add	r1, sp, #8
 800faf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fafc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb00:	f003 fcc6 	bl	8013490 <rmw_take_response>
 800fb04:	4605      	mov	r5, r0
 800fb06:	b9c8      	cbnz	r0, 800fb3c <rcl_take_response+0x84>
 800fb08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb0c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fb10:	2a00      	cmp	r2, #0
 800fb12:	bf08      	it	eq
 800fb14:	461d      	moveq	r5, r3
 800fb16:	f10d 0e18 	add.w	lr, sp, #24
 800fb1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb1e:	46a4      	mov	ip, r4
 800fb20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb24:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb28:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	b00c      	add	sp, #48	@ 0x30
 800fb30:	bd70      	pop	{r4, r5, r6, pc}
 800fb32:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800fb36:	e7ee      	b.n	800fb16 <rcl_take_response+0x5e>
 800fb38:	250b      	movs	r5, #11
 800fb3a:	e7ec      	b.n	800fb16 <rcl_take_response+0x5e>
 800fb3c:	2501      	movs	r5, #1
 800fb3e:	e7ea      	b.n	800fb16 <rcl_take_response+0x5e>
	...

0800fb48 <rcl_client_is_valid>:
 800fb48:	b130      	cbz	r0, 800fb58 <rcl_client_is_valid+0x10>
 800fb4a:	6800      	ldr	r0, [r0, #0]
 800fb4c:	b120      	cbz	r0, 800fb58 <rcl_client_is_valid+0x10>
 800fb4e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fb52:	3800      	subs	r0, #0
 800fb54:	bf18      	it	ne
 800fb56:	2001      	movne	r0, #1
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop

0800fb5c <rcl_convert_rmw_ret_to_rcl_ret>:
 800fb5c:	280b      	cmp	r0, #11
 800fb5e:	dc0d      	bgt.n	800fb7c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	db09      	blt.n	800fb78 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fb64:	280b      	cmp	r0, #11
 800fb66:	d807      	bhi.n	800fb78 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fb68:	e8df f000 	tbb	[pc, r0]
 800fb6c:	07060607 	.word	0x07060607
 800fb70:	06060606 	.word	0x06060606
 800fb74:	07070606 	.word	0x07070606
 800fb78:	2001      	movs	r0, #1
 800fb7a:	4770      	bx	lr
 800fb7c:	28cb      	cmp	r0, #203	@ 0xcb
 800fb7e:	bf18      	it	ne
 800fb80:	2001      	movne	r0, #1
 800fb82:	4770      	bx	lr

0800fb84 <rcl_get_zero_initialized_context>:
 800fb84:	4a03      	ldr	r2, [pc, #12]	@ (800fb94 <rcl_get_zero_initialized_context+0x10>)
 800fb86:	4603      	mov	r3, r0
 800fb88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb8c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb90:	4618      	mov	r0, r3
 800fb92:	4770      	bx	lr
 800fb94:	08017044 	.word	0x08017044

0800fb98 <rcl_context_is_valid>:
 800fb98:	b118      	cbz	r0, 800fba2 <rcl_context_is_valid+0xa>
 800fb9a:	6840      	ldr	r0, [r0, #4]
 800fb9c:	3800      	subs	r0, #0
 800fb9e:	bf18      	it	ne
 800fba0:	2001      	movne	r0, #1
 800fba2:	4770      	bx	lr

0800fba4 <__cleanup_context>:
 800fba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fba8:	4606      	mov	r6, r0
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	2300      	movs	r3, #0
 800fbae:	6073      	str	r3, [r6, #4]
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d049      	beq.n	800fc48 <__cleanup_context+0xa4>
 800fbb4:	6947      	ldr	r7, [r0, #20]
 800fbb6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800fbba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fbbe:	b137      	cbz	r7, 800fbce <__cleanup_context+0x2a>
 800fbc0:	3014      	adds	r0, #20
 800fbc2:	f7f8 fd29 	bl	8008618 <rcl_init_options_fini>
 800fbc6:	4607      	mov	r7, r0
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d144      	bne.n	800fc56 <__cleanup_context+0xb2>
 800fbcc:	6830      	ldr	r0, [r6, #0]
 800fbce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fbd0:	b143      	cbz	r3, 800fbe4 <__cleanup_context+0x40>
 800fbd2:	3028      	adds	r0, #40	@ 0x28
 800fbd4:	f7fa f97e 	bl	8009ed4 <rmw_context_fini>
 800fbd8:	b118      	cbz	r0, 800fbe2 <__cleanup_context+0x3e>
 800fbda:	2f00      	cmp	r7, #0
 800fbdc:	d03e      	beq.n	800fc5c <__cleanup_context+0xb8>
 800fbde:	f7f9 fe87 	bl	80098f0 <rcutils_reset_error>
 800fbe2:	6830      	ldr	r0, [r6, #0]
 800fbe4:	6a03      	ldr	r3, [r0, #32]
 800fbe6:	b1db      	cbz	r3, 800fc20 <__cleanup_context+0x7c>
 800fbe8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fbec:	2a01      	cmp	r2, #1
 800fbee:	f17c 0100 	sbcs.w	r1, ip, #0
 800fbf2:	db11      	blt.n	800fc18 <__cleanup_context+0x74>
 800fbf4:	2400      	movs	r4, #0
 800fbf6:	4625      	mov	r5, r4
 800fbf8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	b1b8      	cbz	r0, 800fc30 <__cleanup_context+0x8c>
 800fc00:	47c0      	blx	r8
 800fc02:	6833      	ldr	r3, [r6, #0]
 800fc04:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fc08:	3401      	adds	r4, #1
 800fc0a:	f145 0500 	adc.w	r5, r5, #0
 800fc0e:	4294      	cmp	r4, r2
 800fc10:	eb75 010c 	sbcs.w	r1, r5, ip
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	dbef      	blt.n	800fbf8 <__cleanup_context+0x54>
 800fc18:	4618      	mov	r0, r3
 800fc1a:	4649      	mov	r1, r9
 800fc1c:	47c0      	blx	r8
 800fc1e:	6830      	ldr	r0, [r6, #0]
 800fc20:	4649      	mov	r1, r9
 800fc22:	47c0      	blx	r8
 800fc24:	2300      	movs	r3, #0
 800fc26:	e9c6 3300 	strd	r3, r3, [r6]
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc30:	3401      	adds	r4, #1
 800fc32:	f145 0500 	adc.w	r5, r5, #0
 800fc36:	4294      	cmp	r4, r2
 800fc38:	eb75 010c 	sbcs.w	r1, r5, ip
 800fc3c:	dbdc      	blt.n	800fbf8 <__cleanup_context+0x54>
 800fc3e:	4618      	mov	r0, r3
 800fc40:	4649      	mov	r1, r9
 800fc42:	47c0      	blx	r8
 800fc44:	6830      	ldr	r0, [r6, #0]
 800fc46:	e7eb      	b.n	800fc20 <__cleanup_context+0x7c>
 800fc48:	4607      	mov	r7, r0
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	e9c6 3300 	strd	r3, r3, [r6]
 800fc50:	4638      	mov	r0, r7
 800fc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc56:	f7f9 fe4b 	bl	80098f0 <rcutils_reset_error>
 800fc5a:	e7b7      	b.n	800fbcc <__cleanup_context+0x28>
 800fc5c:	f7ff ff7e 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 800fc60:	4607      	mov	r7, r0
 800fc62:	e7bc      	b.n	800fbde <__cleanup_context+0x3a>

0800fc64 <rcl_init>:
 800fc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc68:	1e05      	subs	r5, r0, #0
 800fc6a:	b09c      	sub	sp, #112	@ 0x70
 800fc6c:	460e      	mov	r6, r1
 800fc6e:	4690      	mov	r8, r2
 800fc70:	461f      	mov	r7, r3
 800fc72:	f340 8099 	ble.w	800fda8 <rcl_init+0x144>
 800fc76:	2900      	cmp	r1, #0
 800fc78:	f000 8099 	beq.w	800fdae <rcl_init+0x14a>
 800fc7c:	f1a1 0e04 	sub.w	lr, r1, #4
 800fc80:	f04f 0c00 	mov.w	ip, #0
 800fc84:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fc88:	f10c 0c01 	add.w	ip, ip, #1
 800fc8c:	2c00      	cmp	r4, #0
 800fc8e:	f000 808e 	beq.w	800fdae <rcl_init+0x14a>
 800fc92:	4565      	cmp	r5, ip
 800fc94:	d1f6      	bne.n	800fc84 <rcl_init+0x20>
 800fc96:	f1b8 0f00 	cmp.w	r8, #0
 800fc9a:	f000 8088 	beq.w	800fdae <rcl_init+0x14a>
 800fc9e:	f8d8 4000 	ldr.w	r4, [r8]
 800fca2:	2c00      	cmp	r4, #0
 800fca4:	f000 8083 	beq.w	800fdae <rcl_init+0x14a>
 800fca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcaa:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800fcae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	f8cc 3000 	str.w	r3, [ip]
 800fcb8:	a817      	add	r0, sp, #92	@ 0x5c
 800fcba:	f7f9 fdf3 	bl	80098a4 <rcutils_allocator_is_valid>
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	d075      	beq.n	800fdae <rcl_init+0x14a>
 800fcc2:	2f00      	cmp	r7, #0
 800fcc4:	d073      	beq.n	800fdae <rcl_init+0x14a>
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d175      	bne.n	800fdb8 <rcl_init+0x154>
 800fccc:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800fcd0:	2178      	movs	r1, #120	@ 0x78
 800fcd2:	2001      	movs	r0, #1
 800fcd4:	4798      	blx	r3
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	6038      	str	r0, [r7, #0]
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f000 80a0 	beq.w	800fe20 <rcl_init+0x1bc>
 800fce0:	a802      	add	r0, sp, #8
 800fce2:	f002 ff09 	bl	8012af8 <rmw_get_zero_initialized_context>
 800fce6:	a902      	add	r1, sp, #8
 800fce8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fcec:	2250      	movs	r2, #80	@ 0x50
 800fcee:	ac17      	add	r4, sp, #92	@ 0x5c
 800fcf0:	f005 fdd9 	bl	80158a6 <memcpy>
 800fcf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcf6:	f8d7 e000 	ldr.w	lr, [r7]
 800fcfa:	46f4      	mov	ip, lr
 800fcfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	f8cc 3000 	str.w	r3, [ip]
 800fd06:	f10e 0114 	add.w	r1, lr, #20
 800fd0a:	4640      	mov	r0, r8
 800fd0c:	f7f8 fcae 	bl	800866c <rcl_init_options_copy>
 800fd10:	4604      	mov	r4, r0
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d144      	bne.n	800fda0 <rcl_init+0x13c>
 800fd16:	f8d7 9000 	ldr.w	r9, [r7]
 800fd1a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fd1e:	f8c9 0020 	str.w	r0, [r9, #32]
 800fd22:	f8c9 5018 	str.w	r5, [r9, #24]
 800fd26:	f8c9 801c 	str.w	r8, [r9, #28]
 800fd2a:	2d00      	cmp	r5, #0
 800fd2c:	d04b      	beq.n	800fdc6 <rcl_init+0x162>
 800fd2e:	2e00      	cmp	r6, #0
 800fd30:	d049      	beq.n	800fdc6 <rcl_init+0x162>
 800fd32:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800fd36:	2104      	movs	r1, #4
 800fd38:	4628      	mov	r0, r5
 800fd3a:	4798      	blx	r3
 800fd3c:	f8c9 0020 	str.w	r0, [r9, #32]
 800fd40:	f8d7 9000 	ldr.w	r9, [r7]
 800fd44:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fd48:	46ca      	mov	sl, r9
 800fd4a:	b343      	cbz	r3, 800fd9e <rcl_init+0x13a>
 800fd4c:	2d01      	cmp	r5, #1
 800fd4e:	f178 0300 	sbcs.w	r3, r8, #0
 800fd52:	db38      	blt.n	800fdc6 <rcl_init+0x162>
 800fd54:	2400      	movs	r4, #0
 800fd56:	3e04      	subs	r6, #4
 800fd58:	46a1      	mov	r9, r4
 800fd5a:	e00b      	b.n	800fd74 <rcl_init+0x110>
 800fd5c:	6831      	ldr	r1, [r6, #0]
 800fd5e:	f005 fda2 	bl	80158a6 <memcpy>
 800fd62:	3401      	adds	r4, #1
 800fd64:	f149 0900 	adc.w	r9, r9, #0
 800fd68:	45c8      	cmp	r8, r9
 800fd6a:	bf08      	it	eq
 800fd6c:	42a5      	cmpeq	r5, r4
 800fd6e:	d028      	beq.n	800fdc2 <rcl_init+0x15e>
 800fd70:	f8d7 a000 	ldr.w	sl, [r7]
 800fd74:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fd78:	f7f0 fa5c 	bl	8000234 <strlen>
 800fd7c:	1c42      	adds	r2, r0, #1
 800fd7e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd80:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800fd82:	f8da a020 	ldr.w	sl, [sl, #32]
 800fd86:	9201      	str	r2, [sp, #4]
 800fd88:	4610      	mov	r0, r2
 800fd8a:	4798      	blx	r3
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fd92:	6a1b      	ldr	r3, [r3, #32]
 800fd94:	9a01      	ldr	r2, [sp, #4]
 800fd96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d1de      	bne.n	800fd5c <rcl_init+0xf8>
 800fd9e:	240a      	movs	r4, #10
 800fda0:	4638      	mov	r0, r7
 800fda2:	f7ff feff 	bl	800fba4 <__cleanup_context>
 800fda6:	e003      	b.n	800fdb0 <rcl_init+0x14c>
 800fda8:	2900      	cmp	r1, #0
 800fdaa:	f43f af74 	beq.w	800fc96 <rcl_init+0x32>
 800fdae:	240b      	movs	r4, #11
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	b01c      	add	sp, #112	@ 0x70
 800fdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdb8:	2464      	movs	r4, #100	@ 0x64
 800fdba:	4620      	mov	r0, r4
 800fdbc:	b01c      	add	sp, #112	@ 0x70
 800fdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdc2:	f8d7 9000 	ldr.w	r9, [r7]
 800fdc6:	491d      	ldr	r1, [pc, #116]	@ (800fe3c <rcl_init+0x1d8>)
 800fdc8:	680b      	ldr	r3, [r1, #0]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	d023      	beq.n	800fe16 <rcl_init+0x1b2>
 800fdce:	600b      	str	r3, [r1, #0]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	2400      	movs	r4, #0
 800fdd4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fdd8:	607b      	str	r3, [r7, #4]
 800fdda:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fddc:	6182      	str	r2, [r0, #24]
 800fdde:	3301      	adds	r3, #1
 800fde0:	61c4      	str	r4, [r0, #28]
 800fde2:	d01f      	beq.n	800fe24 <rcl_init+0x1c0>
 800fde4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800fde8:	b94b      	cbnz	r3, 800fdfe <rcl_init+0x19a>
 800fdea:	3030      	adds	r0, #48	@ 0x30
 800fdec:	f000 f828 	bl	800fe40 <rcl_get_localhost_only>
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d1d4      	bne.n	800fda0 <rcl_init+0x13c>
 800fdf6:	f8d7 9000 	ldr.w	r9, [r7]
 800fdfa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fdfe:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800fe02:	3018      	adds	r0, #24
 800fe04:	f7f9 ff30 	bl	8009c68 <rmw_init>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d0d0      	beq.n	800fdb0 <rcl_init+0x14c>
 800fe0e:	f7ff fea5 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 800fe12:	4604      	mov	r4, r0
 800fe14:	e7c4      	b.n	800fda0 <rcl_init+0x13c>
 800fe16:	2201      	movs	r2, #1
 800fe18:	461c      	mov	r4, r3
 800fe1a:	600a      	str	r2, [r1, #0]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	e7d9      	b.n	800fdd4 <rcl_init+0x170>
 800fe20:	240a      	movs	r4, #10
 800fe22:	e7c5      	b.n	800fdb0 <rcl_init+0x14c>
 800fe24:	3024      	adds	r0, #36	@ 0x24
 800fe26:	f004 fcad 	bl	8014784 <rcl_get_default_domain_id>
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1b7      	bne.n	800fda0 <rcl_init+0x13c>
 800fe30:	f8d7 9000 	ldr.w	r9, [r7]
 800fe34:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fe38:	e7d4      	b.n	800fde4 <rcl_init+0x180>
 800fe3a:	bf00      	nop
 800fe3c:	2000aac8 	.word	0x2000aac8

0800fe40 <rcl_get_localhost_only>:
 800fe40:	b510      	push	{r4, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	2300      	movs	r3, #0
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	b1b8      	cbz	r0, 800fe7a <rcl_get_localhost_only+0x3a>
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	a901      	add	r1, sp, #4
 800fe4e:	480c      	ldr	r0, [pc, #48]	@ (800fe80 <rcl_get_localhost_only+0x40>)
 800fe50:	f002 fbb6 	bl	80125c0 <rcutils_get_env>
 800fe54:	b110      	cbz	r0, 800fe5c <rcl_get_localhost_only+0x1c>
 800fe56:	2001      	movs	r0, #1
 800fe58:	b002      	add	sp, #8
 800fe5a:	bd10      	pop	{r4, pc}
 800fe5c:	9b01      	ldr	r3, [sp, #4]
 800fe5e:	b113      	cbz	r3, 800fe66 <rcl_get_localhost_only+0x26>
 800fe60:	781a      	ldrb	r2, [r3, #0]
 800fe62:	2a31      	cmp	r2, #49	@ 0x31
 800fe64:	d004      	beq.n	800fe70 <rcl_get_localhost_only+0x30>
 800fe66:	2302      	movs	r3, #2
 800fe68:	2000      	movs	r0, #0
 800fe6a:	7023      	strb	r3, [r4, #0]
 800fe6c:	b002      	add	sp, #8
 800fe6e:	bd10      	pop	{r4, pc}
 800fe70:	785b      	ldrb	r3, [r3, #1]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d1f7      	bne.n	800fe66 <rcl_get_localhost_only+0x26>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e7f6      	b.n	800fe68 <rcl_get_localhost_only+0x28>
 800fe7a:	200b      	movs	r0, #11
 800fe7c:	b002      	add	sp, #8
 800fe7e:	bd10      	pop	{r4, pc}
 800fe80:	08016a60 	.word	0x08016a60

0800fe84 <rcl_get_zero_initialized_node>:
 800fe84:	4a03      	ldr	r2, [pc, #12]	@ (800fe94 <rcl_get_zero_initialized_node+0x10>)
 800fe86:	4603      	mov	r3, r0
 800fe88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe8c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe90:	4618      	mov	r0, r3
 800fe92:	4770      	bx	lr
 800fe94:	0801704c 	.word	0x0801704c

0800fe98 <rcl_node_init>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	b0a9      	sub	sp, #164	@ 0xa4
 800fe9e:	4604      	mov	r4, r0
 800fea0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800fea4:	a823      	add	r0, sp, #140	@ 0x8c
 800fea6:	460e      	mov	r6, r1
 800fea8:	4615      	mov	r5, r2
 800feaa:	461f      	mov	r7, r3
 800feac:	f004 fede 	bl	8014c6c <rcl_guard_condition_get_default_options>
 800feb0:	f1b8 0f00 	cmp.w	r8, #0
 800feb4:	f000 80e6 	beq.w	8010084 <rcl_node_init+0x1ec>
 800feb8:	4640      	mov	r0, r8
 800feba:	f7f9 fcf3 	bl	80098a4 <rcutils_allocator_is_valid>
 800febe:	2800      	cmp	r0, #0
 800fec0:	f000 80e0 	beq.w	8010084 <rcl_node_init+0x1ec>
 800fec4:	2e00      	cmp	r6, #0
 800fec6:	f000 80dd 	beq.w	8010084 <rcl_node_init+0x1ec>
 800feca:	2d00      	cmp	r5, #0
 800fecc:	f000 80da 	beq.w	8010084 <rcl_node_init+0x1ec>
 800fed0:	2c00      	cmp	r4, #0
 800fed2:	f000 80d7 	beq.w	8010084 <rcl_node_init+0x1ec>
 800fed6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800feda:	f1b9 0f00 	cmp.w	r9, #0
 800fede:	f040 80fd 	bne.w	80100dc <rcl_node_init+0x244>
 800fee2:	2f00      	cmp	r7, #0
 800fee4:	f000 80ce 	beq.w	8010084 <rcl_node_init+0x1ec>
 800fee8:	4638      	mov	r0, r7
 800feea:	f7ff fe55 	bl	800fb98 <rcl_context_is_valid>
 800feee:	4682      	mov	sl, r0
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f000 80cd 	beq.w	8010090 <rcl_node_init+0x1f8>
 800fef6:	464a      	mov	r2, r9
 800fef8:	a922      	add	r1, sp, #136	@ 0x88
 800fefa:	4630      	mov	r0, r6
 800fefc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800ff00:	f002 ff98 	bl	8012e34 <rmw_validate_node_name>
 800ff04:	4681      	mov	r9, r0
 800ff06:	2800      	cmp	r0, #0
 800ff08:	f040 80be 	bne.w	8010088 <rcl_node_init+0x1f0>
 800ff0c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	f040 80f0 	bne.w	80100f4 <rcl_node_init+0x25c>
 800ff14:	4628      	mov	r0, r5
 800ff16:	f7f0 f98d 	bl	8000234 <strlen>
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	f040 80bb 	bne.w	8010096 <rcl_node_init+0x1fe>
 800ff20:	4d7c      	ldr	r5, [pc, #496]	@ (8010114 <rcl_node_init+0x27c>)
 800ff22:	a922      	add	r1, sp, #136	@ 0x88
 800ff24:	2200      	movs	r2, #0
 800ff26:	4628      	mov	r0, r5
 800ff28:	f002 ff66 	bl	8012df8 <rmw_validate_namespace>
 800ff2c:	4681      	mov	r9, r0
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f040 80aa 	bne.w	8010088 <rcl_node_init+0x1f0>
 800ff34:	4682      	mov	sl, r0
 800ff36:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	f040 80e0 	bne.w	80100fe <rcl_node_init+0x266>
 800ff3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff42:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff46:	2078      	movs	r0, #120	@ 0x78
 800ff48:	4798      	blx	r3
 800ff4a:	4681      	mov	r9, r0
 800ff4c:	6060      	str	r0, [r4, #4]
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f000 80ca 	beq.w	80100e8 <rcl_node_init+0x250>
 800ff54:	2200      	movs	r2, #0
 800ff56:	2300      	movs	r3, #0
 800ff58:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800ff5c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800ff60:	a808      	add	r0, sp, #32
 800ff62:	f000 f907 	bl	8010174 <rcl_node_get_default_options>
 800ff66:	a908      	add	r1, sp, #32
 800ff68:	4648      	mov	r0, r9
 800ff6a:	2268      	movs	r2, #104	@ 0x68
 800ff6c:	f005 fc9b 	bl	80158a6 <memcpy>
 800ff70:	6861      	ldr	r1, [r4, #4]
 800ff72:	6027      	str	r7, [r4, #0]
 800ff74:	4640      	mov	r0, r8
 800ff76:	f000 f90b 	bl	8010190 <rcl_node_options_copy>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	d158      	bne.n	8010030 <rcl_node_init+0x198>
 800ff7e:	4628      	mov	r0, r5
 800ff80:	f7f0 f958 	bl	8000234 <strlen>
 800ff84:	4428      	add	r0, r5
 800ff86:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ff8a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ff8e:	2b2f      	cmp	r3, #47	@ 0x2f
 800ff90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	bf0c      	ite	eq
 800ff98:	4b5f      	ldreq	r3, [pc, #380]	@ (8010118 <rcl_node_init+0x280>)
 800ff9a:	4b60      	ldrne	r3, [pc, #384]	@ (801011c <rcl_node_init+0x284>)
 800ff9c:	9302      	str	r3, [sp, #8]
 800ff9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ffa2:	9301      	str	r3, [sp, #4]
 800ffa4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ffa8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ffac:	f002 fb20 	bl	80125f0 <rcutils_format_string_limit>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800ffb6:	6818      	ldr	r0, [r3, #0]
 800ffb8:	4631      	mov	r1, r6
 800ffba:	3028      	adds	r0, #40	@ 0x28
 800ffbc:	462a      	mov	r2, r5
 800ffbe:	6866      	ldr	r6, [r4, #4]
 800ffc0:	f7fa f834 	bl	800a02c <rmw_create_node>
 800ffc4:	6863      	ldr	r3, [r4, #4]
 800ffc6:	66b0      	str	r0, [r6, #104]	@ 0x68
 800ffc8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d032      	beq.n	8010034 <rcl_node_init+0x19c>
 800ffce:	f7fa f8c1 	bl	800a154 <rmw_node_get_graph_guard_condition>
 800ffd2:	4681      	mov	r9, r0
 800ffd4:	b360      	cbz	r0, 8010030 <rcl_node_init+0x198>
 800ffd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ffda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ffde:	6866      	ldr	r6, [r4, #4]
 800ffe0:	2008      	movs	r0, #8
 800ffe2:	4798      	blx	r3
 800ffe4:	6863      	ldr	r3, [r4, #4]
 800ffe6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800ffe8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800ffec:	f1bb 0f00 	cmp.w	fp, #0
 800fff0:	d020      	beq.n	8010034 <rcl_node_init+0x19c>
 800fff2:	a806      	add	r0, sp, #24
 800fff4:	f004 fd5e 	bl	8014ab4 <rcl_get_zero_initialized_guard_condition>
 800fff8:	a806      	add	r0, sp, #24
 800fffa:	c803      	ldmia	r0, {r0, r1}
 800fffc:	6863      	ldr	r3, [r4, #4]
 800fffe:	46c4      	mov	ip, r8
 8010000:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010004:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010008:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801000c:	ae23      	add	r6, sp, #140	@ 0x8c
 801000e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010010:	f8dc 3000 	ldr.w	r3, [ip]
 8010014:	6033      	str	r3, [r6, #0]
 8010016:	ab28      	add	r3, sp, #160	@ 0xa0
 8010018:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801001c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010020:	4649      	mov	r1, r9
 8010022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010024:	463a      	mov	r2, r7
 8010026:	4670      	mov	r0, lr
 8010028:	f004 fd9a 	bl	8014b60 <rcl_guard_condition_init_from_rmw>
 801002c:	4681      	mov	r9, r0
 801002e:	b328      	cbz	r0, 801007c <rcl_node_init+0x1e4>
 8010030:	6863      	ldr	r3, [r4, #4]
 8010032:	b1f3      	cbz	r3, 8010072 <rcl_node_init+0x1da>
 8010034:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010036:	b128      	cbz	r0, 8010044 <rcl_node_init+0x1ac>
 8010038:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801003c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010040:	4798      	blx	r3
 8010042:	6863      	ldr	r3, [r4, #4]
 8010044:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010046:	b110      	cbz	r0, 801004e <rcl_node_init+0x1b6>
 8010048:	f7fa f808 	bl	800a05c <rmw_destroy_node>
 801004c:	6863      	ldr	r3, [r4, #4]
 801004e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010050:	b148      	cbz	r0, 8010066 <rcl_node_init+0x1ce>
 8010052:	f004 fde5 	bl	8014c20 <rcl_guard_condition_fini>
 8010056:	6863      	ldr	r3, [r4, #4]
 8010058:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801005c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801005e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010062:	4798      	blx	r3
 8010064:	6863      	ldr	r3, [r4, #4]
 8010066:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801006a:	4618      	mov	r0, r3
 801006c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010070:	4798      	blx	r3
 8010072:	2300      	movs	r3, #0
 8010074:	e9c4 3300 	strd	r3, r3, [r4]
 8010078:	f04f 0901 	mov.w	r9, #1
 801007c:	f1ba 0f00 	cmp.w	sl, #0
 8010080:	d125      	bne.n	80100ce <rcl_node_init+0x236>
 8010082:	e001      	b.n	8010088 <rcl_node_init+0x1f0>
 8010084:	f04f 090b 	mov.w	r9, #11
 8010088:	4648      	mov	r0, r9
 801008a:	b029      	add	sp, #164	@ 0xa4
 801008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010090:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010094:	e7f8      	b.n	8010088 <rcl_node_init+0x1f0>
 8010096:	782b      	ldrb	r3, [r5, #0]
 8010098:	2b2f      	cmp	r3, #47	@ 0x2f
 801009a:	f43f af42 	beq.w	800ff22 <rcl_node_init+0x8a>
 801009e:	9503      	str	r5, [sp, #12]
 80100a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	4b1e      	ldr	r3, [pc, #120]	@ (8010120 <rcl_node_init+0x288>)
 80100a8:	9302      	str	r3, [sp, #8]
 80100aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80100ae:	9301      	str	r3, [sp, #4]
 80100b0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80100b4:	f002 fa9c 	bl	80125f0 <rcutils_format_string_limit>
 80100b8:	4605      	mov	r5, r0
 80100ba:	b340      	cbz	r0, 801010e <rcl_node_init+0x276>
 80100bc:	2200      	movs	r2, #0
 80100be:	a922      	add	r1, sp, #136	@ 0x88
 80100c0:	9222      	str	r2, [sp, #136]	@ 0x88
 80100c2:	f002 fe99 	bl	8012df8 <rmw_validate_namespace>
 80100c6:	4681      	mov	r9, r0
 80100c8:	2800      	cmp	r0, #0
 80100ca:	f43f af34 	beq.w	800ff36 <rcl_node_init+0x9e>
 80100ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80100d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80100d6:	4628      	mov	r0, r5
 80100d8:	4798      	blx	r3
 80100da:	e7d5      	b.n	8010088 <rcl_node_init+0x1f0>
 80100dc:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80100e0:	4648      	mov	r0, r9
 80100e2:	b029      	add	sp, #164	@ 0xa4
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	f04f 090a 	mov.w	r9, #10
 80100ec:	f1ba 0f00 	cmp.w	sl, #0
 80100f0:	d1ed      	bne.n	80100ce <rcl_node_init+0x236>
 80100f2:	e7c9      	b.n	8010088 <rcl_node_init+0x1f0>
 80100f4:	f002 fef0 	bl	8012ed8 <rmw_node_name_validation_result_string>
 80100f8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80100fc:	e7c4      	b.n	8010088 <rcl_node_init+0x1f0>
 80100fe:	f002 fe8d 	bl	8012e1c <rmw_namespace_validation_result_string>
 8010102:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010106:	f1ba 0f00 	cmp.w	sl, #0
 801010a:	d1e0      	bne.n	80100ce <rcl_node_init+0x236>
 801010c:	e7bc      	b.n	8010088 <rcl_node_init+0x1f0>
 801010e:	f04f 090a 	mov.w	r9, #10
 8010112:	e7b9      	b.n	8010088 <rcl_node_init+0x1f0>
 8010114:	08016a78 	.word	0x08016a78
 8010118:	08016948 	.word	0x08016948
 801011c:	08016900 	.word	0x08016900
 8010120:	08016a7c 	.word	0x08016a7c

08010124 <rcl_node_is_valid>:
 8010124:	b130      	cbz	r0, 8010134 <rcl_node_is_valid+0x10>
 8010126:	6843      	ldr	r3, [r0, #4]
 8010128:	b123      	cbz	r3, 8010134 <rcl_node_is_valid+0x10>
 801012a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801012c:	b113      	cbz	r3, 8010134 <rcl_node_is_valid+0x10>
 801012e:	6800      	ldr	r0, [r0, #0]
 8010130:	f7ff bd32 	b.w	800fb98 <rcl_context_is_valid>
 8010134:	2000      	movs	r0, #0
 8010136:	4770      	bx	lr

08010138 <rcl_node_get_name>:
 8010138:	b120      	cbz	r0, 8010144 <rcl_node_get_name+0xc>
 801013a:	6840      	ldr	r0, [r0, #4]
 801013c:	b110      	cbz	r0, 8010144 <rcl_node_get_name+0xc>
 801013e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010140:	b100      	cbz	r0, 8010144 <rcl_node_get_name+0xc>
 8010142:	6880      	ldr	r0, [r0, #8]
 8010144:	4770      	bx	lr
 8010146:	bf00      	nop

08010148 <rcl_node_get_namespace>:
 8010148:	b120      	cbz	r0, 8010154 <rcl_node_get_namespace+0xc>
 801014a:	6840      	ldr	r0, [r0, #4]
 801014c:	b110      	cbz	r0, 8010154 <rcl_node_get_namespace+0xc>
 801014e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010150:	b100      	cbz	r0, 8010154 <rcl_node_get_namespace+0xc>
 8010152:	68c0      	ldr	r0, [r0, #12]
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop

08010158 <rcl_node_get_options>:
 8010158:	b128      	cbz	r0, 8010166 <rcl_node_get_options+0xe>
 801015a:	6840      	ldr	r0, [r0, #4]
 801015c:	b118      	cbz	r0, 8010166 <rcl_node_get_options+0xe>
 801015e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010160:	2b00      	cmp	r3, #0
 8010162:	bf08      	it	eq
 8010164:	2000      	moveq	r0, #0
 8010166:	4770      	bx	lr

08010168 <rcl_node_get_rmw_handle>:
 8010168:	b110      	cbz	r0, 8010170 <rcl_node_get_rmw_handle+0x8>
 801016a:	6840      	ldr	r0, [r0, #4]
 801016c:	b100      	cbz	r0, 8010170 <rcl_node_get_rmw_handle+0x8>
 801016e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop

08010174 <rcl_node_get_default_options>:
 8010174:	b510      	push	{r4, lr}
 8010176:	2268      	movs	r2, #104	@ 0x68
 8010178:	4604      	mov	r4, r0
 801017a:	2100      	movs	r1, #0
 801017c:	f005 faca 	bl	8015714 <memset>
 8010180:	4620      	mov	r0, r4
 8010182:	f7f9 fb81 	bl	8009888 <rcutils_get_default_allocator>
 8010186:	2301      	movs	r3, #1
 8010188:	7523      	strb	r3, [r4, #20]
 801018a:	4620      	mov	r0, r4
 801018c:	bd10      	pop	{r4, pc}
 801018e:	bf00      	nop

08010190 <rcl_node_options_copy>:
 8010190:	b1d0      	cbz	r0, 80101c8 <rcl_node_options_copy+0x38>
 8010192:	b570      	push	{r4, r5, r6, lr}
 8010194:	460c      	mov	r4, r1
 8010196:	b1a9      	cbz	r1, 80101c4 <rcl_node_options_copy+0x34>
 8010198:	4288      	cmp	r0, r1
 801019a:	4684      	mov	ip, r0
 801019c:	d012      	beq.n	80101c4 <rcl_node_options_copy+0x34>
 801019e:	4605      	mov	r5, r0
 80101a0:	8a86      	ldrh	r6, [r0, #20]
 80101a2:	468e      	mov	lr, r1
 80101a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101aa:	682b      	ldr	r3, [r5, #0]
 80101ac:	f8ce 3000 	str.w	r3, [lr]
 80101b0:	f10c 0118 	add.w	r1, ip, #24
 80101b4:	2250      	movs	r2, #80	@ 0x50
 80101b6:	82a6      	strh	r6, [r4, #20]
 80101b8:	f104 0018 	add.w	r0, r4, #24
 80101bc:	f005 fb73 	bl	80158a6 <memcpy>
 80101c0:	2000      	movs	r0, #0
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	200b      	movs	r0, #11
 80101c6:	bd70      	pop	{r4, r5, r6, pc}
 80101c8:	200b      	movs	r0, #11
 80101ca:	4770      	bx	lr

080101cc <rcl_node_resolve_name>:
 80101cc:	b082      	sub	sp, #8
 80101ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d2:	b091      	sub	sp, #68	@ 0x44
 80101d4:	ac1a      	add	r4, sp, #104	@ 0x68
 80101d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80101da:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80101de:	2800      	cmp	r0, #0
 80101e0:	d03b      	beq.n	801025a <rcl_node_resolve_name+0x8e>
 80101e2:	460c      	mov	r4, r1
 80101e4:	4605      	mov	r5, r0
 80101e6:	f7ff ffb7 	bl	8010158 <rcl_node_get_options>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d037      	beq.n	801025e <rcl_node_resolve_name+0x92>
 80101ee:	4628      	mov	r0, r5
 80101f0:	f7ff ffa2 	bl	8010138 <rcl_node_get_name>
 80101f4:	4606      	mov	r6, r0
 80101f6:	4628      	mov	r0, r5
 80101f8:	f7ff ffa6 	bl	8010148 <rcl_node_get_namespace>
 80101fc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010200:	4681      	mov	r9, r0
 8010202:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010206:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010208:	46ac      	mov	ip, r5
 801020a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801020e:	f8de 3000 	ldr.w	r3, [lr]
 8010212:	f8cc 3000 	str.w	r3, [ip]
 8010216:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010218:	b1fb      	cbz	r3, 801025a <rcl_node_resolve_name+0x8e>
 801021a:	468a      	mov	sl, r1
 801021c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010220:	f002 fb3e 	bl	80128a0 <rcutils_get_zero_initialized_string_map>
 8010224:	ab10      	add	r3, sp, #64	@ 0x40
 8010226:	9008      	str	r0, [sp, #32]
 8010228:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801022c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010230:	2100      	movs	r1, #0
 8010232:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010236:	a808      	add	r0, sp, #32
 8010238:	f002 fbaa 	bl	8012990 <rcutils_string_map_init>
 801023c:	4607      	mov	r7, r0
 801023e:	b180      	cbz	r0, 8010262 <rcl_node_resolve_name+0x96>
 8010240:	f7f9 fb3e 	bl	80098c0 <rcutils_get_error_string>
 8010244:	f7f9 fb54 	bl	80098f0 <rcutils_reset_error>
 8010248:	2f0a      	cmp	r7, #10
 801024a:	bf18      	it	ne
 801024c:	2701      	movne	r7, #1
 801024e:	4638      	mov	r0, r7
 8010250:	b011      	add	sp, #68	@ 0x44
 8010252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010256:	b002      	add	sp, #8
 8010258:	4770      	bx	lr
 801025a:	270b      	movs	r7, #11
 801025c:	e7f7      	b.n	801024e <rcl_node_resolve_name+0x82>
 801025e:	2701      	movs	r7, #1
 8010260:	e7f5      	b.n	801024e <rcl_node_resolve_name+0x82>
 8010262:	9009      	str	r0, [sp, #36]	@ 0x24
 8010264:	9007      	str	r0, [sp, #28]
 8010266:	a808      	add	r0, sp, #32
 8010268:	f004 fc1e 	bl	8014aa8 <rcl_get_default_topic_name_substitutions>
 801026c:	4607      	mov	r7, r0
 801026e:	b1a8      	cbz	r0, 801029c <rcl_node_resolve_name+0xd0>
 8010270:	280a      	cmp	r0, #10
 8010272:	9c07      	ldr	r4, [sp, #28]
 8010274:	d000      	beq.n	8010278 <rcl_node_resolve_name+0xac>
 8010276:	2701      	movs	r7, #1
 8010278:	a808      	add	r0, sp, #32
 801027a:	f002 fbc9 	bl	8012a10 <rcutils_string_map_fini>
 801027e:	2800      	cmp	r0, #0
 8010280:	d13d      	bne.n	80102fe <rcl_node_resolve_name+0x132>
 8010282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010284:	4659      	mov	r1, fp
 8010286:	47d0      	blx	sl
 8010288:	4659      	mov	r1, fp
 801028a:	4620      	mov	r0, r4
 801028c:	47d0      	blx	sl
 801028e:	f1b8 0f00 	cmp.w	r8, #0
 8010292:	d0dc      	beq.n	801024e <rcl_node_resolve_name+0x82>
 8010294:	2f67      	cmp	r7, #103	@ 0x67
 8010296:	bf08      	it	eq
 8010298:	2768      	moveq	r7, #104	@ 0x68
 801029a:	e7d8      	b.n	801024e <rcl_node_resolve_name+0x82>
 801029c:	ab09      	add	r3, sp, #36	@ 0x24
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102a2:	46ec      	mov	ip, sp
 80102a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	f8cc 3000 	str.w	r3, [ip]
 80102ae:	464a      	mov	r2, r9
 80102b0:	4631      	mov	r1, r6
 80102b2:	4620      	mov	r0, r4
 80102b4:	ab08      	add	r3, sp, #32
 80102b6:	f004 fa99 	bl	80147ec <rcl_expand_topic_name>
 80102ba:	4607      	mov	r7, r0
 80102bc:	b9b8      	cbnz	r0, 80102ee <rcl_node_resolve_name+0x122>
 80102be:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80102c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80102c2:	4602      	mov	r2, r0
 80102c4:	a90a      	add	r1, sp, #40	@ 0x28
 80102c6:	4620      	mov	r0, r4
 80102c8:	f002 fcd2 	bl	8012c70 <rmw_validate_full_topic_name>
 80102cc:	b988      	cbnz	r0, 80102f2 <rcl_node_resolve_name+0x126>
 80102ce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80102d0:	b9d5      	cbnz	r5, 8010308 <rcl_node_resolve_name+0x13c>
 80102d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102d4:	a808      	add	r0, sp, #32
 80102d6:	601c      	str	r4, [r3, #0]
 80102d8:	f002 fb9a 	bl	8012a10 <rcutils_string_map_fini>
 80102dc:	4607      	mov	r7, r0
 80102de:	b1a8      	cbz	r0, 801030c <rcl_node_resolve_name+0x140>
 80102e0:	f7f9 faee 	bl	80098c0 <rcutils_get_error_string>
 80102e4:	462c      	mov	r4, r5
 80102e6:	f7f9 fb03 	bl	80098f0 <rcutils_reset_error>
 80102ea:	2701      	movs	r7, #1
 80102ec:	e7c9      	b.n	8010282 <rcl_node_resolve_name+0xb6>
 80102ee:	9c07      	ldr	r4, [sp, #28]
 80102f0:	e7c2      	b.n	8010278 <rcl_node_resolve_name+0xac>
 80102f2:	f7f9 fae5 	bl	80098c0 <rcutils_get_error_string>
 80102f6:	2701      	movs	r7, #1
 80102f8:	f7f9 fafa 	bl	80098f0 <rcutils_reset_error>
 80102fc:	e7bc      	b.n	8010278 <rcl_node_resolve_name+0xac>
 80102fe:	f7f9 fadf 	bl	80098c0 <rcutils_get_error_string>
 8010302:	f7f9 faf5 	bl	80098f0 <rcutils_reset_error>
 8010306:	e7bc      	b.n	8010282 <rcl_node_resolve_name+0xb6>
 8010308:	2767      	movs	r7, #103	@ 0x67
 801030a:	e7b5      	b.n	8010278 <rcl_node_resolve_name+0xac>
 801030c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801030e:	4659      	mov	r1, fp
 8010310:	47d0      	blx	sl
 8010312:	4659      	mov	r1, fp
 8010314:	4638      	mov	r0, r7
 8010316:	47d0      	blx	sl
 8010318:	e799      	b.n	801024e <rcl_node_resolve_name+0x82>
 801031a:	bf00      	nop

0801031c <rcl_service_get_rmw_handle>:
 801031c:	b118      	cbz	r0, 8010326 <rcl_service_get_rmw_handle+0xa>
 801031e:	6800      	ldr	r0, [r0, #0]
 8010320:	b108      	cbz	r0, 8010326 <rcl_service_get_rmw_handle+0xa>
 8010322:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010326:	4770      	bx	lr

08010328 <rcl_take_request>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	468e      	mov	lr, r1
 801032c:	460c      	mov	r4, r1
 801032e:	4616      	mov	r6, r2
 8010330:	4605      	mov	r5, r0
 8010332:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010336:	b08c      	sub	sp, #48	@ 0x30
 8010338:	f10d 0c18 	add.w	ip, sp, #24
 801033c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010340:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010344:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010348:	b30d      	cbz	r5, 801038e <rcl_take_request+0x66>
 801034a:	682b      	ldr	r3, [r5, #0]
 801034c:	b1fb      	cbz	r3, 801038e <rcl_take_request+0x66>
 801034e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010352:	b1e0      	cbz	r0, 801038e <rcl_take_request+0x66>
 8010354:	b336      	cbz	r6, 80103a4 <rcl_take_request+0x7c>
 8010356:	2300      	movs	r3, #0
 8010358:	f88d 3007 	strb.w	r3, [sp, #7]
 801035c:	4632      	mov	r2, r6
 801035e:	f10d 0307 	add.w	r3, sp, #7
 8010362:	a902      	add	r1, sp, #8
 8010364:	f002 ffda 	bl	801331c <rmw_take_request>
 8010368:	4605      	mov	r5, r0
 801036a:	b198      	cbz	r0, 8010394 <rcl_take_request+0x6c>
 801036c:	280a      	cmp	r0, #10
 801036e:	bf18      	it	ne
 8010370:	2501      	movne	r5, #1
 8010372:	f10d 0e18 	add.w	lr, sp, #24
 8010376:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801037a:	46a4      	mov	ip, r4
 801037c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010380:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010384:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010388:	4628      	mov	r0, r5
 801038a:	b00c      	add	sp, #48	@ 0x30
 801038c:	bd70      	pop	{r4, r5, r6, pc}
 801038e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010392:	e7ee      	b.n	8010372 <rcl_take_request+0x4a>
 8010394:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010398:	f240 2359 	movw	r3, #601	@ 0x259
 801039c:	2a00      	cmp	r2, #0
 801039e:	bf08      	it	eq
 80103a0:	461d      	moveq	r5, r3
 80103a2:	e7e6      	b.n	8010372 <rcl_take_request+0x4a>
 80103a4:	250b      	movs	r5, #11
 80103a6:	e7e4      	b.n	8010372 <rcl_take_request+0x4a>

080103a8 <rcl_send_response>:
 80103a8:	b170      	cbz	r0, 80103c8 <rcl_send_response+0x20>
 80103aa:	6800      	ldr	r0, [r0, #0]
 80103ac:	b160      	cbz	r0, 80103c8 <rcl_send_response+0x20>
 80103ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80103b2:	b148      	cbz	r0, 80103c8 <rcl_send_response+0x20>
 80103b4:	b159      	cbz	r1, 80103ce <rcl_send_response+0x26>
 80103b6:	b510      	push	{r4, lr}
 80103b8:	b15a      	cbz	r2, 80103d2 <rcl_send_response+0x2a>
 80103ba:	f003 f80d 	bl	80133d8 <rmw_send_response>
 80103be:	b110      	cbz	r0, 80103c6 <rcl_send_response+0x1e>
 80103c0:	2802      	cmp	r0, #2
 80103c2:	bf18      	it	ne
 80103c4:	2001      	movne	r0, #1
 80103c6:	bd10      	pop	{r4, pc}
 80103c8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80103cc:	4770      	bx	lr
 80103ce:	200b      	movs	r0, #11
 80103d0:	4770      	bx	lr
 80103d2:	200b      	movs	r0, #11
 80103d4:	bd10      	pop	{r4, pc}
 80103d6:	bf00      	nop

080103d8 <rcl_service_is_valid>:
 80103d8:	b130      	cbz	r0, 80103e8 <rcl_service_is_valid+0x10>
 80103da:	6800      	ldr	r0, [r0, #0]
 80103dc:	b120      	cbz	r0, 80103e8 <rcl_service_is_valid+0x10>
 80103de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80103e2:	3800      	subs	r0, #0
 80103e4:	bf18      	it	ne
 80103e6:	2001      	movne	r0, #1
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop

080103ec <rcl_get_zero_initialized_subscription>:
 80103ec:	4b01      	ldr	r3, [pc, #4]	@ (80103f4 <rcl_get_zero_initialized_subscription+0x8>)
 80103ee:	6818      	ldr	r0, [r3, #0]
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	08017054 	.word	0x08017054

080103f8 <rcl_subscription_init>:
 80103f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103fc:	b089      	sub	sp, #36	@ 0x24
 80103fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010400:	b1d6      	cbz	r6, 8010438 <rcl_subscription_init+0x40>
 8010402:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8010406:	4604      	mov	r4, r0
 8010408:	4648      	mov	r0, r9
 801040a:	460d      	mov	r5, r1
 801040c:	4690      	mov	r8, r2
 801040e:	461f      	mov	r7, r3
 8010410:	f7f9 fa48 	bl	80098a4 <rcutils_allocator_is_valid>
 8010414:	b180      	cbz	r0, 8010438 <rcl_subscription_init+0x40>
 8010416:	b17c      	cbz	r4, 8010438 <rcl_subscription_init+0x40>
 8010418:	4628      	mov	r0, r5
 801041a:	f7ff fe83 	bl	8010124 <rcl_node_is_valid>
 801041e:	2800      	cmp	r0, #0
 8010420:	d054      	beq.n	80104cc <rcl_subscription_init+0xd4>
 8010422:	f1b8 0f00 	cmp.w	r8, #0
 8010426:	d007      	beq.n	8010438 <rcl_subscription_init+0x40>
 8010428:	b137      	cbz	r7, 8010438 <rcl_subscription_init+0x40>
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	b14b      	cbz	r3, 8010442 <rcl_subscription_init+0x4a>
 801042e:	2764      	movs	r7, #100	@ 0x64
 8010430:	4638      	mov	r0, r7
 8010432:	b009      	add	sp, #36	@ 0x24
 8010434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010438:	270b      	movs	r7, #11
 801043a:	4638      	mov	r0, r7
 801043c:	b009      	add	sp, #36	@ 0x24
 801043e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010442:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010446:	aa07      	add	r2, sp, #28
 8010448:	9205      	str	r2, [sp, #20]
 801044a:	9307      	str	r3, [sp, #28]
 801044c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010450:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010454:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010458:	4639      	mov	r1, r7
 801045a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801045e:	4628      	mov	r0, r5
 8010460:	f7ff feb4 	bl	80101cc <rcl_node_resolve_name>
 8010464:	4607      	mov	r7, r0
 8010466:	2800      	cmp	r0, #0
 8010468:	d15f      	bne.n	801052a <rcl_subscription_init+0x132>
 801046a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801046e:	21c8      	movs	r1, #200	@ 0xc8
 8010470:	2001      	movs	r0, #1
 8010472:	4798      	blx	r3
 8010474:	6020      	str	r0, [r4, #0]
 8010476:	2800      	cmp	r0, #0
 8010478:	d05d      	beq.n	8010536 <rcl_subscription_init+0x13e>
 801047a:	4628      	mov	r0, r5
 801047c:	f7ff fe74 	bl	8010168 <rcl_node_get_rmw_handle>
 8010480:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	9a07      	ldr	r2, [sp, #28]
 8010488:	6827      	ldr	r7, [r4, #0]
 801048a:	4641      	mov	r1, r8
 801048c:	4633      	mov	r3, r6
 801048e:	f7fa f84f 	bl	800a530 <rmw_create_subscription>
 8010492:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8010496:	6827      	ldr	r7, [r4, #0]
 8010498:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801049c:	b348      	cbz	r0, 80104f2 <rcl_subscription_init+0xfa>
 801049e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80104a2:	f7fa f927 	bl	800a6f4 <rmw_subscription_get_actual_qos>
 80104a6:	4607      	mov	r7, r0
 80104a8:	b9a8      	cbnz	r0, 80104d6 <rcl_subscription_init+0xde>
 80104aa:	6820      	ldr	r0, [r4, #0]
 80104ac:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80104b0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80104b4:	2270      	movs	r2, #112	@ 0x70
 80104b6:	4631      	mov	r1, r6
 80104b8:	f005 f9f5 	bl	80158a6 <memcpy>
 80104bc:	9807      	ldr	r0, [sp, #28]
 80104be:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80104c0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80104c2:	4798      	blx	r3
 80104c4:	4638      	mov	r0, r7
 80104c6:	b009      	add	sp, #36	@ 0x24
 80104c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104cc:	27c8      	movs	r7, #200	@ 0xc8
 80104ce:	4638      	mov	r0, r7
 80104d0:	b009      	add	sp, #36	@ 0x24
 80104d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104d6:	6827      	ldr	r7, [r4, #0]
 80104d8:	b32f      	cbz	r7, 8010526 <rcl_subscription_init+0x12e>
 80104da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80104de:	b14b      	cbz	r3, 80104f4 <rcl_subscription_init+0xfc>
 80104e0:	4628      	mov	r0, r5
 80104e2:	f7ff fe41 	bl	8010168 <rcl_node_get_rmw_handle>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80104ec:	f7fa f912 	bl	800a714 <rmw_destroy_subscription>
 80104f0:	6827      	ldr	r7, [r4, #0]
 80104f2:	b197      	cbz	r7, 801051a <rcl_subscription_init+0x122>
 80104f4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80104f8:	4628      	mov	r0, r5
 80104fa:	f7f9 f9d3 	bl	80098a4 <rcutils_allocator_is_valid>
 80104fe:	b158      	cbz	r0, 8010518 <rcl_subscription_init+0x120>
 8010500:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010502:	b148      	cbz	r0, 8010518 <rcl_subscription_init+0x120>
 8010504:	4629      	mov	r1, r5
 8010506:	f002 fb07 	bl	8012b18 <rmw_subscription_content_filter_options_fini>
 801050a:	4605      	mov	r5, r0
 801050c:	b9b8      	cbnz	r0, 801053e <rcl_subscription_init+0x146>
 801050e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010510:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010512:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010514:	4798      	blx	r3
 8010516:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010518:	6827      	ldr	r7, [r4, #0]
 801051a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801051c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801051e:	4638      	mov	r0, r7
 8010520:	4798      	blx	r3
 8010522:	2300      	movs	r3, #0
 8010524:	6023      	str	r3, [r4, #0]
 8010526:	2701      	movs	r7, #1
 8010528:	e7c8      	b.n	80104bc <rcl_subscription_init+0xc4>
 801052a:	2867      	cmp	r0, #103	@ 0x67
 801052c:	d0c6      	beq.n	80104bc <rcl_subscription_init+0xc4>
 801052e:	2869      	cmp	r0, #105	@ 0x69
 8010530:	d003      	beq.n	801053a <rcl_subscription_init+0x142>
 8010532:	280a      	cmp	r0, #10
 8010534:	d1f7      	bne.n	8010526 <rcl_subscription_init+0x12e>
 8010536:	270a      	movs	r7, #10
 8010538:	e7c0      	b.n	80104bc <rcl_subscription_init+0xc4>
 801053a:	2767      	movs	r7, #103	@ 0x67
 801053c:	e7be      	b.n	80104bc <rcl_subscription_init+0xc4>
 801053e:	f7ff fb0d 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 8010542:	6827      	ldr	r7, [r4, #0]
 8010544:	e7e9      	b.n	801051a <rcl_subscription_init+0x122>
 8010546:	bf00      	nop

08010548 <rcl_subscription_get_default_options>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	4d14      	ldr	r5, [pc, #80]	@ (801059c <rcl_subscription_get_default_options+0x54>)
 801054c:	4914      	ldr	r1, [pc, #80]	@ (80105a0 <rcl_subscription_get_default_options+0x58>)
 801054e:	b08a      	sub	sp, #40	@ 0x28
 8010550:	4604      	mov	r4, r0
 8010552:	2250      	movs	r2, #80	@ 0x50
 8010554:	4628      	mov	r0, r5
 8010556:	f005 f9a6 	bl	80158a6 <memcpy>
 801055a:	a804      	add	r0, sp, #16
 801055c:	f7f9 f994 	bl	8009888 <rcutils_get_default_allocator>
 8010560:	f10d 0c10 	add.w	ip, sp, #16
 8010564:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010568:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801056c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010570:	466e      	mov	r6, sp
 8010572:	f8dc 3000 	ldr.w	r3, [ip]
 8010576:	f8ce 3000 	str.w	r3, [lr]
 801057a:	4630      	mov	r0, r6
 801057c:	f002 fae6 	bl	8012b4c <rmw_get_default_subscription_options>
 8010580:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010584:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010588:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801058c:	2270      	movs	r2, #112	@ 0x70
 801058e:	4629      	mov	r1, r5
 8010590:	4620      	mov	r0, r4
 8010592:	f005 f988 	bl	80158a6 <memcpy>
 8010596:	4620      	mov	r0, r4
 8010598:	b00a      	add	sp, #40	@ 0x28
 801059a:	bd70      	pop	{r4, r5, r6, pc}
 801059c:	2000aad0 	.word	0x2000aad0
 80105a0:	08017058 	.word	0x08017058

080105a4 <rcl_take>:
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d04a      	beq.n	801063e <rcl_take+0x9a>
 80105a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ac:	4604      	mov	r4, r0
 80105ae:	6800      	ldr	r0, [r0, #0]
 80105b0:	b0a4      	sub	sp, #144	@ 0x90
 80105b2:	2800      	cmp	r0, #0
 80105b4:	d03b      	beq.n	801062e <rcl_take+0x8a>
 80105b6:	461f      	mov	r7, r3
 80105b8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d036      	beq.n	801062e <rcl_take+0x8a>
 80105c0:	460e      	mov	r6, r1
 80105c2:	2900      	cmp	r1, #0
 80105c4:	d039      	beq.n	801063a <rcl_take+0x96>
 80105c6:	4615      	mov	r5, r2
 80105c8:	2a00      	cmp	r2, #0
 80105ca:	d03c      	beq.n	8010646 <rcl_take+0xa2>
 80105cc:	a802      	add	r0, sp, #8
 80105ce:	f002 fb47 	bl	8012c60 <rmw_get_zero_initialized_message_info>
 80105d2:	f10d 0c08 	add.w	ip, sp, #8
 80105d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105da:	46ae      	mov	lr, r5
 80105dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80105e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80105e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80105f0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80105f4:	f04f 0800 	mov.w	r8, #0
 80105f8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80105fc:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8010600:	6822      	ldr	r2, [r4, #0]
 8010602:	462b      	mov	r3, r5
 8010604:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8010608:	9700      	str	r7, [sp, #0]
 801060a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801060e:	4631      	mov	r1, r6
 8010610:	f002 ff88 	bl	8013524 <rmw_take_with_info>
 8010614:	4603      	mov	r3, r0
 8010616:	b9c0      	cbnz	r0, 801064a <rcl_take+0xa6>
 8010618:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801061c:	f240 1291 	movw	r2, #401	@ 0x191
 8010620:	2900      	cmp	r1, #0
 8010622:	bf08      	it	eq
 8010624:	4613      	moveq	r3, r2
 8010626:	4618      	mov	r0, r3
 8010628:	b024      	add	sp, #144	@ 0x90
 801062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801062e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010632:	4618      	mov	r0, r3
 8010634:	b024      	add	sp, #144	@ 0x90
 8010636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801063a:	230b      	movs	r3, #11
 801063c:	e7f3      	b.n	8010626 <rcl_take+0x82>
 801063e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010642:	4618      	mov	r0, r3
 8010644:	4770      	bx	lr
 8010646:	ad14      	add	r5, sp, #80	@ 0x50
 8010648:	e7c0      	b.n	80105cc <rcl_take+0x28>
 801064a:	f7ff fa87 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 801064e:	4603      	mov	r3, r0
 8010650:	e7e9      	b.n	8010626 <rcl_take+0x82>
 8010652:	bf00      	nop

08010654 <rcl_subscription_get_rmw_handle>:
 8010654:	b118      	cbz	r0, 801065e <rcl_subscription_get_rmw_handle+0xa>
 8010656:	6800      	ldr	r0, [r0, #0]
 8010658:	b108      	cbz	r0, 801065e <rcl_subscription_get_rmw_handle+0xa>
 801065a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801065e:	4770      	bx	lr

08010660 <rcl_subscription_is_valid>:
 8010660:	b130      	cbz	r0, 8010670 <rcl_subscription_is_valid+0x10>
 8010662:	6800      	ldr	r0, [r0, #0]
 8010664:	b120      	cbz	r0, 8010670 <rcl_subscription_is_valid+0x10>
 8010666:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801066a:	3800      	subs	r0, #0
 801066c:	bf18      	it	ne
 801066e:	2001      	movne	r0, #1
 8010670:	4770      	bx	lr
 8010672:	bf00      	nop

08010674 <rcl_get_system_time>:
 8010674:	4608      	mov	r0, r1
 8010676:	f7f9 b957 	b.w	8009928 <rcutils_system_time_now>
 801067a:	bf00      	nop

0801067c <rcl_get_steady_time>:
 801067c:	4608      	mov	r0, r1
 801067e:	f7f9 b97b 	b.w	8009978 <rcutils_steady_time_now>
 8010682:	bf00      	nop

08010684 <rcl_get_ros_time>:
 8010684:	7a03      	ldrb	r3, [r0, #8]
 8010686:	b510      	push	{r4, lr}
 8010688:	460c      	mov	r4, r1
 801068a:	b133      	cbz	r3, 801069a <rcl_get_ros_time+0x16>
 801068c:	2105      	movs	r1, #5
 801068e:	f001 fef3 	bl	8012478 <__atomic_load_8>
 8010692:	e9c4 0100 	strd	r0, r1, [r4]
 8010696:	2000      	movs	r0, #0
 8010698:	bd10      	pop	{r4, pc}
 801069a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801069e:	4608      	mov	r0, r1
 80106a0:	f7f9 b942 	b.w	8009928 <rcutils_system_time_now>

080106a4 <rcl_clock_init>:
 80106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a6:	4605      	mov	r5, r0
 80106a8:	4610      	mov	r0, r2
 80106aa:	4614      	mov	r4, r2
 80106ac:	460e      	mov	r6, r1
 80106ae:	f7f9 f8f9 	bl	80098a4 <rcutils_allocator_is_valid>
 80106b2:	b128      	cbz	r0, 80106c0 <rcl_clock_init+0x1c>
 80106b4:	2d03      	cmp	r5, #3
 80106b6:	d803      	bhi.n	80106c0 <rcl_clock_init+0x1c>
 80106b8:	e8df f005 	tbb	[pc, r5]
 80106bc:	06532e1d 	.word	0x06532e1d
 80106c0:	f04f 0c0b 	mov.w	ip, #11
 80106c4:	4660      	mov	r0, ip
 80106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	d0f9      	beq.n	80106c0 <rcl_clock_init+0x1c>
 80106cc:	2c00      	cmp	r4, #0
 80106ce:	d0f7      	beq.n	80106c0 <rcl_clock_init+0x1c>
 80106d0:	2300      	movs	r3, #0
 80106d2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80106d6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801078c <rcl_clock_init+0xe8>
 80106da:	6133      	str	r3, [r6, #16]
 80106dc:	f106 0514 	add.w	r5, r6, #20
 80106e0:	469c      	mov	ip, r3
 80106e2:	2703      	movs	r7, #3
 80106e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	602b      	str	r3, [r5, #0]
 80106ec:	7037      	strb	r7, [r6, #0]
 80106ee:	f8c6 e00c 	str.w	lr, [r6, #12]
 80106f2:	4660      	mov	r0, ip
 80106f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106f6:	2e00      	cmp	r6, #0
 80106f8:	d0e2      	beq.n	80106c0 <rcl_clock_init+0x1c>
 80106fa:	2300      	movs	r3, #0
 80106fc:	7033      	strb	r3, [r6, #0]
 80106fe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010702:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010706:	469c      	mov	ip, r3
 8010708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801070a:	f106 0514 	add.w	r5, r6, #20
 801070e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010710:	6823      	ldr	r3, [r4, #0]
 8010712:	602b      	str	r3, [r5, #0]
 8010714:	4660      	mov	r0, ip
 8010716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010718:	2e00      	cmp	r6, #0
 801071a:	d0d1      	beq.n	80106c0 <rcl_clock_init+0x1c>
 801071c:	2c00      	cmp	r4, #0
 801071e:	d0cf      	beq.n	80106c0 <rcl_clock_init+0x1c>
 8010720:	2700      	movs	r7, #0
 8010722:	7037      	strb	r7, [r6, #0]
 8010724:	46a4      	mov	ip, r4
 8010726:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801072a:	f106 0514 	add.w	r5, r6, #20
 801072e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010732:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010738:	f8dc 3000 	ldr.w	r3, [ip]
 801073c:	602b      	str	r3, [r5, #0]
 801073e:	6921      	ldr	r1, [r4, #16]
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	2010      	movs	r0, #16
 8010744:	4798      	blx	r3
 8010746:	6130      	str	r0, [r6, #16]
 8010748:	b1d0      	cbz	r0, 8010780 <rcl_clock_init+0xdc>
 801074a:	2200      	movs	r2, #0
 801074c:	2300      	movs	r3, #0
 801074e:	e9c0 2300 	strd	r2, r3, [r0]
 8010752:	2301      	movs	r3, #1
 8010754:	7207      	strb	r7, [r0, #8]
 8010756:	4a0c      	ldr	r2, [pc, #48]	@ (8010788 <rcl_clock_init+0xe4>)
 8010758:	7033      	strb	r3, [r6, #0]
 801075a:	46bc      	mov	ip, r7
 801075c:	60f2      	str	r2, [r6, #12]
 801075e:	4660      	mov	r0, ip
 8010760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010762:	2e00      	cmp	r6, #0
 8010764:	d0ac      	beq.n	80106c0 <rcl_clock_init+0x1c>
 8010766:	2c00      	cmp	r4, #0
 8010768:	d0aa      	beq.n	80106c0 <rcl_clock_init+0x1c>
 801076a:	2300      	movs	r3, #0
 801076c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010770:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010790 <rcl_clock_init+0xec>
 8010774:	6133      	str	r3, [r6, #16]
 8010776:	f106 0514 	add.w	r5, r6, #20
 801077a:	469c      	mov	ip, r3
 801077c:	2702      	movs	r7, #2
 801077e:	e7b1      	b.n	80106e4 <rcl_clock_init+0x40>
 8010780:	f04f 0c0a 	mov.w	ip, #10
 8010784:	e79e      	b.n	80106c4 <rcl_clock_init+0x20>
 8010786:	bf00      	nop
 8010788:	08010685 	.word	0x08010685
 801078c:	0801067d 	.word	0x0801067d
 8010790:	08010675 	.word	0x08010675

08010794 <rcl_clock_get_now>:
 8010794:	b140      	cbz	r0, 80107a8 <rcl_clock_get_now+0x14>
 8010796:	b139      	cbz	r1, 80107a8 <rcl_clock_get_now+0x14>
 8010798:	7803      	ldrb	r3, [r0, #0]
 801079a:	b11b      	cbz	r3, 80107a4 <rcl_clock_get_now+0x10>
 801079c:	68c3      	ldr	r3, [r0, #12]
 801079e:	b10b      	cbz	r3, 80107a4 <rcl_clock_get_now+0x10>
 80107a0:	6900      	ldr	r0, [r0, #16]
 80107a2:	4718      	bx	r3
 80107a4:	2001      	movs	r0, #1
 80107a6:	4770      	bx	lr
 80107a8:	200b      	movs	r0, #11
 80107aa:	4770      	bx	lr

080107ac <rcl_clock_add_jump_callback>:
 80107ac:	b082      	sub	sp, #8
 80107ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b2:	a906      	add	r1, sp, #24
 80107b4:	e881 000c 	stmia.w	r1, {r2, r3}
 80107b8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80107bc:	b320      	cbz	r0, 8010808 <rcl_clock_add_jump_callback+0x5c>
 80107be:	4604      	mov	r4, r0
 80107c0:	3014      	adds	r0, #20
 80107c2:	f7f9 f86f 	bl	80098a4 <rcutils_allocator_is_valid>
 80107c6:	b1f8      	cbz	r0, 8010808 <rcl_clock_add_jump_callback+0x5c>
 80107c8:	b1f6      	cbz	r6, 8010808 <rcl_clock_add_jump_callback+0x5c>
 80107ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	db1b      	blt.n	8010808 <rcl_clock_add_jump_callback+0x5c>
 80107d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80107d4:	2a01      	cmp	r2, #1
 80107d6:	f173 0300 	sbcs.w	r3, r3, #0
 80107da:	da15      	bge.n	8010808 <rcl_clock_add_jump_callback+0x5c>
 80107dc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80107e0:	2f00      	cmp	r7, #0
 80107e2:	d042      	beq.n	801086a <rcl_clock_add_jump_callback+0xbe>
 80107e4:	2300      	movs	r3, #0
 80107e6:	4602      	mov	r2, r0
 80107e8:	e003      	b.n	80107f2 <rcl_clock_add_jump_callback+0x46>
 80107ea:	42bb      	cmp	r3, r7
 80107ec:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80107f0:	d011      	beq.n	8010816 <rcl_clock_add_jump_callback+0x6a>
 80107f2:	6811      	ldr	r1, [r2, #0]
 80107f4:	42b1      	cmp	r1, r6
 80107f6:	f103 0301 	add.w	r3, r3, #1
 80107fa:	d1f6      	bne.n	80107ea <rcl_clock_add_jump_callback+0x3e>
 80107fc:	6a11      	ldr	r1, [r2, #32]
 80107fe:	42a9      	cmp	r1, r5
 8010800:	d1f3      	bne.n	80107ea <rcl_clock_add_jump_callback+0x3e>
 8010802:	f04f 0e01 	mov.w	lr, #1
 8010806:	e001      	b.n	801080c <rcl_clock_add_jump_callback+0x60>
 8010808:	f04f 0e0b 	mov.w	lr, #11
 801080c:	4670      	mov	r0, lr
 801080e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010812:	b002      	add	sp, #8
 8010814:	4770      	bx	lr
 8010816:	3301      	adds	r3, #1
 8010818:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801081c:	00d9      	lsls	r1, r3, #3
 801081e:	69e3      	ldr	r3, [r4, #28]
 8010820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010822:	4798      	blx	r3
 8010824:	b1f0      	cbz	r0, 8010864 <rcl_clock_add_jump_callback+0xb8>
 8010826:	68a3      	ldr	r3, [r4, #8]
 8010828:	6060      	str	r0, [r4, #4]
 801082a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801082e:	f10d 0c18 	add.w	ip, sp, #24
 8010832:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8010836:	f103 0801 	add.w	r8, r3, #1
 801083a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801083e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010842:	f106 0708 	add.w	r7, r6, #8
 8010846:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010848:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801084c:	f04f 0e00 	mov.w	lr, #0
 8010850:	e887 0003 	stmia.w	r7, {r0, r1}
 8010854:	6235      	str	r5, [r6, #32]
 8010856:	4670      	mov	r0, lr
 8010858:	f8c4 8008 	str.w	r8, [r4, #8]
 801085c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010860:	b002      	add	sp, #8
 8010862:	4770      	bx	lr
 8010864:	f04f 0e0a 	mov.w	lr, #10
 8010868:	e7d0      	b.n	801080c <rcl_clock_add_jump_callback+0x60>
 801086a:	2128      	movs	r1, #40	@ 0x28
 801086c:	e7d7      	b.n	801081e <rcl_clock_add_jump_callback+0x72>
 801086e:	bf00      	nop

08010870 <rcl_clock_remove_jump_callback>:
 8010870:	2800      	cmp	r0, #0
 8010872:	d057      	beq.n	8010924 <rcl_clock_remove_jump_callback+0xb4>
 8010874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010878:	4605      	mov	r5, r0
 801087a:	3014      	adds	r0, #20
 801087c:	4688      	mov	r8, r1
 801087e:	4692      	mov	sl, r2
 8010880:	f7f9 f810 	bl	80098a4 <rcutils_allocator_is_valid>
 8010884:	2800      	cmp	r0, #0
 8010886:	d03b      	beq.n	8010900 <rcl_clock_remove_jump_callback+0x90>
 8010888:	f1b8 0f00 	cmp.w	r8, #0
 801088c:	d038      	beq.n	8010900 <rcl_clock_remove_jump_callback+0x90>
 801088e:	68ae      	ldr	r6, [r5, #8]
 8010890:	b166      	cbz	r6, 80108ac <rcl_clock_remove_jump_callback+0x3c>
 8010892:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010896:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801089a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801089e:	464c      	mov	r4, r9
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	4543      	cmp	r3, r8
 80108a4:	d005      	beq.n	80108b2 <rcl_clock_remove_jump_callback+0x42>
 80108a6:	3428      	adds	r4, #40	@ 0x28
 80108a8:	42a7      	cmp	r7, r4
 80108aa:	d1f9      	bne.n	80108a0 <rcl_clock_remove_jump_callback+0x30>
 80108ac:	2001      	movs	r0, #1
 80108ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108b2:	6a23      	ldr	r3, [r4, #32]
 80108b4:	3428      	adds	r4, #40	@ 0x28
 80108b6:	42bc      	cmp	r4, r7
 80108b8:	d02d      	beq.n	8010916 <rcl_clock_remove_jump_callback+0xa6>
 80108ba:	4553      	cmp	r3, sl
 80108bc:	d1f0      	bne.n	80108a0 <rcl_clock_remove_jump_callback+0x30>
 80108be:	46a6      	mov	lr, r4
 80108c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108c4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80108c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80108d8:	3428      	adds	r4, #40	@ 0x28
 80108da:	42a7      	cmp	r7, r4
 80108dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80108e0:	d1ed      	bne.n	80108be <rcl_clock_remove_jump_callback+0x4e>
 80108e2:	3e01      	subs	r6, #1
 80108e4:	60ae      	str	r6, [r5, #8]
 80108e6:	b176      	cbz	r6, 8010906 <rcl_clock_remove_jump_callback+0x96>
 80108e8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80108ec:	69eb      	ldr	r3, [r5, #28]
 80108ee:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80108f0:	00f1      	lsls	r1, r6, #3
 80108f2:	4648      	mov	r0, r9
 80108f4:	4798      	blx	r3
 80108f6:	b1b8      	cbz	r0, 8010928 <rcl_clock_remove_jump_callback+0xb8>
 80108f8:	6068      	str	r0, [r5, #4]
 80108fa:	2000      	movs	r0, #0
 80108fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010900:	200b      	movs	r0, #11
 8010902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010906:	4648      	mov	r0, r9
 8010908:	69ab      	ldr	r3, [r5, #24]
 801090a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801090c:	4798      	blx	r3
 801090e:	606e      	str	r6, [r5, #4]
 8010910:	4630      	mov	r0, r6
 8010912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010916:	4553      	cmp	r3, sl
 8010918:	d1c8      	bne.n	80108ac <rcl_clock_remove_jump_callback+0x3c>
 801091a:	3e01      	subs	r6, #1
 801091c:	60ae      	str	r6, [r5, #8]
 801091e:	2e00      	cmp	r6, #0
 8010920:	d1e2      	bne.n	80108e8 <rcl_clock_remove_jump_callback+0x78>
 8010922:	e7f0      	b.n	8010906 <rcl_clock_remove_jump_callback+0x96>
 8010924:	200b      	movs	r0, #11
 8010926:	4770      	bx	lr
 8010928:	200a      	movs	r0, #10
 801092a:	e7ea      	b.n	8010902 <rcl_clock_remove_jump_callback+0x92>

0801092c <_rcl_timer_time_jump>:
 801092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010930:	4605      	mov	r5, r0
 8010932:	b084      	sub	sp, #16
 8010934:	4614      	mov	r4, r2
 8010936:	b131      	cbz	r1, 8010946 <_rcl_timer_time_jump+0x1a>
 8010938:	7803      	ldrb	r3, [r0, #0]
 801093a:	3b02      	subs	r3, #2
 801093c:	2b01      	cmp	r3, #1
 801093e:	d93f      	bls.n	80109c0 <_rcl_timer_time_jump+0x94>
 8010940:	b004      	add	sp, #16
 8010942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010946:	6813      	ldr	r3, [r2, #0]
 8010948:	a902      	add	r1, sp, #8
 801094a:	6818      	ldr	r0, [r3, #0]
 801094c:	f7ff ff22 	bl	8010794 <rcl_clock_get_now>
 8010950:	2800      	cmp	r0, #0
 8010952:	d1f5      	bne.n	8010940 <_rcl_timer_time_jump+0x14>
 8010954:	6820      	ldr	r0, [r4, #0]
 8010956:	2105      	movs	r1, #5
 8010958:	3020      	adds	r0, #32
 801095a:	f001 fd8d 	bl	8012478 <__atomic_load_8>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	4681      	mov	r9, r0
 8010962:	4688      	mov	r8, r1
 8010964:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8010968:	2105      	movs	r1, #5
 801096a:	f001 fd85 	bl	8012478 <__atomic_load_8>
 801096e:	4607      	mov	r7, r0
 8010970:	6820      	ldr	r0, [r4, #0]
 8010972:	460e      	mov	r6, r1
 8010974:	3018      	adds	r0, #24
 8010976:	2105      	movs	r1, #5
 8010978:	f001 fd7e 	bl	8012478 <__atomic_load_8>
 801097c:	782b      	ldrb	r3, [r5, #0]
 801097e:	9a02      	ldr	r2, [sp, #8]
 8010980:	3b02      	subs	r3, #2
 8010982:	2b01      	cmp	r3, #1
 8010984:	460d      	mov	r5, r1
 8010986:	9b03      	ldr	r3, [sp, #12]
 8010988:	4682      	mov	sl, r0
 801098a:	d937      	bls.n	80109fc <_rcl_timer_time_jump+0xd0>
 801098c:	42ba      	cmp	r2, r7
 801098e:	eb73 0106 	sbcs.w	r1, r3, r6
 8010992:	da5f      	bge.n	8010a54 <_rcl_timer_time_jump+0x128>
 8010994:	454a      	cmp	r2, r9
 8010996:	eb73 0108 	sbcs.w	r1, r3, r8
 801099a:	dad1      	bge.n	8010940 <_rcl_timer_time_jump+0x14>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	eb1a 0202 	adds.w	r2, sl, r2
 80109a2:	eb43 0305 	adc.w	r3, r3, r5
 80109a6:	2505      	movs	r5, #5
 80109a8:	3028      	adds	r0, #40	@ 0x28
 80109aa:	9500      	str	r5, [sp, #0]
 80109ac:	f001 fd9a 	bl	80124e4 <__atomic_store_8>
 80109b0:	6820      	ldr	r0, [r4, #0]
 80109b2:	9500      	str	r5, [sp, #0]
 80109b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109b8:	3020      	adds	r0, #32
 80109ba:	f001 fd93 	bl	80124e4 <__atomic_store_8>
 80109be:	e7bf      	b.n	8010940 <_rcl_timer_time_jump+0x14>
 80109c0:	6813      	ldr	r3, [r2, #0]
 80109c2:	a902      	add	r1, sp, #8
 80109c4:	6818      	ldr	r0, [r3, #0]
 80109c6:	f7ff fee5 	bl	8010794 <rcl_clock_get_now>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d1b8      	bne.n	8010940 <_rcl_timer_time_jump+0x14>
 80109ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109d2:	4313      	orrs	r3, r2
 80109d4:	d0b4      	beq.n	8010940 <_rcl_timer_time_jump+0x14>
 80109d6:	6820      	ldr	r0, [r4, #0]
 80109d8:	2105      	movs	r1, #5
 80109da:	3028      	adds	r0, #40	@ 0x28
 80109dc:	f001 fd4c 	bl	8012478 <__atomic_load_8>
 80109e0:	9d02      	ldr	r5, [sp, #8]
 80109e2:	9b03      	ldr	r3, [sp, #12]
 80109e4:	4602      	mov	r2, r0
 80109e6:	6820      	ldr	r0, [r4, #0]
 80109e8:	1b52      	subs	r2, r2, r5
 80109ea:	f04f 0405 	mov.w	r4, #5
 80109ee:	9400      	str	r4, [sp, #0]
 80109f0:	eb61 0303 	sbc.w	r3, r1, r3
 80109f4:	3030      	adds	r0, #48	@ 0x30
 80109f6:	f001 fd75 	bl	80124e4 <__atomic_store_8>
 80109fa:	e7a1      	b.n	8010940 <_rcl_timer_time_jump+0x14>
 80109fc:	4313      	orrs	r3, r2
 80109fe:	d09f      	beq.n	8010940 <_rcl_timer_time_jump+0x14>
 8010a00:	6820      	ldr	r0, [r4, #0]
 8010a02:	f04f 0805 	mov.w	r8, #5
 8010a06:	2300      	movs	r3, #0
 8010a08:	f8cd 8000 	str.w	r8, [sp]
 8010a0c:	3030      	adds	r0, #48	@ 0x30
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f001 fd9e 	bl	8012550 <__atomic_exchange_8>
 8010a14:	ea51 0300 	orrs.w	r3, r1, r0
 8010a18:	4606      	mov	r6, r0
 8010a1a:	460f      	mov	r7, r1
 8010a1c:	d090      	beq.n	8010940 <_rcl_timer_time_jump+0x14>
 8010a1e:	9a02      	ldr	r2, [sp, #8]
 8010a20:	9b03      	ldr	r3, [sp, #12]
 8010a22:	f8cd 8000 	str.w	r8, [sp]
 8010a26:	1a12      	subs	r2, r2, r0
 8010a28:	6820      	ldr	r0, [r4, #0]
 8010a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8010a2e:	eb12 020a 	adds.w	r2, r2, sl
 8010a32:	eb43 0305 	adc.w	r3, r3, r5
 8010a36:	3028      	adds	r0, #40	@ 0x28
 8010a38:	f001 fd54 	bl	80124e4 <__atomic_store_8>
 8010a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a40:	f8cd 8000 	str.w	r8, [sp]
 8010a44:	6820      	ldr	r0, [r4, #0]
 8010a46:	1b92      	subs	r2, r2, r6
 8010a48:	eb63 0307 	sbc.w	r3, r3, r7
 8010a4c:	3020      	adds	r0, #32
 8010a4e:	f001 fd49 	bl	80124e4 <__atomic_store_8>
 8010a52:	e775      	b.n	8010940 <_rcl_timer_time_jump+0x14>
 8010a54:	6820      	ldr	r0, [r4, #0]
 8010a56:	3008      	adds	r0, #8
 8010a58:	f004 f924 	bl	8014ca4 <rcl_trigger_guard_condition>
 8010a5c:	e770      	b.n	8010940 <_rcl_timer_time_jump+0x14>
 8010a5e:	bf00      	nop

08010a60 <rcl_get_zero_initialized_timer>:
 8010a60:	4b01      	ldr	r3, [pc, #4]	@ (8010a68 <rcl_get_zero_initialized_timer+0x8>)
 8010a62:	6818      	ldr	r0, [r3, #0]
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	080170a8 	.word	0x080170a8
 8010a6c:	00000000 	.word	0x00000000

08010a70 <rcl_timer_init>:
 8010a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a74:	b0aa      	sub	sp, #168	@ 0xa8
 8010a76:	4604      	mov	r4, r0
 8010a78:	a835      	add	r0, sp, #212	@ 0xd4
 8010a7a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8010a7e:	460d      	mov	r5, r1
 8010a80:	4692      	mov	sl, r2
 8010a82:	f7f8 ff0f 	bl	80098a4 <rcutils_allocator_is_valid>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d064      	beq.n	8010b54 <rcl_timer_init+0xe4>
 8010a8a:	2c00      	cmp	r4, #0
 8010a8c:	d062      	beq.n	8010b54 <rcl_timer_init+0xe4>
 8010a8e:	2d00      	cmp	r5, #0
 8010a90:	d060      	beq.n	8010b54 <rcl_timer_init+0xe4>
 8010a92:	2f00      	cmp	r7, #0
 8010a94:	db5e      	blt.n	8010b54 <rcl_timer_init+0xe4>
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	b123      	cbz	r3, 8010aa4 <rcl_timer_init+0x34>
 8010a9a:	2664      	movs	r6, #100	@ 0x64
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	b02a      	add	sp, #168	@ 0xa8
 8010aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa4:	a908      	add	r1, sp, #32
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	f7ff fe74 	bl	8010794 <rcl_clock_get_now>
 8010aac:	4606      	mov	r6, r0
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d1f4      	bne.n	8010a9c <rcl_timer_init+0x2c>
 8010ab2:	ae06      	add	r6, sp, #24
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8010aba:	f003 fffb 	bl	8014ab4 <rcl_get_zero_initialized_guard_condition>
 8010abe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010ac2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8010ac6:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010ac8:	e889 0003 	stmia.w	r9, {r0, r1}
 8010acc:	4630      	mov	r0, r6
 8010ace:	f004 f8cd 	bl	8014c6c <rcl_guard_condition_get_default_options>
 8010ad2:	ab0d      	add	r3, sp, #52	@ 0x34
 8010ad4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ad8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010adc:	4651      	mov	r1, sl
 8010ade:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010ae2:	4648      	mov	r0, r9
 8010ae4:	f003 fff0 	bl	8014ac8 <rcl_guard_condition_init>
 8010ae8:	4606      	mov	r6, r0
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d1d6      	bne.n	8010a9c <rcl_timer_init+0x2c>
 8010aee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d033      	beq.n	8010b5e <rcl_timer_init+0xee>
 8010af6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010af8:	911a      	str	r1, [sp, #104]	@ 0x68
 8010afa:	4642      	mov	r2, r8
 8010afc:	463b      	mov	r3, r7
 8010afe:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8010b02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010b06:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010bb8 <rcl_timer_init+0x148>
 8010b0a:	eb12 0008 	adds.w	r0, r2, r8
 8010b0e:	eb47 0103 	adc.w	r1, r7, r3
 8010b12:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8010b16:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8010b1a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8010b1e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8010b22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b26:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8010b2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b2e:	f8de 3000 	ldr.w	r3, [lr]
 8010b32:	f8cc 3000 	str.w	r3, [ip]
 8010b36:	f04f 0a00 	mov.w	sl, #0
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8010b40:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8010b42:	2050      	movs	r0, #80	@ 0x50
 8010b44:	4798      	blx	r3
 8010b46:	6020      	str	r0, [r4, #0]
 8010b48:	b358      	cbz	r0, 8010ba2 <rcl_timer_init+0x132>
 8010b4a:	2250      	movs	r2, #80	@ 0x50
 8010b4c:	a916      	add	r1, sp, #88	@ 0x58
 8010b4e:	f004 feaa 	bl	80158a6 <memcpy>
 8010b52:	e7a3      	b.n	8010a9c <rcl_timer_init+0x2c>
 8010b54:	260b      	movs	r6, #11
 8010b56:	4630      	mov	r0, r6
 8010b58:	b02a      	add	sp, #168	@ 0xa8
 8010b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b5e:	2001      	movs	r0, #1
 8010b60:	2100      	movs	r1, #0
 8010b62:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8010b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010b6e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8010b72:	4a13      	ldr	r2, [pc, #76]	@ (8010bc0 <rcl_timer_init+0x150>)
 8010b74:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010b78:	9405      	str	r4, [sp, #20]
 8010b7a:	9204      	str	r2, [sp, #16]
 8010b7c:	ab12      	add	r3, sp, #72	@ 0x48
 8010b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010b80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010b84:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010b88:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f7ff fe0d 	bl	80107ac <rcl_clock_add_jump_callback>
 8010b92:	4682      	mov	sl, r0
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0ae      	beq.n	8010af6 <rcl_timer_init+0x86>
 8010b98:	4648      	mov	r0, r9
 8010b9a:	f004 f841 	bl	8014c20 <rcl_guard_condition_fini>
 8010b9e:	4656      	mov	r6, sl
 8010ba0:	e77c      	b.n	8010a9c <rcl_timer_init+0x2c>
 8010ba2:	4648      	mov	r0, r9
 8010ba4:	f004 f83c 	bl	8014c20 <rcl_guard_condition_fini>
 8010ba8:	4905      	ldr	r1, [pc, #20]	@ (8010bc0 <rcl_timer_init+0x150>)
 8010baa:	4622      	mov	r2, r4
 8010bac:	4628      	mov	r0, r5
 8010bae:	f7ff fe5f 	bl	8010870 <rcl_clock_remove_jump_callback>
 8010bb2:	260a      	movs	r6, #10
 8010bb4:	e772      	b.n	8010a9c <rcl_timer_init+0x2c>
 8010bb6:	bf00      	nop
	...
 8010bc0:	0801092d 	.word	0x0801092d

08010bc4 <rcl_timer_call>:
 8010bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc8:	b087      	sub	sp, #28
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d06d      	beq.n	8010caa <rcl_timer_call+0xe6>
 8010bce:	6803      	ldr	r3, [r0, #0]
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d063      	beq.n	8010c9e <rcl_timer_call+0xda>
 8010bd6:	f3bf 8f5b 	dmb	ish
 8010bda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010bde:	f3bf 8f5b 	dmb	ish
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d150      	bne.n	8010c88 <rcl_timer_call+0xc4>
 8010be6:	6803      	ldr	r3, [r0, #0]
 8010be8:	a904      	add	r1, sp, #16
 8010bea:	6818      	ldr	r0, [r3, #0]
 8010bec:	f7ff fdd2 	bl	8010794 <rcl_clock_get_now>
 8010bf0:	4605      	mov	r5, r0
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d14a      	bne.n	8010c8c <rcl_timer_call+0xc8>
 8010bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	db4a      	blt.n	8010c94 <rcl_timer_call+0xd0>
 8010bfe:	6820      	ldr	r0, [r4, #0]
 8010c00:	f04f 0a05 	mov.w	sl, #5
 8010c04:	f8cd a000 	str.w	sl, [sp]
 8010c08:	3020      	adds	r0, #32
 8010c0a:	f001 fca1 	bl	8012550 <__atomic_exchange_8>
 8010c0e:	6823      	ldr	r3, [r4, #0]
 8010c10:	f3bf 8f5b 	dmb	ish
 8010c14:	4680      	mov	r8, r0
 8010c16:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010c1a:	f3bf 8f5b 	dmb	ish
 8010c1e:	6820      	ldr	r0, [r4, #0]
 8010c20:	4689      	mov	r9, r1
 8010c22:	3028      	adds	r0, #40	@ 0x28
 8010c24:	4651      	mov	r1, sl
 8010c26:	f001 fc27 	bl	8012478 <__atomic_load_8>
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	6820      	ldr	r0, [r4, #0]
 8010c2e:	460f      	mov	r7, r1
 8010c30:	3018      	adds	r0, #24
 8010c32:	4651      	mov	r1, sl
 8010c34:	f001 fc20 	bl	8012478 <__atomic_load_8>
 8010c38:	1836      	adds	r6, r6, r0
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010c42:	eb47 0701 	adc.w	r7, r7, r1
 8010c46:	4286      	cmp	r6, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	eb77 010c 	sbcs.w	r1, r7, ip
 8010c4e:	da04      	bge.n	8010c5a <rcl_timer_call+0x96>
 8010c50:	ea53 0102 	orrs.w	r1, r3, r2
 8010c54:	d12e      	bne.n	8010cb4 <rcl_timer_call+0xf0>
 8010c56:	4606      	mov	r6, r0
 8010c58:	4667      	mov	r7, ip
 8010c5a:	6820      	ldr	r0, [r4, #0]
 8010c5c:	2105      	movs	r1, #5
 8010c5e:	4632      	mov	r2, r6
 8010c60:	463b      	mov	r3, r7
 8010c62:	3028      	adds	r0, #40	@ 0x28
 8010c64:	9100      	str	r1, [sp, #0]
 8010c66:	f001 fc3d 	bl	80124e4 <__atomic_store_8>
 8010c6a:	f1bb 0f00 	cmp.w	fp, #0
 8010c6e:	d00d      	beq.n	8010c8c <rcl_timer_call+0xc8>
 8010c70:	9a04      	ldr	r2, [sp, #16]
 8010c72:	9b05      	ldr	r3, [sp, #20]
 8010c74:	ebb2 0208 	subs.w	r2, r2, r8
 8010c78:	4620      	mov	r0, r4
 8010c7a:	eb63 0309 	sbc.w	r3, r3, r9
 8010c7e:	47d8      	blx	fp
 8010c80:	4628      	mov	r0, r5
 8010c82:	b007      	add	sp, #28
 8010c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c88:	f240 3521 	movw	r5, #801	@ 0x321
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	b007      	add	sp, #28
 8010c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c94:	2501      	movs	r5, #1
 8010c96:	4628      	mov	r0, r5
 8010c98:	b007      	add	sp, #28
 8010c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c9e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	b007      	add	sp, #28
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010caa:	250b      	movs	r5, #11
 8010cac:	4628      	mov	r0, r5
 8010cae:	b007      	add	sp, #28
 8010cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb4:	1b80      	subs	r0, r0, r6
 8010cb6:	eb6c 0107 	sbc.w	r1, ip, r7
 8010cba:	3801      	subs	r0, #1
 8010cbc:	f161 0100 	sbc.w	r1, r1, #0
 8010cc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010cc4:	f7ef fb14 	bl	80002f0 <__aeabi_ldivmod>
 8010cc8:	9b02      	ldr	r3, [sp, #8]
 8010cca:	3001      	adds	r0, #1
 8010ccc:	f141 0100 	adc.w	r1, r1, #0
 8010cd0:	fb00 f303 	mul.w	r3, r0, r3
 8010cd4:	fb01 330a 	mla	r3, r1, sl, r3
 8010cd8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010cdc:	1986      	adds	r6, r0, r6
 8010cde:	4453      	add	r3, sl
 8010ce0:	eb43 0707 	adc.w	r7, r3, r7
 8010ce4:	e7b9      	b.n	8010c5a <rcl_timer_call+0x96>
 8010ce6:	bf00      	nop

08010ce8 <rcl_timer_is_ready>:
 8010ce8:	b570      	push	{r4, r5, r6, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	b378      	cbz	r0, 8010d4e <rcl_timer_is_ready+0x66>
 8010cee:	6803      	ldr	r3, [r0, #0]
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	b383      	cbz	r3, 8010d56 <rcl_timer_is_ready+0x6e>
 8010cf4:	460d      	mov	r5, r1
 8010cf6:	b351      	cbz	r1, 8010d4e <rcl_timer_is_ready+0x66>
 8010cf8:	f3bf 8f5b 	dmb	ish
 8010cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010d00:	f3bf 8f5b 	dmb	ish
 8010d04:	b953      	cbnz	r3, 8010d1c <rcl_timer_is_ready+0x34>
 8010d06:	6803      	ldr	r3, [r0, #0]
 8010d08:	4669      	mov	r1, sp
 8010d0a:	6818      	ldr	r0, [r3, #0]
 8010d0c:	f7ff fd42 	bl	8010794 <rcl_clock_get_now>
 8010d10:	4606      	mov	r6, r0
 8010d12:	b140      	cbz	r0, 8010d26 <rcl_timer_is_ready+0x3e>
 8010d14:	f240 3321 	movw	r3, #801	@ 0x321
 8010d18:	4298      	cmp	r0, r3
 8010d1a:	d101      	bne.n	8010d20 <rcl_timer_is_ready+0x38>
 8010d1c:	2600      	movs	r6, #0
 8010d1e:	702e      	strb	r6, [r5, #0]
 8010d20:	4630      	mov	r0, r6
 8010d22:	b002      	add	sp, #8
 8010d24:	bd70      	pop	{r4, r5, r6, pc}
 8010d26:	6820      	ldr	r0, [r4, #0]
 8010d28:	2105      	movs	r1, #5
 8010d2a:	3028      	adds	r0, #40	@ 0x28
 8010d2c:	f001 fba4 	bl	8012478 <__atomic_load_8>
 8010d30:	9b00      	ldr	r3, [sp, #0]
 8010d32:	1ac0      	subs	r0, r0, r3
 8010d34:	9b01      	ldr	r3, [sp, #4]
 8010d36:	eb61 0103 	sbc.w	r1, r1, r3
 8010d3a:	2801      	cmp	r0, #1
 8010d3c:	f171 0300 	sbcs.w	r3, r1, #0
 8010d40:	bfb4      	ite	lt
 8010d42:	2301      	movlt	r3, #1
 8010d44:	2300      	movge	r3, #0
 8010d46:	4630      	mov	r0, r6
 8010d48:	702b      	strb	r3, [r5, #0]
 8010d4a:	b002      	add	sp, #8
 8010d4c:	bd70      	pop	{r4, r5, r6, pc}
 8010d4e:	260b      	movs	r6, #11
 8010d50:	4630      	mov	r0, r6
 8010d52:	b002      	add	sp, #8
 8010d54:	bd70      	pop	{r4, r5, r6, pc}
 8010d56:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010d5a:	e7e1      	b.n	8010d20 <rcl_timer_is_ready+0x38>

08010d5c <rcl_timer_get_time_until_next_call>:
 8010d5c:	b570      	push	{r4, r5, r6, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	b330      	cbz	r0, 8010db0 <rcl_timer_get_time_until_next_call+0x54>
 8010d62:	6803      	ldr	r3, [r0, #0]
 8010d64:	4604      	mov	r4, r0
 8010d66:	b33b      	cbz	r3, 8010db8 <rcl_timer_get_time_until_next_call+0x5c>
 8010d68:	460d      	mov	r5, r1
 8010d6a:	b309      	cbz	r1, 8010db0 <rcl_timer_get_time_until_next_call+0x54>
 8010d6c:	f3bf 8f5b 	dmb	ish
 8010d70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010d74:	f3bf 8f5b 	dmb	ish
 8010d78:	b9ab      	cbnz	r3, 8010da6 <rcl_timer_get_time_until_next_call+0x4a>
 8010d7a:	6803      	ldr	r3, [r0, #0]
 8010d7c:	4669      	mov	r1, sp
 8010d7e:	6818      	ldr	r0, [r3, #0]
 8010d80:	f7ff fd08 	bl	8010794 <rcl_clock_get_now>
 8010d84:	4606      	mov	r6, r0
 8010d86:	b958      	cbnz	r0, 8010da0 <rcl_timer_get_time_until_next_call+0x44>
 8010d88:	6820      	ldr	r0, [r4, #0]
 8010d8a:	2105      	movs	r1, #5
 8010d8c:	3028      	adds	r0, #40	@ 0x28
 8010d8e:	f001 fb73 	bl	8012478 <__atomic_load_8>
 8010d92:	9b00      	ldr	r3, [sp, #0]
 8010d94:	1ac0      	subs	r0, r0, r3
 8010d96:	9b01      	ldr	r3, [sp, #4]
 8010d98:	6028      	str	r0, [r5, #0]
 8010d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8010d9e:	6069      	str	r1, [r5, #4]
 8010da0:	4630      	mov	r0, r6
 8010da2:	b002      	add	sp, #8
 8010da4:	bd70      	pop	{r4, r5, r6, pc}
 8010da6:	f240 3621 	movw	r6, #801	@ 0x321
 8010daa:	4630      	mov	r0, r6
 8010dac:	b002      	add	sp, #8
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	260b      	movs	r6, #11
 8010db2:	4630      	mov	r0, r6
 8010db4:	b002      	add	sp, #8
 8010db6:	bd70      	pop	{r4, r5, r6, pc}
 8010db8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010dbc:	e7f0      	b.n	8010da0 <rcl_timer_get_time_until_next_call+0x44>
 8010dbe:	bf00      	nop

08010dc0 <rcl_timer_get_guard_condition>:
 8010dc0:	b130      	cbz	r0, 8010dd0 <rcl_timer_get_guard_condition+0x10>
 8010dc2:	6800      	ldr	r0, [r0, #0]
 8010dc4:	b120      	cbz	r0, 8010dd0 <rcl_timer_get_guard_condition+0x10>
 8010dc6:	68c3      	ldr	r3, [r0, #12]
 8010dc8:	b10b      	cbz	r3, 8010dce <rcl_timer_get_guard_condition+0xe>
 8010dca:	3008      	adds	r0, #8
 8010dcc:	4770      	bx	lr
 8010dce:	4618      	mov	r0, r3
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop

08010dd4 <rcl_get_zero_initialized_wait_set>:
 8010dd4:	b510      	push	{r4, lr}
 8010dd6:	4c08      	ldr	r4, [pc, #32]	@ (8010df8 <rcl_get_zero_initialized_wait_set+0x24>)
 8010dd8:	4686      	mov	lr, r0
 8010dda:	4684      	mov	ip, r0
 8010ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010de4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	f8cc 3000 	str.w	r3, [ip]
 8010df4:	4670      	mov	r0, lr
 8010df6:	bd10      	pop	{r4, pc}
 8010df8:	080170ac 	.word	0x080170ac

08010dfc <rcl_wait_set_is_valid>:
 8010dfc:	b118      	cbz	r0, 8010e06 <rcl_wait_set_is_valid+0xa>
 8010dfe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010e00:	3800      	subs	r0, #0
 8010e02:	bf18      	it	ne
 8010e04:	2001      	movne	r0, #1
 8010e06:	4770      	bx	lr

08010e08 <rcl_wait_set_fini>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f000 8095 	beq.w	8010f3e <rcl_wait_set_fini+0x136>
 8010e14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010e16:	4604      	mov	r4, r0
 8010e18:	2e00      	cmp	r6, #0
 8010e1a:	f000 808c 	beq.w	8010f36 <rcl_wait_set_fini+0x12e>
 8010e1e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8010e20:	f002 fd56 	bl	80138d0 <rmw_destroy_wait_set>
 8010e24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e26:	1e06      	subs	r6, r0, #0
 8010e28:	bf18      	it	ne
 8010e2a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8010e2e:	2d00      	cmp	r5, #0
 8010e30:	f000 8081 	beq.w	8010f36 <rcl_wait_set_fini+0x12e>
 8010e34:	6820      	ldr	r0, [r4, #0]
 8010e36:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010e3a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e3c:	2700      	movs	r7, #0
 8010e3e:	6067      	str	r7, [r4, #4]
 8010e40:	602f      	str	r7, [r5, #0]
 8010e42:	b120      	cbz	r0, 8010e4e <rcl_wait_set_fini+0x46>
 8010e44:	9101      	str	r1, [sp, #4]
 8010e46:	47c0      	blx	r8
 8010e48:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e4a:	9901      	ldr	r1, [sp, #4]
 8010e4c:	6027      	str	r7, [r4, #0]
 8010e4e:	68a8      	ldr	r0, [r5, #8]
 8010e50:	b120      	cbz	r0, 8010e5c <rcl_wait_set_fini+0x54>
 8010e52:	47c0      	blx	r8
 8010e54:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e56:	2300      	movs	r3, #0
 8010e58:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010e5c:	68a0      	ldr	r0, [r4, #8]
 8010e5e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e60:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e62:	f04f 0800 	mov.w	r8, #0
 8010e66:	f8c4 800c 	str.w	r8, [r4, #12]
 8010e6a:	f8c5 800c 	str.w	r8, [r5, #12]
 8010e6e:	b128      	cbz	r0, 8010e7c <rcl_wait_set_fini+0x74>
 8010e70:	47b8      	blx	r7
 8010e72:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e74:	f8c4 8008 	str.w	r8, [r4, #8]
 8010e78:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e7a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e7c:	6968      	ldr	r0, [r5, #20]
 8010e7e:	f04f 0800 	mov.w	r8, #0
 8010e82:	f8c5 8010 	str.w	r8, [r5, #16]
 8010e86:	b128      	cbz	r0, 8010e94 <rcl_wait_set_fini+0x8c>
 8010e88:	47b8      	blx	r7
 8010e8a:	f8c5 8014 	str.w	r8, [r5, #20]
 8010e8e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e90:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e92:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e94:	6920      	ldr	r0, [r4, #16]
 8010e96:	f04f 0800 	mov.w	r8, #0
 8010e9a:	f8c4 8014 	str.w	r8, [r4, #20]
 8010e9e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8010ea2:	b128      	cbz	r0, 8010eb0 <rcl_wait_set_fini+0xa8>
 8010ea4:	47b8      	blx	r7
 8010ea6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ea8:	f8c4 8010 	str.w	r8, [r4, #16]
 8010eac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010eae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010eb0:	69a0      	ldr	r0, [r4, #24]
 8010eb2:	f04f 0800 	mov.w	r8, #0
 8010eb6:	f8c4 801c 	str.w	r8, [r4, #28]
 8010eba:	f8c5 8018 	str.w	r8, [r5, #24]
 8010ebe:	b128      	cbz	r0, 8010ecc <rcl_wait_set_fini+0xc4>
 8010ec0:	9101      	str	r1, [sp, #4]
 8010ec2:	47b8      	blx	r7
 8010ec4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ec6:	9901      	ldr	r1, [sp, #4]
 8010ec8:	f8c4 8018 	str.w	r8, [r4, #24]
 8010ecc:	6a28      	ldr	r0, [r5, #32]
 8010ece:	b120      	cbz	r0, 8010eda <rcl_wait_set_fini+0xd2>
 8010ed0:	47b8      	blx	r7
 8010ed2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010eda:	6a20      	ldr	r0, [r4, #32]
 8010edc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010ee0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010ee2:	2700      	movs	r7, #0
 8010ee4:	6267      	str	r7, [r4, #36]	@ 0x24
 8010ee6:	626f      	str	r7, [r5, #36]	@ 0x24
 8010ee8:	b120      	cbz	r0, 8010ef4 <rcl_wait_set_fini+0xec>
 8010eea:	9101      	str	r1, [sp, #4]
 8010eec:	47c0      	blx	r8
 8010eee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ef0:	9901      	ldr	r1, [sp, #4]
 8010ef2:	6227      	str	r7, [r4, #32]
 8010ef4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010ef6:	b120      	cbz	r0, 8010f02 <rcl_wait_set_fini+0xfa>
 8010ef8:	47c0      	blx	r8
 8010efa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010efc:	2300      	movs	r3, #0
 8010efe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010f02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010f04:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010f08:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f0a:	2700      	movs	r7, #0
 8010f0c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8010f0e:	632f      	str	r7, [r5, #48]	@ 0x30
 8010f10:	b120      	cbz	r0, 8010f1c <rcl_wait_set_fini+0x114>
 8010f12:	9101      	str	r1, [sp, #4]
 8010f14:	47c0      	blx	r8
 8010f16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f18:	9901      	ldr	r1, [sp, #4]
 8010f1a:	62a7      	str	r7, [r4, #40]	@ 0x28
 8010f1c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8010f1e:	b120      	cbz	r0, 8010f2a <rcl_wait_set_fini+0x122>
 8010f20:	47c0      	blx	r8
 8010f22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f24:	2300      	movs	r3, #0
 8010f26:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8010f2a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010f2c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f2e:	4628      	mov	r0, r5
 8010f30:	4798      	blx	r3
 8010f32:	2300      	movs	r3, #0
 8010f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f36:	4630      	mov	r0, r6
 8010f38:	b002      	add	sp, #8
 8010f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f3e:	260b      	movs	r6, #11
 8010f40:	4630      	mov	r0, r6
 8010f42:	b002      	add	sp, #8
 8010f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f48 <rcl_wait_set_add_subscription>:
 8010f48:	b318      	cbz	r0, 8010f92 <rcl_wait_set_add_subscription+0x4a>
 8010f4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	4604      	mov	r4, r0
 8010f50:	b30b      	cbz	r3, 8010f96 <rcl_wait_set_add_subscription+0x4e>
 8010f52:	b319      	cbz	r1, 8010f9c <rcl_wait_set_add_subscription+0x54>
 8010f54:	681d      	ldr	r5, [r3, #0]
 8010f56:	6840      	ldr	r0, [r0, #4]
 8010f58:	4285      	cmp	r5, r0
 8010f5a:	d217      	bcs.n	8010f8c <rcl_wait_set_add_subscription+0x44>
 8010f5c:	6820      	ldr	r0, [r4, #0]
 8010f5e:	1c6e      	adds	r6, r5, #1
 8010f60:	601e      	str	r6, [r3, #0]
 8010f62:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010f66:	b102      	cbz	r2, 8010f6a <rcl_wait_set_add_subscription+0x22>
 8010f68:	6015      	str	r5, [r2, #0]
 8010f6a:	4608      	mov	r0, r1
 8010f6c:	f7ff fb72 	bl	8010654 <rcl_subscription_get_rmw_handle>
 8010f70:	b150      	cbz	r0, 8010f88 <rcl_wait_set_add_subscription+0x40>
 8010f72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f74:	6842      	ldr	r2, [r0, #4]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f7c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010f7e:	6853      	ldr	r3, [r2, #4]
 8010f80:	3301      	adds	r3, #1
 8010f82:	2000      	movs	r0, #0
 8010f84:	6053      	str	r3, [r2, #4]
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	2001      	movs	r0, #1
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}
 8010f8c:	f240 3086 	movw	r0, #902	@ 0x386
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	200b      	movs	r0, #11
 8010f94:	4770      	bx	lr
 8010f96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}
 8010f9c:	200b      	movs	r0, #11
 8010f9e:	bd70      	pop	{r4, r5, r6, pc}

08010fa0 <rcl_wait_set_clear>:
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d073      	beq.n	801108c <rcl_wait_set_clear+0xec>
 8010fa4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010fa6:	b510      	push	{r4, lr}
 8010fa8:	4604      	mov	r4, r0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d070      	beq.n	8011090 <rcl_wait_set_clear+0xf0>
 8010fae:	6800      	ldr	r0, [r0, #0]
 8010fb0:	b138      	cbz	r0, 8010fc2 <rcl_wait_set_clear+0x22>
 8010fb2:	6862      	ldr	r2, [r4, #4]
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	0092      	lsls	r2, r2, #2
 8010fb8:	f004 fbac 	bl	8015714 <memset>
 8010fbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	68a0      	ldr	r0, [r4, #8]
 8010fc4:	b138      	cbz	r0, 8010fd6 <rcl_wait_set_clear+0x36>
 8010fc6:	68e2      	ldr	r2, [r4, #12]
 8010fc8:	2100      	movs	r1, #0
 8010fca:	0092      	lsls	r2, r2, #2
 8010fcc:	f004 fba2 	bl	8015714 <memset>
 8010fd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	60da      	str	r2, [r3, #12]
 8010fd6:	69a0      	ldr	r0, [r4, #24]
 8010fd8:	b138      	cbz	r0, 8010fea <rcl_wait_set_clear+0x4a>
 8010fda:	69e2      	ldr	r2, [r4, #28]
 8010fdc:	2100      	movs	r1, #0
 8010fde:	0092      	lsls	r2, r2, #2
 8010fe0:	f004 fb98 	bl	8015714 <memset>
 8010fe4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	619a      	str	r2, [r3, #24]
 8010fea:	6a20      	ldr	r0, [r4, #32]
 8010fec:	b138      	cbz	r0, 8010ffe <rcl_wait_set_clear+0x5e>
 8010fee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	0092      	lsls	r2, r2, #2
 8010ff4:	f004 fb8e 	bl	8015714 <memset>
 8010ff8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010ffe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011000:	b138      	cbz	r0, 8011012 <rcl_wait_set_clear+0x72>
 8011002:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011004:	2100      	movs	r1, #0
 8011006:	0092      	lsls	r2, r2, #2
 8011008:	f004 fb84 	bl	8015714 <memset>
 801100c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801100e:	2200      	movs	r2, #0
 8011010:	631a      	str	r2, [r3, #48]	@ 0x30
 8011012:	6920      	ldr	r0, [r4, #16]
 8011014:	b138      	cbz	r0, 8011026 <rcl_wait_set_clear+0x86>
 8011016:	6962      	ldr	r2, [r4, #20]
 8011018:	2100      	movs	r1, #0
 801101a:	0092      	lsls	r2, r2, #2
 801101c:	f004 fb7a 	bl	8015714 <memset>
 8011020:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011022:	2200      	movs	r2, #0
 8011024:	641a      	str	r2, [r3, #64]	@ 0x40
 8011026:	6898      	ldr	r0, [r3, #8]
 8011028:	b138      	cbz	r0, 801103a <rcl_wait_set_clear+0x9a>
 801102a:	685a      	ldr	r2, [r3, #4]
 801102c:	2100      	movs	r1, #0
 801102e:	0092      	lsls	r2, r2, #2
 8011030:	f004 fb70 	bl	8015714 <memset>
 8011034:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011036:	2200      	movs	r2, #0
 8011038:	605a      	str	r2, [r3, #4]
 801103a:	6958      	ldr	r0, [r3, #20]
 801103c:	b138      	cbz	r0, 801104e <rcl_wait_set_clear+0xae>
 801103e:	691a      	ldr	r2, [r3, #16]
 8011040:	2100      	movs	r1, #0
 8011042:	0092      	lsls	r2, r2, #2
 8011044:	f004 fb66 	bl	8015714 <memset>
 8011048:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801104a:	2200      	movs	r2, #0
 801104c:	611a      	str	r2, [r3, #16]
 801104e:	6a18      	ldr	r0, [r3, #32]
 8011050:	b138      	cbz	r0, 8011062 <rcl_wait_set_clear+0xc2>
 8011052:	69da      	ldr	r2, [r3, #28]
 8011054:	2100      	movs	r1, #0
 8011056:	0092      	lsls	r2, r2, #2
 8011058:	f004 fb5c 	bl	8015714 <memset>
 801105c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801105e:	2200      	movs	r2, #0
 8011060:	61da      	str	r2, [r3, #28]
 8011062:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011064:	b138      	cbz	r0, 8011076 <rcl_wait_set_clear+0xd6>
 8011066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011068:	2100      	movs	r1, #0
 801106a:	0092      	lsls	r2, r2, #2
 801106c:	f004 fb52 	bl	8015714 <memset>
 8011070:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011072:	2200      	movs	r2, #0
 8011074:	629a      	str	r2, [r3, #40]	@ 0x28
 8011076:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011078:	b138      	cbz	r0, 801108a <rcl_wait_set_clear+0xea>
 801107a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801107c:	2100      	movs	r1, #0
 801107e:	0092      	lsls	r2, r2, #2
 8011080:	f004 fb48 	bl	8015714 <memset>
 8011084:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011086:	2000      	movs	r0, #0
 8011088:	6358      	str	r0, [r3, #52]	@ 0x34
 801108a:	bd10      	pop	{r4, pc}
 801108c:	200b      	movs	r0, #11
 801108e:	4770      	bx	lr
 8011090:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011094:	bd10      	pop	{r4, pc}
 8011096:	bf00      	nop

08011098 <rcl_wait_set_resize>:
 8011098:	2800      	cmp	r0, #0
 801109a:	f000 8185 	beq.w	80113a8 <rcl_wait_set_resize+0x310>
 801109e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80110a4:	b083      	sub	sp, #12
 80110a6:	4605      	mov	r5, r0
 80110a8:	2c00      	cmp	r4, #0
 80110aa:	f000 817f 	beq.w	80113ac <rcl_wait_set_resize+0x314>
 80110ae:	f04f 0900 	mov.w	r9, #0
 80110b2:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80110b6:	461f      	mov	r7, r3
 80110b8:	4688      	mov	r8, r1
 80110ba:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80110be:	4616      	mov	r6, r2
 80110c0:	f8c0 9004 	str.w	r9, [r0, #4]
 80110c4:	f8c4 9000 	str.w	r9, [r4]
 80110c8:	2900      	cmp	r1, #0
 80110ca:	f000 80bd 	beq.w	8011248 <rcl_wait_set_resize+0x1b0>
 80110ce:	008c      	lsls	r4, r1, #2
 80110d0:	6800      	ldr	r0, [r0, #0]
 80110d2:	9301      	str	r3, [sp, #4]
 80110d4:	4652      	mov	r2, sl
 80110d6:	4621      	mov	r1, r4
 80110d8:	4798      	blx	r3
 80110da:	9b01      	ldr	r3, [sp, #4]
 80110dc:	6028      	str	r0, [r5, #0]
 80110de:	2800      	cmp	r0, #0
 80110e0:	f000 80cb 	beq.w	801127a <rcl_wait_set_resize+0x1e2>
 80110e4:	4622      	mov	r2, r4
 80110e6:	4649      	mov	r1, r9
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	f004 fb13 	bl	8015714 <memset>
 80110ee:	f8c5 8004 	str.w	r8, [r5, #4]
 80110f2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80110fc:	f8c8 9004 	str.w	r9, [r8, #4]
 8011100:	4652      	mov	r2, sl
 8011102:	4621      	mov	r1, r4
 8011104:	4798      	blx	r3
 8011106:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011108:	f8c8 0008 	str.w	r0, [r8, #8]
 801110c:	689b      	ldr	r3, [r3, #8]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f000 80ac 	beq.w	801126c <rcl_wait_set_resize+0x1d4>
 8011114:	4622      	mov	r2, r4
 8011116:	4649      	mov	r1, r9
 8011118:	4618      	mov	r0, r3
 801111a:	f004 fafb 	bl	8015714 <memset>
 801111e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011120:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011124:	f04f 0800 	mov.w	r8, #0
 8011128:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801112c:	f8c5 800c 	str.w	r8, [r5, #12]
 8011130:	f8c4 800c 	str.w	r8, [r4, #12]
 8011134:	2e00      	cmp	r6, #0
 8011136:	f040 80a4 	bne.w	8011282 <rcl_wait_set_resize+0x1ea>
 801113a:	68a8      	ldr	r0, [r5, #8]
 801113c:	b128      	cbz	r0, 801114a <rcl_wait_set_resize+0xb2>
 801113e:	4649      	mov	r1, r9
 8011140:	4790      	blx	r2
 8011142:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011144:	60ae      	str	r6, [r5, #8]
 8011146:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801114a:	f04f 0800 	mov.w	r8, #0
 801114e:	19f6      	adds	r6, r6, r7
 8011150:	f8c4 8010 	str.w	r8, [r4, #16]
 8011154:	f040 80ac 	bne.w	80112b0 <rcl_wait_set_resize+0x218>
 8011158:	6960      	ldr	r0, [r4, #20]
 801115a:	b130      	cbz	r0, 801116a <rcl_wait_set_resize+0xd2>
 801115c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801115e:	4649      	mov	r1, r9
 8011160:	4798      	blx	r3
 8011162:	6166      	str	r6, [r4, #20]
 8011164:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011166:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801116a:	2600      	movs	r6, #0
 801116c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011170:	616e      	str	r6, [r5, #20]
 8011172:	6426      	str	r6, [r4, #64]	@ 0x40
 8011174:	2f00      	cmp	r7, #0
 8011176:	f040 80ad 	bne.w	80112d4 <rcl_wait_set_resize+0x23c>
 801117a:	6928      	ldr	r0, [r5, #16]
 801117c:	b138      	cbz	r0, 801118e <rcl_wait_set_resize+0xf6>
 801117e:	4649      	mov	r1, r9
 8011180:	47d0      	blx	sl
 8011182:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011184:	612f      	str	r7, [r5, #16]
 8011186:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801118a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801118e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011190:	2600      	movs	r6, #0
 8011192:	61ee      	str	r6, [r5, #28]
 8011194:	61a6      	str	r6, [r4, #24]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f040 80af 	bne.w	80112fa <rcl_wait_set_resize+0x262>
 801119c:	69a8      	ldr	r0, [r5, #24]
 801119e:	b120      	cbz	r0, 80111aa <rcl_wait_set_resize+0x112>
 80111a0:	4649      	mov	r1, r9
 80111a2:	47d0      	blx	sl
 80111a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111a8:	61ab      	str	r3, [r5, #24]
 80111aa:	6a20      	ldr	r0, [r4, #32]
 80111ac:	b128      	cbz	r0, 80111ba <rcl_wait_set_resize+0x122>
 80111ae:	4649      	mov	r1, r9
 80111b0:	47d0      	blx	sl
 80111b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111b4:	2300      	movs	r3, #0
 80111b6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80111ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111bc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80111be:	2600      	movs	r6, #0
 80111c0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80111c4:	626e      	str	r6, [r5, #36]	@ 0x24
 80111c6:	6266      	str	r6, [r4, #36]	@ 0x24
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 80b6 	beq.w	801133a <rcl_wait_set_resize+0x2a2>
 80111ce:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80111d2:	6a28      	ldr	r0, [r5, #32]
 80111d4:	463a      	mov	r2, r7
 80111d6:	4651      	mov	r1, sl
 80111d8:	47c8      	blx	r9
 80111da:	6228      	str	r0, [r5, #32]
 80111dc:	2800      	cmp	r0, #0
 80111de:	d04c      	beq.n	801127a <rcl_wait_set_resize+0x1e2>
 80111e0:	4652      	mov	r2, sl
 80111e2:	4631      	mov	r1, r6
 80111e4:	f004 fa96 	bl	8015714 <memset>
 80111e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111ec:	626b      	str	r3, [r5, #36]	@ 0x24
 80111ee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80111f0:	62a6      	str	r6, [r4, #40]	@ 0x28
 80111f2:	463a      	mov	r2, r7
 80111f4:	4651      	mov	r1, sl
 80111f6:	47c8      	blx	r9
 80111f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80111fa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80111fc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80111fe:	2c00      	cmp	r4, #0
 8011200:	f000 80f0 	beq.w	80113e4 <rcl_wait_set_resize+0x34c>
 8011204:	4620      	mov	r0, r4
 8011206:	4652      	mov	r2, sl
 8011208:	4631      	mov	r1, r6
 801120a:	f004 fa83 	bl	8015714 <memset>
 801120e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011212:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011214:	2600      	movs	r6, #0
 8011216:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801121a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801121c:	6326      	str	r6, [r4, #48]	@ 0x30
 801121e:	2b00      	cmp	r3, #0
 8011220:	f040 809d 	bne.w	801135e <rcl_wait_set_resize+0x2c6>
 8011224:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011226:	b120      	cbz	r0, 8011232 <rcl_wait_set_resize+0x19a>
 8011228:	4639      	mov	r1, r7
 801122a:	47c0      	blx	r8
 801122c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801122e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011230:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011232:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011234:	b310      	cbz	r0, 801127c <rcl_wait_set_resize+0x1e4>
 8011236:	4639      	mov	r1, r7
 8011238:	47c0      	blx	r8
 801123a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801123c:	2000      	movs	r0, #0
 801123e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011242:	b003      	add	sp, #12
 8011244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011248:	6800      	ldr	r0, [r0, #0]
 801124a:	b120      	cbz	r0, 8011256 <rcl_wait_set_resize+0x1be>
 801124c:	4651      	mov	r1, sl
 801124e:	47d8      	blx	fp
 8011250:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011252:	f8c5 8000 	str.w	r8, [r5]
 8011256:	68a0      	ldr	r0, [r4, #8]
 8011258:	2800      	cmp	r0, #0
 801125a:	f43f af61 	beq.w	8011120 <rcl_wait_set_resize+0x88>
 801125e:	4651      	mov	r1, sl
 8011260:	47d8      	blx	fp
 8011262:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011264:	2300      	movs	r3, #0
 8011266:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801126a:	e759      	b.n	8011120 <rcl_wait_set_resize+0x88>
 801126c:	6828      	ldr	r0, [r5, #0]
 801126e:	9301      	str	r3, [sp, #4]
 8011270:	4651      	mov	r1, sl
 8011272:	47d8      	blx	fp
 8011274:	9b01      	ldr	r3, [sp, #4]
 8011276:	e9c5 3300 	strd	r3, r3, [r5]
 801127a:	200a      	movs	r0, #10
 801127c:	b003      	add	sp, #12
 801127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011282:	00b4      	lsls	r4, r6, #2
 8011284:	68a8      	ldr	r0, [r5, #8]
 8011286:	464a      	mov	r2, r9
 8011288:	4621      	mov	r1, r4
 801128a:	4798      	blx	r3
 801128c:	60a8      	str	r0, [r5, #8]
 801128e:	2800      	cmp	r0, #0
 8011290:	d0f3      	beq.n	801127a <rcl_wait_set_resize+0x1e2>
 8011292:	4622      	mov	r2, r4
 8011294:	4641      	mov	r1, r8
 8011296:	f004 fa3d 	bl	8015714 <memset>
 801129a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801129c:	60ee      	str	r6, [r5, #12]
 801129e:	f04f 0800 	mov.w	r8, #0
 80112a2:	19f6      	adds	r6, r6, r7
 80112a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80112ac:	f43f af54 	beq.w	8011158 <rcl_wait_set_resize+0xc0>
 80112b0:	00b6      	lsls	r6, r6, #2
 80112b2:	464a      	mov	r2, r9
 80112b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80112b6:	6960      	ldr	r0, [r4, #20]
 80112b8:	4631      	mov	r1, r6
 80112ba:	4798      	blx	r3
 80112bc:	4681      	mov	r9, r0
 80112be:	6160      	str	r0, [r4, #20]
 80112c0:	2800      	cmp	r0, #0
 80112c2:	d076      	beq.n	80113b2 <rcl_wait_set_resize+0x31a>
 80112c4:	4632      	mov	r2, r6
 80112c6:	4641      	mov	r1, r8
 80112c8:	f004 fa24 	bl	8015714 <memset>
 80112cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112d2:	e74a      	b.n	801116a <rcl_wait_set_resize+0xd2>
 80112d4:	00bc      	lsls	r4, r7, #2
 80112d6:	6928      	ldr	r0, [r5, #16]
 80112d8:	464a      	mov	r2, r9
 80112da:	4621      	mov	r1, r4
 80112dc:	47c0      	blx	r8
 80112de:	6128      	str	r0, [r5, #16]
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d0ca      	beq.n	801127a <rcl_wait_set_resize+0x1e2>
 80112e4:	4622      	mov	r2, r4
 80112e6:	4631      	mov	r1, r6
 80112e8:	f004 fa14 	bl	8015714 <memset>
 80112ec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112ee:	616f      	str	r7, [r5, #20]
 80112f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80112f4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112f8:	e749      	b.n	801118e <rcl_wait_set_resize+0xf6>
 80112fa:	009c      	lsls	r4, r3, #2
 80112fc:	69a8      	ldr	r0, [r5, #24]
 80112fe:	464a      	mov	r2, r9
 8011300:	4621      	mov	r1, r4
 8011302:	47c0      	blx	r8
 8011304:	61a8      	str	r0, [r5, #24]
 8011306:	2800      	cmp	r0, #0
 8011308:	d0b7      	beq.n	801127a <rcl_wait_set_resize+0x1e2>
 801130a:	4622      	mov	r2, r4
 801130c:	4631      	mov	r1, r6
 801130e:	f004 fa01 	bl	8015714 <memset>
 8011312:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011316:	61eb      	str	r3, [r5, #28]
 8011318:	6a38      	ldr	r0, [r7, #32]
 801131a:	61fe      	str	r6, [r7, #28]
 801131c:	464a      	mov	r2, r9
 801131e:	4621      	mov	r1, r4
 8011320:	47c0      	blx	r8
 8011322:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011324:	6238      	str	r0, [r7, #32]
 8011326:	6a1f      	ldr	r7, [r3, #32]
 8011328:	2f00      	cmp	r7, #0
 801132a:	d054      	beq.n	80113d6 <rcl_wait_set_resize+0x33e>
 801132c:	4622      	mov	r2, r4
 801132e:	4631      	mov	r1, r6
 8011330:	4638      	mov	r0, r7
 8011332:	f004 f9ef 	bl	8015714 <memset>
 8011336:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011338:	e73f      	b.n	80111ba <rcl_wait_set_resize+0x122>
 801133a:	6a28      	ldr	r0, [r5, #32]
 801133c:	b120      	cbz	r0, 8011348 <rcl_wait_set_resize+0x2b0>
 801133e:	4639      	mov	r1, r7
 8011340:	47c0      	blx	r8
 8011342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011344:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011346:	622b      	str	r3, [r5, #32]
 8011348:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801134a:	2800      	cmp	r0, #0
 801134c:	f43f af60 	beq.w	8011210 <rcl_wait_set_resize+0x178>
 8011350:	4639      	mov	r1, r7
 8011352:	47c0      	blx	r8
 8011354:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011356:	2300      	movs	r3, #0
 8011358:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801135c:	e758      	b.n	8011210 <rcl_wait_set_resize+0x178>
 801135e:	009c      	lsls	r4, r3, #2
 8011360:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011362:	463a      	mov	r2, r7
 8011364:	4621      	mov	r1, r4
 8011366:	47c8      	blx	r9
 8011368:	62a8      	str	r0, [r5, #40]	@ 0x28
 801136a:	2800      	cmp	r0, #0
 801136c:	d085      	beq.n	801127a <rcl_wait_set_resize+0x1e2>
 801136e:	4622      	mov	r2, r4
 8011370:	4631      	mov	r1, r6
 8011372:	f004 f9cf 	bl	8015714 <memset>
 8011376:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801137a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801137c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801137e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011382:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011386:	463a      	mov	r2, r7
 8011388:	4621      	mov	r1, r4
 801138a:	47c8      	blx	r9
 801138c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801138e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011394:	b36b      	cbz	r3, 80113f2 <rcl_wait_set_resize+0x35a>
 8011396:	4622      	mov	r2, r4
 8011398:	4631      	mov	r1, r6
 801139a:	4618      	mov	r0, r3
 801139c:	f004 f9ba 	bl	8015714 <memset>
 80113a0:	4630      	mov	r0, r6
 80113a2:	b003      	add	sp, #12
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	200b      	movs	r0, #11
 80113aa:	4770      	bx	lr
 80113ac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80113b0:	e764      	b.n	801127c <rcl_wait_set_resize+0x1e4>
 80113b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113b4:	68a8      	ldr	r0, [r5, #8]
 80113b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80113b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113ba:	4798      	blx	r3
 80113bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113be:	6928      	ldr	r0, [r5, #16]
 80113c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80113c4:	f8c5 900c 	str.w	r9, [r5, #12]
 80113c8:	f8c5 9008 	str.w	r9, [r5, #8]
 80113cc:	4790      	blx	r2
 80113ce:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80113d2:	200a      	movs	r0, #10
 80113d4:	e752      	b.n	801127c <rcl_wait_set_resize+0x1e4>
 80113d6:	69a8      	ldr	r0, [r5, #24]
 80113d8:	4649      	mov	r1, r9
 80113da:	47d0      	blx	sl
 80113dc:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80113e0:	200a      	movs	r0, #10
 80113e2:	e74b      	b.n	801127c <rcl_wait_set_resize+0x1e4>
 80113e4:	6a28      	ldr	r0, [r5, #32]
 80113e6:	4639      	mov	r1, r7
 80113e8:	47c0      	blx	r8
 80113ea:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80113ee:	200a      	movs	r0, #10
 80113f0:	e744      	b.n	801127c <rcl_wait_set_resize+0x1e4>
 80113f2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	4639      	mov	r1, r7
 80113f8:	47c0      	blx	r8
 80113fa:	9b01      	ldr	r3, [sp, #4]
 80113fc:	200a      	movs	r0, #10
 80113fe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011402:	e73b      	b.n	801127c <rcl_wait_set_resize+0x1e4>

08011404 <rcl_wait_set_init>:
 8011404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011408:	b084      	sub	sp, #16
 801140a:	4604      	mov	r4, r0
 801140c:	a810      	add	r0, sp, #64	@ 0x40
 801140e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011412:	460f      	mov	r7, r1
 8011414:	4690      	mov	r8, r2
 8011416:	4699      	mov	r9, r3
 8011418:	f7f8 fa44 	bl	80098a4 <rcutils_allocator_is_valid>
 801141c:	2800      	cmp	r0, #0
 801141e:	d06b      	beq.n	80114f8 <rcl_wait_set_init+0xf4>
 8011420:	2c00      	cmp	r4, #0
 8011422:	d069      	beq.n	80114f8 <rcl_wait_set_init+0xf4>
 8011424:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011426:	b125      	cbz	r5, 8011432 <rcl_wait_set_init+0x2e>
 8011428:	2564      	movs	r5, #100	@ 0x64
 801142a:	4628      	mov	r0, r5
 801142c:	b004      	add	sp, #16
 801142e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011432:	f1ba 0f00 	cmp.w	sl, #0
 8011436:	d05f      	beq.n	80114f8 <rcl_wait_set_init+0xf4>
 8011438:	4650      	mov	r0, sl
 801143a:	f7fe fbad 	bl	800fb98 <rcl_context_is_valid>
 801143e:	2800      	cmp	r0, #0
 8011440:	d067      	beq.n	8011512 <rcl_wait_set_init+0x10e>
 8011442:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011444:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011446:	205c      	movs	r0, #92	@ 0x5c
 8011448:	4798      	blx	r3
 801144a:	6320      	str	r0, [r4, #48]	@ 0x30
 801144c:	2800      	cmp	r0, #0
 801144e:	d062      	beq.n	8011516 <rcl_wait_set_init+0x112>
 8011450:	4629      	mov	r1, r5
 8011452:	225c      	movs	r2, #92	@ 0x5c
 8011454:	f004 f95e 	bl	8015714 <memset>
 8011458:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801145c:	eb03 0e02 	add.w	lr, r3, r2
 8011460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011462:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011464:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011468:	449e      	add	lr, r3
 801146a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801146e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011472:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011476:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801147a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801147e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011482:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8011486:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801148a:	f8da a000 	ldr.w	sl, [sl]
 801148e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011490:	44c6      	add	lr, r8
 8011492:	f8dc 3000 	ldr.w	r3, [ip]
 8011496:	602b      	str	r3, [r5, #0]
 8011498:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801149c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80114a0:	f002 fa0c 	bl	80138bc <rmw_create_wait_set>
 80114a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114a6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80114a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80114aa:	b350      	cbz	r0, 8011502 <rcl_wait_set_init+0xfe>
 80114ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114ae:	9302      	str	r3, [sp, #8]
 80114b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114b2:	9301      	str	r3, [sp, #4]
 80114b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	4642      	mov	r2, r8
 80114ba:	464b      	mov	r3, r9
 80114bc:	4639      	mov	r1, r7
 80114be:	4620      	mov	r0, r4
 80114c0:	f7ff fdea 	bl	8011098 <rcl_wait_set_resize>
 80114c4:	4605      	mov	r5, r0
 80114c6:	2800      	cmp	r0, #0
 80114c8:	d0af      	beq.n	801142a <rcl_wait_set_init+0x26>
 80114ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114cc:	bb2b      	cbnz	r3, 801151a <rcl_wait_set_init+0x116>
 80114ce:	2600      	movs	r6, #0
 80114d0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80114d4:	9600      	str	r6, [sp, #0]
 80114d6:	4633      	mov	r3, r6
 80114d8:	4632      	mov	r2, r6
 80114da:	4631      	mov	r1, r6
 80114dc:	4620      	mov	r0, r4
 80114de:	f7ff fddb 	bl	8011098 <rcl_wait_set_resize>
 80114e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80114e4:	2800      	cmp	r0, #0
 80114e6:	d0a0      	beq.n	801142a <rcl_wait_set_init+0x26>
 80114e8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80114ea:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80114ec:	4798      	blx	r3
 80114ee:	4628      	mov	r0, r5
 80114f0:	6326      	str	r6, [r4, #48]	@ 0x30
 80114f2:	b004      	add	sp, #16
 80114f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f8:	250b      	movs	r5, #11
 80114fa:	4628      	mov	r0, r5
 80114fc:	b004      	add	sp, #16
 80114fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011502:	2501      	movs	r5, #1
 8011504:	f002 f9e4 	bl	80138d0 <rmw_destroy_wait_set>
 8011508:	2800      	cmp	r0, #0
 801150a:	bf18      	it	ne
 801150c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011510:	e7dd      	b.n	80114ce <rcl_wait_set_init+0xca>
 8011512:	2565      	movs	r5, #101	@ 0x65
 8011514:	e789      	b.n	801142a <rcl_wait_set_init+0x26>
 8011516:	250a      	movs	r5, #10
 8011518:	e787      	b.n	801142a <rcl_wait_set_init+0x26>
 801151a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801151c:	e7f2      	b.n	8011504 <rcl_wait_set_init+0x100>
 801151e:	bf00      	nop

08011520 <rcl_wait_set_add_guard_condition>:
 8011520:	b318      	cbz	r0, 801156a <rcl_wait_set_add_guard_condition+0x4a>
 8011522:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011524:	b570      	push	{r4, r5, r6, lr}
 8011526:	4604      	mov	r4, r0
 8011528:	b30b      	cbz	r3, 801156e <rcl_wait_set_add_guard_condition+0x4e>
 801152a:	b319      	cbz	r1, 8011574 <rcl_wait_set_add_guard_condition+0x54>
 801152c:	68dd      	ldr	r5, [r3, #12]
 801152e:	68c0      	ldr	r0, [r0, #12]
 8011530:	4285      	cmp	r5, r0
 8011532:	d217      	bcs.n	8011564 <rcl_wait_set_add_guard_condition+0x44>
 8011534:	68a0      	ldr	r0, [r4, #8]
 8011536:	1c6e      	adds	r6, r5, #1
 8011538:	60de      	str	r6, [r3, #12]
 801153a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801153e:	b102      	cbz	r2, 8011542 <rcl_wait_set_add_guard_condition+0x22>
 8011540:	6015      	str	r5, [r2, #0]
 8011542:	4608      	mov	r0, r1
 8011544:	f003 fbbe 	bl	8014cc4 <rcl_guard_condition_get_rmw_handle>
 8011548:	b150      	cbz	r0, 8011560 <rcl_wait_set_add_guard_condition+0x40>
 801154a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801154c:	6842      	ldr	r2, [r0, #4]
 801154e:	695b      	ldr	r3, [r3, #20]
 8011550:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011554:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011556:	6913      	ldr	r3, [r2, #16]
 8011558:	3301      	adds	r3, #1
 801155a:	2000      	movs	r0, #0
 801155c:	6113      	str	r3, [r2, #16]
 801155e:	bd70      	pop	{r4, r5, r6, pc}
 8011560:	2001      	movs	r0, #1
 8011562:	bd70      	pop	{r4, r5, r6, pc}
 8011564:	f240 3086 	movw	r0, #902	@ 0x386
 8011568:	bd70      	pop	{r4, r5, r6, pc}
 801156a:	200b      	movs	r0, #11
 801156c:	4770      	bx	lr
 801156e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011572:	bd70      	pop	{r4, r5, r6, pc}
 8011574:	200b      	movs	r0, #11
 8011576:	bd70      	pop	{r4, r5, r6, pc}

08011578 <rcl_wait_set_add_timer>:
 8011578:	b328      	cbz	r0, 80115c6 <rcl_wait_set_add_timer+0x4e>
 801157a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801157c:	b570      	push	{r4, r5, r6, lr}
 801157e:	4604      	mov	r4, r0
 8011580:	b31b      	cbz	r3, 80115ca <rcl_wait_set_add_timer+0x52>
 8011582:	b329      	cbz	r1, 80115d0 <rcl_wait_set_add_timer+0x58>
 8011584:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011586:	6965      	ldr	r5, [r4, #20]
 8011588:	42a8      	cmp	r0, r5
 801158a:	d219      	bcs.n	80115c0 <rcl_wait_set_add_timer+0x48>
 801158c:	6925      	ldr	r5, [r4, #16]
 801158e:	1c46      	adds	r6, r0, #1
 8011590:	641e      	str	r6, [r3, #64]	@ 0x40
 8011592:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011596:	b102      	cbz	r2, 801159a <rcl_wait_set_add_timer+0x22>
 8011598:	6010      	str	r0, [r2, #0]
 801159a:	4608      	mov	r0, r1
 801159c:	f7ff fc10 	bl	8010dc0 <rcl_timer_get_guard_condition>
 80115a0:	b168      	cbz	r0, 80115be <rcl_wait_set_add_timer+0x46>
 80115a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80115a4:	68e3      	ldr	r3, [r4, #12]
 80115a6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80115a8:	3b01      	subs	r3, #1
 80115aa:	441d      	add	r5, r3
 80115ac:	f003 fb8a 	bl	8014cc4 <rcl_guard_condition_get_rmw_handle>
 80115b0:	b180      	cbz	r0, 80115d4 <rcl_wait_set_add_timer+0x5c>
 80115b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115b4:	6842      	ldr	r2, [r0, #4]
 80115b6:	695b      	ldr	r3, [r3, #20]
 80115b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115bc:	2000      	movs	r0, #0
 80115be:	bd70      	pop	{r4, r5, r6, pc}
 80115c0:	f240 3086 	movw	r0, #902	@ 0x386
 80115c4:	bd70      	pop	{r4, r5, r6, pc}
 80115c6:	200b      	movs	r0, #11
 80115c8:	4770      	bx	lr
 80115ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80115ce:	bd70      	pop	{r4, r5, r6, pc}
 80115d0:	200b      	movs	r0, #11
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	2001      	movs	r0, #1
 80115d6:	bd70      	pop	{r4, r5, r6, pc}

080115d8 <rcl_wait_set_add_client>:
 80115d8:	b318      	cbz	r0, 8011622 <rcl_wait_set_add_client+0x4a>
 80115da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80115dc:	b570      	push	{r4, r5, r6, lr}
 80115de:	4604      	mov	r4, r0
 80115e0:	b30b      	cbz	r3, 8011626 <rcl_wait_set_add_client+0x4e>
 80115e2:	b319      	cbz	r1, 801162c <rcl_wait_set_add_client+0x54>
 80115e4:	699d      	ldr	r5, [r3, #24]
 80115e6:	69c0      	ldr	r0, [r0, #28]
 80115e8:	4285      	cmp	r5, r0
 80115ea:	d217      	bcs.n	801161c <rcl_wait_set_add_client+0x44>
 80115ec:	69a0      	ldr	r0, [r4, #24]
 80115ee:	1c6e      	adds	r6, r5, #1
 80115f0:	619e      	str	r6, [r3, #24]
 80115f2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80115f6:	b102      	cbz	r2, 80115fa <rcl_wait_set_add_client+0x22>
 80115f8:	6015      	str	r5, [r2, #0]
 80115fa:	4608      	mov	r0, r1
 80115fc:	f7fe fa1e 	bl	800fa3c <rcl_client_get_rmw_handle>
 8011600:	b150      	cbz	r0, 8011618 <rcl_wait_set_add_client+0x40>
 8011602:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011604:	6842      	ldr	r2, [r0, #4]
 8011606:	6a1b      	ldr	r3, [r3, #32]
 8011608:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801160c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801160e:	69d3      	ldr	r3, [r2, #28]
 8011610:	3301      	adds	r3, #1
 8011612:	2000      	movs	r0, #0
 8011614:	61d3      	str	r3, [r2, #28]
 8011616:	bd70      	pop	{r4, r5, r6, pc}
 8011618:	2001      	movs	r0, #1
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	f240 3086 	movw	r0, #902	@ 0x386
 8011620:	bd70      	pop	{r4, r5, r6, pc}
 8011622:	200b      	movs	r0, #11
 8011624:	4770      	bx	lr
 8011626:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801162a:	bd70      	pop	{r4, r5, r6, pc}
 801162c:	200b      	movs	r0, #11
 801162e:	bd70      	pop	{r4, r5, r6, pc}

08011630 <rcl_wait_set_add_service>:
 8011630:	b318      	cbz	r0, 801167a <rcl_wait_set_add_service+0x4a>
 8011632:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011634:	b570      	push	{r4, r5, r6, lr}
 8011636:	4604      	mov	r4, r0
 8011638:	b30b      	cbz	r3, 801167e <rcl_wait_set_add_service+0x4e>
 801163a:	b319      	cbz	r1, 8011684 <rcl_wait_set_add_service+0x54>
 801163c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801163e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011640:	4285      	cmp	r5, r0
 8011642:	d217      	bcs.n	8011674 <rcl_wait_set_add_service+0x44>
 8011644:	6a20      	ldr	r0, [r4, #32]
 8011646:	1c6e      	adds	r6, r5, #1
 8011648:	625e      	str	r6, [r3, #36]	@ 0x24
 801164a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801164e:	b102      	cbz	r2, 8011652 <rcl_wait_set_add_service+0x22>
 8011650:	6015      	str	r5, [r2, #0]
 8011652:	4608      	mov	r0, r1
 8011654:	f7fe fe62 	bl	801031c <rcl_service_get_rmw_handle>
 8011658:	b150      	cbz	r0, 8011670 <rcl_wait_set_add_service+0x40>
 801165a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801165c:	6842      	ldr	r2, [r0, #4]
 801165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011660:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011664:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011666:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011668:	3301      	adds	r3, #1
 801166a:	2000      	movs	r0, #0
 801166c:	6293      	str	r3, [r2, #40]	@ 0x28
 801166e:	bd70      	pop	{r4, r5, r6, pc}
 8011670:	2001      	movs	r0, #1
 8011672:	bd70      	pop	{r4, r5, r6, pc}
 8011674:	f240 3086 	movw	r0, #902	@ 0x386
 8011678:	bd70      	pop	{r4, r5, r6, pc}
 801167a:	200b      	movs	r0, #11
 801167c:	4770      	bx	lr
 801167e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	200b      	movs	r0, #11
 8011686:	bd70      	pop	{r4, r5, r6, pc}

08011688 <rcl_wait>:
 8011688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801168c:	ed2d 8b02 	vpush	{d8}
 8011690:	b08d      	sub	sp, #52	@ 0x34
 8011692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011696:	2800      	cmp	r0, #0
 8011698:	f000 8143 	beq.w	8011922 <rcl_wait+0x29a>
 801169c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801169e:	4605      	mov	r5, r0
 80116a0:	2e00      	cmp	r6, #0
 80116a2:	f000 8112 	beq.w	80118ca <rcl_wait+0x242>
 80116a6:	6843      	ldr	r3, [r0, #4]
 80116a8:	b983      	cbnz	r3, 80116cc <rcl_wait+0x44>
 80116aa:	68eb      	ldr	r3, [r5, #12]
 80116ac:	b973      	cbnz	r3, 80116cc <rcl_wait+0x44>
 80116ae:	696b      	ldr	r3, [r5, #20]
 80116b0:	b963      	cbnz	r3, 80116cc <rcl_wait+0x44>
 80116b2:	69eb      	ldr	r3, [r5, #28]
 80116b4:	b953      	cbnz	r3, 80116cc <rcl_wait+0x44>
 80116b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80116b8:	b943      	cbnz	r3, 80116cc <rcl_wait+0x44>
 80116ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80116bc:	b933      	cbnz	r3, 80116cc <rcl_wait+0x44>
 80116be:	f240 3085 	movw	r0, #901	@ 0x385
 80116c2:	b00d      	add	sp, #52	@ 0x34
 80116c4:	ecbd 8b02 	vpop	{d8}
 80116c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116cc:	9b04      	ldr	r3, [sp, #16]
 80116ce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	9b05      	ldr	r3, [sp, #20]
 80116d4:	f173 0300 	sbcs.w	r3, r3, #0
 80116d8:	f2c0 80f0 	blt.w	80118bc <rcl_wait+0x234>
 80116dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80116e0:	4643      	mov	r3, r8
 80116e2:	2a00      	cmp	r2, #0
 80116e4:	f000 8133 	beq.w	801194e <rcl_wait+0x2c6>
 80116e8:	2400      	movs	r4, #0
 80116ea:	4613      	mov	r3, r2
 80116ec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011960 <rcl_wait+0x2d8>
 80116f0:	46a2      	mov	sl, r4
 80116f2:	46a3      	mov	fp, r4
 80116f4:	f240 3921 	movw	r9, #801	@ 0x321
 80116f8:	4632      	mov	r2, r6
 80116fa:	e014      	b.n	8011726 <rcl_wait+0x9e>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d1e0      	bne.n	80116c2 <rcl_wait+0x3a>
 8011700:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011704:	4542      	cmp	r2, r8
 8011706:	eb73 0107 	sbcs.w	r1, r3, r7
 801170a:	da03      	bge.n	8011714 <rcl_wait+0x8c>
 801170c:	4690      	mov	r8, r2
 801170e:	461f      	mov	r7, r3
 8011710:	f04f 0b01 	mov.w	fp, #1
 8011714:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011716:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011718:	3401      	adds	r4, #1
 801171a:	f14a 0a00 	adc.w	sl, sl, #0
 801171e:	429c      	cmp	r4, r3
 8011720:	f17a 0100 	sbcs.w	r1, sl, #0
 8011724:	d228      	bcs.n	8011778 <rcl_wait+0xf0>
 8011726:	6928      	ldr	r0, [r5, #16]
 8011728:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801172c:	a908      	add	r1, sp, #32
 801172e:	00a6      	lsls	r6, r4, #2
 8011730:	2800      	cmp	r0, #0
 8011732:	d0f1      	beq.n	8011718 <rcl_wait+0x90>
 8011734:	68eb      	ldr	r3, [r5, #12]
 8011736:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801173a:	4423      	add	r3, r4
 801173c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011740:	f1be 0f00 	cmp.w	lr, #0
 8011744:	d006      	beq.n	8011754 <rcl_wait+0xcc>
 8011746:	6913      	ldr	r3, [r2, #16]
 8011748:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801174c:	3301      	adds	r3, #1
 801174e:	6113      	str	r3, [r2, #16]
 8011750:	692b      	ldr	r3, [r5, #16]
 8011752:	5998      	ldr	r0, [r3, r6]
 8011754:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011758:	f7ff fb00 	bl	8010d5c <rcl_timer_get_time_until_next_call>
 801175c:	4548      	cmp	r0, r9
 801175e:	d1cd      	bne.n	80116fc <rcl_wait+0x74>
 8011760:	692b      	ldr	r3, [r5, #16]
 8011762:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011764:	2100      	movs	r1, #0
 8011766:	5199      	str	r1, [r3, r6]
 8011768:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801176a:	3401      	adds	r4, #1
 801176c:	f14a 0a00 	adc.w	sl, sl, #0
 8011770:	429c      	cmp	r4, r3
 8011772:	f17a 0100 	sbcs.w	r1, sl, #0
 8011776:	d3d6      	bcc.n	8011726 <rcl_wait+0x9e>
 8011778:	4616      	mov	r6, r2
 801177a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801177e:	4313      	orrs	r3, r2
 8011780:	46d9      	mov	r9, fp
 8011782:	f040 80a9 	bne.w	80118d8 <rcl_wait+0x250>
 8011786:	2300      	movs	r3, #0
 8011788:	2200      	movs	r2, #0
 801178a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801178e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011792:	ab08      	add	r3, sp, #32
 8011794:	9302      	str	r3, [sp, #8]
 8011796:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011798:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801179c:	e9cd 3200 	strd	r3, r2, [sp]
 80117a0:	f106 0110 	add.w	r1, r6, #16
 80117a4:	f106 031c 	add.w	r3, r6, #28
 80117a8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80117ac:	1d30      	adds	r0, r6, #4
 80117ae:	f001 ff0d 	bl	80135cc <rmw_wait>
 80117b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80117b6:	4680      	mov	r8, r0
 80117b8:	b1ca      	cbz	r2, 80117ee <rcl_wait+0x166>
 80117ba:	2400      	movs	r4, #0
 80117bc:	4627      	mov	r7, r4
 80117be:	692a      	ldr	r2, [r5, #16]
 80117c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80117c4:	f10d 011f 	add.w	r1, sp, #31
 80117c8:	00a6      	lsls	r6, r4, #2
 80117ca:	b160      	cbz	r0, 80117e6 <rcl_wait+0x15e>
 80117cc:	f88d 701f 	strb.w	r7, [sp, #31]
 80117d0:	f7ff fa8a 	bl	8010ce8 <rcl_timer_is_ready>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	f47f af74 	bne.w	80116c2 <rcl_wait+0x3a>
 80117da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80117de:	b90b      	cbnz	r3, 80117e4 <rcl_wait+0x15c>
 80117e0:	692a      	ldr	r2, [r5, #16]
 80117e2:	5193      	str	r3, [r2, r6]
 80117e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80117e8:	3401      	adds	r4, #1
 80117ea:	42a2      	cmp	r2, r4
 80117ec:	d8e7      	bhi.n	80117be <rcl_wait+0x136>
 80117ee:	f038 0002 	bics.w	r0, r8, #2
 80117f2:	f040 8090 	bne.w	8011916 <rcl_wait+0x28e>
 80117f6:	686e      	ldr	r6, [r5, #4]
 80117f8:	4602      	mov	r2, r0
 80117fa:	b91e      	cbnz	r6, 8011804 <rcl_wait+0x17c>
 80117fc:	e00d      	b.n	801181a <rcl_wait+0x192>
 80117fe:	3201      	adds	r2, #1
 8011800:	42b2      	cmp	r2, r6
 8011802:	d00a      	beq.n	801181a <rcl_wait+0x192>
 8011804:	6899      	ldr	r1, [r3, #8]
 8011806:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801180a:	2900      	cmp	r1, #0
 801180c:	d1f7      	bne.n	80117fe <rcl_wait+0x176>
 801180e:	682c      	ldr	r4, [r5, #0]
 8011810:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011814:	3201      	adds	r2, #1
 8011816:	42b2      	cmp	r2, r6
 8011818:	d1f4      	bne.n	8011804 <rcl_wait+0x17c>
 801181a:	68ee      	ldr	r6, [r5, #12]
 801181c:	2200      	movs	r2, #0
 801181e:	b91e      	cbnz	r6, 8011828 <rcl_wait+0x1a0>
 8011820:	e00d      	b.n	801183e <rcl_wait+0x1b6>
 8011822:	3201      	adds	r2, #1
 8011824:	42b2      	cmp	r2, r6
 8011826:	d00a      	beq.n	801183e <rcl_wait+0x1b6>
 8011828:	6959      	ldr	r1, [r3, #20]
 801182a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801182e:	2900      	cmp	r1, #0
 8011830:	d1f7      	bne.n	8011822 <rcl_wait+0x19a>
 8011832:	68ac      	ldr	r4, [r5, #8]
 8011834:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011838:	3201      	adds	r2, #1
 801183a:	42b2      	cmp	r2, r6
 801183c:	d1f4      	bne.n	8011828 <rcl_wait+0x1a0>
 801183e:	69ee      	ldr	r6, [r5, #28]
 8011840:	2200      	movs	r2, #0
 8011842:	b91e      	cbnz	r6, 801184c <rcl_wait+0x1c4>
 8011844:	e00d      	b.n	8011862 <rcl_wait+0x1da>
 8011846:	3201      	adds	r2, #1
 8011848:	42b2      	cmp	r2, r6
 801184a:	d00a      	beq.n	8011862 <rcl_wait+0x1da>
 801184c:	6a19      	ldr	r1, [r3, #32]
 801184e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011852:	2900      	cmp	r1, #0
 8011854:	d1f7      	bne.n	8011846 <rcl_wait+0x1be>
 8011856:	69ac      	ldr	r4, [r5, #24]
 8011858:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801185c:	3201      	adds	r2, #1
 801185e:	42b2      	cmp	r2, r6
 8011860:	d1f4      	bne.n	801184c <rcl_wait+0x1c4>
 8011862:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011864:	2200      	movs	r2, #0
 8011866:	b91e      	cbnz	r6, 8011870 <rcl_wait+0x1e8>
 8011868:	e00d      	b.n	8011886 <rcl_wait+0x1fe>
 801186a:	3201      	adds	r2, #1
 801186c:	4296      	cmp	r6, r2
 801186e:	d00a      	beq.n	8011886 <rcl_wait+0x1fe>
 8011870:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011872:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011876:	2900      	cmp	r1, #0
 8011878:	d1f7      	bne.n	801186a <rcl_wait+0x1e2>
 801187a:	6a2c      	ldr	r4, [r5, #32]
 801187c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011880:	3201      	adds	r2, #1
 8011882:	4296      	cmp	r6, r2
 8011884:	d1f4      	bne.n	8011870 <rcl_wait+0x1e8>
 8011886:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011888:	2200      	movs	r2, #0
 801188a:	b91e      	cbnz	r6, 8011894 <rcl_wait+0x20c>
 801188c:	e00d      	b.n	80118aa <rcl_wait+0x222>
 801188e:	3201      	adds	r2, #1
 8011890:	42b2      	cmp	r2, r6
 8011892:	d00a      	beq.n	80118aa <rcl_wait+0x222>
 8011894:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011896:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801189a:	2900      	cmp	r1, #0
 801189c:	d1f7      	bne.n	801188e <rcl_wait+0x206>
 801189e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80118a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80118a4:	3201      	adds	r2, #1
 80118a6:	42b2      	cmp	r2, r6
 80118a8:	d1f4      	bne.n	8011894 <rcl_wait+0x20c>
 80118aa:	f1b8 0f02 	cmp.w	r8, #2
 80118ae:	f47f af08 	bne.w	80116c2 <rcl_wait+0x3a>
 80118b2:	464b      	mov	r3, r9
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	bf08      	it	eq
 80118b8:	2002      	moveq	r0, #2
 80118ba:	e702      	b.n	80116c2 <rcl_wait+0x3a>
 80118bc:	2a00      	cmp	r2, #0
 80118be:	d03a      	beq.n	8011936 <rcl_wait+0x2ae>
 80118c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80118c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80118c8:	e70e      	b.n	80116e8 <rcl_wait+0x60>
 80118ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80118ce:	b00d      	add	sp, #52	@ 0x34
 80118d0:	ecbd 8b02 	vpop	{d8}
 80118d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d8:	9b04      	ldr	r3, [sp, #16]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	9b05      	ldr	r3, [sp, #20]
 80118de:	f173 0300 	sbcs.w	r3, r3, #0
 80118e2:	db24      	blt.n	801192e <rcl_wait+0x2a6>
 80118e4:	2f00      	cmp	r7, #0
 80118e6:	bfbc      	itt	lt
 80118e8:	f04f 0800 	movlt.w	r8, #0
 80118ec:	4647      	movlt	r7, r8
 80118ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8011968 <rcl_wait+0x2e0>)
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	4640      	mov	r0, r8
 80118f6:	4639      	mov	r1, r7
 80118f8:	f7ee fcfa 	bl	80002f0 <__aeabi_ldivmod>
 80118fc:	a31a      	add	r3, pc, #104	@ (adr r3, 8011968 <rcl_wait+0x2e0>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011906:	4640      	mov	r0, r8
 8011908:	4639      	mov	r1, r7
 801190a:	f7ee fcf1 	bl	80002f0 <__aeabi_ldivmod>
 801190e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011912:	ab08      	add	r3, sp, #32
 8011914:	e73e      	b.n	8011794 <rcl_wait+0x10c>
 8011916:	2001      	movs	r0, #1
 8011918:	b00d      	add	sp, #52	@ 0x34
 801191a:	ecbd 8b02 	vpop	{d8}
 801191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011922:	200b      	movs	r0, #11
 8011924:	b00d      	add	sp, #52	@ 0x34
 8011926:	ecbd 8b02 	vpop	{d8}
 801192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192e:	465b      	mov	r3, fp
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1d7      	bne.n	80118e4 <rcl_wait+0x25c>
 8011934:	e72e      	b.n	8011794 <rcl_wait+0x10c>
 8011936:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801193a:	430b      	orrs	r3, r1
 801193c:	bf08      	it	eq
 801193e:	4691      	moveq	r9, r2
 8011940:	f43f af21 	beq.w	8011786 <rcl_wait+0xfe>
 8011944:	9b04      	ldr	r3, [sp, #16]
 8011946:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801194a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801194e:	2b01      	cmp	r3, #1
 8011950:	9b05      	ldr	r3, [sp, #20]
 8011952:	f173 0300 	sbcs.w	r3, r3, #0
 8011956:	f04f 0300 	mov.w	r3, #0
 801195a:	4699      	mov	r9, r3
 801195c:	dac2      	bge.n	80118e4 <rcl_wait+0x25c>
 801195e:	e719      	b.n	8011794 <rcl_wait+0x10c>
 8011960:	ffffffff 	.word	0xffffffff
 8011964:	7fffffff 	.word	0x7fffffff
 8011968:	3b9aca00 	.word	0x3b9aca00
 801196c:	00000000 	.word	0x00000000

08011970 <rcl_action_take_goal_response>:
 8011970:	2800      	cmp	r0, #0
 8011972:	d039      	beq.n	80119e8 <rcl_action_take_goal_response+0x78>
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	4604      	mov	r4, r0
 8011978:	6800      	ldr	r0, [r0, #0]
 801197a:	b380      	cbz	r0, 80119de <rcl_action_take_goal_response+0x6e>
 801197c:	460d      	mov	r5, r1
 801197e:	4616      	mov	r6, r2
 8011980:	f7fe f8e2 	bl	800fb48 <rcl_client_is_valid>
 8011984:	b330      	cbz	r0, 80119d4 <rcl_action_take_goal_response+0x64>
 8011986:	6820      	ldr	r0, [r4, #0]
 8011988:	3004      	adds	r0, #4
 801198a:	f7fe f8dd 	bl	800fb48 <rcl_client_is_valid>
 801198e:	b308      	cbz	r0, 80119d4 <rcl_action_take_goal_response+0x64>
 8011990:	6820      	ldr	r0, [r4, #0]
 8011992:	3008      	adds	r0, #8
 8011994:	f7fe f8d8 	bl	800fb48 <rcl_client_is_valid>
 8011998:	b1e0      	cbz	r0, 80119d4 <rcl_action_take_goal_response+0x64>
 801199a:	6820      	ldr	r0, [r4, #0]
 801199c:	300c      	adds	r0, #12
 801199e:	f7fe fe5f 	bl	8010660 <rcl_subscription_is_valid>
 80119a2:	b1b8      	cbz	r0, 80119d4 <rcl_action_take_goal_response+0x64>
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	3010      	adds	r0, #16
 80119a8:	f7fe fe5a 	bl	8010660 <rcl_subscription_is_valid>
 80119ac:	b190      	cbz	r0, 80119d4 <rcl_action_take_goal_response+0x64>
 80119ae:	b1cd      	cbz	r5, 80119e4 <rcl_action_take_goal_response+0x74>
 80119b0:	b1c6      	cbz	r6, 80119e4 <rcl_action_take_goal_response+0x74>
 80119b2:	6820      	ldr	r0, [r4, #0]
 80119b4:	4632      	mov	r2, r6
 80119b6:	4629      	mov	r1, r5
 80119b8:	f7fe f87e 	bl	800fab8 <rcl_take_response>
 80119bc:	b148      	cbz	r0, 80119d2 <rcl_action_take_goal_response+0x62>
 80119be:	280a      	cmp	r0, #10
 80119c0:	d007      	beq.n	80119d2 <rcl_action_take_goal_response+0x62>
 80119c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80119c6:	f640 0337 	movw	r3, #2103	@ 0x837
 80119ca:	4290      	cmp	r0, r2
 80119cc:	bf0c      	ite	eq
 80119ce:	4618      	moveq	r0, r3
 80119d0:	2001      	movne	r0, #1
 80119d2:	bd70      	pop	{r4, r5, r6, pc}
 80119d4:	f7f7 ff8c 	bl	80098f0 <rcutils_reset_error>
 80119d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80119dc:	bd70      	pop	{r4, r5, r6, pc}
 80119de:	f640 0036 	movw	r0, #2102	@ 0x836
 80119e2:	bd70      	pop	{r4, r5, r6, pc}
 80119e4:	200b      	movs	r0, #11
 80119e6:	bd70      	pop	{r4, r5, r6, pc}
 80119e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop

080119f0 <rcl_action_send_result_request>:
 80119f0:	b390      	cbz	r0, 8011a58 <rcl_action_send_result_request+0x68>
 80119f2:	b570      	push	{r4, r5, r6, lr}
 80119f4:	4604      	mov	r4, r0
 80119f6:	6800      	ldr	r0, [r0, #0]
 80119f8:	b348      	cbz	r0, 8011a4e <rcl_action_send_result_request+0x5e>
 80119fa:	460d      	mov	r5, r1
 80119fc:	4616      	mov	r6, r2
 80119fe:	f7fe f8a3 	bl	800fb48 <rcl_client_is_valid>
 8011a02:	b1f8      	cbz	r0, 8011a44 <rcl_action_send_result_request+0x54>
 8011a04:	6820      	ldr	r0, [r4, #0]
 8011a06:	3004      	adds	r0, #4
 8011a08:	f7fe f89e 	bl	800fb48 <rcl_client_is_valid>
 8011a0c:	b1d0      	cbz	r0, 8011a44 <rcl_action_send_result_request+0x54>
 8011a0e:	6820      	ldr	r0, [r4, #0]
 8011a10:	3008      	adds	r0, #8
 8011a12:	f7fe f899 	bl	800fb48 <rcl_client_is_valid>
 8011a16:	b1a8      	cbz	r0, 8011a44 <rcl_action_send_result_request+0x54>
 8011a18:	6820      	ldr	r0, [r4, #0]
 8011a1a:	300c      	adds	r0, #12
 8011a1c:	f7fe fe20 	bl	8010660 <rcl_subscription_is_valid>
 8011a20:	b180      	cbz	r0, 8011a44 <rcl_action_send_result_request+0x54>
 8011a22:	6820      	ldr	r0, [r4, #0]
 8011a24:	3010      	adds	r0, #16
 8011a26:	f7fe fe1b 	bl	8010660 <rcl_subscription_is_valid>
 8011a2a:	b158      	cbz	r0, 8011a44 <rcl_action_send_result_request+0x54>
 8011a2c:	b195      	cbz	r5, 8011a54 <rcl_action_send_result_request+0x64>
 8011a2e:	b18e      	cbz	r6, 8011a54 <rcl_action_send_result_request+0x64>
 8011a30:	6820      	ldr	r0, [r4, #0]
 8011a32:	4632      	mov	r2, r6
 8011a34:	4629      	mov	r1, r5
 8011a36:	3008      	adds	r0, #8
 8011a38:	f7fe f806 	bl	800fa48 <rcl_send_request>
 8011a3c:	3800      	subs	r0, #0
 8011a3e:	bf18      	it	ne
 8011a40:	2001      	movne	r0, #1
 8011a42:	bd70      	pop	{r4, r5, r6, pc}
 8011a44:	f7f7 ff54 	bl	80098f0 <rcutils_reset_error>
 8011a48:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a4c:	bd70      	pop	{r4, r5, r6, pc}
 8011a4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a52:	bd70      	pop	{r4, r5, r6, pc}
 8011a54:	200b      	movs	r0, #11
 8011a56:	bd70      	pop	{r4, r5, r6, pc}
 8011a58:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a5c:	4770      	bx	lr
 8011a5e:	bf00      	nop

08011a60 <rcl_action_take_result_response>:
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d03a      	beq.n	8011ada <rcl_action_take_result_response+0x7a>
 8011a64:	b570      	push	{r4, r5, r6, lr}
 8011a66:	4604      	mov	r4, r0
 8011a68:	6800      	ldr	r0, [r0, #0]
 8011a6a:	b388      	cbz	r0, 8011ad0 <rcl_action_take_result_response+0x70>
 8011a6c:	460d      	mov	r5, r1
 8011a6e:	4616      	mov	r6, r2
 8011a70:	f7fe f86a 	bl	800fb48 <rcl_client_is_valid>
 8011a74:	b338      	cbz	r0, 8011ac6 <rcl_action_take_result_response+0x66>
 8011a76:	6820      	ldr	r0, [r4, #0]
 8011a78:	3004      	adds	r0, #4
 8011a7a:	f7fe f865 	bl	800fb48 <rcl_client_is_valid>
 8011a7e:	b310      	cbz	r0, 8011ac6 <rcl_action_take_result_response+0x66>
 8011a80:	6820      	ldr	r0, [r4, #0]
 8011a82:	3008      	adds	r0, #8
 8011a84:	f7fe f860 	bl	800fb48 <rcl_client_is_valid>
 8011a88:	b1e8      	cbz	r0, 8011ac6 <rcl_action_take_result_response+0x66>
 8011a8a:	6820      	ldr	r0, [r4, #0]
 8011a8c:	300c      	adds	r0, #12
 8011a8e:	f7fe fde7 	bl	8010660 <rcl_subscription_is_valid>
 8011a92:	b1c0      	cbz	r0, 8011ac6 <rcl_action_take_result_response+0x66>
 8011a94:	6820      	ldr	r0, [r4, #0]
 8011a96:	3010      	adds	r0, #16
 8011a98:	f7fe fde2 	bl	8010660 <rcl_subscription_is_valid>
 8011a9c:	b198      	cbz	r0, 8011ac6 <rcl_action_take_result_response+0x66>
 8011a9e:	b1d5      	cbz	r5, 8011ad6 <rcl_action_take_result_response+0x76>
 8011aa0:	b1ce      	cbz	r6, 8011ad6 <rcl_action_take_result_response+0x76>
 8011aa2:	6820      	ldr	r0, [r4, #0]
 8011aa4:	4632      	mov	r2, r6
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	3008      	adds	r0, #8
 8011aaa:	f7fe f805 	bl	800fab8 <rcl_take_response>
 8011aae:	b148      	cbz	r0, 8011ac4 <rcl_action_take_result_response+0x64>
 8011ab0:	280a      	cmp	r0, #10
 8011ab2:	d007      	beq.n	8011ac4 <rcl_action_take_result_response+0x64>
 8011ab4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011ab8:	f640 0337 	movw	r3, #2103	@ 0x837
 8011abc:	4290      	cmp	r0, r2
 8011abe:	bf0c      	ite	eq
 8011ac0:	4618      	moveq	r0, r3
 8011ac2:	2001      	movne	r0, #1
 8011ac4:	bd70      	pop	{r4, r5, r6, pc}
 8011ac6:	f7f7 ff13 	bl	80098f0 <rcutils_reset_error>
 8011aca:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ace:	bd70      	pop	{r4, r5, r6, pc}
 8011ad0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ad4:	bd70      	pop	{r4, r5, r6, pc}
 8011ad6:	200b      	movs	r0, #11
 8011ad8:	bd70      	pop	{r4, r5, r6, pc}
 8011ada:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ade:	4770      	bx	lr

08011ae0 <rcl_action_take_cancel_response>:
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d03a      	beq.n	8011b5a <rcl_action_take_cancel_response+0x7a>
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	6800      	ldr	r0, [r0, #0]
 8011aea:	b388      	cbz	r0, 8011b50 <rcl_action_take_cancel_response+0x70>
 8011aec:	460d      	mov	r5, r1
 8011aee:	4616      	mov	r6, r2
 8011af0:	f7fe f82a 	bl	800fb48 <rcl_client_is_valid>
 8011af4:	b338      	cbz	r0, 8011b46 <rcl_action_take_cancel_response+0x66>
 8011af6:	6820      	ldr	r0, [r4, #0]
 8011af8:	3004      	adds	r0, #4
 8011afa:	f7fe f825 	bl	800fb48 <rcl_client_is_valid>
 8011afe:	b310      	cbz	r0, 8011b46 <rcl_action_take_cancel_response+0x66>
 8011b00:	6820      	ldr	r0, [r4, #0]
 8011b02:	3008      	adds	r0, #8
 8011b04:	f7fe f820 	bl	800fb48 <rcl_client_is_valid>
 8011b08:	b1e8      	cbz	r0, 8011b46 <rcl_action_take_cancel_response+0x66>
 8011b0a:	6820      	ldr	r0, [r4, #0]
 8011b0c:	300c      	adds	r0, #12
 8011b0e:	f7fe fda7 	bl	8010660 <rcl_subscription_is_valid>
 8011b12:	b1c0      	cbz	r0, 8011b46 <rcl_action_take_cancel_response+0x66>
 8011b14:	6820      	ldr	r0, [r4, #0]
 8011b16:	3010      	adds	r0, #16
 8011b18:	f7fe fda2 	bl	8010660 <rcl_subscription_is_valid>
 8011b1c:	b198      	cbz	r0, 8011b46 <rcl_action_take_cancel_response+0x66>
 8011b1e:	b1d5      	cbz	r5, 8011b56 <rcl_action_take_cancel_response+0x76>
 8011b20:	b1ce      	cbz	r6, 8011b56 <rcl_action_take_cancel_response+0x76>
 8011b22:	6820      	ldr	r0, [r4, #0]
 8011b24:	4632      	mov	r2, r6
 8011b26:	4629      	mov	r1, r5
 8011b28:	3004      	adds	r0, #4
 8011b2a:	f7fd ffc5 	bl	800fab8 <rcl_take_response>
 8011b2e:	b148      	cbz	r0, 8011b44 <rcl_action_take_cancel_response+0x64>
 8011b30:	280a      	cmp	r0, #10
 8011b32:	d007      	beq.n	8011b44 <rcl_action_take_cancel_response+0x64>
 8011b34:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011b38:	f640 0337 	movw	r3, #2103	@ 0x837
 8011b3c:	4290      	cmp	r0, r2
 8011b3e:	bf0c      	ite	eq
 8011b40:	4618      	moveq	r0, r3
 8011b42:	2001      	movne	r0, #1
 8011b44:	bd70      	pop	{r4, r5, r6, pc}
 8011b46:	f7f7 fed3 	bl	80098f0 <rcutils_reset_error>
 8011b4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b4e:	bd70      	pop	{r4, r5, r6, pc}
 8011b50:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b54:	bd70      	pop	{r4, r5, r6, pc}
 8011b56:	200b      	movs	r0, #11
 8011b58:	bd70      	pop	{r4, r5, r6, pc}
 8011b5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b5e:	4770      	bx	lr

08011b60 <rcl_action_take_feedback>:
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d038      	beq.n	8011bd6 <rcl_action_take_feedback+0x76>
 8011b64:	b530      	push	{r4, r5, lr}
 8011b66:	4604      	mov	r4, r0
 8011b68:	6800      	ldr	r0, [r0, #0]
 8011b6a:	b091      	sub	sp, #68	@ 0x44
 8011b6c:	b378      	cbz	r0, 8011bce <rcl_action_take_feedback+0x6e>
 8011b6e:	460d      	mov	r5, r1
 8011b70:	f7fd ffea 	bl	800fb48 <rcl_client_is_valid>
 8011b74:	b328      	cbz	r0, 8011bc2 <rcl_action_take_feedback+0x62>
 8011b76:	6820      	ldr	r0, [r4, #0]
 8011b78:	3004      	adds	r0, #4
 8011b7a:	f7fd ffe5 	bl	800fb48 <rcl_client_is_valid>
 8011b7e:	b300      	cbz	r0, 8011bc2 <rcl_action_take_feedback+0x62>
 8011b80:	6820      	ldr	r0, [r4, #0]
 8011b82:	3008      	adds	r0, #8
 8011b84:	f7fd ffe0 	bl	800fb48 <rcl_client_is_valid>
 8011b88:	b1d8      	cbz	r0, 8011bc2 <rcl_action_take_feedback+0x62>
 8011b8a:	6820      	ldr	r0, [r4, #0]
 8011b8c:	300c      	adds	r0, #12
 8011b8e:	f7fe fd67 	bl	8010660 <rcl_subscription_is_valid>
 8011b92:	b1b0      	cbz	r0, 8011bc2 <rcl_action_take_feedback+0x62>
 8011b94:	6820      	ldr	r0, [r4, #0]
 8011b96:	3010      	adds	r0, #16
 8011b98:	f7fe fd62 	bl	8010660 <rcl_subscription_is_valid>
 8011b9c:	b188      	cbz	r0, 8011bc2 <rcl_action_take_feedback+0x62>
 8011b9e:	b1ed      	cbz	r5, 8011bdc <rcl_action_take_feedback+0x7c>
 8011ba0:	6820      	ldr	r0, [r4, #0]
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	466a      	mov	r2, sp
 8011ba6:	4629      	mov	r1, r5
 8011ba8:	300c      	adds	r0, #12
 8011baa:	f7fe fcfb 	bl	80105a4 <rcl_take>
 8011bae:	b160      	cbz	r0, 8011bca <rcl_action_take_feedback+0x6a>
 8011bb0:	f240 1391 	movw	r3, #401	@ 0x191
 8011bb4:	4298      	cmp	r0, r3
 8011bb6:	d014      	beq.n	8011be2 <rcl_action_take_feedback+0x82>
 8011bb8:	280a      	cmp	r0, #10
 8011bba:	bf18      	it	ne
 8011bbc:	2001      	movne	r0, #1
 8011bbe:	b011      	add	sp, #68	@ 0x44
 8011bc0:	bd30      	pop	{r4, r5, pc}
 8011bc2:	f7f7 fe95 	bl	80098f0 <rcutils_reset_error>
 8011bc6:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bca:	b011      	add	sp, #68	@ 0x44
 8011bcc:	bd30      	pop	{r4, r5, pc}
 8011bce:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bd2:	b011      	add	sp, #68	@ 0x44
 8011bd4:	bd30      	pop	{r4, r5, pc}
 8011bd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bda:	4770      	bx	lr
 8011bdc:	200b      	movs	r0, #11
 8011bde:	b011      	add	sp, #68	@ 0x44
 8011be0:	bd30      	pop	{r4, r5, pc}
 8011be2:	f640 0037 	movw	r0, #2103	@ 0x837
 8011be6:	e7f0      	b.n	8011bca <rcl_action_take_feedback+0x6a>

08011be8 <rcl_action_wait_set_add_action_client>:
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d048      	beq.n	8011c7e <rcl_action_wait_set_add_action_client+0x96>
 8011bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bee:	460c      	mov	r4, r1
 8011bf0:	2900      	cmp	r1, #0
 8011bf2:	d03c      	beq.n	8011c6e <rcl_action_wait_set_add_action_client+0x86>
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	6808      	ldr	r0, [r1, #0]
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	d038      	beq.n	8011c6e <rcl_action_wait_set_add_action_client+0x86>
 8011bfc:	4617      	mov	r7, r2
 8011bfe:	461e      	mov	r6, r3
 8011c00:	f7fd ffa2 	bl	800fb48 <rcl_client_is_valid>
 8011c04:	b3b0      	cbz	r0, 8011c74 <rcl_action_wait_set_add_action_client+0x8c>
 8011c06:	6820      	ldr	r0, [r4, #0]
 8011c08:	3004      	adds	r0, #4
 8011c0a:	f7fd ff9d 	bl	800fb48 <rcl_client_is_valid>
 8011c0e:	b388      	cbz	r0, 8011c74 <rcl_action_wait_set_add_action_client+0x8c>
 8011c10:	6820      	ldr	r0, [r4, #0]
 8011c12:	3008      	adds	r0, #8
 8011c14:	f7fd ff98 	bl	800fb48 <rcl_client_is_valid>
 8011c18:	b360      	cbz	r0, 8011c74 <rcl_action_wait_set_add_action_client+0x8c>
 8011c1a:	6820      	ldr	r0, [r4, #0]
 8011c1c:	300c      	adds	r0, #12
 8011c1e:	f7fe fd1f 	bl	8010660 <rcl_subscription_is_valid>
 8011c22:	b338      	cbz	r0, 8011c74 <rcl_action_wait_set_add_action_client+0x8c>
 8011c24:	6820      	ldr	r0, [r4, #0]
 8011c26:	3010      	adds	r0, #16
 8011c28:	f7fe fd1a 	bl	8010660 <rcl_subscription_is_valid>
 8011c2c:	b310      	cbz	r0, 8011c74 <rcl_action_wait_set_add_action_client+0x8c>
 8011c2e:	6821      	ldr	r1, [r4, #0]
 8011c30:	4628      	mov	r0, r5
 8011c32:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011c36:	f7ff fccf 	bl	80115d8 <rcl_wait_set_add_client>
 8011c3a:	b9b8      	cbnz	r0, 8011c6c <rcl_action_wait_set_add_action_client+0x84>
 8011c3c:	6821      	ldr	r1, [r4, #0]
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011c44:	3104      	adds	r1, #4
 8011c46:	f7ff fcc7 	bl	80115d8 <rcl_wait_set_add_client>
 8011c4a:	b978      	cbnz	r0, 8011c6c <rcl_action_wait_set_add_action_client+0x84>
 8011c4c:	6821      	ldr	r1, [r4, #0]
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011c54:	3108      	adds	r1, #8
 8011c56:	f7ff fcbf 	bl	80115d8 <rcl_wait_set_add_client>
 8011c5a:	b938      	cbnz	r0, 8011c6c <rcl_action_wait_set_add_action_client+0x84>
 8011c5c:	6821      	ldr	r1, [r4, #0]
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011c64:	310c      	adds	r1, #12
 8011c66:	f7ff f96f 	bl	8010f48 <rcl_wait_set_add_subscription>
 8011c6a:	b158      	cbz	r0, 8011c84 <rcl_action_wait_set_add_action_client+0x9c>
 8011c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c74:	f7f7 fe3c 	bl	80098f0 <rcutils_reset_error>
 8011c78:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011c82:	4770      	bx	lr
 8011c84:	6821      	ldr	r1, [r4, #0]
 8011c86:	4628      	mov	r0, r5
 8011c88:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011c8c:	3110      	adds	r1, #16
 8011c8e:	f7ff f95b 	bl	8010f48 <rcl_wait_set_add_subscription>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d1ea      	bne.n	8011c6c <rcl_action_wait_set_add_action_client+0x84>
 8011c96:	b11f      	cbz	r7, 8011ca0 <rcl_action_wait_set_add_action_client+0xb8>
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011c9e:	603b      	str	r3, [r7, #0]
 8011ca0:	2e00      	cmp	r6, #0
 8011ca2:	d0e3      	beq.n	8011c6c <rcl_action_wait_set_add_action_client+0x84>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011caa:	6033      	str	r3, [r6, #0]
 8011cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cae:	bf00      	nop

08011cb0 <rcl_action_client_wait_set_get_entities_ready>:
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	f000 808d 	beq.w	8011dd0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cba:	460c      	mov	r4, r1
 8011cbc:	2900      	cmp	r1, #0
 8011cbe:	d077      	beq.n	8011db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011cc0:	4605      	mov	r5, r0
 8011cc2:	6808      	ldr	r0, [r1, #0]
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	d073      	beq.n	8011db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011cc8:	4616      	mov	r6, r2
 8011cca:	461f      	mov	r7, r3
 8011ccc:	f7fd ff3c 	bl	800fb48 <rcl_client_is_valid>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d071      	beq.n	8011db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011cd4:	6820      	ldr	r0, [r4, #0]
 8011cd6:	3004      	adds	r0, #4
 8011cd8:	f7fd ff36 	bl	800fb48 <rcl_client_is_valid>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d06b      	beq.n	8011db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011ce0:	6820      	ldr	r0, [r4, #0]
 8011ce2:	3008      	adds	r0, #8
 8011ce4:	f7fd ff30 	bl	800fb48 <rcl_client_is_valid>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	d065      	beq.n	8011db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011cec:	6820      	ldr	r0, [r4, #0]
 8011cee:	300c      	adds	r0, #12
 8011cf0:	f7fe fcb6 	bl	8010660 <rcl_subscription_is_valid>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d05f      	beq.n	8011db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011cf8:	6820      	ldr	r0, [r4, #0]
 8011cfa:	3010      	adds	r0, #16
 8011cfc:	f7fe fcb0 	bl	8010660 <rcl_subscription_is_valid>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d059      	beq.n	8011db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011d04:	2e00      	cmp	r6, #0
 8011d06:	d060      	beq.n	8011dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d08:	2f00      	cmp	r7, #0
 8011d0a:	d05e      	beq.n	8011dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d0c:	9b06      	ldr	r3, [sp, #24]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d05b      	beq.n	8011dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d12:	9b07      	ldr	r3, [sp, #28]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d058      	beq.n	8011dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d18:	9b08      	ldr	r3, [sp, #32]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d055      	beq.n	8011dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	686a      	ldr	r2, [r5, #4]
 8011d22:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011d26:	428a      	cmp	r2, r1
 8011d28:	d94c      	bls.n	8011dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d2a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8011d2e:	4282      	cmp	r2, r0
 8011d30:	d948      	bls.n	8011dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d32:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011d36:	69ea      	ldr	r2, [r5, #28]
 8011d38:	42a2      	cmp	r2, r4
 8011d3a:	d943      	bls.n	8011dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d3c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011d40:	4562      	cmp	r2, ip
 8011d42:	d93f      	bls.n	8011dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d44:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011d48:	4572      	cmp	r2, lr
 8011d4a:	d93b      	bls.n	8011dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d4c:	69aa      	ldr	r2, [r5, #24]
 8011d4e:	682d      	ldr	r5, [r5, #0]
 8011d50:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011d54:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011d58:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011d5c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011d60:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011d64:	f103 0c0c 	add.w	ip, r3, #12
 8011d68:	eba5 050c 	sub.w	r5, r5, ip
 8011d6c:	fab5 f585 	clz	r5, r5
 8011d70:	096d      	lsrs	r5, r5, #5
 8011d72:	7035      	strb	r5, [r6, #0]
 8011d74:	f103 0510 	add.w	r5, r3, #16
 8011d78:	1b64      	subs	r4, r4, r5
 8011d7a:	fab4 f484 	clz	r4, r4
 8011d7e:	0964      	lsrs	r4, r4, #5
 8011d80:	703c      	strb	r4, [r7, #0]
 8011d82:	eba3 0008 	sub.w	r0, r3, r8
 8011d86:	1d1c      	adds	r4, r3, #4
 8011d88:	3308      	adds	r3, #8
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	fab0 f080 	clz	r0, r0
 8011d90:	9a06      	ldr	r2, [sp, #24]
 8011d92:	0940      	lsrs	r0, r0, #5
 8011d94:	1b09      	subs	r1, r1, r4
 8011d96:	7010      	strb	r0, [r2, #0]
 8011d98:	fab1 f181 	clz	r1, r1
 8011d9c:	9a07      	ldr	r2, [sp, #28]
 8011d9e:	0949      	lsrs	r1, r1, #5
 8011da0:	7011      	strb	r1, [r2, #0]
 8011da2:	fab3 f383 	clz	r3, r3
 8011da6:	9a08      	ldr	r2, [sp, #32]
 8011da8:	095b      	lsrs	r3, r3, #5
 8011daa:	2000      	movs	r0, #0
 8011dac:	7013      	strb	r3, [r2, #0]
 8011dae:	e001      	b.n	8011db4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011db0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db8:	f7f7 fd9a 	bl	80098f0 <rcutils_reset_error>
 8011dbc:	f640 0036 	movw	r0, #2102	@ 0x836
 8011dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc4:	2001      	movs	r0, #1
 8011dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dca:	200b      	movs	r0, #11
 8011dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011dd4:	4770      	bx	lr
 8011dd6:	bf00      	nop

08011dd8 <rcl_action_take_goal_request>:
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d039      	beq.n	8011e50 <rcl_action_take_goal_request+0x78>
 8011ddc:	b570      	push	{r4, r5, r6, lr}
 8011dde:	4604      	mov	r4, r0
 8011de0:	6800      	ldr	r0, [r0, #0]
 8011de2:	b380      	cbz	r0, 8011e46 <rcl_action_take_goal_request+0x6e>
 8011de4:	460d      	mov	r5, r1
 8011de6:	4616      	mov	r6, r2
 8011de8:	f7fe faf6 	bl	80103d8 <rcl_service_is_valid>
 8011dec:	b330      	cbz	r0, 8011e3c <rcl_action_take_goal_request+0x64>
 8011dee:	6820      	ldr	r0, [r4, #0]
 8011df0:	3004      	adds	r0, #4
 8011df2:	f7fe faf1 	bl	80103d8 <rcl_service_is_valid>
 8011df6:	b308      	cbz	r0, 8011e3c <rcl_action_take_goal_request+0x64>
 8011df8:	6820      	ldr	r0, [r4, #0]
 8011dfa:	3008      	adds	r0, #8
 8011dfc:	f7fe faec 	bl	80103d8 <rcl_service_is_valid>
 8011e00:	b1e0      	cbz	r0, 8011e3c <rcl_action_take_goal_request+0x64>
 8011e02:	6820      	ldr	r0, [r4, #0]
 8011e04:	300c      	adds	r0, #12
 8011e06:	f7f6 fd93 	bl	8008930 <rcl_publisher_is_valid>
 8011e0a:	b1b8      	cbz	r0, 8011e3c <rcl_action_take_goal_request+0x64>
 8011e0c:	6820      	ldr	r0, [r4, #0]
 8011e0e:	3010      	adds	r0, #16
 8011e10:	f7f6 fd8e 	bl	8008930 <rcl_publisher_is_valid>
 8011e14:	b190      	cbz	r0, 8011e3c <rcl_action_take_goal_request+0x64>
 8011e16:	b1cd      	cbz	r5, 8011e4c <rcl_action_take_goal_request+0x74>
 8011e18:	b1c6      	cbz	r6, 8011e4c <rcl_action_take_goal_request+0x74>
 8011e1a:	6820      	ldr	r0, [r4, #0]
 8011e1c:	4632      	mov	r2, r6
 8011e1e:	4629      	mov	r1, r5
 8011e20:	f7fe fa82 	bl	8010328 <rcl_take_request>
 8011e24:	b148      	cbz	r0, 8011e3a <rcl_action_take_goal_request+0x62>
 8011e26:	280a      	cmp	r0, #10
 8011e28:	d007      	beq.n	8011e3a <rcl_action_take_goal_request+0x62>
 8011e2a:	f240 2259 	movw	r2, #601	@ 0x259
 8011e2e:	f640 0399 	movw	r3, #2201	@ 0x899
 8011e32:	4290      	cmp	r0, r2
 8011e34:	bf0c      	ite	eq
 8011e36:	4618      	moveq	r0, r3
 8011e38:	2001      	movne	r0, #1
 8011e3a:	bd70      	pop	{r4, r5, r6, pc}
 8011e3c:	f7f7 fd58 	bl	80098f0 <rcutils_reset_error>
 8011e40:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e44:	bd70      	pop	{r4, r5, r6, pc}
 8011e46:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e4a:	bd70      	pop	{r4, r5, r6, pc}
 8011e4c:	200b      	movs	r0, #11
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop

08011e58 <rcl_action_send_goal_response>:
 8011e58:	b390      	cbz	r0, 8011ec0 <rcl_action_send_goal_response+0x68>
 8011e5a:	b570      	push	{r4, r5, r6, lr}
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	6800      	ldr	r0, [r0, #0]
 8011e60:	b348      	cbz	r0, 8011eb6 <rcl_action_send_goal_response+0x5e>
 8011e62:	460d      	mov	r5, r1
 8011e64:	4616      	mov	r6, r2
 8011e66:	f7fe fab7 	bl	80103d8 <rcl_service_is_valid>
 8011e6a:	b1f8      	cbz	r0, 8011eac <rcl_action_send_goal_response+0x54>
 8011e6c:	6820      	ldr	r0, [r4, #0]
 8011e6e:	3004      	adds	r0, #4
 8011e70:	f7fe fab2 	bl	80103d8 <rcl_service_is_valid>
 8011e74:	b1d0      	cbz	r0, 8011eac <rcl_action_send_goal_response+0x54>
 8011e76:	6820      	ldr	r0, [r4, #0]
 8011e78:	3008      	adds	r0, #8
 8011e7a:	f7fe faad 	bl	80103d8 <rcl_service_is_valid>
 8011e7e:	b1a8      	cbz	r0, 8011eac <rcl_action_send_goal_response+0x54>
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	300c      	adds	r0, #12
 8011e84:	f7f6 fd54 	bl	8008930 <rcl_publisher_is_valid>
 8011e88:	b180      	cbz	r0, 8011eac <rcl_action_send_goal_response+0x54>
 8011e8a:	6820      	ldr	r0, [r4, #0]
 8011e8c:	3010      	adds	r0, #16
 8011e8e:	f7f6 fd4f 	bl	8008930 <rcl_publisher_is_valid>
 8011e92:	b158      	cbz	r0, 8011eac <rcl_action_send_goal_response+0x54>
 8011e94:	b195      	cbz	r5, 8011ebc <rcl_action_send_goal_response+0x64>
 8011e96:	b18e      	cbz	r6, 8011ebc <rcl_action_send_goal_response+0x64>
 8011e98:	6820      	ldr	r0, [r4, #0]
 8011e9a:	4632      	mov	r2, r6
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	f7fe fa83 	bl	80103a8 <rcl_send_response>
 8011ea2:	b110      	cbz	r0, 8011eaa <rcl_action_send_goal_response+0x52>
 8011ea4:	2802      	cmp	r0, #2
 8011ea6:	bf18      	it	ne
 8011ea8:	2001      	movne	r0, #1
 8011eaa:	bd70      	pop	{r4, r5, r6, pc}
 8011eac:	f7f7 fd20 	bl	80098f0 <rcutils_reset_error>
 8011eb0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011eb4:	bd70      	pop	{r4, r5, r6, pc}
 8011eb6:	f640 0098 	movw	r0, #2200	@ 0x898
 8011eba:	bd70      	pop	{r4, r5, r6, pc}
 8011ebc:	200b      	movs	r0, #11
 8011ebe:	bd70      	pop	{r4, r5, r6, pc}
 8011ec0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop

08011ec8 <rcl_action_take_result_request>:
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d03a      	beq.n	8011f42 <rcl_action_take_result_request+0x7a>
 8011ecc:	b570      	push	{r4, r5, r6, lr}
 8011ece:	4604      	mov	r4, r0
 8011ed0:	6800      	ldr	r0, [r0, #0]
 8011ed2:	b388      	cbz	r0, 8011f38 <rcl_action_take_result_request+0x70>
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	4616      	mov	r6, r2
 8011ed8:	f7fe fa7e 	bl	80103d8 <rcl_service_is_valid>
 8011edc:	b338      	cbz	r0, 8011f2e <rcl_action_take_result_request+0x66>
 8011ede:	6820      	ldr	r0, [r4, #0]
 8011ee0:	3004      	adds	r0, #4
 8011ee2:	f7fe fa79 	bl	80103d8 <rcl_service_is_valid>
 8011ee6:	b310      	cbz	r0, 8011f2e <rcl_action_take_result_request+0x66>
 8011ee8:	6820      	ldr	r0, [r4, #0]
 8011eea:	3008      	adds	r0, #8
 8011eec:	f7fe fa74 	bl	80103d8 <rcl_service_is_valid>
 8011ef0:	b1e8      	cbz	r0, 8011f2e <rcl_action_take_result_request+0x66>
 8011ef2:	6820      	ldr	r0, [r4, #0]
 8011ef4:	300c      	adds	r0, #12
 8011ef6:	f7f6 fd1b 	bl	8008930 <rcl_publisher_is_valid>
 8011efa:	b1c0      	cbz	r0, 8011f2e <rcl_action_take_result_request+0x66>
 8011efc:	6820      	ldr	r0, [r4, #0]
 8011efe:	3010      	adds	r0, #16
 8011f00:	f7f6 fd16 	bl	8008930 <rcl_publisher_is_valid>
 8011f04:	b198      	cbz	r0, 8011f2e <rcl_action_take_result_request+0x66>
 8011f06:	b1d5      	cbz	r5, 8011f3e <rcl_action_take_result_request+0x76>
 8011f08:	b1ce      	cbz	r6, 8011f3e <rcl_action_take_result_request+0x76>
 8011f0a:	6820      	ldr	r0, [r4, #0]
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	4629      	mov	r1, r5
 8011f10:	3008      	adds	r0, #8
 8011f12:	f7fe fa09 	bl	8010328 <rcl_take_request>
 8011f16:	b148      	cbz	r0, 8011f2c <rcl_action_take_result_request+0x64>
 8011f18:	280a      	cmp	r0, #10
 8011f1a:	d007      	beq.n	8011f2c <rcl_action_take_result_request+0x64>
 8011f1c:	f240 2259 	movw	r2, #601	@ 0x259
 8011f20:	f640 0399 	movw	r3, #2201	@ 0x899
 8011f24:	4290      	cmp	r0, r2
 8011f26:	bf0c      	ite	eq
 8011f28:	4618      	moveq	r0, r3
 8011f2a:	2001      	movne	r0, #1
 8011f2c:	bd70      	pop	{r4, r5, r6, pc}
 8011f2e:	f7f7 fcdf 	bl	80098f0 <rcutils_reset_error>
 8011f32:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f36:	bd70      	pop	{r4, r5, r6, pc}
 8011f38:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f3c:	bd70      	pop	{r4, r5, r6, pc}
 8011f3e:	200b      	movs	r0, #11
 8011f40:	bd70      	pop	{r4, r5, r6, pc}
 8011f42:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f46:	4770      	bx	lr

08011f48 <rcl_action_take_cancel_request>:
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	d03a      	beq.n	8011fc2 <rcl_action_take_cancel_request+0x7a>
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	4604      	mov	r4, r0
 8011f50:	6800      	ldr	r0, [r0, #0]
 8011f52:	b388      	cbz	r0, 8011fb8 <rcl_action_take_cancel_request+0x70>
 8011f54:	460d      	mov	r5, r1
 8011f56:	4616      	mov	r6, r2
 8011f58:	f7fe fa3e 	bl	80103d8 <rcl_service_is_valid>
 8011f5c:	b338      	cbz	r0, 8011fae <rcl_action_take_cancel_request+0x66>
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	3004      	adds	r0, #4
 8011f62:	f7fe fa39 	bl	80103d8 <rcl_service_is_valid>
 8011f66:	b310      	cbz	r0, 8011fae <rcl_action_take_cancel_request+0x66>
 8011f68:	6820      	ldr	r0, [r4, #0]
 8011f6a:	3008      	adds	r0, #8
 8011f6c:	f7fe fa34 	bl	80103d8 <rcl_service_is_valid>
 8011f70:	b1e8      	cbz	r0, 8011fae <rcl_action_take_cancel_request+0x66>
 8011f72:	6820      	ldr	r0, [r4, #0]
 8011f74:	300c      	adds	r0, #12
 8011f76:	f7f6 fcdb 	bl	8008930 <rcl_publisher_is_valid>
 8011f7a:	b1c0      	cbz	r0, 8011fae <rcl_action_take_cancel_request+0x66>
 8011f7c:	6820      	ldr	r0, [r4, #0]
 8011f7e:	3010      	adds	r0, #16
 8011f80:	f7f6 fcd6 	bl	8008930 <rcl_publisher_is_valid>
 8011f84:	b198      	cbz	r0, 8011fae <rcl_action_take_cancel_request+0x66>
 8011f86:	b1d5      	cbz	r5, 8011fbe <rcl_action_take_cancel_request+0x76>
 8011f88:	b1ce      	cbz	r6, 8011fbe <rcl_action_take_cancel_request+0x76>
 8011f8a:	6820      	ldr	r0, [r4, #0]
 8011f8c:	4632      	mov	r2, r6
 8011f8e:	4629      	mov	r1, r5
 8011f90:	3004      	adds	r0, #4
 8011f92:	f7fe f9c9 	bl	8010328 <rcl_take_request>
 8011f96:	b148      	cbz	r0, 8011fac <rcl_action_take_cancel_request+0x64>
 8011f98:	280a      	cmp	r0, #10
 8011f9a:	d007      	beq.n	8011fac <rcl_action_take_cancel_request+0x64>
 8011f9c:	f240 2259 	movw	r2, #601	@ 0x259
 8011fa0:	f640 0399 	movw	r3, #2201	@ 0x899
 8011fa4:	4290      	cmp	r0, r2
 8011fa6:	bf0c      	ite	eq
 8011fa8:	4618      	moveq	r0, r3
 8011faa:	2001      	movne	r0, #1
 8011fac:	bd70      	pop	{r4, r5, r6, pc}
 8011fae:	f7f7 fc9f 	bl	80098f0 <rcutils_reset_error>
 8011fb2:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fb6:	bd70      	pop	{r4, r5, r6, pc}
 8011fb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fbc:	bd70      	pop	{r4, r5, r6, pc}
 8011fbe:	200b      	movs	r0, #11
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
 8011fc2:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fc6:	4770      	bx	lr

08011fc8 <rcl_action_send_cancel_response>:
 8011fc8:	b398      	cbz	r0, 8012032 <rcl_action_send_cancel_response+0x6a>
 8011fca:	b570      	push	{r4, r5, r6, lr}
 8011fcc:	4604      	mov	r4, r0
 8011fce:	6800      	ldr	r0, [r0, #0]
 8011fd0:	b350      	cbz	r0, 8012028 <rcl_action_send_cancel_response+0x60>
 8011fd2:	460d      	mov	r5, r1
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	f7fe f9ff 	bl	80103d8 <rcl_service_is_valid>
 8011fda:	b300      	cbz	r0, 801201e <rcl_action_send_cancel_response+0x56>
 8011fdc:	6820      	ldr	r0, [r4, #0]
 8011fde:	3004      	adds	r0, #4
 8011fe0:	f7fe f9fa 	bl	80103d8 <rcl_service_is_valid>
 8011fe4:	b1d8      	cbz	r0, 801201e <rcl_action_send_cancel_response+0x56>
 8011fe6:	6820      	ldr	r0, [r4, #0]
 8011fe8:	3008      	adds	r0, #8
 8011fea:	f7fe f9f5 	bl	80103d8 <rcl_service_is_valid>
 8011fee:	b1b0      	cbz	r0, 801201e <rcl_action_send_cancel_response+0x56>
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	300c      	adds	r0, #12
 8011ff4:	f7f6 fc9c 	bl	8008930 <rcl_publisher_is_valid>
 8011ff8:	b188      	cbz	r0, 801201e <rcl_action_send_cancel_response+0x56>
 8011ffa:	6820      	ldr	r0, [r4, #0]
 8011ffc:	3010      	adds	r0, #16
 8011ffe:	f7f6 fc97 	bl	8008930 <rcl_publisher_is_valid>
 8012002:	b160      	cbz	r0, 801201e <rcl_action_send_cancel_response+0x56>
 8012004:	b19d      	cbz	r5, 801202e <rcl_action_send_cancel_response+0x66>
 8012006:	b196      	cbz	r6, 801202e <rcl_action_send_cancel_response+0x66>
 8012008:	6820      	ldr	r0, [r4, #0]
 801200a:	4632      	mov	r2, r6
 801200c:	4629      	mov	r1, r5
 801200e:	3004      	adds	r0, #4
 8012010:	f7fe f9ca 	bl	80103a8 <rcl_send_response>
 8012014:	b110      	cbz	r0, 801201c <rcl_action_send_cancel_response+0x54>
 8012016:	2802      	cmp	r0, #2
 8012018:	bf18      	it	ne
 801201a:	2001      	movne	r0, #1
 801201c:	bd70      	pop	{r4, r5, r6, pc}
 801201e:	f7f7 fc67 	bl	80098f0 <rcutils_reset_error>
 8012022:	f640 0098 	movw	r0, #2200	@ 0x898
 8012026:	bd70      	pop	{r4, r5, r6, pc}
 8012028:	f640 0098 	movw	r0, #2200	@ 0x898
 801202c:	bd70      	pop	{r4, r5, r6, pc}
 801202e:	200b      	movs	r0, #11
 8012030:	bd70      	pop	{r4, r5, r6, pc}
 8012032:	f640 0098 	movw	r0, #2200	@ 0x898
 8012036:	4770      	bx	lr

08012038 <rcl_action_wait_set_add_action_server>:
 8012038:	2800      	cmp	r0, #0
 801203a:	d04d      	beq.n	80120d8 <rcl_action_wait_set_add_action_server+0xa0>
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	460c      	mov	r4, r1
 8012040:	b159      	cbz	r1, 801205a <rcl_action_wait_set_add_action_server+0x22>
 8012042:	4605      	mov	r5, r0
 8012044:	6808      	ldr	r0, [r1, #0]
 8012046:	b140      	cbz	r0, 801205a <rcl_action_wait_set_add_action_server+0x22>
 8012048:	4616      	mov	r6, r2
 801204a:	f7fe f9c5 	bl	80103d8 <rcl_service_is_valid>
 801204e:	b120      	cbz	r0, 801205a <rcl_action_wait_set_add_action_server+0x22>
 8012050:	6820      	ldr	r0, [r4, #0]
 8012052:	3004      	adds	r0, #4
 8012054:	f7fe f9c0 	bl	80103d8 <rcl_service_is_valid>
 8012058:	b910      	cbnz	r0, 8012060 <rcl_action_wait_set_add_action_server+0x28>
 801205a:	f640 0098 	movw	r0, #2200	@ 0x898
 801205e:	bd70      	pop	{r4, r5, r6, pc}
 8012060:	6820      	ldr	r0, [r4, #0]
 8012062:	3008      	adds	r0, #8
 8012064:	f7fe f9b8 	bl	80103d8 <rcl_service_is_valid>
 8012068:	2800      	cmp	r0, #0
 801206a:	d0f6      	beq.n	801205a <rcl_action_wait_set_add_action_server+0x22>
 801206c:	6820      	ldr	r0, [r4, #0]
 801206e:	300c      	adds	r0, #12
 8012070:	f7f6 fc76 	bl	8008960 <rcl_publisher_is_valid_except_context>
 8012074:	2800      	cmp	r0, #0
 8012076:	d0f0      	beq.n	801205a <rcl_action_wait_set_add_action_server+0x22>
 8012078:	6820      	ldr	r0, [r4, #0]
 801207a:	3010      	adds	r0, #16
 801207c:	f7f6 fc70 	bl	8008960 <rcl_publisher_is_valid_except_context>
 8012080:	2800      	cmp	r0, #0
 8012082:	d0ea      	beq.n	801205a <rcl_action_wait_set_add_action_server+0x22>
 8012084:	6821      	ldr	r1, [r4, #0]
 8012086:	4628      	mov	r0, r5
 8012088:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801208c:	f7ff fad0 	bl	8011630 <rcl_wait_set_add_service>
 8012090:	2800      	cmp	r0, #0
 8012092:	d1e4      	bne.n	801205e <rcl_action_wait_set_add_action_server+0x26>
 8012094:	6821      	ldr	r1, [r4, #0]
 8012096:	4628      	mov	r0, r5
 8012098:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801209c:	3104      	adds	r1, #4
 801209e:	f7ff fac7 	bl	8011630 <rcl_wait_set_add_service>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d1db      	bne.n	801205e <rcl_action_wait_set_add_action_server+0x26>
 80120a6:	6821      	ldr	r1, [r4, #0]
 80120a8:	4628      	mov	r0, r5
 80120aa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80120ae:	3108      	adds	r1, #8
 80120b0:	f7ff fabe 	bl	8011630 <rcl_wait_set_add_service>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d1d2      	bne.n	801205e <rcl_action_wait_set_add_action_server+0x26>
 80120b8:	6821      	ldr	r1, [r4, #0]
 80120ba:	4628      	mov	r0, r5
 80120bc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80120c0:	3114      	adds	r1, #20
 80120c2:	f7ff fa59 	bl	8011578 <rcl_wait_set_add_timer>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d1c9      	bne.n	801205e <rcl_action_wait_set_add_action_server+0x26>
 80120ca:	2e00      	cmp	r6, #0
 80120cc:	d0c7      	beq.n	801205e <rcl_action_wait_set_add_action_server+0x26>
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80120d4:	6033      	str	r3, [r6, #0]
 80120d6:	bd70      	pop	{r4, r5, r6, pc}
 80120d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop

080120e0 <rcl_action_server_wait_set_get_entities_ready>:
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d05a      	beq.n	801219a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80120e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e6:	460c      	mov	r4, r1
 80120e8:	b161      	cbz	r1, 8012104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80120ea:	4605      	mov	r5, r0
 80120ec:	6808      	ldr	r0, [r1, #0]
 80120ee:	b148      	cbz	r0, 8012104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80120f0:	4616      	mov	r6, r2
 80120f2:	461f      	mov	r7, r3
 80120f4:	f7fe f970 	bl	80103d8 <rcl_service_is_valid>
 80120f8:	b120      	cbz	r0, 8012104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80120fa:	6820      	ldr	r0, [r4, #0]
 80120fc:	3004      	adds	r0, #4
 80120fe:	f7fe f96b 	bl	80103d8 <rcl_service_is_valid>
 8012102:	b910      	cbnz	r0, 801210a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012104:	f640 0098 	movw	r0, #2200	@ 0x898
 8012108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801210a:	6820      	ldr	r0, [r4, #0]
 801210c:	3008      	adds	r0, #8
 801210e:	f7fe f963 	bl	80103d8 <rcl_service_is_valid>
 8012112:	2800      	cmp	r0, #0
 8012114:	d0f6      	beq.n	8012104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012116:	6820      	ldr	r0, [r4, #0]
 8012118:	300c      	adds	r0, #12
 801211a:	f7f6 fc21 	bl	8008960 <rcl_publisher_is_valid_except_context>
 801211e:	2800      	cmp	r0, #0
 8012120:	d0f0      	beq.n	8012104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012122:	6820      	ldr	r0, [r4, #0]
 8012124:	3010      	adds	r0, #16
 8012126:	f7f6 fc1b 	bl	8008960 <rcl_publisher_is_valid_except_context>
 801212a:	2800      	cmp	r0, #0
 801212c:	d0ea      	beq.n	8012104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801212e:	b3be      	cbz	r6, 80121a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012130:	b3b7      	cbz	r7, 80121a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012132:	9b06      	ldr	r3, [sp, #24]
 8012134:	b3a3      	cbz	r3, 80121a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012136:	9b07      	ldr	r3, [sp, #28]
 8012138:	b393      	cbz	r3, 80121a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801213a:	6821      	ldr	r1, [r4, #0]
 801213c:	692a      	ldr	r2, [r5, #16]
 801213e:	6a2c      	ldr	r4, [r5, #32]
 8012140:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8012144:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012148:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801214c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012150:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8012154:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012158:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801215c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012160:	1a64      	subs	r4, r4, r1
 8012162:	fab4 f484 	clz	r4, r4
 8012166:	0964      	lsrs	r4, r4, #5
 8012168:	7034      	strb	r4, [r6, #0]
 801216a:	1d0c      	adds	r4, r1, #4
 801216c:	1b1b      	subs	r3, r3, r4
 801216e:	fab3 f383 	clz	r3, r3
 8012172:	095b      	lsrs	r3, r3, #5
 8012174:	f101 0408 	add.w	r4, r1, #8
 8012178:	703b      	strb	r3, [r7, #0]
 801217a:	f101 0314 	add.w	r3, r1, #20
 801217e:	1b01      	subs	r1, r0, r4
 8012180:	1ad3      	subs	r3, r2, r3
 8012182:	fab1 f181 	clz	r1, r1
 8012186:	9a06      	ldr	r2, [sp, #24]
 8012188:	0949      	lsrs	r1, r1, #5
 801218a:	7011      	strb	r1, [r2, #0]
 801218c:	fab3 f383 	clz	r3, r3
 8012190:	9a07      	ldr	r2, [sp, #28]
 8012192:	095b      	lsrs	r3, r3, #5
 8012194:	2000      	movs	r0, #0
 8012196:	7013      	strb	r3, [r2, #0]
 8012198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801219a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801219e:	4770      	bx	lr
 80121a0:	200b      	movs	r0, #11
 80121a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080121a4 <_execute_event_handler>:
 80121a4:	2002      	movs	r0, #2
 80121a6:	4770      	bx	lr

080121a8 <_cancel_goal_event_handler>:
 80121a8:	2003      	movs	r0, #3
 80121aa:	4770      	bx	lr

080121ac <_succeed_event_handler>:
 80121ac:	2004      	movs	r0, #4
 80121ae:	4770      	bx	lr

080121b0 <_abort_event_handler>:
 80121b0:	2006      	movs	r0, #6
 80121b2:	4770      	bx	lr

080121b4 <_canceled_event_handler>:
 80121b4:	2005      	movs	r0, #5
 80121b6:	4770      	bx	lr

080121b8 <rcl_action_transition_goal_state>:
 80121b8:	b2c2      	uxtb	r2, r0
 80121ba:	2a06      	cmp	r2, #6
 80121bc:	d80c      	bhi.n	80121d8 <rcl_action_transition_goal_state+0x20>
 80121be:	2904      	cmp	r1, #4
 80121c0:	d80a      	bhi.n	80121d8 <rcl_action_transition_goal_state+0x20>
 80121c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80121c6:	b410      	push	{r4}
 80121c8:	1853      	adds	r3, r2, r1
 80121ca:	4c06      	ldr	r4, [pc, #24]	@ (80121e4 <rcl_action_transition_goal_state+0x2c>)
 80121cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80121d0:	b123      	cbz	r3, 80121dc <rcl_action_transition_goal_state+0x24>
 80121d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121d6:	4718      	bx	r3
 80121d8:	2000      	movs	r0, #0
 80121da:	4770      	bx	lr
 80121dc:	2000      	movs	r0, #0
 80121de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121e2:	4770      	bx	lr
 80121e4:	080170e0 	.word	0x080170e0

080121e8 <rcl_action_get_zero_initialized_cancel_response>:
 80121e8:	b510      	push	{r4, lr}
 80121ea:	4c07      	ldr	r4, [pc, #28]	@ (8012208 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80121ec:	4686      	mov	lr, r0
 80121ee:	4684      	mov	ip, r0
 80121f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121fc:	6823      	ldr	r3, [r4, #0]
 80121fe:	f8cc 3000 	str.w	r3, [ip]
 8012202:	4670      	mov	r0, lr
 8012204:	bd10      	pop	{r4, pc}
 8012206:	bf00      	nop
 8012208:	0801716c 	.word	0x0801716c

0801220c <rclc_action_send_result_request>:
 801220c:	b1d0      	cbz	r0, 8012244 <rclc_action_send_result_request+0x38>
 801220e:	b500      	push	{lr}
 8012210:	4684      	mov	ip, r0
 8012212:	b087      	sub	sp, #28
 8012214:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012218:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801221c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012220:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012224:	f10d 0e08 	add.w	lr, sp, #8
 8012228:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801222c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012230:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012234:	a902      	add	r1, sp, #8
 8012236:	3010      	adds	r0, #16
 8012238:	f7ff fbda 	bl	80119f0 <rcl_action_send_result_request>
 801223c:	b920      	cbnz	r0, 8012248 <rclc_action_send_result_request+0x3c>
 801223e:	b007      	add	sp, #28
 8012240:	f85d fb04 	ldr.w	pc, [sp], #4
 8012244:	200b      	movs	r0, #11
 8012246:	4770      	bx	lr
 8012248:	9001      	str	r0, [sp, #4]
 801224a:	f7f7 fb51 	bl	80098f0 <rcutils_reset_error>
 801224e:	9801      	ldr	r0, [sp, #4]
 8012250:	b007      	add	sp, #28
 8012252:	f85d fb04 	ldr.w	pc, [sp], #4
 8012256:	bf00      	nop

08012258 <rclc_action_take_goal_handle>:
 8012258:	b160      	cbz	r0, 8012274 <rclc_action_take_goal_handle+0x1c>
 801225a:	6883      	ldr	r3, [r0, #8]
 801225c:	b143      	cbz	r3, 8012270 <rclc_action_take_goal_handle+0x18>
 801225e:	6819      	ldr	r1, [r3, #0]
 8012260:	6081      	str	r1, [r0, #8]
 8012262:	2200      	movs	r2, #0
 8012264:	721a      	strb	r2, [r3, #8]
 8012266:	68c1      	ldr	r1, [r0, #12]
 8012268:	6019      	str	r1, [r3, #0]
 801226a:	621a      	str	r2, [r3, #32]
 801226c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801226e:	60c3      	str	r3, [r0, #12]
 8012270:	4618      	mov	r0, r3
 8012272:	4770      	bx	lr
 8012274:	4603      	mov	r3, r0
 8012276:	e7fb      	b.n	8012270 <rclc_action_take_goal_handle+0x18>

08012278 <rclc_action_remove_used_goal_handle>:
 8012278:	b180      	cbz	r0, 801229c <rclc_action_remove_used_goal_handle+0x24>
 801227a:	b179      	cbz	r1, 801229c <rclc_action_remove_used_goal_handle+0x24>
 801227c:	68c3      	ldr	r3, [r0, #12]
 801227e:	4299      	cmp	r1, r3
 8012280:	d00d      	beq.n	801229e <rclc_action_remove_used_goal_handle+0x26>
 8012282:	b12b      	cbz	r3, 8012290 <rclc_action_remove_used_goal_handle+0x18>
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	4291      	cmp	r1, r2
 8012288:	d003      	beq.n	8012292 <rclc_action_remove_used_goal_handle+0x1a>
 801228a:	4613      	mov	r3, r2
 801228c:	2b00      	cmp	r3, #0
 801228e:	d1f9      	bne.n	8012284 <rclc_action_remove_used_goal_handle+0xc>
 8012290:	4770      	bx	lr
 8012292:	680a      	ldr	r2, [r1, #0]
 8012294:	601a      	str	r2, [r3, #0]
 8012296:	6883      	ldr	r3, [r0, #8]
 8012298:	600b      	str	r3, [r1, #0]
 801229a:	6081      	str	r1, [r0, #8]
 801229c:	4770      	bx	lr
 801229e:	680b      	ldr	r3, [r1, #0]
 80122a0:	60c3      	str	r3, [r0, #12]
 80122a2:	e7f8      	b.n	8012296 <rclc_action_remove_used_goal_handle+0x1e>

080122a4 <rclc_action_find_goal_handle_by_uuid>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	b180      	cbz	r0, 80122ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80122a8:	460d      	mov	r5, r1
 80122aa:	b181      	cbz	r1, 80122ce <rclc_action_find_goal_handle_by_uuid+0x2a>
 80122ac:	68c4      	ldr	r4, [r0, #12]
 80122ae:	b914      	cbnz	r4, 80122b6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80122b0:	e009      	b.n	80122c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80122b2:	6824      	ldr	r4, [r4, #0]
 80122b4:	b13c      	cbz	r4, 80122c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80122b6:	f104 0009 	add.w	r0, r4, #9
 80122ba:	2210      	movs	r2, #16
 80122bc:	4629      	mov	r1, r5
 80122be:	f003 f9ff 	bl	80156c0 <memcmp>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d1f5      	bne.n	80122b2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80122c6:	4620      	mov	r0, r4
 80122c8:	bd38      	pop	{r3, r4, r5, pc}
 80122ca:	4604      	mov	r4, r0
 80122cc:	e7fb      	b.n	80122c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80122ce:	460c      	mov	r4, r1
 80122d0:	e7f9      	b.n	80122c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80122d2:	bf00      	nop

080122d4 <rclc_action_find_first_handle_by_status>:
 80122d4:	b140      	cbz	r0, 80122e8 <rclc_action_find_first_handle_by_status+0x14>
 80122d6:	68c0      	ldr	r0, [r0, #12]
 80122d8:	b910      	cbnz	r0, 80122e0 <rclc_action_find_first_handle_by_status+0xc>
 80122da:	e005      	b.n	80122e8 <rclc_action_find_first_handle_by_status+0x14>
 80122dc:	6800      	ldr	r0, [r0, #0]
 80122de:	b118      	cbz	r0, 80122e8 <rclc_action_find_first_handle_by_status+0x14>
 80122e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80122e4:	428b      	cmp	r3, r1
 80122e6:	d1f9      	bne.n	80122dc <rclc_action_find_first_handle_by_status+0x8>
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop

080122ec <rclc_action_find_first_terminated_handle>:
 80122ec:	b140      	cbz	r0, 8012300 <rclc_action_find_first_terminated_handle+0x14>
 80122ee:	68c0      	ldr	r0, [r0, #12]
 80122f0:	b910      	cbnz	r0, 80122f8 <rclc_action_find_first_terminated_handle+0xc>
 80122f2:	e005      	b.n	8012300 <rclc_action_find_first_terminated_handle+0x14>
 80122f4:	6800      	ldr	r0, [r0, #0]
 80122f6:	b118      	cbz	r0, 8012300 <rclc_action_find_first_terminated_handle+0x14>
 80122f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80122fc:	2b03      	cmp	r3, #3
 80122fe:	ddf9      	ble.n	80122f4 <rclc_action_find_first_terminated_handle+0x8>
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop

08012304 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012304:	b170      	cbz	r0, 8012324 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012306:	68c0      	ldr	r0, [r0, #12]
 8012308:	b160      	cbz	r0, 8012324 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801230a:	b410      	push	{r4}
 801230c:	e001      	b.n	8012312 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801230e:	6800      	ldr	r0, [r0, #0]
 8012310:	b128      	cbz	r0, 801231e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012312:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012316:	4299      	cmp	r1, r3
 8012318:	bf08      	it	eq
 801231a:	4294      	cmpeq	r4, r2
 801231c:	d1f7      	bne.n	801230e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801231e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012322:	4770      	bx	lr
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop

08012328 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012328:	b170      	cbz	r0, 8012348 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801232a:	68c0      	ldr	r0, [r0, #12]
 801232c:	b160      	cbz	r0, 8012348 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801232e:	b410      	push	{r4}
 8012330:	e001      	b.n	8012336 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012332:	6800      	ldr	r0, [r0, #0]
 8012334:	b128      	cbz	r0, 8012342 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012336:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801233a:	4299      	cmp	r1, r3
 801233c:	bf08      	it	eq
 801233e:	4294      	cmpeq	r4, r2
 8012340:	d1f7      	bne.n	8012332 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012346:	4770      	bx	lr
 8012348:	4770      	bx	lr
 801234a:	bf00      	nop

0801234c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801234c:	b170      	cbz	r0, 801236c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801234e:	68c0      	ldr	r0, [r0, #12]
 8012350:	b160      	cbz	r0, 801236c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012352:	b410      	push	{r4}
 8012354:	e001      	b.n	801235a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012356:	6800      	ldr	r0, [r0, #0]
 8012358:	b128      	cbz	r0, 8012366 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801235a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801235e:	4299      	cmp	r1, r3
 8012360:	bf08      	it	eq
 8012362:	4294      	cmpeq	r4, r2
 8012364:	d1f7      	bne.n	8012356 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801236a:	4770      	bx	lr
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop

08012370 <rclc_action_find_first_handle_with_goal_response>:
 8012370:	b140      	cbz	r0, 8012384 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012372:	68c0      	ldr	r0, [r0, #12]
 8012374:	b910      	cbnz	r0, 801237c <rclc_action_find_first_handle_with_goal_response+0xc>
 8012376:	e005      	b.n	8012384 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012378:	6800      	ldr	r0, [r0, #0]
 801237a:	b118      	cbz	r0, 8012384 <rclc_action_find_first_handle_with_goal_response+0x14>
 801237c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d0f9      	beq.n	8012378 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop

08012388 <rclc_action_find_first_handle_with_result_response>:
 8012388:	b140      	cbz	r0, 801239c <rclc_action_find_first_handle_with_result_response+0x14>
 801238a:	68c0      	ldr	r0, [r0, #12]
 801238c:	b910      	cbnz	r0, 8012394 <rclc_action_find_first_handle_with_result_response+0xc>
 801238e:	e005      	b.n	801239c <rclc_action_find_first_handle_with_result_response+0x14>
 8012390:	6800      	ldr	r0, [r0, #0]
 8012392:	b118      	cbz	r0, 801239c <rclc_action_find_first_handle_with_result_response+0x14>
 8012394:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012398:	2b00      	cmp	r3, #0
 801239a:	d0f9      	beq.n	8012390 <rclc_action_find_first_handle_with_result_response+0x8>
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop

080123a0 <rclc_action_server_response_goal_request>:
 80123a0:	b198      	cbz	r0, 80123ca <rclc_action_server_response_goal_request+0x2a>
 80123a2:	b510      	push	{r4, lr}
 80123a4:	6844      	ldr	r4, [r0, #4]
 80123a6:	b086      	sub	sp, #24
 80123a8:	2200      	movs	r2, #0
 80123aa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80123ae:	460b      	mov	r3, r1
 80123b0:	9205      	str	r2, [sp, #20]
 80123b2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80123b6:	aa03      	add	r2, sp, #12
 80123b8:	f104 0010 	add.w	r0, r4, #16
 80123bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80123c0:	f7ff fd4a 	bl	8011e58 <rcl_action_send_goal_response>
 80123c4:	b918      	cbnz	r0, 80123ce <rclc_action_server_response_goal_request+0x2e>
 80123c6:	b006      	add	sp, #24
 80123c8:	bd10      	pop	{r4, pc}
 80123ca:	200b      	movs	r0, #11
 80123cc:	4770      	bx	lr
 80123ce:	9001      	str	r0, [sp, #4]
 80123d0:	f7f7 fa8e 	bl	80098f0 <rcutils_reset_error>
 80123d4:	9801      	ldr	r0, [sp, #4]
 80123d6:	b006      	add	sp, #24
 80123d8:	bd10      	pop	{r4, pc}
 80123da:	bf00      	nop
 80123dc:	0000      	movs	r0, r0
	...

080123e0 <rclc_action_server_goal_cancel_accept>:
 80123e0:	b310      	cbz	r0, 8012428 <rclc_action_server_goal_cancel_accept+0x48>
 80123e2:	b510      	push	{r4, lr}
 80123e4:	b090      	sub	sp, #64	@ 0x40
 80123e6:	4604      	mov	r4, r0
 80123e8:	a806      	add	r0, sp, #24
 80123ea:	f7ff fefd 	bl	80121e8 <rcl_action_get_zero_initialized_cancel_response>
 80123ee:	2300      	movs	r3, #0
 80123f0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80123f4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80123f8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80123fc:	f88d 3018 	strb.w	r3, [sp, #24]
 8012400:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012404:	f8cd d01c 	str.w	sp, [sp, #28]
 8012408:	46ec      	mov	ip, sp
 801240a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801240e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012430 <rclc_action_server_goal_cancel_accept+0x50>
 8012412:	6860      	ldr	r0, [r4, #4]
 8012414:	aa06      	add	r2, sp, #24
 8012416:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801241a:	3010      	adds	r0, #16
 801241c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012420:	f7ff fdd2 	bl	8011fc8 <rcl_action_send_cancel_response>
 8012424:	b010      	add	sp, #64	@ 0x40
 8012426:	bd10      	pop	{r4, pc}
 8012428:	200b      	movs	r0, #11
 801242a:	4770      	bx	lr
 801242c:	f3af 8000 	nop.w
 8012430:	00000001 	.word	0x00000001
 8012434:	00000001 	.word	0x00000001

08012438 <rclc_action_server_goal_cancel_reject>:
 8012438:	b082      	sub	sp, #8
 801243a:	b530      	push	{r4, r5, lr}
 801243c:	b08b      	sub	sp, #44	@ 0x2c
 801243e:	ac0e      	add	r4, sp, #56	@ 0x38
 8012440:	e884 000c 	stmia.w	r4, {r2, r3}
 8012444:	b188      	cbz	r0, 801246a <rclc_action_server_goal_cancel_reject+0x32>
 8012446:	4604      	mov	r4, r0
 8012448:	a801      	add	r0, sp, #4
 801244a:	460d      	mov	r5, r1
 801244c:	f7ff fecc 	bl	80121e8 <rcl_action_get_zero_initialized_cancel_response>
 8012450:	aa01      	add	r2, sp, #4
 8012452:	a90e      	add	r1, sp, #56	@ 0x38
 8012454:	f104 0010 	add.w	r0, r4, #16
 8012458:	f88d 5004 	strb.w	r5, [sp, #4]
 801245c:	f7ff fdb4 	bl	8011fc8 <rcl_action_send_cancel_response>
 8012460:	b00b      	add	sp, #44	@ 0x2c
 8012462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012466:	b002      	add	sp, #8
 8012468:	4770      	bx	lr
 801246a:	200b      	movs	r0, #11
 801246c:	b00b      	add	sp, #44	@ 0x2c
 801246e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012472:	b002      	add	sp, #8
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop

08012478 <__atomic_load_8>:
 8012478:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801247c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012480:	4a15      	ldr	r2, [pc, #84]	@ (80124d8 <__atomic_load_8+0x60>)
 8012482:	4b16      	ldr	r3, [pc, #88]	@ (80124dc <__atomic_load_8+0x64>)
 8012484:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012488:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801248c:	fb02 f101 	mul.w	r1, r2, r1
 8012490:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012494:	fba3 2301 	umull	r2, r3, r3, r1
 8012498:	091b      	lsrs	r3, r3, #4
 801249a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801249e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80124a2:	b4d0      	push	{r4, r6, r7}
 80124a4:	4c0e      	ldr	r4, [pc, #56]	@ (80124e0 <__atomic_load_8+0x68>)
 80124a6:	1ac9      	subs	r1, r1, r3
 80124a8:	1862      	adds	r2, r4, r1
 80124aa:	f04f 0c01 	mov.w	ip, #1
 80124ae:	e8d2 3f4f 	ldrexb	r3, [r2]
 80124b2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80124b6:	2e00      	cmp	r6, #0
 80124b8:	d1f9      	bne.n	80124ae <__atomic_load_8+0x36>
 80124ba:	f3bf 8f5b 	dmb	ish
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1f4      	bne.n	80124ae <__atomic_load_8+0x36>
 80124c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80124c8:	f3bf 8f5b 	dmb	ish
 80124cc:	5463      	strb	r3, [r4, r1]
 80124ce:	4630      	mov	r0, r6
 80124d0:	4639      	mov	r1, r7
 80124d2:	bcd0      	pop	{r4, r6, r7}
 80124d4:	4770      	bx	lr
 80124d6:	bf00      	nop
 80124d8:	27d4eb2d 	.word	0x27d4eb2d
 80124dc:	b21642c9 	.word	0xb21642c9
 80124e0:	2000ab40 	.word	0x2000ab40

080124e4 <__atomic_store_8>:
 80124e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80124e8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80124ec:	b570      	push	{r4, r5, r6, lr}
 80124ee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80124f2:	4c14      	ldr	r4, [pc, #80]	@ (8012544 <__atomic_store_8+0x60>)
 80124f4:	4d14      	ldr	r5, [pc, #80]	@ (8012548 <__atomic_store_8+0x64>)
 80124f6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80124fa:	fb04 f101 	mul.w	r1, r4, r1
 80124fe:	4c13      	ldr	r4, [pc, #76]	@ (801254c <__atomic_store_8+0x68>)
 8012500:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012504:	fba4 4e01 	umull	r4, lr, r4, r1
 8012508:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801250c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012510:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012514:	eba1 0e0e 	sub.w	lr, r1, lr
 8012518:	eb05 0c0e 	add.w	ip, r5, lr
 801251c:	f04f 0401 	mov.w	r4, #1
 8012520:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012524:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012528:	2e00      	cmp	r6, #0
 801252a:	d1f9      	bne.n	8012520 <__atomic_store_8+0x3c>
 801252c:	f3bf 8f5b 	dmb	ish
 8012530:	b2c9      	uxtb	r1, r1
 8012532:	2900      	cmp	r1, #0
 8012534:	d1f4      	bne.n	8012520 <__atomic_store_8+0x3c>
 8012536:	e9c0 2300 	strd	r2, r3, [r0]
 801253a:	f3bf 8f5b 	dmb	ish
 801253e:	f805 100e 	strb.w	r1, [r5, lr]
 8012542:	bd70      	pop	{r4, r5, r6, pc}
 8012544:	27d4eb2d 	.word	0x27d4eb2d
 8012548:	2000ab40 	.word	0x2000ab40
 801254c:	b21642c9 	.word	0xb21642c9

08012550 <__atomic_exchange_8>:
 8012550:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012554:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012558:	4916      	ldr	r1, [pc, #88]	@ (80125b4 <__atomic_exchange_8+0x64>)
 801255a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801255e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012562:	fb01 fc0c 	mul.w	ip, r1, ip
 8012566:	4914      	ldr	r1, [pc, #80]	@ (80125b8 <__atomic_exchange_8+0x68>)
 8012568:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4605      	mov	r5, r0
 8012570:	fba1 010c 	umull	r0, r1, r1, ip
 8012574:	0909      	lsrs	r1, r1, #4
 8012576:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801257a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801257e:	4e0f      	ldr	r6, [pc, #60]	@ (80125bc <__atomic_exchange_8+0x6c>)
 8012580:	ebac 0c01 	sub.w	ip, ip, r1
 8012584:	eb06 010c 	add.w	r1, r6, ip
 8012588:	f04f 0e01 	mov.w	lr, #1
 801258c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012590:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012594:	2800      	cmp	r0, #0
 8012596:	d1f9      	bne.n	801258c <__atomic_exchange_8+0x3c>
 8012598:	f3bf 8f5b 	dmb	ish
 801259c:	b2e4      	uxtb	r4, r4
 801259e:	2c00      	cmp	r4, #0
 80125a0:	d1f4      	bne.n	801258c <__atomic_exchange_8+0x3c>
 80125a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80125a6:	e9c5 2300 	strd	r2, r3, [r5]
 80125aa:	f3bf 8f5b 	dmb	ish
 80125ae:	f806 400c 	strb.w	r4, [r6, ip]
 80125b2:	bd70      	pop	{r4, r5, r6, pc}
 80125b4:	27d4eb2d 	.word	0x27d4eb2d
 80125b8:	b21642c9 	.word	0xb21642c9
 80125bc:	2000ab40 	.word	0x2000ab40

080125c0 <rcutils_get_env>:
 80125c0:	b168      	cbz	r0, 80125de <rcutils_get_env+0x1e>
 80125c2:	b510      	push	{r4, lr}
 80125c4:	460c      	mov	r4, r1
 80125c6:	b129      	cbz	r1, 80125d4 <rcutils_get_env+0x14>
 80125c8:	f002 fcd0 	bl	8014f6c <getenv>
 80125cc:	b120      	cbz	r0, 80125d8 <rcutils_get_env+0x18>
 80125ce:	6020      	str	r0, [r4, #0]
 80125d0:	2000      	movs	r0, #0
 80125d2:	bd10      	pop	{r4, pc}
 80125d4:	4803      	ldr	r0, [pc, #12]	@ (80125e4 <rcutils_get_env+0x24>)
 80125d6:	bd10      	pop	{r4, pc}
 80125d8:	4b03      	ldr	r3, [pc, #12]	@ (80125e8 <rcutils_get_env+0x28>)
 80125da:	6023      	str	r3, [r4, #0]
 80125dc:	bd10      	pop	{r4, pc}
 80125de:	4803      	ldr	r0, [pc, #12]	@ (80125ec <rcutils_get_env+0x2c>)
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	08016a9c 	.word	0x08016a9c
 80125e8:	08016bc0 	.word	0x08016bc0
 80125ec:	08016a80 	.word	0x08016a80

080125f0 <rcutils_format_string_limit>:
 80125f0:	b40f      	push	{r0, r1, r2, r3}
 80125f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125f4:	b083      	sub	sp, #12
 80125f6:	ac08      	add	r4, sp, #32
 80125f8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80125fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80125fe:	b34e      	cbz	r6, 8012654 <rcutils_format_string_limit+0x64>
 8012600:	a808      	add	r0, sp, #32
 8012602:	f7f7 f94f 	bl	80098a4 <rcutils_allocator_is_valid>
 8012606:	b328      	cbz	r0, 8012654 <rcutils_format_string_limit+0x64>
 8012608:	2100      	movs	r1, #0
 801260a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801260c:	4632      	mov	r2, r6
 801260e:	4608      	mov	r0, r1
 8012610:	e9cd 3300 	strd	r3, r3, [sp]
 8012614:	f000 f8f4 	bl	8012800 <rcutils_vsnprintf>
 8012618:	1c43      	adds	r3, r0, #1
 801261a:	4605      	mov	r5, r0
 801261c:	d01a      	beq.n	8012654 <rcutils_format_string_limit+0x64>
 801261e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012620:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012622:	1c47      	adds	r7, r0, #1
 8012624:	429f      	cmp	r7, r3
 8012626:	bf84      	itt	hi
 8012628:	461f      	movhi	r7, r3
 801262a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801262e:	4638      	mov	r0, r7
 8012630:	9b08      	ldr	r3, [sp, #32]
 8012632:	4798      	blx	r3
 8012634:	4604      	mov	r4, r0
 8012636:	b168      	cbz	r0, 8012654 <rcutils_format_string_limit+0x64>
 8012638:	9b01      	ldr	r3, [sp, #4]
 801263a:	4632      	mov	r2, r6
 801263c:	4639      	mov	r1, r7
 801263e:	f000 f8df 	bl	8012800 <rcutils_vsnprintf>
 8012642:	2800      	cmp	r0, #0
 8012644:	db02      	blt.n	801264c <rcutils_format_string_limit+0x5c>
 8012646:	2300      	movs	r3, #0
 8012648:	5563      	strb	r3, [r4, r5]
 801264a:	e004      	b.n	8012656 <rcutils_format_string_limit+0x66>
 801264c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801264e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012650:	4620      	mov	r0, r4
 8012652:	4798      	blx	r3
 8012654:	2400      	movs	r4, #0
 8012656:	4620      	mov	r0, r4
 8012658:	b003      	add	sp, #12
 801265a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801265e:	b004      	add	sp, #16
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop

08012664 <rcutils_repl_str>:
 8012664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012668:	ed2d 8b02 	vpush	{d8}
 801266c:	b087      	sub	sp, #28
 801266e:	4680      	mov	r8, r0
 8012670:	4608      	mov	r0, r1
 8012672:	f8cd 8004 	str.w	r8, [sp, #4]
 8012676:	ee08 2a10 	vmov	s16, r2
 801267a:	468a      	mov	sl, r1
 801267c:	4699      	mov	r9, r3
 801267e:	f7ed fdd9 	bl	8000234 <strlen>
 8012682:	2600      	movs	r6, #0
 8012684:	4647      	mov	r7, r8
 8012686:	9002      	str	r0, [sp, #8]
 8012688:	46b3      	mov	fp, r6
 801268a:	2510      	movs	r5, #16
 801268c:	46b0      	mov	r8, r6
 801268e:	e01d      	b.n	80126cc <rcutils_repl_str+0x68>
 8012690:	f10b 0b01 	add.w	fp, fp, #1
 8012694:	455e      	cmp	r6, fp
 8012696:	d211      	bcs.n	80126bc <rcutils_repl_str+0x58>
 8012698:	442e      	add	r6, r5
 801269a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801269e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80126a2:	00b1      	lsls	r1, r6, #2
 80126a4:	4798      	blx	r3
 80126a6:	2800      	cmp	r0, #0
 80126a8:	f000 8088 	beq.w	80127bc <rcutils_repl_str+0x158>
 80126ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126b0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80126b4:	4680      	mov	r8, r0
 80126b6:	bf28      	it	cs
 80126b8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80126bc:	9a01      	ldr	r2, [sp, #4]
 80126be:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80126c2:	1aa2      	subs	r2, r4, r2
 80126c4:	f843 2c04 	str.w	r2, [r3, #-4]
 80126c8:	9b02      	ldr	r3, [sp, #8]
 80126ca:	18e7      	adds	r7, r4, r3
 80126cc:	4651      	mov	r1, sl
 80126ce:	4638      	mov	r0, r7
 80126d0:	f003 f847 	bl	8015762 <strstr>
 80126d4:	4604      	mov	r4, r0
 80126d6:	4640      	mov	r0, r8
 80126d8:	2c00      	cmp	r4, #0
 80126da:	d1d9      	bne.n	8012690 <rcutils_repl_str+0x2c>
 80126dc:	46b8      	mov	r8, r7
 80126de:	4607      	mov	r7, r0
 80126e0:	4640      	mov	r0, r8
 80126e2:	f7ed fda7 	bl	8000234 <strlen>
 80126e6:	9b01      	ldr	r3, [sp, #4]
 80126e8:	eba8 0303 	sub.w	r3, r8, r3
 80126ec:	181c      	adds	r4, r3, r0
 80126ee:	9404      	str	r4, [sp, #16]
 80126f0:	f1bb 0f00 	cmp.w	fp, #0
 80126f4:	d04a      	beq.n	801278c <rcutils_repl_str+0x128>
 80126f6:	ee18 0a10 	vmov	r0, s16
 80126fa:	f7ed fd9b 	bl	8000234 <strlen>
 80126fe:	9b02      	ldr	r3, [sp, #8]
 8012700:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012704:	1ac3      	subs	r3, r0, r3
 8012706:	fb0b 4303 	mla	r3, fp, r3, r4
 801270a:	461a      	mov	r2, r3
 801270c:	9305      	str	r3, [sp, #20]
 801270e:	4606      	mov	r6, r0
 8012710:	f8d9 3000 	ldr.w	r3, [r9]
 8012714:	1c50      	adds	r0, r2, #1
 8012716:	4798      	blx	r3
 8012718:	9003      	str	r0, [sp, #12]
 801271a:	2800      	cmp	r0, #0
 801271c:	d04f      	beq.n	80127be <rcutils_repl_str+0x15a>
 801271e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012722:	683a      	ldr	r2, [r7, #0]
 8012724:	4641      	mov	r1, r8
 8012726:	f003 f8be 	bl	80158a6 <memcpy>
 801272a:	683d      	ldr	r5, [r7, #0]
 801272c:	9b03      	ldr	r3, [sp, #12]
 801272e:	9701      	str	r7, [sp, #4]
 8012730:	46ba      	mov	sl, r7
 8012732:	441d      	add	r5, r3
 8012734:	9f02      	ldr	r7, [sp, #8]
 8012736:	f8cd 9008 	str.w	r9, [sp, #8]
 801273a:	2401      	movs	r4, #1
 801273c:	46d1      	mov	r9, sl
 801273e:	ee18 aa10 	vmov	sl, s16
 8012742:	e00a      	b.n	801275a <rcutils_repl_str+0xf6>
 8012744:	f8d9 5000 	ldr.w	r5, [r9]
 8012748:	1aaa      	subs	r2, r5, r2
 801274a:	1885      	adds	r5, r0, r2
 801274c:	f003 f8ab 	bl	80158a6 <memcpy>
 8012750:	45a3      	cmp	fp, r4
 8012752:	f104 0201 	add.w	r2, r4, #1
 8012756:	d935      	bls.n	80127c4 <rcutils_repl_str+0x160>
 8012758:	4614      	mov	r4, r2
 801275a:	4632      	mov	r2, r6
 801275c:	4651      	mov	r1, sl
 801275e:	4628      	mov	r0, r5
 8012760:	f003 f8a1 	bl	80158a6 <memcpy>
 8012764:	f859 2b04 	ldr.w	r2, [r9], #4
 8012768:	45a3      	cmp	fp, r4
 801276a:	443a      	add	r2, r7
 801276c:	eb05 0006 	add.w	r0, r5, r6
 8012770:	eb08 0102 	add.w	r1, r8, r2
 8012774:	d1e6      	bne.n	8012744 <rcutils_repl_str+0xe0>
 8012776:	9b04      	ldr	r3, [sp, #16]
 8012778:	1a9a      	subs	r2, r3, r2
 801277a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801277e:	f003 f892 	bl	80158a6 <memcpy>
 8012782:	9a03      	ldr	r2, [sp, #12]
 8012784:	9905      	ldr	r1, [sp, #20]
 8012786:	2300      	movs	r3, #0
 8012788:	5453      	strb	r3, [r2, r1]
 801278a:	e00b      	b.n	80127a4 <rcutils_repl_str+0x140>
 801278c:	4620      	mov	r0, r4
 801278e:	f8d9 3000 	ldr.w	r3, [r9]
 8012792:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012796:	3001      	adds	r0, #1
 8012798:	4798      	blx	r3
 801279a:	9003      	str	r0, [sp, #12]
 801279c:	b110      	cbz	r0, 80127a4 <rcutils_repl_str+0x140>
 801279e:	9901      	ldr	r1, [sp, #4]
 80127a0:	f003 f879 	bl	8015896 <strcpy>
 80127a4:	4638      	mov	r0, r7
 80127a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80127ae:	4798      	blx	r3
 80127b0:	9803      	ldr	r0, [sp, #12]
 80127b2:	b007      	add	sp, #28
 80127b4:	ecbd 8b02 	vpop	{d8}
 80127b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127bc:	4647      	mov	r7, r8
 80127be:	2300      	movs	r3, #0
 80127c0:	9303      	str	r3, [sp, #12]
 80127c2:	e7ef      	b.n	80127a4 <rcutils_repl_str+0x140>
 80127c4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80127c8:	e7db      	b.n	8012782 <rcutils_repl_str+0x11e>
 80127ca:	bf00      	nop

080127cc <rcutils_snprintf>:
 80127cc:	b40c      	push	{r2, r3}
 80127ce:	b530      	push	{r4, r5, lr}
 80127d0:	b083      	sub	sp, #12
 80127d2:	ab06      	add	r3, sp, #24
 80127d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	b152      	cbz	r2, 80127f2 <rcutils_snprintf+0x26>
 80127dc:	b138      	cbz	r0, 80127ee <rcutils_snprintf+0x22>
 80127de:	b141      	cbz	r1, 80127f2 <rcutils_snprintf+0x26>
 80127e0:	f002 ff60 	bl	80156a4 <vsniprintf>
 80127e4:	b003      	add	sp, #12
 80127e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127ea:	b002      	add	sp, #8
 80127ec:	4770      	bx	lr
 80127ee:	2900      	cmp	r1, #0
 80127f0:	d0f6      	beq.n	80127e0 <rcutils_snprintf+0x14>
 80127f2:	f003 f823 	bl	801583c <__errno>
 80127f6:	2316      	movs	r3, #22
 80127f8:	6003      	str	r3, [r0, #0]
 80127fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127fe:	e7f1      	b.n	80127e4 <rcutils_snprintf+0x18>

08012800 <rcutils_vsnprintf>:
 8012800:	b570      	push	{r4, r5, r6, lr}
 8012802:	b13a      	cbz	r2, 8012814 <rcutils_vsnprintf+0x14>
 8012804:	b120      	cbz	r0, 8012810 <rcutils_vsnprintf+0x10>
 8012806:	b129      	cbz	r1, 8012814 <rcutils_vsnprintf+0x14>
 8012808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801280c:	f002 bf4a 	b.w	80156a4 <vsniprintf>
 8012810:	2900      	cmp	r1, #0
 8012812:	d0f9      	beq.n	8012808 <rcutils_vsnprintf+0x8>
 8012814:	f003 f812 	bl	801583c <__errno>
 8012818:	2316      	movs	r3, #22
 801281a:	6003      	str	r3, [r0, #0]
 801281c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012820:	bd70      	pop	{r4, r5, r6, pc}
 8012822:	bf00      	nop

08012824 <rcutils_strdup>:
 8012824:	b084      	sub	sp, #16
 8012826:	b570      	push	{r4, r5, r6, lr}
 8012828:	b082      	sub	sp, #8
 801282a:	ac07      	add	r4, sp, #28
 801282c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012830:	4605      	mov	r5, r0
 8012832:	b1b0      	cbz	r0, 8012862 <rcutils_strdup+0x3e>
 8012834:	f7ed fcfe 	bl	8000234 <strlen>
 8012838:	1c42      	adds	r2, r0, #1
 801283a:	9b07      	ldr	r3, [sp, #28]
 801283c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801283e:	9201      	str	r2, [sp, #4]
 8012840:	4606      	mov	r6, r0
 8012842:	4610      	mov	r0, r2
 8012844:	4798      	blx	r3
 8012846:	4604      	mov	r4, r0
 8012848:	b128      	cbz	r0, 8012856 <rcutils_strdup+0x32>
 801284a:	9a01      	ldr	r2, [sp, #4]
 801284c:	4629      	mov	r1, r5
 801284e:	f003 f82a 	bl	80158a6 <memcpy>
 8012852:	2300      	movs	r3, #0
 8012854:	55a3      	strb	r3, [r4, r6]
 8012856:	4620      	mov	r0, r4
 8012858:	b002      	add	sp, #8
 801285a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801285e:	b004      	add	sp, #16
 8012860:	4770      	bx	lr
 8012862:	4604      	mov	r4, r0
 8012864:	e7f7      	b.n	8012856 <rcutils_strdup+0x32>
 8012866:	bf00      	nop

08012868 <rcutils_strndup>:
 8012868:	b082      	sub	sp, #8
 801286a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286c:	ac06      	add	r4, sp, #24
 801286e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012872:	4605      	mov	r5, r0
 8012874:	b188      	cbz	r0, 801289a <rcutils_strndup+0x32>
 8012876:	1c4f      	adds	r7, r1, #1
 8012878:	460e      	mov	r6, r1
 801287a:	4638      	mov	r0, r7
 801287c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801287e:	4790      	blx	r2
 8012880:	4604      	mov	r4, r0
 8012882:	b128      	cbz	r0, 8012890 <rcutils_strndup+0x28>
 8012884:	463a      	mov	r2, r7
 8012886:	4629      	mov	r1, r5
 8012888:	f003 f80d 	bl	80158a6 <memcpy>
 801288c:	2300      	movs	r3, #0
 801288e:	55a3      	strb	r3, [r4, r6]
 8012890:	4620      	mov	r0, r4
 8012892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012896:	b002      	add	sp, #8
 8012898:	4770      	bx	lr
 801289a:	4604      	mov	r4, r0
 801289c:	e7f8      	b.n	8012890 <rcutils_strndup+0x28>
 801289e:	bf00      	nop

080128a0 <rcutils_get_zero_initialized_string_map>:
 80128a0:	4b01      	ldr	r3, [pc, #4]	@ (80128a8 <rcutils_get_zero_initialized_string_map+0x8>)
 80128a2:	2000      	movs	r0, #0
 80128a4:	6018      	str	r0, [r3, #0]
 80128a6:	4770      	bx	lr
 80128a8:	2000ab58 	.word	0x2000ab58

080128ac <rcutils_string_map_reserve>:
 80128ac:	2800      	cmp	r0, #0
 80128ae:	d05f      	beq.n	8012970 <rcutils_string_map_reserve+0xc4>
 80128b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b4:	460c      	mov	r4, r1
 80128b6:	6801      	ldr	r1, [r0, #0]
 80128b8:	b082      	sub	sp, #8
 80128ba:	4605      	mov	r5, r0
 80128bc:	b129      	cbz	r1, 80128ca <rcutils_string_map_reserve+0x1e>
 80128be:	68cb      	ldr	r3, [r1, #12]
 80128c0:	42a3      	cmp	r3, r4
 80128c2:	d906      	bls.n	80128d2 <rcutils_string_map_reserve+0x26>
 80128c4:	461c      	mov	r4, r3
 80128c6:	2900      	cmp	r1, #0
 80128c8:	d1f9      	bne.n	80128be <rcutils_string_map_reserve+0x12>
 80128ca:	201f      	movs	r0, #31
 80128cc:	b002      	add	sp, #8
 80128ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d2:	688b      	ldr	r3, [r1, #8]
 80128d4:	42a3      	cmp	r3, r4
 80128d6:	d047      	beq.n	8012968 <rcutils_string_map_reserve+0xbc>
 80128d8:	6a0e      	ldr	r6, [r1, #32]
 80128da:	2c00      	cmp	r4, #0
 80128dc:	d034      	beq.n	8012948 <rcutils_string_map_reserve+0x9c>
 80128de:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80128e2:	d243      	bcs.n	801296c <rcutils_string_map_reserve+0xc0>
 80128e4:	00a7      	lsls	r7, r4, #2
 80128e6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80128ea:	6808      	ldr	r0, [r1, #0]
 80128ec:	4632      	mov	r2, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	47c0      	blx	r8
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d03a      	beq.n	801296c <rcutils_string_map_reserve+0xc0>
 80128f6:	682b      	ldr	r3, [r5, #0]
 80128f8:	4632      	mov	r2, r6
 80128fa:	6018      	str	r0, [r3, #0]
 80128fc:	4639      	mov	r1, r7
 80128fe:	6858      	ldr	r0, [r3, #4]
 8012900:	47c0      	blx	r8
 8012902:	2800      	cmp	r0, #0
 8012904:	d032      	beq.n	801296c <rcutils_string_map_reserve+0xc0>
 8012906:	682d      	ldr	r5, [r5, #0]
 8012908:	68ab      	ldr	r3, [r5, #8]
 801290a:	6068      	str	r0, [r5, #4]
 801290c:	42a3      	cmp	r3, r4
 801290e:	d226      	bcs.n	801295e <rcutils_string_map_reserve+0xb2>
 8012910:	682a      	ldr	r2, [r5, #0]
 8012912:	eb00 0c07 	add.w	ip, r0, r7
 8012916:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801291a:	45e6      	cmp	lr, ip
 801291c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012920:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012924:	d203      	bcs.n	801292e <rcutils_string_map_reserve+0x82>
 8012926:	eb02 0c07 	add.w	ip, r2, r7
 801292a:	4566      	cmp	r6, ip
 801292c:	d322      	bcc.n	8012974 <rcutils_string_map_reserve+0xc8>
 801292e:	1ae3      	subs	r3, r4, r3
 8012930:	009a      	lsls	r2, r3, #2
 8012932:	4670      	mov	r0, lr
 8012934:	2100      	movs	r1, #0
 8012936:	9201      	str	r2, [sp, #4]
 8012938:	f002 feec 	bl	8015714 <memset>
 801293c:	9a01      	ldr	r2, [sp, #4]
 801293e:	2100      	movs	r1, #0
 8012940:	4630      	mov	r0, r6
 8012942:	f002 fee7 	bl	8015714 <memset>
 8012946:	e00a      	b.n	801295e <rcutils_string_map_reserve+0xb2>
 8012948:	694f      	ldr	r7, [r1, #20]
 801294a:	6808      	ldr	r0, [r1, #0]
 801294c:	4631      	mov	r1, r6
 801294e:	47b8      	blx	r7
 8012950:	682b      	ldr	r3, [r5, #0]
 8012952:	4631      	mov	r1, r6
 8012954:	6858      	ldr	r0, [r3, #4]
 8012956:	601c      	str	r4, [r3, #0]
 8012958:	47b8      	blx	r7
 801295a:	682d      	ldr	r5, [r5, #0]
 801295c:	606c      	str	r4, [r5, #4]
 801295e:	2000      	movs	r0, #0
 8012960:	60ac      	str	r4, [r5, #8]
 8012962:	b002      	add	sp, #8
 8012964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012968:	2000      	movs	r0, #0
 801296a:	e7af      	b.n	80128cc <rcutils_string_map_reserve+0x20>
 801296c:	200a      	movs	r0, #10
 801296e:	e7ad      	b.n	80128cc <rcutils_string_map_reserve+0x20>
 8012970:	200b      	movs	r0, #11
 8012972:	4770      	bx	lr
 8012974:	1f0b      	subs	r3, r1, #4
 8012976:	4418      	add	r0, r3
 8012978:	4413      	add	r3, r2
 801297a:	3a04      	subs	r2, #4
 801297c:	4417      	add	r7, r2
 801297e:	2200      	movs	r2, #0
 8012980:	f843 2f04 	str.w	r2, [r3, #4]!
 8012984:	42bb      	cmp	r3, r7
 8012986:	f840 2f04 	str.w	r2, [r0, #4]!
 801298a:	d1f9      	bne.n	8012980 <rcutils_string_map_reserve+0xd4>
 801298c:	e7e7      	b.n	801295e <rcutils_string_map_reserve+0xb2>
 801298e:	bf00      	nop

08012990 <rcutils_string_map_init>:
 8012990:	b082      	sub	sp, #8
 8012992:	b570      	push	{r4, r5, r6, lr}
 8012994:	ac04      	add	r4, sp, #16
 8012996:	e884 000c 	stmia.w	r4, {r2, r3}
 801299a:	b380      	cbz	r0, 80129fe <rcutils_string_map_init+0x6e>
 801299c:	6806      	ldr	r6, [r0, #0]
 801299e:	4604      	mov	r4, r0
 80129a0:	b12e      	cbz	r6, 80129ae <rcutils_string_map_init+0x1e>
 80129a2:	251e      	movs	r5, #30
 80129a4:	4628      	mov	r0, r5
 80129a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129aa:	b002      	add	sp, #8
 80129ac:	4770      	bx	lr
 80129ae:	a804      	add	r0, sp, #16
 80129b0:	460d      	mov	r5, r1
 80129b2:	f7f6 ff77 	bl	80098a4 <rcutils_allocator_is_valid>
 80129b6:	b310      	cbz	r0, 80129fe <rcutils_string_map_init+0x6e>
 80129b8:	9b04      	ldr	r3, [sp, #16]
 80129ba:	9908      	ldr	r1, [sp, #32]
 80129bc:	2024      	movs	r0, #36	@ 0x24
 80129be:	4798      	blx	r3
 80129c0:	6020      	str	r0, [r4, #0]
 80129c2:	b310      	cbz	r0, 8012a0a <rcutils_string_map_init+0x7a>
 80129c4:	f10d 0e10 	add.w	lr, sp, #16
 80129c8:	e9c0 6600 	strd	r6, r6, [r0]
 80129cc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80129d0:	f100 0c10 	add.w	ip, r0, #16
 80129d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129dc:	f8de 3000 	ldr.w	r3, [lr]
 80129e0:	f8cc 3000 	str.w	r3, [ip]
 80129e4:	4629      	mov	r1, r5
 80129e6:	4620      	mov	r0, r4
 80129e8:	f7ff ff60 	bl	80128ac <rcutils_string_map_reserve>
 80129ec:	4605      	mov	r5, r0
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d0d8      	beq.n	80129a4 <rcutils_string_map_init+0x14>
 80129f2:	9b05      	ldr	r3, [sp, #20]
 80129f4:	9908      	ldr	r1, [sp, #32]
 80129f6:	6820      	ldr	r0, [r4, #0]
 80129f8:	4798      	blx	r3
 80129fa:	6026      	str	r6, [r4, #0]
 80129fc:	e7d2      	b.n	80129a4 <rcutils_string_map_init+0x14>
 80129fe:	250b      	movs	r5, #11
 8012a00:	4628      	mov	r0, r5
 8012a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a06:	b002      	add	sp, #8
 8012a08:	4770      	bx	lr
 8012a0a:	250a      	movs	r5, #10
 8012a0c:	e7ca      	b.n	80129a4 <rcutils_string_map_init+0x14>
 8012a0e:	bf00      	nop

08012a10 <rcutils_string_map_fini>:
 8012a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a14:	b082      	sub	sp, #8
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d03a      	beq.n	8012a90 <rcutils_string_map_fini+0x80>
 8012a1a:	6804      	ldr	r4, [r0, #0]
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	2c00      	cmp	r4, #0
 8012a20:	d032      	beq.n	8012a88 <rcutils_string_map_fini+0x78>
 8012a22:	68a3      	ldr	r3, [r4, #8]
 8012a24:	b32b      	cbz	r3, 8012a72 <rcutils_string_map_fini+0x62>
 8012a26:	2500      	movs	r5, #0
 8012a28:	6822      	ldr	r2, [r4, #0]
 8012a2a:	462f      	mov	r7, r5
 8012a2c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012a30:	b1e0      	cbz	r0, 8012a6c <rcutils_string_map_fini+0x5c>
 8012a32:	6a21      	ldr	r1, [r4, #32]
 8012a34:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012a38:	9101      	str	r1, [sp, #4]
 8012a3a:	47c0      	blx	r8
 8012a3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012a40:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012a44:	9901      	ldr	r1, [sp, #4]
 8012a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a4a:	47c0      	blx	r8
 8012a4c:	68e3      	ldr	r3, [r4, #12]
 8012a4e:	6862      	ldr	r2, [r4, #4]
 8012a50:	3b01      	subs	r3, #1
 8012a52:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012a56:	60e3      	str	r3, [r4, #12]
 8012a58:	6834      	ldr	r4, [r6, #0]
 8012a5a:	68a3      	ldr	r3, [r4, #8]
 8012a5c:	3501      	adds	r5, #1
 8012a5e:	429d      	cmp	r5, r3
 8012a60:	d207      	bcs.n	8012a72 <rcutils_string_map_fini+0x62>
 8012a62:	6822      	ldr	r2, [r4, #0]
 8012a64:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d1e2      	bne.n	8012a32 <rcutils_string_map_fini+0x22>
 8012a6c:	3501      	adds	r5, #1
 8012a6e:	429d      	cmp	r5, r3
 8012a70:	d3dc      	bcc.n	8012a2c <rcutils_string_map_fini+0x1c>
 8012a72:	2100      	movs	r1, #0
 8012a74:	4630      	mov	r0, r6
 8012a76:	f7ff ff19 	bl	80128ac <rcutils_string_map_reserve>
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	b920      	cbnz	r0, 8012a88 <rcutils_string_map_fini+0x78>
 8012a7e:	6830      	ldr	r0, [r6, #0]
 8012a80:	6943      	ldr	r3, [r0, #20]
 8012a82:	6a01      	ldr	r1, [r0, #32]
 8012a84:	4798      	blx	r3
 8012a86:	6034      	str	r4, [r6, #0]
 8012a88:	4620      	mov	r0, r4
 8012a8a:	b002      	add	sp, #8
 8012a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a90:	240b      	movs	r4, #11
 8012a92:	4620      	mov	r0, r4
 8012a94:	b002      	add	sp, #8
 8012a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a9a:	bf00      	nop

08012a9c <rcutils_string_map_getn>:
 8012a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa0:	b300      	cbz	r0, 8012ae4 <rcutils_string_map_getn+0x48>
 8012aa2:	6807      	ldr	r7, [r0, #0]
 8012aa4:	b1ff      	cbz	r7, 8012ae6 <rcutils_string_map_getn+0x4a>
 8012aa6:	4688      	mov	r8, r1
 8012aa8:	b1e1      	cbz	r1, 8012ae4 <rcutils_string_map_getn+0x48>
 8012aaa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012aae:	683e      	ldr	r6, [r7, #0]
 8012ab0:	f1ba 0f00 	cmp.w	sl, #0
 8012ab4:	d016      	beq.n	8012ae4 <rcutils_string_map_getn+0x48>
 8012ab6:	4691      	mov	r9, r2
 8012ab8:	3e04      	subs	r6, #4
 8012aba:	2400      	movs	r4, #0
 8012abc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012ac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	3401      	adds	r4, #1
 8012ac8:	b155      	cbz	r5, 8012ae0 <rcutils_string_map_getn+0x44>
 8012aca:	f7ed fbb3 	bl	8000234 <strlen>
 8012ace:	4548      	cmp	r0, r9
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	bf38      	it	cc
 8012ad6:	464a      	movcc	r2, r9
 8012ad8:	4640      	mov	r0, r8
 8012ada:	f002 fe30 	bl	801573e <strncmp>
 8012ade:	b128      	cbz	r0, 8012aec <rcutils_string_map_getn+0x50>
 8012ae0:	45a2      	cmp	sl, r4
 8012ae2:	d1eb      	bne.n	8012abc <rcutils_string_map_getn+0x20>
 8012ae4:	2700      	movs	r7, #0
 8012ae6:	4638      	mov	r0, r7
 8012ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f853 700b 	ldr.w	r7, [r3, fp]
 8012af2:	4638      	mov	r0, r7
 8012af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012af8 <rmw_get_zero_initialized_context>:
 8012af8:	b510      	push	{r4, lr}
 8012afa:	4604      	mov	r4, r0
 8012afc:	3010      	adds	r0, #16
 8012afe:	f7f6 ff63 	bl	80099c8 <rmw_get_zero_initialized_init_options>
 8012b02:	2300      	movs	r3, #0
 8012b04:	2000      	movs	r0, #0
 8012b06:	2100      	movs	r1, #0
 8012b08:	e9c4 0100 	strd	r0, r1, [r4]
 8012b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012b10:	60a3      	str	r3, [r4, #8]
 8012b12:	4620      	mov	r0, r4
 8012b14:	bd10      	pop	{r4, pc}
 8012b16:	bf00      	nop

08012b18 <rmw_subscription_content_filter_options_fini>:
 8012b18:	b1b0      	cbz	r0, 8012b48 <rmw_subscription_content_filter_options_fini+0x30>
 8012b1a:	b538      	push	{r3, r4, r5, lr}
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	4608      	mov	r0, r1
 8012b20:	460d      	mov	r5, r1
 8012b22:	f7f6 febf 	bl	80098a4 <rcutils_allocator_is_valid>
 8012b26:	b168      	cbz	r0, 8012b44 <rmw_subscription_content_filter_options_fini+0x2c>
 8012b28:	6820      	ldr	r0, [r4, #0]
 8012b2a:	b120      	cbz	r0, 8012b36 <rmw_subscription_content_filter_options_fini+0x1e>
 8012b2c:	686b      	ldr	r3, [r5, #4]
 8012b2e:	6929      	ldr	r1, [r5, #16]
 8012b30:	4798      	blx	r3
 8012b32:	2300      	movs	r3, #0
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	1d20      	adds	r0, r4, #4
 8012b38:	f002 f99c 	bl	8014e74 <rcutils_string_array_fini>
 8012b3c:	3800      	subs	r0, #0
 8012b3e:	bf18      	it	ne
 8012b40:	2001      	movne	r0, #1
 8012b42:	bd38      	pop	{r3, r4, r5, pc}
 8012b44:	200b      	movs	r0, #11
 8012b46:	bd38      	pop	{r3, r4, r5, pc}
 8012b48:	200b      	movs	r0, #11
 8012b4a:	4770      	bx	lr

08012b4c <rmw_get_default_subscription_options>:
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	e9c0 2200 	strd	r2, r2, [r0]
 8012b52:	6082      	str	r2, [r0, #8]
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop

08012b58 <rmw_time_equal>:
 8012b58:	b4f0      	push	{r4, r5, r6, r7}
 8012b5a:	b084      	sub	sp, #16
 8012b5c:	ac04      	add	r4, sp, #16
 8012b5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012b62:	4603      	mov	r3, r0
 8012b64:	4924      	ldr	r1, [pc, #144]	@ (8012bf8 <rmw_time_equal+0xa0>)
 8012b66:	9e03      	ldr	r6, [sp, #12]
 8012b68:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012b6c:	2202      	movs	r2, #2
 8012b6e:	4299      	cmp	r1, r3
 8012b70:	41aa      	sbcs	r2, r5
 8012b72:	d330      	bcc.n	8012bd6 <rmw_time_equal+0x7e>
 8012b74:	4c21      	ldr	r4, [pc, #132]	@ (8012bfc <rmw_time_equal+0xa4>)
 8012b76:	fba3 3204 	umull	r3, r2, r3, r4
 8012b7a:	fb04 2205 	mla	r2, r4, r5, r2
 8012b7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012b82:	43dd      	mvns	r5, r3
 8012b84:	1a8c      	subs	r4, r1, r2
 8012b86:	4285      	cmp	r5, r0
 8012b88:	41b4      	sbcs	r4, r6
 8012b8a:	d332      	bcc.n	8012bf2 <rmw_time_equal+0x9a>
 8012b8c:	eb10 0c03 	adds.w	ip, r0, r3
 8012b90:	eb42 0106 	adc.w	r1, r2, r6
 8012b94:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012b98:	4817      	ldr	r0, [pc, #92]	@ (8012bf8 <rmw_time_equal+0xa0>)
 8012b9a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012b9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	4298      	cmp	r0, r3
 8012ba2:	41b2      	sbcs	r2, r6
 8012ba4:	d31c      	bcc.n	8012be0 <rmw_time_equal+0x88>
 8012ba6:	4c15      	ldr	r4, [pc, #84]	@ (8012bfc <rmw_time_equal+0xa4>)
 8012ba8:	fba3 3204 	umull	r3, r2, r3, r4
 8012bac:	fb04 2206 	mla	r2, r4, r6, r2
 8012bb0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012bb4:	43de      	mvns	r6, r3
 8012bb6:	1a84      	subs	r4, r0, r2
 8012bb8:	42ae      	cmp	r6, r5
 8012bba:	41bc      	sbcs	r4, r7
 8012bbc:	d315      	bcc.n	8012bea <rmw_time_equal+0x92>
 8012bbe:	195b      	adds	r3, r3, r5
 8012bc0:	eb42 0207 	adc.w	r2, r2, r7
 8012bc4:	428a      	cmp	r2, r1
 8012bc6:	bf08      	it	eq
 8012bc8:	4563      	cmpeq	r3, ip
 8012bca:	bf0c      	ite	eq
 8012bcc:	2001      	moveq	r0, #1
 8012bce:	2000      	movne	r0, #0
 8012bd0:	b004      	add	sp, #16
 8012bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8012bd4:	4770      	bx	lr
 8012bd6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012bda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012bde:	e7d9      	b.n	8012b94 <rmw_time_equal+0x3c>
 8012be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012be4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012be8:	e7ec      	b.n	8012bc4 <rmw_time_equal+0x6c>
 8012bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bee:	4602      	mov	r2, r0
 8012bf0:	e7e8      	b.n	8012bc4 <rmw_time_equal+0x6c>
 8012bf2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012bf6:	e7cd      	b.n	8012b94 <rmw_time_equal+0x3c>
 8012bf8:	25c17d04 	.word	0x25c17d04
 8012bfc:	3b9aca00 	.word	0x3b9aca00

08012c00 <rmw_time_total_nsec>:
 8012c00:	b470      	push	{r4, r5, r6}
 8012c02:	b085      	sub	sp, #20
 8012c04:	ac04      	add	r4, sp, #16
 8012c06:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	4912      	ldr	r1, [pc, #72]	@ (8012c58 <rmw_time_total_nsec+0x58>)
 8012c0e:	9e03      	ldr	r6, [sp, #12]
 8012c10:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012c14:	2202      	movs	r2, #2
 8012c16:	4299      	cmp	r1, r3
 8012c18:	41aa      	sbcs	r2, r5
 8012c1a:	d311      	bcc.n	8012c40 <rmw_time_total_nsec+0x40>
 8012c1c:	4c0f      	ldr	r4, [pc, #60]	@ (8012c5c <rmw_time_total_nsec+0x5c>)
 8012c1e:	fba3 3204 	umull	r3, r2, r3, r4
 8012c22:	fb04 2205 	mla	r2, r4, r5, r2
 8012c26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c2a:	43dd      	mvns	r5, r3
 8012c2c:	1a8c      	subs	r4, r1, r2
 8012c2e:	4285      	cmp	r5, r0
 8012c30:	41b4      	sbcs	r4, r6
 8012c32:	d30c      	bcc.n	8012c4e <rmw_time_total_nsec+0x4e>
 8012c34:	1818      	adds	r0, r3, r0
 8012c36:	eb42 0106 	adc.w	r1, r2, r6
 8012c3a:	b005      	add	sp, #20
 8012c3c:	bc70      	pop	{r4, r5, r6}
 8012c3e:	4770      	bx	lr
 8012c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c48:	b005      	add	sp, #20
 8012c4a:	bc70      	pop	{r4, r5, r6}
 8012c4c:	4770      	bx	lr
 8012c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c52:	b005      	add	sp, #20
 8012c54:	bc70      	pop	{r4, r5, r6}
 8012c56:	4770      	bx	lr
 8012c58:	25c17d04 	.word	0x25c17d04
 8012c5c:	3b9aca00 	.word	0x3b9aca00

08012c60 <rmw_get_zero_initialized_message_info>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	2240      	movs	r2, #64	@ 0x40
 8012c64:	4604      	mov	r4, r0
 8012c66:	2100      	movs	r1, #0
 8012c68:	f002 fd54 	bl	8015714 <memset>
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	bd10      	pop	{r4, pc}

08012c70 <rmw_validate_full_topic_name>:
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d057      	beq.n	8012d24 <rmw_validate_full_topic_name+0xb4>
 8012c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c78:	460d      	mov	r5, r1
 8012c7a:	2900      	cmp	r1, #0
 8012c7c:	d054      	beq.n	8012d28 <rmw_validate_full_topic_name+0xb8>
 8012c7e:	4616      	mov	r6, r2
 8012c80:	4604      	mov	r4, r0
 8012c82:	f7ed fad7 	bl	8000234 <strlen>
 8012c86:	b148      	cbz	r0, 8012c9c <rmw_validate_full_topic_name+0x2c>
 8012c88:	7823      	ldrb	r3, [r4, #0]
 8012c8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8012c8c:	d00d      	beq.n	8012caa <rmw_validate_full_topic_name+0x3a>
 8012c8e:	2302      	movs	r3, #2
 8012c90:	602b      	str	r3, [r5, #0]
 8012c92:	b13e      	cbz	r6, 8012ca4 <rmw_validate_full_topic_name+0x34>
 8012c94:	2000      	movs	r0, #0
 8012c96:	6030      	str	r0, [r6, #0]
 8012c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	602b      	str	r3, [r5, #0]
 8012ca0:	2e00      	cmp	r6, #0
 8012ca2:	d1f7      	bne.n	8012c94 <rmw_validate_full_topic_name+0x24>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012caa:	1e43      	subs	r3, r0, #1
 8012cac:	5ce2      	ldrb	r2, [r4, r3]
 8012cae:	2a2f      	cmp	r2, #47	@ 0x2f
 8012cb0:	d03c      	beq.n	8012d2c <rmw_validate_full_topic_name+0xbc>
 8012cb2:	1e63      	subs	r3, r4, #1
 8012cb4:	eb03 0800 	add.w	r8, r3, r0
 8012cb8:	f1c4 0e01 	rsb	lr, r4, #1
 8012cbc:	eb0e 0703 	add.w	r7, lr, r3
 8012cc0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012cc4:	f021 0220 	bic.w	r2, r1, #32
 8012cc8:	3a41      	subs	r2, #65	@ 0x41
 8012cca:	2a19      	cmp	r2, #25
 8012ccc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012cd0:	d90b      	bls.n	8012cea <rmw_validate_full_topic_name+0x7a>
 8012cd2:	295f      	cmp	r1, #95	@ 0x5f
 8012cd4:	d009      	beq.n	8012cea <rmw_validate_full_topic_name+0x7a>
 8012cd6:	f1bc 0f0a 	cmp.w	ip, #10
 8012cda:	d906      	bls.n	8012cea <rmw_validate_full_topic_name+0x7a>
 8012cdc:	2304      	movs	r3, #4
 8012cde:	602b      	str	r3, [r5, #0]
 8012ce0:	2e00      	cmp	r6, #0
 8012ce2:	d0df      	beq.n	8012ca4 <rmw_validate_full_topic_name+0x34>
 8012ce4:	6037      	str	r7, [r6, #0]
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	e7d6      	b.n	8012c98 <rmw_validate_full_topic_name+0x28>
 8012cea:	4543      	cmp	r3, r8
 8012cec:	d1e6      	bne.n	8012cbc <rmw_validate_full_topic_name+0x4c>
 8012cee:	4f1a      	ldr	r7, [pc, #104]	@ (8012d58 <rmw_validate_full_topic_name+0xe8>)
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	e004      	b.n	8012cfe <rmw_validate_full_topic_name+0x8e>
 8012cf4:	4298      	cmp	r0, r3
 8012cf6:	f104 0401 	add.w	r4, r4, #1
 8012cfa:	d91c      	bls.n	8012d36 <rmw_validate_full_topic_name+0xc6>
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	4298      	cmp	r0, r3
 8012d00:	f103 0201 	add.w	r2, r3, #1
 8012d04:	d0f6      	beq.n	8012cf4 <rmw_validate_full_topic_name+0x84>
 8012d06:	7821      	ldrb	r1, [r4, #0]
 8012d08:	292f      	cmp	r1, #47	@ 0x2f
 8012d0a:	d1f3      	bne.n	8012cf4 <rmw_validate_full_topic_name+0x84>
 8012d0c:	7861      	ldrb	r1, [r4, #1]
 8012d0e:	292f      	cmp	r1, #47	@ 0x2f
 8012d10:	d01c      	beq.n	8012d4c <rmw_validate_full_topic_name+0xdc>
 8012d12:	5dc9      	ldrb	r1, [r1, r7]
 8012d14:	0749      	lsls	r1, r1, #29
 8012d16:	d5ed      	bpl.n	8012cf4 <rmw_validate_full_topic_name+0x84>
 8012d18:	2206      	movs	r2, #6
 8012d1a:	602a      	str	r2, [r5, #0]
 8012d1c:	2e00      	cmp	r6, #0
 8012d1e:	d0c1      	beq.n	8012ca4 <rmw_validate_full_topic_name+0x34>
 8012d20:	6033      	str	r3, [r6, #0]
 8012d22:	e7bf      	b.n	8012ca4 <rmw_validate_full_topic_name+0x34>
 8012d24:	200b      	movs	r0, #11
 8012d26:	4770      	bx	lr
 8012d28:	200b      	movs	r0, #11
 8012d2a:	e7b5      	b.n	8012c98 <rmw_validate_full_topic_name+0x28>
 8012d2c:	2203      	movs	r2, #3
 8012d2e:	602a      	str	r2, [r5, #0]
 8012d30:	2e00      	cmp	r6, #0
 8012d32:	d1f5      	bne.n	8012d20 <rmw_validate_full_topic_name+0xb0>
 8012d34:	e7b6      	b.n	8012ca4 <rmw_validate_full_topic_name+0x34>
 8012d36:	28f7      	cmp	r0, #247	@ 0xf7
 8012d38:	d802      	bhi.n	8012d40 <rmw_validate_full_topic_name+0xd0>
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	6028      	str	r0, [r5, #0]
 8012d3e:	e7ab      	b.n	8012c98 <rmw_validate_full_topic_name+0x28>
 8012d40:	2307      	movs	r3, #7
 8012d42:	602b      	str	r3, [r5, #0]
 8012d44:	2e00      	cmp	r6, #0
 8012d46:	d0ad      	beq.n	8012ca4 <rmw_validate_full_topic_name+0x34>
 8012d48:	23f6      	movs	r3, #246	@ 0xf6
 8012d4a:	e7e9      	b.n	8012d20 <rmw_validate_full_topic_name+0xb0>
 8012d4c:	2205      	movs	r2, #5
 8012d4e:	602a      	str	r2, [r5, #0]
 8012d50:	2e00      	cmp	r6, #0
 8012d52:	d1e5      	bne.n	8012d20 <rmw_validate_full_topic_name+0xb0>
 8012d54:	e7a6      	b.n	8012ca4 <rmw_validate_full_topic_name+0x34>
 8012d56:	bf00      	nop
 8012d58:	080172af 	.word	0x080172af

08012d5c <rmw_validate_namespace_with_size>:
 8012d5c:	b340      	cbz	r0, 8012db0 <rmw_validate_namespace_with_size+0x54>
 8012d5e:	b570      	push	{r4, r5, r6, lr}
 8012d60:	4614      	mov	r4, r2
 8012d62:	b0c2      	sub	sp, #264	@ 0x108
 8012d64:	b332      	cbz	r2, 8012db4 <rmw_validate_namespace_with_size+0x58>
 8012d66:	2901      	cmp	r1, #1
 8012d68:	460d      	mov	r5, r1
 8012d6a:	461e      	mov	r6, r3
 8012d6c:	d102      	bne.n	8012d74 <rmw_validate_namespace_with_size+0x18>
 8012d6e:	7803      	ldrb	r3, [r0, #0]
 8012d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8012d72:	d012      	beq.n	8012d9a <rmw_validate_namespace_with_size+0x3e>
 8012d74:	aa01      	add	r2, sp, #4
 8012d76:	4669      	mov	r1, sp
 8012d78:	f7ff ff7a 	bl	8012c70 <rmw_validate_full_topic_name>
 8012d7c:	b978      	cbnz	r0, 8012d9e <rmw_validate_namespace_with_size+0x42>
 8012d7e:	9b00      	ldr	r3, [sp, #0]
 8012d80:	b14b      	cbz	r3, 8012d96 <rmw_validate_namespace_with_size+0x3a>
 8012d82:	2b07      	cmp	r3, #7
 8012d84:	d007      	beq.n	8012d96 <rmw_validate_namespace_with_size+0x3a>
 8012d86:	1e5a      	subs	r2, r3, #1
 8012d88:	2a05      	cmp	r2, #5
 8012d8a:	d82b      	bhi.n	8012de4 <rmw_validate_namespace_with_size+0x88>
 8012d8c:	e8df f002 	tbb	[pc, r2]
 8012d90:	1e212427 	.word	0x1e212427
 8012d94:	141b      	.short	0x141b
 8012d96:	2df5      	cmp	r5, #245	@ 0xf5
 8012d98:	d803      	bhi.n	8012da2 <rmw_validate_namespace_with_size+0x46>
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	6020      	str	r0, [r4, #0]
 8012d9e:	b042      	add	sp, #264	@ 0x108
 8012da0:	bd70      	pop	{r4, r5, r6, pc}
 8012da2:	2307      	movs	r3, #7
 8012da4:	6023      	str	r3, [r4, #0]
 8012da6:	2e00      	cmp	r6, #0
 8012da8:	d0f9      	beq.n	8012d9e <rmw_validate_namespace_with_size+0x42>
 8012daa:	23f4      	movs	r3, #244	@ 0xf4
 8012dac:	6033      	str	r3, [r6, #0]
 8012dae:	e7f6      	b.n	8012d9e <rmw_validate_namespace_with_size+0x42>
 8012db0:	200b      	movs	r0, #11
 8012db2:	4770      	bx	lr
 8012db4:	200b      	movs	r0, #11
 8012db6:	e7f2      	b.n	8012d9e <rmw_validate_namespace_with_size+0x42>
 8012db8:	2306      	movs	r3, #6
 8012dba:	6023      	str	r3, [r4, #0]
 8012dbc:	2e00      	cmp	r6, #0
 8012dbe:	d0ee      	beq.n	8012d9e <rmw_validate_namespace_with_size+0x42>
 8012dc0:	9b01      	ldr	r3, [sp, #4]
 8012dc2:	6033      	str	r3, [r6, #0]
 8012dc4:	e7eb      	b.n	8012d9e <rmw_validate_namespace_with_size+0x42>
 8012dc6:	2305      	movs	r3, #5
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	e7f7      	b.n	8012dbc <rmw_validate_namespace_with_size+0x60>
 8012dcc:	2304      	movs	r3, #4
 8012dce:	6023      	str	r3, [r4, #0]
 8012dd0:	e7f4      	b.n	8012dbc <rmw_validate_namespace_with_size+0x60>
 8012dd2:	2303      	movs	r3, #3
 8012dd4:	6023      	str	r3, [r4, #0]
 8012dd6:	e7f1      	b.n	8012dbc <rmw_validate_namespace_with_size+0x60>
 8012dd8:	2302      	movs	r3, #2
 8012dda:	6023      	str	r3, [r4, #0]
 8012ddc:	e7ee      	b.n	8012dbc <rmw_validate_namespace_with_size+0x60>
 8012dde:	2301      	movs	r3, #1
 8012de0:	6023      	str	r3, [r4, #0]
 8012de2:	e7eb      	b.n	8012dbc <rmw_validate_namespace_with_size+0x60>
 8012de4:	4a03      	ldr	r2, [pc, #12]	@ (8012df4 <rmw_validate_namespace_with_size+0x98>)
 8012de6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012dea:	a802      	add	r0, sp, #8
 8012dec:	f7ff fcee 	bl	80127cc <rcutils_snprintf>
 8012df0:	2001      	movs	r0, #1
 8012df2:	e7d4      	b.n	8012d9e <rmw_validate_namespace_with_size+0x42>
 8012df4:	08016ab8 	.word	0x08016ab8

08012df8 <rmw_validate_namespace>:
 8012df8:	b168      	cbz	r0, 8012e16 <rmw_validate_namespace+0x1e>
 8012dfa:	b570      	push	{r4, r5, r6, lr}
 8012dfc:	460d      	mov	r5, r1
 8012dfe:	4616      	mov	r6, r2
 8012e00:	4604      	mov	r4, r0
 8012e02:	f7ed fa17 	bl	8000234 <strlen>
 8012e06:	4633      	mov	r3, r6
 8012e08:	4601      	mov	r1, r0
 8012e0a:	462a      	mov	r2, r5
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e12:	f7ff bfa3 	b.w	8012d5c <rmw_validate_namespace_with_size>
 8012e16:	200b      	movs	r0, #11
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop

08012e1c <rmw_namespace_validation_result_string>:
 8012e1c:	2807      	cmp	r0, #7
 8012e1e:	bf9a      	itte	ls
 8012e20:	4b02      	ldrls	r3, [pc, #8]	@ (8012e2c <rmw_namespace_validation_result_string+0x10>)
 8012e22:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012e26:	4802      	ldrhi	r0, [pc, #8]	@ (8012e30 <rmw_namespace_validation_result_string+0x14>)
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop
 8012e2c:	08017190 	.word	0x08017190
 8012e30:	08016b08 	.word	0x08016b08

08012e34 <rmw_validate_node_name>:
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d03b      	beq.n	8012eb0 <rmw_validate_node_name+0x7c>
 8012e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e3c:	460d      	mov	r5, r1
 8012e3e:	2900      	cmp	r1, #0
 8012e40:	d038      	beq.n	8012eb4 <rmw_validate_node_name+0x80>
 8012e42:	4616      	mov	r6, r2
 8012e44:	4604      	mov	r4, r0
 8012e46:	f7ed f9f5 	bl	8000234 <strlen>
 8012e4a:	b1e0      	cbz	r0, 8012e86 <rmw_validate_node_name+0x52>
 8012e4c:	1e63      	subs	r3, r4, #1
 8012e4e:	eb03 0800 	add.w	r8, r3, r0
 8012e52:	f1c4 0101 	rsb	r1, r4, #1
 8012e56:	18cf      	adds	r7, r1, r3
 8012e58:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012e5c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012e60:	f02e 0c20 	bic.w	ip, lr, #32
 8012e64:	2a09      	cmp	r2, #9
 8012e66:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012e6a:	d914      	bls.n	8012e96 <rmw_validate_node_name+0x62>
 8012e6c:	f1bc 0f19 	cmp.w	ip, #25
 8012e70:	d911      	bls.n	8012e96 <rmw_validate_node_name+0x62>
 8012e72:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012e76:	d00e      	beq.n	8012e96 <rmw_validate_node_name+0x62>
 8012e78:	2302      	movs	r3, #2
 8012e7a:	602b      	str	r3, [r5, #0]
 8012e7c:	b106      	cbz	r6, 8012e80 <rmw_validate_node_name+0x4c>
 8012e7e:	6037      	str	r7, [r6, #0]
 8012e80:	2000      	movs	r0, #0
 8012e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e86:	2301      	movs	r3, #1
 8012e88:	602b      	str	r3, [r5, #0]
 8012e8a:	2e00      	cmp	r6, #0
 8012e8c:	d0f8      	beq.n	8012e80 <rmw_validate_node_name+0x4c>
 8012e8e:	2000      	movs	r0, #0
 8012e90:	6030      	str	r0, [r6, #0]
 8012e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e96:	4543      	cmp	r3, r8
 8012e98:	d1dd      	bne.n	8012e56 <rmw_validate_node_name+0x22>
 8012e9a:	7822      	ldrb	r2, [r4, #0]
 8012e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012ed4 <rmw_validate_node_name+0xa0>)
 8012e9e:	5cd3      	ldrb	r3, [r2, r3]
 8012ea0:	f013 0304 	ands.w	r3, r3, #4
 8012ea4:	d110      	bne.n	8012ec8 <rmw_validate_node_name+0x94>
 8012ea6:	28ff      	cmp	r0, #255	@ 0xff
 8012ea8:	d806      	bhi.n	8012eb8 <rmw_validate_node_name+0x84>
 8012eaa:	602b      	str	r3, [r5, #0]
 8012eac:	4618      	mov	r0, r3
 8012eae:	e7e8      	b.n	8012e82 <rmw_validate_node_name+0x4e>
 8012eb0:	200b      	movs	r0, #11
 8012eb2:	4770      	bx	lr
 8012eb4:	200b      	movs	r0, #11
 8012eb6:	e7e4      	b.n	8012e82 <rmw_validate_node_name+0x4e>
 8012eb8:	2204      	movs	r2, #4
 8012eba:	602a      	str	r2, [r5, #0]
 8012ebc:	2e00      	cmp	r6, #0
 8012ebe:	d0df      	beq.n	8012e80 <rmw_validate_node_name+0x4c>
 8012ec0:	22fe      	movs	r2, #254	@ 0xfe
 8012ec2:	6032      	str	r2, [r6, #0]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	e7dc      	b.n	8012e82 <rmw_validate_node_name+0x4e>
 8012ec8:	2303      	movs	r3, #3
 8012eca:	602b      	str	r3, [r5, #0]
 8012ecc:	2e00      	cmp	r6, #0
 8012ece:	d1de      	bne.n	8012e8e <rmw_validate_node_name+0x5a>
 8012ed0:	e7d6      	b.n	8012e80 <rmw_validate_node_name+0x4c>
 8012ed2:	bf00      	nop
 8012ed4:	080172af 	.word	0x080172af

08012ed8 <rmw_node_name_validation_result_string>:
 8012ed8:	2804      	cmp	r0, #4
 8012eda:	bf9a      	itte	ls
 8012edc:	4b02      	ldrls	r3, [pc, #8]	@ (8012ee8 <rmw_node_name_validation_result_string+0x10>)
 8012ede:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012ee2:	4802      	ldrhi	r0, [pc, #8]	@ (8012eec <rmw_node_name_validation_result_string+0x14>)
 8012ee4:	4770      	bx	lr
 8012ee6:	bf00      	nop
 8012ee8:	080171b0 	.word	0x080171b0
 8012eec:	08016cb0 	.word	0x08016cb0

08012ef0 <on_status>:
 8012ef0:	b082      	sub	sp, #8
 8012ef2:	b002      	add	sp, #8
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop

08012ef8 <on_topic>:
 8012ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012efc:	4a22      	ldr	r2, [pc, #136]	@ (8012f88 <on_topic+0x90>)
 8012efe:	b094      	sub	sp, #80	@ 0x50
 8012f00:	6812      	ldr	r2, [r2, #0]
 8012f02:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012f04:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012f08:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8012f0c:	b3c2      	cbz	r2, 8012f80 <on_topic+0x88>
 8012f0e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8012f12:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8012f16:	e001      	b.n	8012f1c <on_topic+0x24>
 8012f18:	6852      	ldr	r2, [r2, #4]
 8012f1a:	b38a      	cbz	r2, 8012f80 <on_topic+0x88>
 8012f1c:	6894      	ldr	r4, [r2, #8]
 8012f1e:	8aa3      	ldrh	r3, [r4, #20]
 8012f20:	428b      	cmp	r3, r1
 8012f22:	d1f9      	bne.n	8012f18 <on_topic+0x20>
 8012f24:	7da3      	ldrb	r3, [r4, #22]
 8012f26:	4283      	cmp	r3, r0
 8012f28:	d1f6      	bne.n	8012f18 <on_topic+0x20>
 8012f2a:	2248      	movs	r2, #72	@ 0x48
 8012f2c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012f30:	4668      	mov	r0, sp
 8012f32:	f002 fcb8 	bl	80158a6 <memcpy>
 8012f36:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8012f3a:	cb0c      	ldmia	r3, {r2, r3}
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f7f7 fe43 	bl	800abc8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012f42:	4607      	mov	r7, r0
 8012f44:	b1e0      	cbz	r0, 8012f80 <on_topic+0x88>
 8012f46:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012f4a:	4632      	mov	r2, r6
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f108 0110 	add.w	r1, r8, #16
 8012f52:	f000 fddb 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 8012f56:	b930      	cbnz	r0, 8012f66 <on_topic+0x6e>
 8012f58:	480c      	ldr	r0, [pc, #48]	@ (8012f8c <on_topic+0x94>)
 8012f5a:	4639      	mov	r1, r7
 8012f5c:	b014      	add	sp, #80	@ 0x50
 8012f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f62:	f000 b8bd 	b.w	80130e0 <put_memory>
 8012f66:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012f6a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8012f6e:	f000 fcc3 	bl	80138f8 <rmw_uros_epoch_nanos>
 8012f72:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8012f76:	2305      	movs	r3, #5
 8012f78:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012f7c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012f80:	b014      	add	sp, #80	@ 0x50
 8012f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f86:	bf00      	nop
 8012f88:	2000aa94 	.word	0x2000aa94
 8012f8c:	2000aa84 	.word	0x2000aa84

08012f90 <on_request>:
 8012f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f94:	4823      	ldr	r0, [pc, #140]	@ (8013024 <on_request+0x94>)
 8012f96:	b094      	sub	sp, #80	@ 0x50
 8012f98:	6800      	ldr	r0, [r0, #0]
 8012f9a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012f9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012fa0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d03b      	beq.n	801301e <on_request+0x8e>
 8012fa6:	461d      	mov	r5, r3
 8012fa8:	e001      	b.n	8012fae <on_request+0x1e>
 8012faa:	6840      	ldr	r0, [r0, #4]
 8012fac:	b3b8      	cbz	r0, 801301e <on_request+0x8e>
 8012fae:	6884      	ldr	r4, [r0, #8]
 8012fb0:	8b21      	ldrh	r1, [r4, #24]
 8012fb2:	4291      	cmp	r1, r2
 8012fb4:	d1f9      	bne.n	8012faa <on_request+0x1a>
 8012fb6:	2248      	movs	r2, #72	@ 0x48
 8012fb8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012fbc:	4668      	mov	r0, sp
 8012fbe:	f002 fc72 	bl	80158a6 <memcpy>
 8012fc2:	f104 0320 	add.w	r3, r4, #32
 8012fc6:	cb0c      	ldmia	r3, {r2, r3}
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f7f7 fdfd 	bl	800abc8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012fce:	4680      	mov	r8, r0
 8012fd0:	b328      	cbz	r0, 801301e <on_request+0x8e>
 8012fd2:	4638      	mov	r0, r7
 8012fd4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012fd8:	4632      	mov	r2, r6
 8012fda:	f107 0110 	add.w	r1, r7, #16
 8012fde:	f000 fd95 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 8012fe2:	b930      	cbnz	r0, 8012ff2 <on_request+0x62>
 8012fe4:	4810      	ldr	r0, [pc, #64]	@ (8013028 <on_request+0x98>)
 8012fe6:	4641      	mov	r1, r8
 8012fe8:	b014      	add	sp, #80	@ 0x50
 8012fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fee:	f000 b877 	b.w	80130e0 <put_memory>
 8012ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ff4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8012ff8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012ffc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013000:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013004:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013008:	e88c 0003 	stmia.w	ip, {r0, r1}
 801300c:	f000 fc74 	bl	80138f8 <rmw_uros_epoch_nanos>
 8013010:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013014:	2303      	movs	r3, #3
 8013016:	e942 0102 	strd	r0, r1, [r2, #-8]
 801301a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801301e:	b014      	add	sp, #80	@ 0x50
 8013020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013024:	2000aa64 	.word	0x2000aa64
 8013028:	2000aa84 	.word	0x2000aa84

0801302c <on_reply>:
 801302c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013030:	4821      	ldr	r0, [pc, #132]	@ (80130b8 <on_reply+0x8c>)
 8013032:	b094      	sub	sp, #80	@ 0x50
 8013034:	6800      	ldr	r0, [r0, #0]
 8013036:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013038:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801303c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801303e:	b3b8      	cbz	r0, 80130b0 <on_reply+0x84>
 8013040:	461d      	mov	r5, r3
 8013042:	e001      	b.n	8013048 <on_reply+0x1c>
 8013044:	6840      	ldr	r0, [r0, #4]
 8013046:	b398      	cbz	r0, 80130b0 <on_reply+0x84>
 8013048:	6884      	ldr	r4, [r0, #8]
 801304a:	8b21      	ldrh	r1, [r4, #24]
 801304c:	4291      	cmp	r1, r2
 801304e:	d1f9      	bne.n	8013044 <on_reply+0x18>
 8013050:	2248      	movs	r2, #72	@ 0x48
 8013052:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013056:	4668      	mov	r0, sp
 8013058:	f002 fc25 	bl	80158a6 <memcpy>
 801305c:	f104 0320 	add.w	r3, r4, #32
 8013060:	cb0c      	ldmia	r3, {r2, r3}
 8013062:	4620      	mov	r0, r4
 8013064:	f7f7 fdb0 	bl	800abc8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013068:	4680      	mov	r8, r0
 801306a:	b308      	cbz	r0, 80130b0 <on_reply+0x84>
 801306c:	4638      	mov	r0, r7
 801306e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013072:	4632      	mov	r2, r6
 8013074:	f107 0110 	add.w	r1, r7, #16
 8013078:	f000 fd48 	bl	8013b0c <ucdr_deserialize_array_uint8_t>
 801307c:	b930      	cbnz	r0, 801308c <on_reply+0x60>
 801307e:	480f      	ldr	r0, [pc, #60]	@ (80130bc <on_reply+0x90>)
 8013080:	4641      	mov	r1, r8
 8013082:	b014      	add	sp, #80	@ 0x50
 8013084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013088:	f000 b82a 	b.w	80130e0 <put_memory>
 801308c:	2200      	movs	r2, #0
 801308e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8013092:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013096:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801309a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801309e:	f000 fc2b 	bl	80138f8 <rmw_uros_epoch_nanos>
 80130a2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80130a6:	2304      	movs	r3, #4
 80130a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80130ac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80130b0:	b014      	add	sp, #80	@ 0x50
 80130b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b6:	bf00      	nop
 80130b8:	20006174 	.word	0x20006174
 80130bc:	2000aa84 	.word	0x2000aa84

080130c0 <get_memory>:
 80130c0:	4603      	mov	r3, r0
 80130c2:	6840      	ldr	r0, [r0, #4]
 80130c4:	b158      	cbz	r0, 80130de <get_memory+0x1e>
 80130c6:	6842      	ldr	r2, [r0, #4]
 80130c8:	605a      	str	r2, [r3, #4]
 80130ca:	b10a      	cbz	r2, 80130d0 <get_memory+0x10>
 80130cc:	2100      	movs	r1, #0
 80130ce:	6011      	str	r1, [r2, #0]
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	6042      	str	r2, [r0, #4]
 80130d4:	b102      	cbz	r2, 80130d8 <get_memory+0x18>
 80130d6:	6010      	str	r0, [r2, #0]
 80130d8:	2200      	movs	r2, #0
 80130da:	6002      	str	r2, [r0, #0]
 80130dc:	6018      	str	r0, [r3, #0]
 80130de:	4770      	bx	lr

080130e0 <put_memory>:
 80130e0:	680b      	ldr	r3, [r1, #0]
 80130e2:	b10b      	cbz	r3, 80130e8 <put_memory+0x8>
 80130e4:	684a      	ldr	r2, [r1, #4]
 80130e6:	605a      	str	r2, [r3, #4]
 80130e8:	684a      	ldr	r2, [r1, #4]
 80130ea:	b102      	cbz	r2, 80130ee <put_memory+0xe>
 80130ec:	6013      	str	r3, [r2, #0]
 80130ee:	6803      	ldr	r3, [r0, #0]
 80130f0:	428b      	cmp	r3, r1
 80130f2:	6843      	ldr	r3, [r0, #4]
 80130f4:	bf08      	it	eq
 80130f6:	6002      	streq	r2, [r0, #0]
 80130f8:	604b      	str	r3, [r1, #4]
 80130fa:	b103      	cbz	r3, 80130fe <put_memory+0x1e>
 80130fc:	6019      	str	r1, [r3, #0]
 80130fe:	2300      	movs	r3, #0
 8013100:	600b      	str	r3, [r1, #0]
 8013102:	6041      	str	r1, [r0, #4]
 8013104:	4770      	bx	lr
 8013106:	bf00      	nop

08013108 <rmw_destroy_client>:
 8013108:	b570      	push	{r4, r5, r6, lr}
 801310a:	b128      	cbz	r0, 8013118 <rmw_destroy_client+0x10>
 801310c:	4604      	mov	r4, r0
 801310e:	6800      	ldr	r0, [r0, #0]
 8013110:	460d      	mov	r5, r1
 8013112:	f7f7 fecf 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 8013116:	b910      	cbnz	r0, 801311e <rmw_destroy_client+0x16>
 8013118:	2401      	movs	r4, #1
 801311a:	4620      	mov	r0, r4
 801311c:	bd70      	pop	{r4, r5, r6, pc}
 801311e:	6863      	ldr	r3, [r4, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d0f9      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013124:	2d00      	cmp	r5, #0
 8013126:	d0f7      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013128:	6828      	ldr	r0, [r5, #0]
 801312a:	f7f7 fec3 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 801312e:	2800      	cmp	r0, #0
 8013130:	d0f2      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013132:	686e      	ldr	r6, [r5, #4]
 8013134:	2e00      	cmp	r6, #0
 8013136:	d0ef      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013138:	6864      	ldr	r4, [r4, #4]
 801313a:	6932      	ldr	r2, [r6, #16]
 801313c:	6920      	ldr	r0, [r4, #16]
 801313e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013142:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013146:	6819      	ldr	r1, [r3, #0]
 8013148:	f7f9 fa9e 	bl	800c688 <uxr_buffer_cancel_data>
 801314c:	4602      	mov	r2, r0
 801314e:	6920      	ldr	r0, [r4, #16]
 8013150:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013154:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013158:	f7f7 fe2c 	bl	800adb4 <run_xrce_session>
 801315c:	6920      	ldr	r0, [r4, #16]
 801315e:	6932      	ldr	r2, [r6, #16]
 8013160:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013164:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013168:	6819      	ldr	r1, [r3, #0]
 801316a:	f7f8 ff5f 	bl	800c02c <uxr_buffer_delete_entity>
 801316e:	4602      	mov	r2, r0
 8013170:	6920      	ldr	r0, [r4, #16]
 8013172:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013176:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801317a:	f7f7 fe1b 	bl	800adb4 <run_xrce_session>
 801317e:	2800      	cmp	r0, #0
 8013180:	4628      	mov	r0, r5
 8013182:	bf14      	ite	ne
 8013184:	2400      	movne	r4, #0
 8013186:	2402      	moveq	r4, #2
 8013188:	f7f7 fcfc 	bl	800ab84 <rmw_uxrce_fini_client_memory>
 801318c:	e7c5      	b.n	801311a <rmw_destroy_client+0x12>
 801318e:	bf00      	nop

08013190 <rmw_get_implementation_identifier>:
 8013190:	4b01      	ldr	r3, [pc, #4]	@ (8013198 <rmw_get_implementation_identifier+0x8>)
 8013192:	6818      	ldr	r0, [r3, #0]
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop
 8013198:	080171c4 	.word	0x080171c4

0801319c <create_topic>:
 801319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a0:	4605      	mov	r5, r0
 80131a2:	b084      	sub	sp, #16
 80131a4:	4822      	ldr	r0, [pc, #136]	@ (8013230 <create_topic+0x94>)
 80131a6:	460f      	mov	r7, r1
 80131a8:	4616      	mov	r6, r2
 80131aa:	f7ff ff89 	bl	80130c0 <get_memory>
 80131ae:	4604      	mov	r4, r0
 80131b0:	2800      	cmp	r0, #0
 80131b2:	d039      	beq.n	8013228 <create_topic+0x8c>
 80131b4:	692b      	ldr	r3, [r5, #16]
 80131b6:	6884      	ldr	r4, [r0, #8]
 80131b8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013238 <create_topic+0x9c>
 80131bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80131c0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80131c4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80131c8:	1c42      	adds	r2, r0, #1
 80131ca:	2102      	movs	r1, #2
 80131cc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80131d0:	f7f9 f9f0 	bl	800c5b4 <uxr_object_id>
 80131d4:	223c      	movs	r2, #60	@ 0x3c
 80131d6:	6120      	str	r0, [r4, #16]
 80131d8:	4641      	mov	r1, r8
 80131da:	4638      	mov	r0, r7
 80131dc:	f7f7 fe50 	bl	800ae80 <generate_topic_name>
 80131e0:	b1f0      	cbz	r0, 8013220 <create_topic+0x84>
 80131e2:	4f14      	ldr	r7, [pc, #80]	@ (8013234 <create_topic+0x98>)
 80131e4:	4630      	mov	r0, r6
 80131e6:	2264      	movs	r2, #100	@ 0x64
 80131e8:	4639      	mov	r1, r7
 80131ea:	f7f7 fe19 	bl	800ae20 <generate_type_name>
 80131ee:	b1b8      	cbz	r0, 8013220 <create_topic+0x84>
 80131f0:	6928      	ldr	r0, [r5, #16]
 80131f2:	2306      	movs	r3, #6
 80131f4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80131f8:	f8cd 8000 	str.w	r8, [sp]
 80131fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013204:	6811      	ldr	r1, [r2, #0]
 8013206:	696b      	ldr	r3, [r5, #20]
 8013208:	6922      	ldr	r2, [r4, #16]
 801320a:	f7f8 ff8d 	bl	800c128 <uxr_buffer_create_topic_bin>
 801320e:	4602      	mov	r2, r0
 8013210:	6928      	ldr	r0, [r5, #16]
 8013212:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013216:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801321a:	f7f7 fdcb 	bl	800adb4 <run_xrce_session>
 801321e:	b918      	cbnz	r0, 8013228 <create_topic+0x8c>
 8013220:	4620      	mov	r0, r4
 8013222:	f7f7 fcc5 	bl	800abb0 <rmw_uxrce_fini_topic_memory>
 8013226:	2400      	movs	r4, #0
 8013228:	4620      	mov	r0, r4
 801322a:	b004      	add	sp, #16
 801322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013230:	2000aaa4 	.word	0x2000aaa4
 8013234:	2000ab98 	.word	0x2000ab98
 8013238:	2000ab5c 	.word	0x2000ab5c

0801323c <destroy_topic>:
 801323c:	b538      	push	{r3, r4, r5, lr}
 801323e:	6985      	ldr	r5, [r0, #24]
 8013240:	b1d5      	cbz	r5, 8013278 <destroy_topic+0x3c>
 8013242:	4604      	mov	r4, r0
 8013244:	6928      	ldr	r0, [r5, #16]
 8013246:	6922      	ldr	r2, [r4, #16]
 8013248:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801324c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013250:	6819      	ldr	r1, [r3, #0]
 8013252:	f7f8 feeb 	bl	800c02c <uxr_buffer_delete_entity>
 8013256:	4602      	mov	r2, r0
 8013258:	6928      	ldr	r0, [r5, #16]
 801325a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801325e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013262:	f7f7 fda7 	bl	800adb4 <run_xrce_session>
 8013266:	2800      	cmp	r0, #0
 8013268:	4620      	mov	r0, r4
 801326a:	bf14      	ite	ne
 801326c:	2400      	movne	r4, #0
 801326e:	2402      	moveq	r4, #2
 8013270:	f7f7 fc9e 	bl	800abb0 <rmw_uxrce_fini_topic_memory>
 8013274:	4620      	mov	r0, r4
 8013276:	bd38      	pop	{r3, r4, r5, pc}
 8013278:	2401      	movs	r4, #1
 801327a:	4620      	mov	r0, r4
 801327c:	bd38      	pop	{r3, r4, r5, pc}
 801327e:	bf00      	nop

08013280 <rmw_send_request>:
 8013280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013284:	4604      	mov	r4, r0
 8013286:	6800      	ldr	r0, [r0, #0]
 8013288:	b08b      	sub	sp, #44	@ 0x2c
 801328a:	460e      	mov	r6, r1
 801328c:	4615      	mov	r5, r2
 801328e:	b128      	cbz	r0, 801329c <rmw_send_request+0x1c>
 8013290:	4b21      	ldr	r3, [pc, #132]	@ (8013318 <rmw_send_request+0x98>)
 8013292:	6819      	ldr	r1, [r3, #0]
 8013294:	f7ec ffc4 	bl	8000220 <strcmp>
 8013298:	2800      	cmp	r0, #0
 801329a:	d139      	bne.n	8013310 <rmw_send_request+0x90>
 801329c:	6864      	ldr	r4, [r4, #4]
 801329e:	6963      	ldr	r3, [r4, #20]
 80132a0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80132a4:	689b      	ldr	r3, [r3, #8]
 80132a6:	4798      	blx	r3
 80132a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80132ac:	4630      	mov	r0, r6
 80132ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132b2:	4798      	blx	r3
 80132b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80132b8:	9000      	str	r0, [sp, #0]
 80132ba:	6922      	ldr	r2, [r4, #16]
 80132bc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80132be:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80132c2:	ab02      	add	r3, sp, #8
 80132c4:	f7fb fa32 	bl	800e72c <uxr_prepare_output_stream>
 80132c8:	2700      	movs	r7, #0
 80132ca:	6028      	str	r0, [r5, #0]
 80132cc:	606f      	str	r7, [r5, #4]
 80132ce:	b198      	cbz	r0, 80132f8 <rmw_send_request+0x78>
 80132d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80132d4:	a902      	add	r1, sp, #8
 80132d6:	4630      	mov	r0, r6
 80132d8:	4798      	blx	r3
 80132da:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80132de:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d00c      	beq.n	8013300 <rmw_send_request+0x80>
 80132e6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80132e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80132ec:	f7f9 ffa0 	bl	800d230 <uxr_run_session_until_confirm_delivery>
 80132f0:	4638      	mov	r0, r7
 80132f2:	b00b      	add	sp, #44	@ 0x2c
 80132f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132f8:	2001      	movs	r0, #1
 80132fa:	b00b      	add	sp, #44	@ 0x2c
 80132fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013300:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013304:	f7f9 fbd4 	bl	800cab0 <uxr_flash_output_streams>
 8013308:	4638      	mov	r0, r7
 801330a:	b00b      	add	sp, #44	@ 0x2c
 801330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013310:	200c      	movs	r0, #12
 8013312:	b00b      	add	sp, #44	@ 0x2c
 8013314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013318:	080171c4 	.word	0x080171c4

0801331c <rmw_take_request>:
 801331c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013320:	4605      	mov	r5, r0
 8013322:	6800      	ldr	r0, [r0, #0]
 8013324:	b089      	sub	sp, #36	@ 0x24
 8013326:	460c      	mov	r4, r1
 8013328:	4690      	mov	r8, r2
 801332a:	461e      	mov	r6, r3
 801332c:	b128      	cbz	r0, 801333a <rmw_take_request+0x1e>
 801332e:	4b28      	ldr	r3, [pc, #160]	@ (80133d0 <rmw_take_request+0xb4>)
 8013330:	6819      	ldr	r1, [r3, #0]
 8013332:	f7ec ff75 	bl	8000220 <strcmp>
 8013336:	2800      	cmp	r0, #0
 8013338:	d146      	bne.n	80133c8 <rmw_take_request+0xac>
 801333a:	b10e      	cbz	r6, 8013340 <rmw_take_request+0x24>
 801333c:	2300      	movs	r3, #0
 801333e:	7033      	strb	r3, [r6, #0]
 8013340:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013344:	f7f7 fcb8 	bl	800acb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013348:	4648      	mov	r0, r9
 801334a:	f7f7 fc8d 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 801334e:	4607      	mov	r7, r0
 8013350:	b3b0      	cbz	r0, 80133c0 <rmw_take_request+0xa4>
 8013352:	6885      	ldr	r5, [r0, #8]
 8013354:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013358:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801335c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013360:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013364:	7423      	strb	r3, [r4, #16]
 8013366:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801336a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801336e:	74e2      	strb	r2, [r4, #19]
 8013370:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013374:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013378:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801337c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013380:	61e1      	str	r1, [r4, #28]
 8013382:	6162      	str	r2, [r4, #20]
 8013384:	61a3      	str	r3, [r4, #24]
 8013386:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801338a:	689b      	ldr	r3, [r3, #8]
 801338c:	4798      	blx	r3
 801338e:	6844      	ldr	r4, [r0, #4]
 8013390:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013394:	f105 0110 	add.w	r1, r5, #16
 8013398:	4668      	mov	r0, sp
 801339a:	f7f8 fdd7 	bl	800bf4c <ucdr_init_buffer>
 801339e:	68e3      	ldr	r3, [r4, #12]
 80133a0:	4641      	mov	r1, r8
 80133a2:	4668      	mov	r0, sp
 80133a4:	4798      	blx	r3
 80133a6:	4639      	mov	r1, r7
 80133a8:	4604      	mov	r4, r0
 80133aa:	480a      	ldr	r0, [pc, #40]	@ (80133d4 <rmw_take_request+0xb8>)
 80133ac:	f7ff fe98 	bl	80130e0 <put_memory>
 80133b0:	b106      	cbz	r6, 80133b4 <rmw_take_request+0x98>
 80133b2:	7034      	strb	r4, [r6, #0]
 80133b4:	f084 0001 	eor.w	r0, r4, #1
 80133b8:	b2c0      	uxtb	r0, r0
 80133ba:	b009      	add	sp, #36	@ 0x24
 80133bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133c0:	2001      	movs	r0, #1
 80133c2:	b009      	add	sp, #36	@ 0x24
 80133c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133c8:	200c      	movs	r0, #12
 80133ca:	b009      	add	sp, #36	@ 0x24
 80133cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133d0:	080171c4 	.word	0x080171c4
 80133d4:	2000aa84 	.word	0x2000aa84

080133d8 <rmw_send_response>:
 80133d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133da:	4605      	mov	r5, r0
 80133dc:	6800      	ldr	r0, [r0, #0]
 80133de:	b091      	sub	sp, #68	@ 0x44
 80133e0:	460c      	mov	r4, r1
 80133e2:	4616      	mov	r6, r2
 80133e4:	b128      	cbz	r0, 80133f2 <rmw_send_response+0x1a>
 80133e6:	4b29      	ldr	r3, [pc, #164]	@ (801348c <rmw_send_response+0xb4>)
 80133e8:	6819      	ldr	r1, [r3, #0]
 80133ea:	f7ec ff19 	bl	8000220 <strcmp>
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d141      	bne.n	8013476 <rmw_send_response+0x9e>
 80133f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80133f6:	9306      	str	r3, [sp, #24]
 80133f8:	4623      	mov	r3, r4
 80133fa:	9207      	str	r2, [sp, #28]
 80133fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013400:	686d      	ldr	r5, [r5, #4]
 8013402:	789b      	ldrb	r3, [r3, #2]
 8013404:	68a1      	ldr	r1, [r4, #8]
 8013406:	f88d 2017 	strb.w	r2, [sp, #23]
 801340a:	f88d 3016 	strb.w	r3, [sp, #22]
 801340e:	68e2      	ldr	r2, [r4, #12]
 8013410:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013414:	6860      	ldr	r0, [r4, #4]
 8013416:	f8ad 3014 	strh.w	r3, [sp, #20]
 801341a:	ab02      	add	r3, sp, #8
 801341c:	c307      	stmia	r3!, {r0, r1, r2}
 801341e:	696b      	ldr	r3, [r5, #20]
 8013420:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013422:	68db      	ldr	r3, [r3, #12]
 8013424:	4798      	blx	r3
 8013426:	6844      	ldr	r4, [r0, #4]
 8013428:	4630      	mov	r0, r6
 801342a:	6923      	ldr	r3, [r4, #16]
 801342c:	4798      	blx	r3
 801342e:	f100 0318 	add.w	r3, r0, #24
 8013432:	6938      	ldr	r0, [r7, #16]
 8013434:	9300      	str	r3, [sp, #0]
 8013436:	692a      	ldr	r2, [r5, #16]
 8013438:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801343a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801343e:	ab08      	add	r3, sp, #32
 8013440:	f7fb f974 	bl	800e72c <uxr_prepare_output_stream>
 8013444:	b910      	cbnz	r0, 801344c <rmw_send_response+0x74>
 8013446:	2001      	movs	r0, #1
 8013448:	b011      	add	sp, #68	@ 0x44
 801344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801344c:	a902      	add	r1, sp, #8
 801344e:	a808      	add	r0, sp, #32
 8013450:	f7fc faa4 	bl	800f99c <uxr_serialize_SampleIdentity>
 8013454:	68a3      	ldr	r3, [r4, #8]
 8013456:	a908      	add	r1, sp, #32
 8013458:	4630      	mov	r0, r6
 801345a:	4798      	blx	r3
 801345c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013460:	6938      	ldr	r0, [r7, #16]
 8013462:	2b01      	cmp	r3, #1
 8013464:	d00a      	beq.n	801347c <rmw_send_response+0xa4>
 8013466:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013468:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801346c:	f7f9 fee0 	bl	800d230 <uxr_run_session_until_confirm_delivery>
 8013470:	2000      	movs	r0, #0
 8013472:	b011      	add	sp, #68	@ 0x44
 8013474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013476:	200c      	movs	r0, #12
 8013478:	b011      	add	sp, #68	@ 0x44
 801347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801347c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013480:	f7f9 fb16 	bl	800cab0 <uxr_flash_output_streams>
 8013484:	2000      	movs	r0, #0
 8013486:	b011      	add	sp, #68	@ 0x44
 8013488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801348a:	bf00      	nop
 801348c:	080171c4 	.word	0x080171c4

08013490 <rmw_take_response>:
 8013490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013494:	4604      	mov	r4, r0
 8013496:	6800      	ldr	r0, [r0, #0]
 8013498:	b088      	sub	sp, #32
 801349a:	4688      	mov	r8, r1
 801349c:	4617      	mov	r7, r2
 801349e:	461d      	mov	r5, r3
 80134a0:	b120      	cbz	r0, 80134ac <rmw_take_response+0x1c>
 80134a2:	4b1e      	ldr	r3, [pc, #120]	@ (801351c <rmw_take_response+0x8c>)
 80134a4:	6819      	ldr	r1, [r3, #0]
 80134a6:	f7ec febb 	bl	8000220 <strcmp>
 80134aa:	bb78      	cbnz	r0, 801350c <rmw_take_response+0x7c>
 80134ac:	b10d      	cbz	r5, 80134b2 <rmw_take_response+0x22>
 80134ae:	2300      	movs	r3, #0
 80134b0:	702b      	strb	r3, [r5, #0]
 80134b2:	6864      	ldr	r4, [r4, #4]
 80134b4:	f7f7 fc00 	bl	800acb8 <rmw_uxrce_clean_expired_static_input_buffer>
 80134b8:	4620      	mov	r0, r4
 80134ba:	f7f7 fbd5 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 80134be:	4606      	mov	r6, r0
 80134c0:	b340      	cbz	r0, 8013514 <rmw_take_response+0x84>
 80134c2:	6963      	ldr	r3, [r4, #20]
 80134c4:	6884      	ldr	r4, [r0, #8]
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80134cc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80134d0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80134d4:	4798      	blx	r3
 80134d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80134da:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80134de:	f104 0110 	add.w	r1, r4, #16
 80134e2:	4668      	mov	r0, sp
 80134e4:	f7f8 fd32 	bl	800bf4c <ucdr_init_buffer>
 80134e8:	4639      	mov	r1, r7
 80134ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134ee:	4668      	mov	r0, sp
 80134f0:	4798      	blx	r3
 80134f2:	4631      	mov	r1, r6
 80134f4:	4604      	mov	r4, r0
 80134f6:	480a      	ldr	r0, [pc, #40]	@ (8013520 <rmw_take_response+0x90>)
 80134f8:	f7ff fdf2 	bl	80130e0 <put_memory>
 80134fc:	b105      	cbz	r5, 8013500 <rmw_take_response+0x70>
 80134fe:	702c      	strb	r4, [r5, #0]
 8013500:	f084 0001 	eor.w	r0, r4, #1
 8013504:	b2c0      	uxtb	r0, r0
 8013506:	b008      	add	sp, #32
 8013508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801350c:	200c      	movs	r0, #12
 801350e:	b008      	add	sp, #32
 8013510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013514:	2001      	movs	r0, #1
 8013516:	b008      	add	sp, #32
 8013518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801351c:	080171c4 	.word	0x080171c4
 8013520:	2000aa84 	.word	0x2000aa84

08013524 <rmw_take_with_info>:
 8013524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013526:	4604      	mov	r4, r0
 8013528:	6800      	ldr	r0, [r0, #0]
 801352a:	b089      	sub	sp, #36	@ 0x24
 801352c:	460f      	mov	r7, r1
 801352e:	4615      	mov	r5, r2
 8013530:	b128      	cbz	r0, 801353e <rmw_take_with_info+0x1a>
 8013532:	4b24      	ldr	r3, [pc, #144]	@ (80135c4 <rmw_take_with_info+0xa0>)
 8013534:	6819      	ldr	r1, [r3, #0]
 8013536:	f7ec fe73 	bl	8000220 <strcmp>
 801353a:	2800      	cmp	r0, #0
 801353c:	d13e      	bne.n	80135bc <rmw_take_with_info+0x98>
 801353e:	b305      	cbz	r5, 8013582 <rmw_take_with_info+0x5e>
 8013540:	6864      	ldr	r4, [r4, #4]
 8013542:	2300      	movs	r3, #0
 8013544:	702b      	strb	r3, [r5, #0]
 8013546:	f7f7 fbb7 	bl	800acb8 <rmw_uxrce_clean_expired_static_input_buffer>
 801354a:	4620      	mov	r0, r4
 801354c:	f7f7 fb8c 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013550:	4606      	mov	r6, r0
 8013552:	b1f0      	cbz	r0, 8013592 <rmw_take_with_info+0x6e>
 8013554:	6881      	ldr	r1, [r0, #8]
 8013556:	4668      	mov	r0, sp
 8013558:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801355c:	3110      	adds	r1, #16
 801355e:	f7f8 fcf5 	bl	800bf4c <ucdr_init_buffer>
 8013562:	69a3      	ldr	r3, [r4, #24]
 8013564:	4639      	mov	r1, r7
 8013566:	68db      	ldr	r3, [r3, #12]
 8013568:	4668      	mov	r0, sp
 801356a:	4798      	blx	r3
 801356c:	4631      	mov	r1, r6
 801356e:	4604      	mov	r4, r0
 8013570:	4815      	ldr	r0, [pc, #84]	@ (80135c8 <rmw_take_with_info+0xa4>)
 8013572:	f7ff fdb5 	bl	80130e0 <put_memory>
 8013576:	702c      	strb	r4, [r5, #0]
 8013578:	f084 0001 	eor.w	r0, r4, #1
 801357c:	b2c0      	uxtb	r0, r0
 801357e:	b009      	add	sp, #36	@ 0x24
 8013580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013582:	6864      	ldr	r4, [r4, #4]
 8013584:	f7f7 fb98 	bl	800acb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013588:	4620      	mov	r0, r4
 801358a:	f7f7 fb6d 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 801358e:	4605      	mov	r5, r0
 8013590:	b910      	cbnz	r0, 8013598 <rmw_take_with_info+0x74>
 8013592:	2001      	movs	r0, #1
 8013594:	b009      	add	sp, #36	@ 0x24
 8013596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013598:	68a9      	ldr	r1, [r5, #8]
 801359a:	4668      	mov	r0, sp
 801359c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80135a0:	3110      	adds	r1, #16
 80135a2:	f7f8 fcd3 	bl	800bf4c <ucdr_init_buffer>
 80135a6:	69a3      	ldr	r3, [r4, #24]
 80135a8:	4639      	mov	r1, r7
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	4668      	mov	r0, sp
 80135ae:	4798      	blx	r3
 80135b0:	4629      	mov	r1, r5
 80135b2:	4604      	mov	r4, r0
 80135b4:	4804      	ldr	r0, [pc, #16]	@ (80135c8 <rmw_take_with_info+0xa4>)
 80135b6:	f7ff fd93 	bl	80130e0 <put_memory>
 80135ba:	e7dd      	b.n	8013578 <rmw_take_with_info+0x54>
 80135bc:	200c      	movs	r0, #12
 80135be:	b009      	add	sp, #36	@ 0x24
 80135c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135c2:	bf00      	nop
 80135c4:	080171c4 	.word	0x080171c4
 80135c8:	2000aa84 	.word	0x2000aa84

080135cc <rmw_wait>:
 80135cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135d0:	b089      	sub	sp, #36	@ 0x24
 80135d2:	4605      	mov	r5, r0
 80135d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80135d6:	460e      	mov	r6, r1
 80135d8:	4698      	mov	r8, r3
 80135da:	4691      	mov	r9, r2
 80135dc:	2a00      	cmp	r2, #0
 80135de:	f000 810a 	beq.w	80137f6 <rmw_wait+0x22a>
 80135e2:	b16c      	cbz	r4, 8013600 <rmw_wait+0x34>
 80135e4:	4bae      	ldr	r3, [pc, #696]	@ (80138a0 <rmw_wait+0x2d4>)
 80135e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80135e8:	af04      	add	r7, sp, #16
 80135ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80135ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80135f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80135f6:	f7ff faaf 	bl	8012b58 <rmw_time_equal>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f000 8127 	beq.w	801384e <rmw_wait+0x282>
 8013600:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013604:	f7f7 fb58 	bl	800acb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013608:	4ba6      	ldr	r3, [pc, #664]	@ (80138a4 <rmw_wait+0x2d8>)
 801360a:	681c      	ldr	r4, [r3, #0]
 801360c:	b14c      	cbz	r4, 8013622 <rmw_wait+0x56>
 801360e:	4623      	mov	r3, r4
 8013610:	2100      	movs	r1, #0
 8013612:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013616:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801361a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801361e:	2b00      	cmp	r3, #0
 8013620:	d1f7      	bne.n	8013612 <rmw_wait+0x46>
 8013622:	f1b9 0f00 	cmp.w	r9, #0
 8013626:	d011      	beq.n	801364c <rmw_wait+0x80>
 8013628:	f8d9 1000 	ldr.w	r1, [r9]
 801362c:	b171      	cbz	r1, 801364c <rmw_wait+0x80>
 801362e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013632:	2300      	movs	r3, #0
 8013634:	2001      	movs	r0, #1
 8013636:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801363a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801363c:	6912      	ldr	r2, [r2, #16]
 801363e:	3301      	adds	r3, #1
 8013640:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013644:	4299      	cmp	r1, r3
 8013646:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801364a:	d1f4      	bne.n	8013636 <rmw_wait+0x6a>
 801364c:	f1b8 0f00 	cmp.w	r8, #0
 8013650:	d011      	beq.n	8013676 <rmw_wait+0xaa>
 8013652:	f8d8 1000 	ldr.w	r1, [r8]
 8013656:	b171      	cbz	r1, 8013676 <rmw_wait+0xaa>
 8013658:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801365c:	2300      	movs	r3, #0
 801365e:	2001      	movs	r0, #1
 8013660:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013664:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013666:	6912      	ldr	r2, [r2, #16]
 8013668:	3301      	adds	r3, #1
 801366a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801366e:	4299      	cmp	r1, r3
 8013670:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013674:	d1f4      	bne.n	8013660 <rmw_wait+0x94>
 8013676:	b185      	cbz	r5, 801369a <rmw_wait+0xce>
 8013678:	6829      	ldr	r1, [r5, #0]
 801367a:	b171      	cbz	r1, 801369a <rmw_wait+0xce>
 801367c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013680:	2300      	movs	r3, #0
 8013682:	2001      	movs	r0, #1
 8013684:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013688:	6a12      	ldr	r2, [r2, #32]
 801368a:	6912      	ldr	r2, [r2, #16]
 801368c:	3301      	adds	r3, #1
 801368e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013692:	4299      	cmp	r1, r3
 8013694:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013698:	d1f4      	bne.n	8013684 <rmw_wait+0xb8>
 801369a:	b34c      	cbz	r4, 80136f0 <rmw_wait+0x124>
 801369c:	4622      	mov	r2, r4
 801369e:	2300      	movs	r3, #0
 80136a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80136a4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80136a8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80136ac:	440b      	add	r3, r1
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	2a00      	cmp	r2, #0
 80136b2:	d1f5      	bne.n	80136a0 <rmw_wait+0xd4>
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f000 8084 	beq.w	80137c2 <rmw_wait+0x1f6>
 80136ba:	1c7a      	adds	r2, r7, #1
 80136bc:	d00d      	beq.n	80136da <rmw_wait+0x10e>
 80136be:	ee07 7a90 	vmov	s15, r7
 80136c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80136c6:	ee07 3a90 	vmov	s15, r3
 80136ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136d2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80136d6:	ee17 7a90 	vmov	r7, s15
 80136da:	68a0      	ldr	r0, [r4, #8]
 80136dc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80136e0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f040 8090 	bne.w	801380a <rmw_wait+0x23e>
 80136ea:	6864      	ldr	r4, [r4, #4]
 80136ec:	2c00      	cmp	r4, #0
 80136ee:	d1f4      	bne.n	80136da <rmw_wait+0x10e>
 80136f0:	f1b9 0f00 	cmp.w	r9, #0
 80136f4:	f000 80bc 	beq.w	8013870 <rmw_wait+0x2a4>
 80136f8:	f8d9 7000 	ldr.w	r7, [r9]
 80136fc:	2f00      	cmp	r7, #0
 80136fe:	f000 808e 	beq.w	801381e <rmw_wait+0x252>
 8013702:	2400      	movs	r4, #0
 8013704:	4627      	mov	r7, r4
 8013706:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801370a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801370e:	f7f7 faab 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013712:	2800      	cmp	r0, #0
 8013714:	d05f      	beq.n	80137d6 <rmw_wait+0x20a>
 8013716:	f8d9 3000 	ldr.w	r3, [r9]
 801371a:	3401      	adds	r4, #1
 801371c:	42a3      	cmp	r3, r4
 801371e:	f04f 0701 	mov.w	r7, #1
 8013722:	d8f0      	bhi.n	8013706 <rmw_wait+0x13a>
 8013724:	f1b8 0f00 	cmp.w	r8, #0
 8013728:	d012      	beq.n	8013750 <rmw_wait+0x184>
 801372a:	f8d8 3000 	ldr.w	r3, [r8]
 801372e:	b17b      	cbz	r3, 8013750 <rmw_wait+0x184>
 8013730:	2400      	movs	r4, #0
 8013732:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013736:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801373a:	f7f7 fa95 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 801373e:	2800      	cmp	r0, #0
 8013740:	d051      	beq.n	80137e6 <rmw_wait+0x21a>
 8013742:	f8d8 3000 	ldr.w	r3, [r8]
 8013746:	3401      	adds	r4, #1
 8013748:	42a3      	cmp	r3, r4
 801374a:	f04f 0701 	mov.w	r7, #1
 801374e:	d8f0      	bhi.n	8013732 <rmw_wait+0x166>
 8013750:	b1dd      	cbz	r5, 801378a <rmw_wait+0x1be>
 8013752:	682b      	ldr	r3, [r5, #0]
 8013754:	b1cb      	cbz	r3, 801378a <rmw_wait+0x1be>
 8013756:	2400      	movs	r4, #0
 8013758:	686b      	ldr	r3, [r5, #4]
 801375a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801375e:	f7f7 fa83 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013762:	b158      	cbz	r0, 801377c <rmw_wait+0x1b0>
 8013764:	682b      	ldr	r3, [r5, #0]
 8013766:	3401      	adds	r4, #1
 8013768:	42a3      	cmp	r3, r4
 801376a:	d969      	bls.n	8013840 <rmw_wait+0x274>
 801376c:	686b      	ldr	r3, [r5, #4]
 801376e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013772:	2701      	movs	r7, #1
 8013774:	f7f7 fa78 	bl	800ac68 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013778:	2800      	cmp	r0, #0
 801377a:	d1f3      	bne.n	8013764 <rmw_wait+0x198>
 801377c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013780:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013784:	3401      	adds	r4, #1
 8013786:	42a3      	cmp	r3, r4
 8013788:	d8e6      	bhi.n	8013758 <rmw_wait+0x18c>
 801378a:	b1a6      	cbz	r6, 80137b6 <rmw_wait+0x1ea>
 801378c:	6834      	ldr	r4, [r6, #0]
 801378e:	b194      	cbz	r4, 80137b6 <rmw_wait+0x1ea>
 8013790:	2300      	movs	r3, #0
 8013792:	461d      	mov	r5, r3
 8013794:	e004      	b.n	80137a0 <rmw_wait+0x1d4>
 8013796:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801379a:	3301      	adds	r3, #1
 801379c:	42a3      	cmp	r3, r4
 801379e:	d00a      	beq.n	80137b6 <rmw_wait+0x1ea>
 80137a0:	6870      	ldr	r0, [r6, #4]
 80137a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80137a6:	7c0a      	ldrb	r2, [r1, #16]
 80137a8:	2a00      	cmp	r2, #0
 80137aa:	d0f4      	beq.n	8013796 <rmw_wait+0x1ca>
 80137ac:	3301      	adds	r3, #1
 80137ae:	42a3      	cmp	r3, r4
 80137b0:	740d      	strb	r5, [r1, #16]
 80137b2:	4617      	mov	r7, r2
 80137b4:	d1f4      	bne.n	80137a0 <rmw_wait+0x1d4>
 80137b6:	2f00      	cmp	r7, #0
 80137b8:	d03e      	beq.n	8013838 <rmw_wait+0x26c>
 80137ba:	2000      	movs	r0, #0
 80137bc:	b009      	add	sp, #36	@ 0x24
 80137be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137c2:	68a0      	ldr	r0, [r4, #8]
 80137c4:	2100      	movs	r1, #0
 80137c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137ca:	f7f9 fcf7 	bl	800d1bc <uxr_run_session_timeout>
 80137ce:	6864      	ldr	r4, [r4, #4]
 80137d0:	2c00      	cmp	r4, #0
 80137d2:	d1f6      	bne.n	80137c2 <rmw_wait+0x1f6>
 80137d4:	e78c      	b.n	80136f0 <rmw_wait+0x124>
 80137d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80137da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80137de:	3401      	adds	r4, #1
 80137e0:	42a3      	cmp	r3, r4
 80137e2:	d890      	bhi.n	8013706 <rmw_wait+0x13a>
 80137e4:	e79e      	b.n	8013724 <rmw_wait+0x158>
 80137e6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80137ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80137ee:	3401      	adds	r4, #1
 80137f0:	429c      	cmp	r4, r3
 80137f2:	d39e      	bcc.n	8013732 <rmw_wait+0x166>
 80137f4:	e7ac      	b.n	8013750 <rmw_wait+0x184>
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f47f aef3 	bne.w	80135e2 <rmw_wait+0x16>
 80137fc:	2800      	cmp	r0, #0
 80137fe:	f47f aef0 	bne.w	80135e2 <rmw_wait+0x16>
 8013802:	2900      	cmp	r1, #0
 8013804:	f47f aeed 	bne.w	80135e2 <rmw_wait+0x16>
 8013808:	e7d7      	b.n	80137ba <rmw_wait+0x1ee>
 801380a:	4639      	mov	r1, r7
 801380c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013810:	f7f9 fcee 	bl	800d1f0 <uxr_run_session_until_data>
 8013814:	6864      	ldr	r4, [r4, #4]
 8013816:	2c00      	cmp	r4, #0
 8013818:	f47f af5f 	bne.w	80136da <rmw_wait+0x10e>
 801381c:	e768      	b.n	80136f0 <rmw_wait+0x124>
 801381e:	f1b8 0f00 	cmp.w	r8, #0
 8013822:	d032      	beq.n	801388a <rmw_wait+0x2be>
 8013824:	f8d8 3000 	ldr.w	r3, [r8]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d181      	bne.n	8013730 <rmw_wait+0x164>
 801382c:	461f      	mov	r7, r3
 801382e:	2d00      	cmp	r5, #0
 8013830:	d18f      	bne.n	8013752 <rmw_wait+0x186>
 8013832:	462f      	mov	r7, r5
 8013834:	2e00      	cmp	r6, #0
 8013836:	d1a9      	bne.n	801378c <rmw_wait+0x1c0>
 8013838:	2002      	movs	r0, #2
 801383a:	b009      	add	sp, #36	@ 0x24
 801383c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013840:	2e00      	cmp	r6, #0
 8013842:	d0ba      	beq.n	80137ba <rmw_wait+0x1ee>
 8013844:	6834      	ldr	r4, [r6, #0]
 8013846:	2701      	movs	r7, #1
 8013848:	2c00      	cmp	r4, #0
 801384a:	d1a1      	bne.n	8013790 <rmw_wait+0x1c4>
 801384c:	e7b5      	b.n	80137ba <rmw_wait+0x1ee>
 801384e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013852:	f7ff f9d5 	bl	8012c00 <rmw_time_total_nsec>
 8013856:	2300      	movs	r3, #0
 8013858:	4a13      	ldr	r2, [pc, #76]	@ (80138a8 <rmw_wait+0x2dc>)
 801385a:	f7ec fd99 	bl	8000390 <__aeabi_uldivmod>
 801385e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013862:	f171 0300 	sbcs.w	r3, r1, #0
 8013866:	4607      	mov	r7, r0
 8013868:	bfa8      	it	ge
 801386a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801386e:	e6c9      	b.n	8013604 <rmw_wait+0x38>
 8013870:	f1b8 0f00 	cmp.w	r8, #0
 8013874:	d009      	beq.n	801388a <rmw_wait+0x2be>
 8013876:	f8d8 3000 	ldr.w	r3, [r8]
 801387a:	464f      	mov	r7, r9
 801387c:	2b00      	cmp	r3, #0
 801387e:	f47f af57 	bne.w	8013730 <rmw_wait+0x164>
 8013882:	2d00      	cmp	r5, #0
 8013884:	f47f af65 	bne.w	8013752 <rmw_wait+0x186>
 8013888:	e7d3      	b.n	8013832 <rmw_wait+0x266>
 801388a:	b17d      	cbz	r5, 80138ac <rmw_wait+0x2e0>
 801388c:	682b      	ldr	r3, [r5, #0]
 801388e:	4647      	mov	r7, r8
 8013890:	2b00      	cmp	r3, #0
 8013892:	f47f af60 	bne.w	8013756 <rmw_wait+0x18a>
 8013896:	2e00      	cmp	r6, #0
 8013898:	f47f af78 	bne.w	801378c <rmw_wait+0x1c0>
 801389c:	e7cc      	b.n	8013838 <rmw_wait+0x26c>
 801389e:	bf00      	nop
 80138a0:	080166f8 	.word	0x080166f8
 80138a4:	2000aa74 	.word	0x2000aa74
 80138a8:	000f4240 	.word	0x000f4240
 80138ac:	2e00      	cmp	r6, #0
 80138ae:	d0c3      	beq.n	8013838 <rmw_wait+0x26c>
 80138b0:	6834      	ldr	r4, [r6, #0]
 80138b2:	462f      	mov	r7, r5
 80138b4:	2c00      	cmp	r4, #0
 80138b6:	f47f af6b 	bne.w	8013790 <rmw_wait+0x1c4>
 80138ba:	e7bd      	b.n	8013838 <rmw_wait+0x26c>

080138bc <rmw_create_wait_set>:
 80138bc:	b508      	push	{r3, lr}
 80138be:	4803      	ldr	r0, [pc, #12]	@ (80138cc <rmw_create_wait_set+0x10>)
 80138c0:	f7ff fbfe 	bl	80130c0 <get_memory>
 80138c4:	b108      	cbz	r0, 80138ca <rmw_create_wait_set+0xe>
 80138c6:	6880      	ldr	r0, [r0, #8]
 80138c8:	3010      	adds	r0, #16
 80138ca:	bd08      	pop	{r3, pc}
 80138cc:	2000aab4 	.word	0x2000aab4

080138d0 <rmw_destroy_wait_set>:
 80138d0:	b508      	push	{r3, lr}
 80138d2:	4b08      	ldr	r3, [pc, #32]	@ (80138f4 <rmw_destroy_wait_set+0x24>)
 80138d4:	6819      	ldr	r1, [r3, #0]
 80138d6:	b911      	cbnz	r1, 80138de <rmw_destroy_wait_set+0xe>
 80138d8:	e00a      	b.n	80138f0 <rmw_destroy_wait_set+0x20>
 80138da:	6849      	ldr	r1, [r1, #4]
 80138dc:	b141      	cbz	r1, 80138f0 <rmw_destroy_wait_set+0x20>
 80138de:	688b      	ldr	r3, [r1, #8]
 80138e0:	3310      	adds	r3, #16
 80138e2:	4298      	cmp	r0, r3
 80138e4:	d1f9      	bne.n	80138da <rmw_destroy_wait_set+0xa>
 80138e6:	4803      	ldr	r0, [pc, #12]	@ (80138f4 <rmw_destroy_wait_set+0x24>)
 80138e8:	f7ff fbfa 	bl	80130e0 <put_memory>
 80138ec:	2000      	movs	r0, #0
 80138ee:	bd08      	pop	{r3, pc}
 80138f0:	2001      	movs	r0, #1
 80138f2:	bd08      	pop	{r3, pc}
 80138f4:	2000aab4 	.word	0x2000aab4

080138f8 <rmw_uros_epoch_nanos>:
 80138f8:	4b05      	ldr	r3, [pc, #20]	@ (8013910 <rmw_uros_epoch_nanos+0x18>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	b123      	cbz	r3, 8013908 <rmw_uros_epoch_nanos+0x10>
 80138fe:	6898      	ldr	r0, [r3, #8]
 8013900:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013904:	f7f9 b8ca 	b.w	800ca9c <uxr_epoch_nanos>
 8013908:	2000      	movs	r0, #0
 801390a:	2100      	movs	r1, #0
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	2000aa74 	.word	0x2000aa74

08013914 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013918:	6805      	ldr	r5, [r0, #0]
 801391a:	4604      	mov	r4, r0
 801391c:	4628      	mov	r0, r5
 801391e:	460e      	mov	r6, r1
 8013920:	f7ec fc7e 	bl	8000220 <strcmp>
 8013924:	b1c8      	cbz	r0, 801395a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013926:	4b11      	ldr	r3, [pc, #68]	@ (801396c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	429d      	cmp	r5, r3
 801392c:	d112      	bne.n	8013954 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801392e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013932:	f8d8 4000 	ldr.w	r4, [r8]
 8013936:	b16c      	cbz	r4, 8013954 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013938:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801393c:	2700      	movs	r7, #0
 801393e:	3d04      	subs	r5, #4
 8013940:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013944:	4631      	mov	r1, r6
 8013946:	f7ec fc6b 	bl	8000220 <strcmp>
 801394a:	00bb      	lsls	r3, r7, #2
 801394c:	b140      	cbz	r0, 8013960 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801394e:	3701      	adds	r7, #1
 8013950:	42bc      	cmp	r4, r7
 8013952:	d1f5      	bne.n	8013940 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013954:	2000      	movs	r0, #0
 8013956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801395a:	4620      	mov	r0, r4
 801395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013960:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013968:	58d3      	ldr	r3, [r2, r3]
 801396a:	4718      	bx	r3
 801396c:	200000b0 	.word	0x200000b0

08013970 <std_msgs__msg__Int32__init>:
 8013970:	3800      	subs	r0, #0
 8013972:	bf18      	it	ne
 8013974:	2001      	movne	r0, #1
 8013976:	4770      	bx	lr

08013978 <std_msgs__msg__Int32__fini>:
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop

0801397c <ucdr_serialize_endian_array_char>:
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	4619      	mov	r1, r3
 8013982:	461f      	mov	r7, r3
 8013984:	4605      	mov	r5, r0
 8013986:	4690      	mov	r8, r2
 8013988:	f7f8 fa8c 	bl	800bea4 <ucdr_check_buffer_available_for>
 801398c:	b9e0      	cbnz	r0, 80139c8 <ucdr_serialize_endian_array_char+0x4c>
 801398e:	463e      	mov	r6, r7
 8013990:	e009      	b.n	80139a6 <ucdr_serialize_endian_array_char+0x2a>
 8013992:	68a8      	ldr	r0, [r5, #8]
 8013994:	f001 ff87 	bl	80158a6 <memcpy>
 8013998:	68ab      	ldr	r3, [r5, #8]
 801399a:	6928      	ldr	r0, [r5, #16]
 801399c:	4423      	add	r3, r4
 801399e:	4420      	add	r0, r4
 80139a0:	1b36      	subs	r6, r6, r4
 80139a2:	60ab      	str	r3, [r5, #8]
 80139a4:	6128      	str	r0, [r5, #16]
 80139a6:	4631      	mov	r1, r6
 80139a8:	2201      	movs	r2, #1
 80139aa:	4628      	mov	r0, r5
 80139ac:	f7f8 fb02 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 80139b0:	1bb9      	subs	r1, r7, r6
 80139b2:	4441      	add	r1, r8
 80139b4:	4604      	mov	r4, r0
 80139b6:	4602      	mov	r2, r0
 80139b8:	2800      	cmp	r0, #0
 80139ba:	d1ea      	bne.n	8013992 <ucdr_serialize_endian_array_char+0x16>
 80139bc:	2301      	movs	r3, #1
 80139be:	7da8      	ldrb	r0, [r5, #22]
 80139c0:	756b      	strb	r3, [r5, #21]
 80139c2:	4058      	eors	r0, r3
 80139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c8:	463a      	mov	r2, r7
 80139ca:	68a8      	ldr	r0, [r5, #8]
 80139cc:	4641      	mov	r1, r8
 80139ce:	f001 ff6a 	bl	80158a6 <memcpy>
 80139d2:	68aa      	ldr	r2, [r5, #8]
 80139d4:	692b      	ldr	r3, [r5, #16]
 80139d6:	443a      	add	r2, r7
 80139d8:	443b      	add	r3, r7
 80139da:	60aa      	str	r2, [r5, #8]
 80139dc:	612b      	str	r3, [r5, #16]
 80139de:	e7ed      	b.n	80139bc <ucdr_serialize_endian_array_char+0x40>

080139e0 <ucdr_deserialize_endian_array_char>:
 80139e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	4619      	mov	r1, r3
 80139e6:	461f      	mov	r7, r3
 80139e8:	4605      	mov	r5, r0
 80139ea:	4690      	mov	r8, r2
 80139ec:	f7f8 fa5a 	bl	800bea4 <ucdr_check_buffer_available_for>
 80139f0:	b9e0      	cbnz	r0, 8013a2c <ucdr_deserialize_endian_array_char+0x4c>
 80139f2:	463e      	mov	r6, r7
 80139f4:	e009      	b.n	8013a0a <ucdr_deserialize_endian_array_char+0x2a>
 80139f6:	68a9      	ldr	r1, [r5, #8]
 80139f8:	f001 ff55 	bl	80158a6 <memcpy>
 80139fc:	68ab      	ldr	r3, [r5, #8]
 80139fe:	6928      	ldr	r0, [r5, #16]
 8013a00:	4423      	add	r3, r4
 8013a02:	4420      	add	r0, r4
 8013a04:	1b36      	subs	r6, r6, r4
 8013a06:	60ab      	str	r3, [r5, #8]
 8013a08:	6128      	str	r0, [r5, #16]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	4631      	mov	r1, r6
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f7f8 fad0 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 8013a14:	4604      	mov	r4, r0
 8013a16:	1bb8      	subs	r0, r7, r6
 8013a18:	4440      	add	r0, r8
 8013a1a:	4622      	mov	r2, r4
 8013a1c:	2c00      	cmp	r4, #0
 8013a1e:	d1ea      	bne.n	80139f6 <ucdr_deserialize_endian_array_char+0x16>
 8013a20:	2301      	movs	r3, #1
 8013a22:	7da8      	ldrb	r0, [r5, #22]
 8013a24:	756b      	strb	r3, [r5, #21]
 8013a26:	4058      	eors	r0, r3
 8013a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a2c:	463a      	mov	r2, r7
 8013a2e:	68a9      	ldr	r1, [r5, #8]
 8013a30:	4640      	mov	r0, r8
 8013a32:	f001 ff38 	bl	80158a6 <memcpy>
 8013a36:	68aa      	ldr	r2, [r5, #8]
 8013a38:	692b      	ldr	r3, [r5, #16]
 8013a3a:	443a      	add	r2, r7
 8013a3c:	443b      	add	r3, r7
 8013a3e:	60aa      	str	r2, [r5, #8]
 8013a40:	612b      	str	r3, [r5, #16]
 8013a42:	e7ed      	b.n	8013a20 <ucdr_deserialize_endian_array_char+0x40>

08013a44 <ucdr_serialize_array_uint8_t>:
 8013a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a48:	4688      	mov	r8, r1
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	4617      	mov	r7, r2
 8013a4e:	4605      	mov	r5, r0
 8013a50:	f7f8 fa28 	bl	800bea4 <ucdr_check_buffer_available_for>
 8013a54:	b9e0      	cbnz	r0, 8013a90 <ucdr_serialize_array_uint8_t+0x4c>
 8013a56:	463e      	mov	r6, r7
 8013a58:	e009      	b.n	8013a6e <ucdr_serialize_array_uint8_t+0x2a>
 8013a5a:	68a8      	ldr	r0, [r5, #8]
 8013a5c:	f001 ff23 	bl	80158a6 <memcpy>
 8013a60:	68aa      	ldr	r2, [r5, #8]
 8013a62:	692b      	ldr	r3, [r5, #16]
 8013a64:	4422      	add	r2, r4
 8013a66:	4423      	add	r3, r4
 8013a68:	1b36      	subs	r6, r6, r4
 8013a6a:	60aa      	str	r2, [r5, #8]
 8013a6c:	612b      	str	r3, [r5, #16]
 8013a6e:	4631      	mov	r1, r6
 8013a70:	2201      	movs	r2, #1
 8013a72:	4628      	mov	r0, r5
 8013a74:	f7f8 fa9e 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 8013a78:	1bb9      	subs	r1, r7, r6
 8013a7a:	4441      	add	r1, r8
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	4602      	mov	r2, r0
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d1ea      	bne.n	8013a5a <ucdr_serialize_array_uint8_t+0x16>
 8013a84:	2301      	movs	r3, #1
 8013a86:	7da8      	ldrb	r0, [r5, #22]
 8013a88:	756b      	strb	r3, [r5, #21]
 8013a8a:	4058      	eors	r0, r3
 8013a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a90:	463a      	mov	r2, r7
 8013a92:	68a8      	ldr	r0, [r5, #8]
 8013a94:	4641      	mov	r1, r8
 8013a96:	f001 ff06 	bl	80158a6 <memcpy>
 8013a9a:	68aa      	ldr	r2, [r5, #8]
 8013a9c:	692b      	ldr	r3, [r5, #16]
 8013a9e:	443a      	add	r2, r7
 8013aa0:	443b      	add	r3, r7
 8013aa2:	60aa      	str	r2, [r5, #8]
 8013aa4:	612b      	str	r3, [r5, #16]
 8013aa6:	e7ed      	b.n	8013a84 <ucdr_serialize_array_uint8_t+0x40>

08013aa8 <ucdr_serialize_endian_array_uint8_t>:
 8013aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	4619      	mov	r1, r3
 8013aae:	461f      	mov	r7, r3
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	4690      	mov	r8, r2
 8013ab4:	f7f8 f9f6 	bl	800bea4 <ucdr_check_buffer_available_for>
 8013ab8:	b9e0      	cbnz	r0, 8013af4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013aba:	463e      	mov	r6, r7
 8013abc:	e009      	b.n	8013ad2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013abe:	68a8      	ldr	r0, [r5, #8]
 8013ac0:	f001 fef1 	bl	80158a6 <memcpy>
 8013ac4:	68ab      	ldr	r3, [r5, #8]
 8013ac6:	6928      	ldr	r0, [r5, #16]
 8013ac8:	4423      	add	r3, r4
 8013aca:	4420      	add	r0, r4
 8013acc:	1b36      	subs	r6, r6, r4
 8013ace:	60ab      	str	r3, [r5, #8]
 8013ad0:	6128      	str	r0, [r5, #16]
 8013ad2:	4631      	mov	r1, r6
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f7f8 fa6c 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 8013adc:	1bb9      	subs	r1, r7, r6
 8013ade:	4441      	add	r1, r8
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	d1ea      	bne.n	8013abe <ucdr_serialize_endian_array_uint8_t+0x16>
 8013ae8:	2301      	movs	r3, #1
 8013aea:	7da8      	ldrb	r0, [r5, #22]
 8013aec:	756b      	strb	r3, [r5, #21]
 8013aee:	4058      	eors	r0, r3
 8013af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af4:	463a      	mov	r2, r7
 8013af6:	68a8      	ldr	r0, [r5, #8]
 8013af8:	4641      	mov	r1, r8
 8013afa:	f001 fed4 	bl	80158a6 <memcpy>
 8013afe:	68aa      	ldr	r2, [r5, #8]
 8013b00:	692b      	ldr	r3, [r5, #16]
 8013b02:	443a      	add	r2, r7
 8013b04:	443b      	add	r3, r7
 8013b06:	60aa      	str	r2, [r5, #8]
 8013b08:	612b      	str	r3, [r5, #16]
 8013b0a:	e7ed      	b.n	8013ae8 <ucdr_serialize_endian_array_uint8_t+0x40>

08013b0c <ucdr_deserialize_array_uint8_t>:
 8013b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b10:	4688      	mov	r8, r1
 8013b12:	4611      	mov	r1, r2
 8013b14:	4617      	mov	r7, r2
 8013b16:	4605      	mov	r5, r0
 8013b18:	f7f8 f9c4 	bl	800bea4 <ucdr_check_buffer_available_for>
 8013b1c:	b9e0      	cbnz	r0, 8013b58 <ucdr_deserialize_array_uint8_t+0x4c>
 8013b1e:	463e      	mov	r6, r7
 8013b20:	e009      	b.n	8013b36 <ucdr_deserialize_array_uint8_t+0x2a>
 8013b22:	68a9      	ldr	r1, [r5, #8]
 8013b24:	f001 febf 	bl	80158a6 <memcpy>
 8013b28:	68aa      	ldr	r2, [r5, #8]
 8013b2a:	692b      	ldr	r3, [r5, #16]
 8013b2c:	4422      	add	r2, r4
 8013b2e:	4423      	add	r3, r4
 8013b30:	1b36      	subs	r6, r6, r4
 8013b32:	60aa      	str	r2, [r5, #8]
 8013b34:	612b      	str	r3, [r5, #16]
 8013b36:	2201      	movs	r2, #1
 8013b38:	4631      	mov	r1, r6
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f7f8 fa3a 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 8013b40:	4604      	mov	r4, r0
 8013b42:	1bb8      	subs	r0, r7, r6
 8013b44:	4440      	add	r0, r8
 8013b46:	4622      	mov	r2, r4
 8013b48:	2c00      	cmp	r4, #0
 8013b4a:	d1ea      	bne.n	8013b22 <ucdr_deserialize_array_uint8_t+0x16>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	7da8      	ldrb	r0, [r5, #22]
 8013b50:	756b      	strb	r3, [r5, #21]
 8013b52:	4058      	eors	r0, r3
 8013b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b58:	463a      	mov	r2, r7
 8013b5a:	68a9      	ldr	r1, [r5, #8]
 8013b5c:	4640      	mov	r0, r8
 8013b5e:	f001 fea2 	bl	80158a6 <memcpy>
 8013b62:	68aa      	ldr	r2, [r5, #8]
 8013b64:	692b      	ldr	r3, [r5, #16]
 8013b66:	443a      	add	r2, r7
 8013b68:	443b      	add	r3, r7
 8013b6a:	60aa      	str	r2, [r5, #8]
 8013b6c:	612b      	str	r3, [r5, #16]
 8013b6e:	e7ed      	b.n	8013b4c <ucdr_deserialize_array_uint8_t+0x40>

08013b70 <ucdr_deserialize_endian_array_uint8_t>:
 8013b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b74:	4619      	mov	r1, r3
 8013b76:	461f      	mov	r7, r3
 8013b78:	4605      	mov	r5, r0
 8013b7a:	4690      	mov	r8, r2
 8013b7c:	f7f8 f992 	bl	800bea4 <ucdr_check_buffer_available_for>
 8013b80:	b9e0      	cbnz	r0, 8013bbc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013b82:	463e      	mov	r6, r7
 8013b84:	e009      	b.n	8013b9a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013b86:	68a9      	ldr	r1, [r5, #8]
 8013b88:	f001 fe8d 	bl	80158a6 <memcpy>
 8013b8c:	68ab      	ldr	r3, [r5, #8]
 8013b8e:	6928      	ldr	r0, [r5, #16]
 8013b90:	4423      	add	r3, r4
 8013b92:	4420      	add	r0, r4
 8013b94:	1b36      	subs	r6, r6, r4
 8013b96:	60ab      	str	r3, [r5, #8]
 8013b98:	6128      	str	r0, [r5, #16]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	4631      	mov	r1, r6
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	f7f8 fa08 	bl	800bfb4 <ucdr_check_final_buffer_behavior_array>
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	1bb8      	subs	r0, r7, r6
 8013ba8:	4440      	add	r0, r8
 8013baa:	4622      	mov	r2, r4
 8013bac:	2c00      	cmp	r4, #0
 8013bae:	d1ea      	bne.n	8013b86 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	7da8      	ldrb	r0, [r5, #22]
 8013bb4:	756b      	strb	r3, [r5, #21]
 8013bb6:	4058      	eors	r0, r3
 8013bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bbc:	463a      	mov	r2, r7
 8013bbe:	68a9      	ldr	r1, [r5, #8]
 8013bc0:	4640      	mov	r0, r8
 8013bc2:	f001 fe70 	bl	80158a6 <memcpy>
 8013bc6:	68aa      	ldr	r2, [r5, #8]
 8013bc8:	692b      	ldr	r3, [r5, #16]
 8013bca:	443a      	add	r2, r7
 8013bcc:	443b      	add	r3, r7
 8013bce:	60aa      	str	r2, [r5, #8]
 8013bd0:	612b      	str	r3, [r5, #16]
 8013bd2:	e7ed      	b.n	8013bb0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013bd4 <ucdr_serialize_sequence_char>:
 8013bd4:	b570      	push	{r4, r5, r6, lr}
 8013bd6:	4615      	mov	r5, r2
 8013bd8:	460e      	mov	r6, r1
 8013bda:	7d01      	ldrb	r1, [r0, #20]
 8013bdc:	4604      	mov	r4, r0
 8013bde:	f7f7 fcb7 	bl	800b550 <ucdr_serialize_endian_uint32_t>
 8013be2:	b90d      	cbnz	r5, 8013be8 <ucdr_serialize_sequence_char+0x14>
 8013be4:	2001      	movs	r0, #1
 8013be6:	bd70      	pop	{r4, r5, r6, pc}
 8013be8:	7d21      	ldrb	r1, [r4, #20]
 8013bea:	462b      	mov	r3, r5
 8013bec:	4632      	mov	r2, r6
 8013bee:	4620      	mov	r0, r4
 8013bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bf4:	f7ff bec2 	b.w	801397c <ucdr_serialize_endian_array_char>

08013bf8 <ucdr_deserialize_sequence_char>:
 8013bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfc:	461d      	mov	r5, r3
 8013bfe:	4616      	mov	r6, r2
 8013c00:	460f      	mov	r7, r1
 8013c02:	461a      	mov	r2, r3
 8013c04:	7d01      	ldrb	r1, [r0, #20]
 8013c06:	4604      	mov	r4, r0
 8013c08:	f7f7 fdca 	bl	800b7a0 <ucdr_deserialize_endian_uint32_t>
 8013c0c:	682b      	ldr	r3, [r5, #0]
 8013c0e:	429e      	cmp	r6, r3
 8013c10:	bf3c      	itt	cc
 8013c12:	2201      	movcc	r2, #1
 8013c14:	75a2      	strbcc	r2, [r4, #22]
 8013c16:	b913      	cbnz	r3, 8013c1e <ucdr_deserialize_sequence_char+0x26>
 8013c18:	2001      	movs	r0, #1
 8013c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c1e:	7d21      	ldrb	r1, [r4, #20]
 8013c20:	463a      	mov	r2, r7
 8013c22:	4620      	mov	r0, r4
 8013c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c28:	f7ff beda 	b.w	80139e0 <ucdr_deserialize_endian_array_char>

08013c2c <ucdr_serialize_sequence_uint8_t>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	4615      	mov	r5, r2
 8013c30:	460e      	mov	r6, r1
 8013c32:	7d01      	ldrb	r1, [r0, #20]
 8013c34:	4604      	mov	r4, r0
 8013c36:	f7f7 fc8b 	bl	800b550 <ucdr_serialize_endian_uint32_t>
 8013c3a:	b90d      	cbnz	r5, 8013c40 <ucdr_serialize_sequence_uint8_t+0x14>
 8013c3c:	2001      	movs	r0, #1
 8013c3e:	bd70      	pop	{r4, r5, r6, pc}
 8013c40:	7d21      	ldrb	r1, [r4, #20]
 8013c42:	462b      	mov	r3, r5
 8013c44:	4632      	mov	r2, r6
 8013c46:	4620      	mov	r0, r4
 8013c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c4c:	f7ff bf2c 	b.w	8013aa8 <ucdr_serialize_endian_array_uint8_t>

08013c50 <ucdr_deserialize_sequence_uint8_t>:
 8013c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c54:	461d      	mov	r5, r3
 8013c56:	4616      	mov	r6, r2
 8013c58:	460f      	mov	r7, r1
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	7d01      	ldrb	r1, [r0, #20]
 8013c5e:	4604      	mov	r4, r0
 8013c60:	f7f7 fd9e 	bl	800b7a0 <ucdr_deserialize_endian_uint32_t>
 8013c64:	682b      	ldr	r3, [r5, #0]
 8013c66:	429e      	cmp	r6, r3
 8013c68:	bf3c      	itt	cc
 8013c6a:	2201      	movcc	r2, #1
 8013c6c:	75a2      	strbcc	r2, [r4, #22]
 8013c6e:	b913      	cbnz	r3, 8013c76 <ucdr_deserialize_sequence_uint8_t+0x26>
 8013c70:	2001      	movs	r0, #1
 8013c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c76:	7d21      	ldrb	r1, [r4, #20]
 8013c78:	463a      	mov	r2, r7
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c80:	f7ff bf76 	b.w	8013b70 <ucdr_deserialize_endian_array_uint8_t>

08013c84 <ucdr_serialize_string>:
 8013c84:	b510      	push	{r4, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	4604      	mov	r4, r0
 8013c8a:	4608      	mov	r0, r1
 8013c8c:	9101      	str	r1, [sp, #4]
 8013c8e:	f7ec fad1 	bl	8000234 <strlen>
 8013c92:	9901      	ldr	r1, [sp, #4]
 8013c94:	1c42      	adds	r2, r0, #1
 8013c96:	4620      	mov	r0, r4
 8013c98:	b002      	add	sp, #8
 8013c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c9e:	f7ff bf99 	b.w	8013bd4 <ucdr_serialize_sequence_char>
 8013ca2:	bf00      	nop

08013ca4 <ucdr_deserialize_string>:
 8013ca4:	b500      	push	{lr}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	ab01      	add	r3, sp, #4
 8013caa:	f7ff ffa5 	bl	8013bf8 <ucdr_deserialize_sequence_char>
 8013cae:	b003      	add	sp, #12
 8013cb0:	f85d fb04 	ldr.w	pc, [sp], #4

08013cb4 <uxr_init_input_best_effort_stream>:
 8013cb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013cb8:	8003      	strh	r3, [r0, #0]
 8013cba:	4770      	bx	lr

08013cbc <uxr_reset_input_best_effort_stream>:
 8013cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013cc0:	8003      	strh	r3, [r0, #0]
 8013cc2:	4770      	bx	lr

08013cc4 <uxr_receive_best_effort_message>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	8800      	ldrh	r0, [r0, #0]
 8013cca:	460d      	mov	r5, r1
 8013ccc:	f000 fd42 	bl	8014754 <uxr_seq_num_cmp>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013cd8:	bfb8      	it	lt
 8013cda:	8025      	strhlt	r5, [r4, #0]
 8013cdc:	bd38      	pop	{r3, r4, r5, pc}
 8013cde:	bf00      	nop

08013ce0 <on_full_input_buffer>:
 8013ce0:	b570      	push	{r4, r5, r6, lr}
 8013ce2:	4605      	mov	r5, r0
 8013ce4:	460c      	mov	r4, r1
 8013ce6:	682b      	ldr	r3, [r5, #0]
 8013ce8:	6809      	ldr	r1, [r1, #0]
 8013cea:	8920      	ldrh	r0, [r4, #8]
 8013cec:	6862      	ldr	r2, [r4, #4]
 8013cee:	fbb2 f2f0 	udiv	r2, r2, r0
 8013cf2:	eba3 0c01 	sub.w	ip, r3, r1
 8013cf6:	fbbc fcf2 	udiv	ip, ip, r2
 8013cfa:	f10c 0c01 	add.w	ip, ip, #1
 8013cfe:	fa1f f38c 	uxth.w	r3, ip
 8013d02:	fbb3 f6f0 	udiv	r6, r3, r0
 8013d06:	fb00 3316 	mls	r3, r0, r6, r3
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	fb02 f303 	mul.w	r3, r2, r3
 8013d10:	1d18      	adds	r0, r3, #4
 8013d12:	4408      	add	r0, r1
 8013d14:	7d26      	ldrb	r6, [r4, #20]
 8013d16:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013d1a:	b116      	cbz	r6, 8013d22 <on_full_input_buffer+0x42>
 8013d1c:	2600      	movs	r6, #0
 8013d1e:	f840 6c04 	str.w	r6, [r0, #-4]
 8013d22:	2a03      	cmp	r2, #3
 8013d24:	d801      	bhi.n	8013d2a <on_full_input_buffer+0x4a>
 8013d26:	2001      	movs	r0, #1
 8013d28:	bd70      	pop	{r4, r5, r6, pc}
 8013d2a:	3308      	adds	r3, #8
 8013d2c:	4419      	add	r1, r3
 8013d2e:	4628      	mov	r0, r5
 8013d30:	692b      	ldr	r3, [r5, #16]
 8013d32:	3a04      	subs	r2, #4
 8013d34:	f7f8 f902 	bl	800bf3c <ucdr_init_buffer_origin>
 8013d38:	4628      	mov	r0, r5
 8013d3a:	4903      	ldr	r1, [pc, #12]	@ (8013d48 <on_full_input_buffer+0x68>)
 8013d3c:	4622      	mov	r2, r4
 8013d3e:	f7f8 f8d9 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 8013d42:	2000      	movs	r0, #0
 8013d44:	bd70      	pop	{r4, r5, r6, pc}
 8013d46:	bf00      	nop
 8013d48:	08013ce1 	.word	0x08013ce1

08013d4c <uxr_init_input_reliable_stream>:
 8013d4c:	b500      	push	{lr}
 8013d4e:	e9c0 1200 	strd	r1, r2, [r0]
 8013d52:	f04f 0e00 	mov.w	lr, #0
 8013d56:	9a01      	ldr	r2, [sp, #4]
 8013d58:	8103      	strh	r3, [r0, #8]
 8013d5a:	6102      	str	r2, [r0, #16]
 8013d5c:	f880 e014 	strb.w	lr, [r0, #20]
 8013d60:	b1d3      	cbz	r3, 8013d98 <uxr_init_input_reliable_stream+0x4c>
 8013d62:	f8c1 e000 	str.w	lr, [r1]
 8013d66:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013d6a:	f1bc 0f01 	cmp.w	ip, #1
 8013d6e:	d913      	bls.n	8013d98 <uxr_init_input_reliable_stream+0x4c>
 8013d70:	2301      	movs	r3, #1
 8013d72:	fbb3 f1fc 	udiv	r1, r3, ip
 8013d76:	fb0c 3111 	mls	r1, ip, r1, r3
 8013d7a:	b289      	uxth	r1, r1
 8013d7c:	6842      	ldr	r2, [r0, #4]
 8013d7e:	fbb2 f2fc 	udiv	r2, r2, ip
 8013d82:	fb01 f202 	mul.w	r2, r1, r2
 8013d86:	6801      	ldr	r1, [r0, #0]
 8013d88:	f841 e002 	str.w	lr, [r1, r2]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	459c      	cmp	ip, r3
 8013d96:	d8ec      	bhi.n	8013d72 <uxr_init_input_reliable_stream+0x26>
 8013d98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d9c:	60c3      	str	r3, [r0, #12]
 8013d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013da2:	bf00      	nop

08013da4 <uxr_reset_input_reliable_stream>:
 8013da4:	8901      	ldrh	r1, [r0, #8]
 8013da6:	b1e9      	cbz	r1, 8013de4 <uxr_reset_input_reliable_stream+0x40>
 8013da8:	f04f 0c00 	mov.w	ip, #0
 8013dac:	b500      	push	{lr}
 8013dae:	4663      	mov	r3, ip
 8013db0:	46e6      	mov	lr, ip
 8013db2:	fbb3 f2f1 	udiv	r2, r3, r1
 8013db6:	fb01 3312 	mls	r3, r1, r2, r3
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	6842      	ldr	r2, [r0, #4]
 8013dbe:	fbb2 f2f1 	udiv	r2, r2, r1
 8013dc2:	fb02 f303 	mul.w	r3, r2, r3
 8013dc6:	6802      	ldr	r2, [r0, #0]
 8013dc8:	f842 e003 	str.w	lr, [r2, r3]
 8013dcc:	f10c 0c01 	add.w	ip, ip, #1
 8013dd0:	8901      	ldrh	r1, [r0, #8]
 8013dd2:	fa1f f38c 	uxth.w	r3, ip
 8013dd6:	4299      	cmp	r1, r3
 8013dd8:	d8eb      	bhi.n	8013db2 <uxr_reset_input_reliable_stream+0xe>
 8013dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013dde:	60c3      	str	r3, [r0, #12]
 8013de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8013de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013de8:	60c3      	str	r3, [r0, #12]
 8013dea:	4770      	bx	lr

08013dec <uxr_receive_reliable_message>:
 8013dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013df0:	4604      	mov	r4, r0
 8013df2:	460d      	mov	r5, r1
 8013df4:	8901      	ldrh	r1, [r0, #8]
 8013df6:	8980      	ldrh	r0, [r0, #12]
 8013df8:	4690      	mov	r8, r2
 8013dfa:	461f      	mov	r7, r3
 8013dfc:	f000 fca2 	bl	8014744 <uxr_seq_num_add>
 8013e00:	4629      	mov	r1, r5
 8013e02:	4606      	mov	r6, r0
 8013e04:	89a0      	ldrh	r0, [r4, #12]
 8013e06:	f000 fca5 	bl	8014754 <uxr_seq_num_cmp>
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	db0a      	blt.n	8013e24 <uxr_receive_reliable_message+0x38>
 8013e0e:	2600      	movs	r6, #0
 8013e10:	89e0      	ldrh	r0, [r4, #14]
 8013e12:	4629      	mov	r1, r5
 8013e14:	f000 fc9e 	bl	8014754 <uxr_seq_num_cmp>
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	da00      	bge.n	8013e1e <uxr_receive_reliable_message+0x32>
 8013e1c:	81e5      	strh	r5, [r4, #14]
 8013e1e:	4630      	mov	r0, r6
 8013e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e24:	4630      	mov	r0, r6
 8013e26:	4629      	mov	r1, r5
 8013e28:	f000 fc94 	bl	8014754 <uxr_seq_num_cmp>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	dbee      	blt.n	8013e0e <uxr_receive_reliable_message+0x22>
 8013e30:	6923      	ldr	r3, [r4, #16]
 8013e32:	4640      	mov	r0, r8
 8013e34:	4798      	blx	r3
 8013e36:	2101      	movs	r1, #1
 8013e38:	4681      	mov	r9, r0
 8013e3a:	89a0      	ldrh	r0, [r4, #12]
 8013e3c:	f000 fc82 	bl	8014744 <uxr_seq_num_add>
 8013e40:	f1b9 0f00 	cmp.w	r9, #0
 8013e44:	d101      	bne.n	8013e4a <uxr_receive_reliable_message+0x5e>
 8013e46:	4285      	cmp	r5, r0
 8013e48:	d047      	beq.n	8013eda <uxr_receive_reliable_message+0xee>
 8013e4a:	8922      	ldrh	r2, [r4, #8]
 8013e4c:	fbb5 f0f2 	udiv	r0, r5, r2
 8013e50:	fb02 5010 	mls	r0, r2, r0, r5
 8013e54:	b280      	uxth	r0, r0
 8013e56:	6863      	ldr	r3, [r4, #4]
 8013e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e5c:	fb00 f303 	mul.w	r3, r0, r3
 8013e60:	6820      	ldr	r0, [r4, #0]
 8013e62:	3304      	adds	r3, #4
 8013e64:	4418      	add	r0, r3
 8013e66:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d1cf      	bne.n	8013e0e <uxr_receive_reliable_message+0x22>
 8013e6e:	4641      	mov	r1, r8
 8013e70:	463a      	mov	r2, r7
 8013e72:	f001 fd18 	bl	80158a6 <memcpy>
 8013e76:	8921      	ldrh	r1, [r4, #8]
 8013e78:	fbb5 f2f1 	udiv	r2, r5, r1
 8013e7c:	fb01 5212 	mls	r2, r1, r2, r5
 8013e80:	b292      	uxth	r2, r2
 8013e82:	6863      	ldr	r3, [r4, #4]
 8013e84:	fbb3 f3f1 	udiv	r3, r3, r1
 8013e88:	fb02 f303 	mul.w	r3, r2, r3
 8013e8c:	6822      	ldr	r2, [r4, #0]
 8013e8e:	50d7      	str	r7, [r2, r3]
 8013e90:	9a08      	ldr	r2, [sp, #32]
 8013e92:	2301      	movs	r3, #1
 8013e94:	7013      	strb	r3, [r2, #0]
 8013e96:	f1b9 0f00 	cmp.w	r9, #0
 8013e9a:	d0b8      	beq.n	8013e0e <uxr_receive_reliable_message+0x22>
 8013e9c:	89a6      	ldrh	r6, [r4, #12]
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	2101      	movs	r1, #1
 8013ea2:	f000 fc4f 	bl	8014744 <uxr_seq_num_add>
 8013ea6:	8922      	ldrh	r2, [r4, #8]
 8013ea8:	6863      	ldr	r3, [r4, #4]
 8013eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8013eae:	4606      	mov	r6, r0
 8013eb0:	fbb0 f0f2 	udiv	r0, r0, r2
 8013eb4:	fb02 6010 	mls	r0, r2, r0, r6
 8013eb8:	b280      	uxth	r0, r0
 8013eba:	fb00 f303 	mul.w	r3, r0, r3
 8013ebe:	6820      	ldr	r0, [r4, #0]
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	4418      	add	r0, r3
 8013ec4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d0a0      	beq.n	8013e0e <uxr_receive_reliable_message+0x22>
 8013ecc:	6923      	ldr	r3, [r4, #16]
 8013ece:	4798      	blx	r3
 8013ed0:	2802      	cmp	r0, #2
 8013ed2:	d008      	beq.n	8013ee6 <uxr_receive_reliable_message+0xfa>
 8013ed4:	2801      	cmp	r0, #1
 8013ed6:	d0e2      	beq.n	8013e9e <uxr_receive_reliable_message+0xb2>
 8013ed8:	e799      	b.n	8013e0e <uxr_receive_reliable_message+0x22>
 8013eda:	9b08      	ldr	r3, [sp, #32]
 8013edc:	81a5      	strh	r5, [r4, #12]
 8013ede:	2601      	movs	r6, #1
 8013ee0:	f883 9000 	strb.w	r9, [r3]
 8013ee4:	e794      	b.n	8013e10 <uxr_receive_reliable_message+0x24>
 8013ee6:	2601      	movs	r6, #1
 8013ee8:	e792      	b.n	8013e10 <uxr_receive_reliable_message+0x24>
 8013eea:	bf00      	nop

08013eec <uxr_next_input_reliable_buffer_available>:
 8013eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef0:	4604      	mov	r4, r0
 8013ef2:	460f      	mov	r7, r1
 8013ef4:	8980      	ldrh	r0, [r0, #12]
 8013ef6:	2101      	movs	r1, #1
 8013ef8:	4690      	mov	r8, r2
 8013efa:	f000 fc23 	bl	8014744 <uxr_seq_num_add>
 8013efe:	8922      	ldrh	r2, [r4, #8]
 8013f00:	fbb0 f6f2 	udiv	r6, r0, r2
 8013f04:	fb02 0616 	mls	r6, r2, r6, r0
 8013f08:	b2b6      	uxth	r6, r6
 8013f0a:	6863      	ldr	r3, [r4, #4]
 8013f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f10:	fb06 f303 	mul.w	r3, r6, r3
 8013f14:	6826      	ldr	r6, [r4, #0]
 8013f16:	3304      	adds	r3, #4
 8013f18:	441e      	add	r6, r3
 8013f1a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8013f1e:	f1b9 0f00 	cmp.w	r9, #0
 8013f22:	d023      	beq.n	8013f6c <uxr_next_input_reliable_buffer_available+0x80>
 8013f24:	6923      	ldr	r3, [r4, #16]
 8013f26:	4605      	mov	r5, r0
 8013f28:	4630      	mov	r0, r6
 8013f2a:	4798      	blx	r3
 8013f2c:	4682      	mov	sl, r0
 8013f2e:	b300      	cbz	r0, 8013f72 <uxr_next_input_reliable_buffer_available+0x86>
 8013f30:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013f34:	2101      	movs	r1, #1
 8013f36:	4650      	mov	r0, sl
 8013f38:	f000 fc04 	bl	8014744 <uxr_seq_num_add>
 8013f3c:	8921      	ldrh	r1, [r4, #8]
 8013f3e:	fbb0 f2f1 	udiv	r2, r0, r1
 8013f42:	4682      	mov	sl, r0
 8013f44:	fb01 0212 	mls	r2, r1, r2, r0
 8013f48:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013f4c:	b292      	uxth	r2, r2
 8013f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f52:	fb02 f303 	mul.w	r3, r2, r3
 8013f56:	3304      	adds	r3, #4
 8013f58:	4418      	add	r0, r3
 8013f5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013f5e:	b12b      	cbz	r3, 8013f6c <uxr_next_input_reliable_buffer_available+0x80>
 8013f60:	6923      	ldr	r3, [r4, #16]
 8013f62:	4798      	blx	r3
 8013f64:	2802      	cmp	r0, #2
 8013f66:	d01b      	beq.n	8013fa0 <uxr_next_input_reliable_buffer_available+0xb4>
 8013f68:	2801      	cmp	r0, #1
 8013f6a:	d0e3      	beq.n	8013f34 <uxr_next_input_reliable_buffer_available+0x48>
 8013f6c:	2000      	movs	r0, #0
 8013f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f72:	464a      	mov	r2, r9
 8013f74:	4631      	mov	r1, r6
 8013f76:	4638      	mov	r0, r7
 8013f78:	f7f7 ffe8 	bl	800bf4c <ucdr_init_buffer>
 8013f7c:	8921      	ldrh	r1, [r4, #8]
 8013f7e:	fbb5 f2f1 	udiv	r2, r5, r1
 8013f82:	fb01 5212 	mls	r2, r1, r2, r5
 8013f86:	b292      	uxth	r2, r2
 8013f88:	6863      	ldr	r3, [r4, #4]
 8013f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f8e:	fb02 f303 	mul.w	r3, r2, r3
 8013f92:	6822      	ldr	r2, [r4, #0]
 8013f94:	f842 a003 	str.w	sl, [r2, r3]
 8013f98:	2001      	movs	r0, #1
 8013f9a:	81a5      	strh	r5, [r4, #12]
 8013f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa0:	8920      	ldrh	r0, [r4, #8]
 8013fa2:	fbb5 f3f0 	udiv	r3, r5, r0
 8013fa6:	fb00 5513 	mls	r5, r0, r3, r5
 8013faa:	b2ad      	uxth	r5, r5
 8013fac:	6863      	ldr	r3, [r4, #4]
 8013fae:	fbb3 f3f0 	udiv	r3, r3, r0
 8013fb2:	fb03 f505 	mul.w	r5, r3, r5
 8013fb6:	6823      	ldr	r3, [r4, #0]
 8013fb8:	2000      	movs	r0, #0
 8013fba:	5158      	str	r0, [r3, r5]
 8013fbc:	eb06 0108 	add.w	r1, r6, r8
 8013fc0:	eba9 0208 	sub.w	r2, r9, r8
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f7f7 ffc1 	bl	800bf4c <ucdr_init_buffer>
 8013fca:	4638      	mov	r0, r7
 8013fcc:	4903      	ldr	r1, [pc, #12]	@ (8013fdc <uxr_next_input_reliable_buffer_available+0xf0>)
 8013fce:	4622      	mov	r2, r4
 8013fd0:	f7f7 ff90 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 8013fd4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013fd8:	2001      	movs	r0, #1
 8013fda:	e7c8      	b.n	8013f6e <uxr_next_input_reliable_buffer_available+0x82>
 8013fdc:	08013ce1 	.word	0x08013ce1

08013fe0 <uxr_process_heartbeat>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	89c0      	ldrh	r0, [r0, #14]
 8013fe8:	4615      	mov	r5, r2
 8013fea:	f000 fbb3 	bl	8014754 <uxr_seq_num_cmp>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	bfb8      	it	lt
 8013ff2:	81e5      	strhlt	r5, [r4, #14]
 8013ff4:	bd38      	pop	{r3, r4, r5, pc}
 8013ff6:	bf00      	nop

08013ff8 <uxr_compute_acknack>:
 8013ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ffc:	8903      	ldrh	r3, [r0, #8]
 8013ffe:	8985      	ldrh	r5, [r0, #12]
 8014000:	4604      	mov	r4, r0
 8014002:	460e      	mov	r6, r1
 8014004:	b1d3      	cbz	r3, 801403c <uxr_compute_acknack+0x44>
 8014006:	4628      	mov	r0, r5
 8014008:	2701      	movs	r7, #1
 801400a:	e003      	b.n	8014014 <uxr_compute_acknack+0x1c>
 801400c:	4567      	cmp	r7, ip
 801400e:	d215      	bcs.n	801403c <uxr_compute_acknack+0x44>
 8014010:	89a0      	ldrh	r0, [r4, #12]
 8014012:	3701      	adds	r7, #1
 8014014:	b2b9      	uxth	r1, r7
 8014016:	f000 fb95 	bl	8014744 <uxr_seq_num_add>
 801401a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801401e:	fbb0 f3fc 	udiv	r3, r0, ip
 8014022:	fb0c 0313 	mls	r3, ip, r3, r0
 8014026:	b29a      	uxth	r2, r3
 8014028:	e9d4 1300 	ldrd	r1, r3, [r4]
 801402c:	fbb3 f3fc 	udiv	r3, r3, ip
 8014030:	fb02 f303 	mul.w	r3, r2, r3
 8014034:	58cb      	ldr	r3, [r1, r3]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d1e8      	bne.n	801400c <uxr_compute_acknack+0x14>
 801403a:	4605      	mov	r5, r0
 801403c:	8035      	strh	r5, [r6, #0]
 801403e:	2101      	movs	r1, #1
 8014040:	4628      	mov	r0, r5
 8014042:	89e7      	ldrh	r7, [r4, #14]
 8014044:	f000 fb82 	bl	801474c <uxr_seq_num_sub>
 8014048:	4601      	mov	r1, r0
 801404a:	4638      	mov	r0, r7
 801404c:	f000 fb7e 	bl	801474c <uxr_seq_num_sub>
 8014050:	4605      	mov	r5, r0
 8014052:	b318      	cbz	r0, 801409c <uxr_compute_acknack+0xa4>
 8014054:	f04f 0900 	mov.w	r9, #0
 8014058:	464f      	mov	r7, r9
 801405a:	f04f 0801 	mov.w	r8, #1
 801405e:	fa1f f189 	uxth.w	r1, r9
 8014062:	8830      	ldrh	r0, [r6, #0]
 8014064:	f000 fb6e 	bl	8014744 <uxr_seq_num_add>
 8014068:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801406c:	fbb0 f3fc 	udiv	r3, r0, ip
 8014070:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014074:	fb03 001c 	mls	r0, r3, ip, r0
 8014078:	b283      	uxth	r3, r0
 801407a:	fbb2 f2fc 	udiv	r2, r2, ip
 801407e:	fb02 f303 	mul.w	r3, r2, r3
 8014082:	fa08 f209 	lsl.w	r2, r8, r9
 8014086:	58cb      	ldr	r3, [r1, r3]
 8014088:	f109 0901 	add.w	r9, r9, #1
 801408c:	b90b      	cbnz	r3, 8014092 <uxr_compute_acknack+0x9a>
 801408e:	4317      	orrs	r7, r2
 8014090:	b2bf      	uxth	r7, r7
 8014092:	454d      	cmp	r5, r9
 8014094:	d1e3      	bne.n	801405e <uxr_compute_acknack+0x66>
 8014096:	4638      	mov	r0, r7
 8014098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801409c:	4607      	mov	r7, r0
 801409e:	4638      	mov	r0, r7
 80140a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080140a4 <uxr_init_output_best_effort_stream>:
 80140a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80140a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80140ac:	6001      	str	r1, [r0, #0]
 80140ae:	7303      	strb	r3, [r0, #12]
 80140b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop

080140b8 <uxr_reset_output_best_effort_stream>:
 80140b8:	7b02      	ldrb	r2, [r0, #12]
 80140ba:	6042      	str	r2, [r0, #4]
 80140bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80140c0:	81c3      	strh	r3, [r0, #14]
 80140c2:	4770      	bx	lr

080140c4 <uxr_prepare_best_effort_buffer_to_write>:
 80140c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140c6:	4604      	mov	r4, r0
 80140c8:	b083      	sub	sp, #12
 80140ca:	6840      	ldr	r0, [r0, #4]
 80140cc:	460d      	mov	r5, r1
 80140ce:	4616      	mov	r6, r2
 80140d0:	f7fa fa6c 	bl	800e5ac <uxr_submessage_padding>
 80140d4:	6863      	ldr	r3, [r4, #4]
 80140d6:	4418      	add	r0, r3
 80140d8:	68a3      	ldr	r3, [r4, #8]
 80140da:	1942      	adds	r2, r0, r5
 80140dc:	4293      	cmp	r3, r2
 80140de:	bf2c      	ite	cs
 80140e0:	2701      	movcs	r7, #1
 80140e2:	2700      	movcc	r7, #0
 80140e4:	d202      	bcs.n	80140ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80140e6:	4638      	mov	r0, r7
 80140e8:	b003      	add	sp, #12
 80140ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ec:	9000      	str	r0, [sp, #0]
 80140ee:	6821      	ldr	r1, [r4, #0]
 80140f0:	4630      	mov	r0, r6
 80140f2:	2300      	movs	r3, #0
 80140f4:	f7f7 ff18 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 80140f8:	6861      	ldr	r1, [r4, #4]
 80140fa:	4638      	mov	r0, r7
 80140fc:	4429      	add	r1, r5
 80140fe:	6061      	str	r1, [r4, #4]
 8014100:	b003      	add	sp, #12
 8014102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014104 <uxr_prepare_best_effort_buffer_to_send>:
 8014104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014108:	4604      	mov	r4, r0
 801410a:	461d      	mov	r5, r3
 801410c:	6840      	ldr	r0, [r0, #4]
 801410e:	7b23      	ldrb	r3, [r4, #12]
 8014110:	4298      	cmp	r0, r3
 8014112:	bf8c      	ite	hi
 8014114:	2601      	movhi	r6, #1
 8014116:	2600      	movls	r6, #0
 8014118:	d802      	bhi.n	8014120 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801411a:	4630      	mov	r0, r6
 801411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014120:	4688      	mov	r8, r1
 8014122:	89e0      	ldrh	r0, [r4, #14]
 8014124:	2101      	movs	r1, #1
 8014126:	4617      	mov	r7, r2
 8014128:	f000 fb0c 	bl	8014744 <uxr_seq_num_add>
 801412c:	6823      	ldr	r3, [r4, #0]
 801412e:	81e0      	strh	r0, [r4, #14]
 8014130:	8028      	strh	r0, [r5, #0]
 8014132:	f8c8 3000 	str.w	r3, [r8]
 8014136:	6863      	ldr	r3, [r4, #4]
 8014138:	603b      	str	r3, [r7, #0]
 801413a:	7b23      	ldrb	r3, [r4, #12]
 801413c:	6063      	str	r3, [r4, #4]
 801413e:	4630      	mov	r0, r6
 8014140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014144 <on_full_output_buffer>:
 8014144:	b538      	push	{r3, r4, r5, lr}
 8014146:	6802      	ldr	r2, [r0, #0]
 8014148:	460c      	mov	r4, r1
 801414a:	6809      	ldr	r1, [r1, #0]
 801414c:	8923      	ldrh	r3, [r4, #8]
 801414e:	eba2 0c01 	sub.w	ip, r2, r1
 8014152:	6862      	ldr	r2, [r4, #4]
 8014154:	fbb2 f2f3 	udiv	r2, r2, r3
 8014158:	fbbc fcf2 	udiv	ip, ip, r2
 801415c:	f10c 0c01 	add.w	ip, ip, #1
 8014160:	fa1f fc8c 	uxth.w	ip, ip
 8014164:	fbbc fef3 	udiv	lr, ip, r3
 8014168:	fb03 c31e 	mls	r3, r3, lr, ip
 801416c:	b29b      	uxth	r3, r3
 801416e:	fb02 f303 	mul.w	r3, r2, r3
 8014172:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014176:	58ca      	ldr	r2, [r1, r3]
 8014178:	4463      	add	r3, ip
 801417a:	eba2 020c 	sub.w	r2, r2, ip
 801417e:	3308      	adds	r3, #8
 8014180:	4605      	mov	r5, r0
 8014182:	4419      	add	r1, r3
 8014184:	3a04      	subs	r2, #4
 8014186:	6903      	ldr	r3, [r0, #16]
 8014188:	f7f7 fed8 	bl	800bf3c <ucdr_init_buffer_origin>
 801418c:	4628      	mov	r0, r5
 801418e:	4903      	ldr	r1, [pc, #12]	@ (801419c <on_full_output_buffer+0x58>)
 8014190:	4622      	mov	r2, r4
 8014192:	f7f7 feaf 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 8014196:	2000      	movs	r0, #0
 8014198:	bd38      	pop	{r3, r4, r5, pc}
 801419a:	bf00      	nop
 801419c:	08014145 	.word	0x08014145

080141a0 <uxr_init_output_reliable_stream>:
 80141a0:	b410      	push	{r4}
 80141a2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80141a6:	8103      	strh	r3, [r0, #8]
 80141a8:	e9c0 1200 	strd	r1, r2, [r0]
 80141ac:	f880 c00c 	strb.w	ip, [r0, #12]
 80141b0:	b1d3      	cbz	r3, 80141e8 <uxr_init_output_reliable_stream+0x48>
 80141b2:	f8c1 c000 	str.w	ip, [r1]
 80141b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80141ba:	f1bc 0f01 	cmp.w	ip, #1
 80141be:	d913      	bls.n	80141e8 <uxr_init_output_reliable_stream+0x48>
 80141c0:	2301      	movs	r3, #1
 80141c2:	fbb3 f1fc 	udiv	r1, r3, ip
 80141c6:	fb0c 3111 	mls	r1, ip, r1, r3
 80141ca:	b289      	uxth	r1, r1
 80141cc:	6842      	ldr	r2, [r0, #4]
 80141ce:	6804      	ldr	r4, [r0, #0]
 80141d0:	fbb2 f2fc 	udiv	r2, r2, ip
 80141d4:	fb01 f202 	mul.w	r2, r1, r2
 80141d8:	7b01      	ldrb	r1, [r0, #12]
 80141da:	50a1      	str	r1, [r4, r2]
 80141dc:	3301      	adds	r3, #1
 80141de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80141e2:	b29b      	uxth	r3, r3
 80141e4:	459c      	cmp	ip, r3
 80141e6:	d8ec      	bhi.n	80141c2 <uxr_init_output_reliable_stream+0x22>
 80141e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80141ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80141f0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80141f4:	4905      	ldr	r1, [pc, #20]	@ (801420c <uxr_init_output_reliable_stream+0x6c>)
 80141f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141fa:	f8c0 100e 	str.w	r1, [r0, #14]
 80141fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014202:	2300      	movs	r3, #0
 8014204:	8242      	strh	r2, [r0, #18]
 8014206:	8403      	strh	r3, [r0, #32]
 8014208:	4770      	bx	lr
 801420a:	bf00      	nop
 801420c:	ffff0000 	.word	0xffff0000

08014210 <uxr_reset_output_reliable_stream>:
 8014210:	8901      	ldrh	r1, [r0, #8]
 8014212:	b1b1      	cbz	r1, 8014242 <uxr_reset_output_reliable_stream+0x32>
 8014214:	f04f 0c00 	mov.w	ip, #0
 8014218:	4663      	mov	r3, ip
 801421a:	fbb3 f2f1 	udiv	r2, r3, r1
 801421e:	fb01 3312 	mls	r3, r1, r2, r3
 8014222:	b29b      	uxth	r3, r3
 8014224:	6842      	ldr	r2, [r0, #4]
 8014226:	fbb2 f2f1 	udiv	r2, r2, r1
 801422a:	6801      	ldr	r1, [r0, #0]
 801422c:	fb02 f303 	mul.w	r3, r2, r3
 8014230:	7b02      	ldrb	r2, [r0, #12]
 8014232:	50ca      	str	r2, [r1, r3]
 8014234:	f10c 0c01 	add.w	ip, ip, #1
 8014238:	8901      	ldrh	r1, [r0, #8]
 801423a:	fa1f f38c 	uxth.w	r3, ip
 801423e:	4299      	cmp	r1, r3
 8014240:	d8eb      	bhi.n	801421a <uxr_reset_output_reliable_stream+0xa>
 8014242:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014246:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801424a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801424e:	4904      	ldr	r1, [pc, #16]	@ (8014260 <uxr_reset_output_reliable_stream+0x50>)
 8014250:	f8c0 100e 	str.w	r1, [r0, #14]
 8014254:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014258:	2300      	movs	r3, #0
 801425a:	8242      	strh	r2, [r0, #18]
 801425c:	8403      	strh	r3, [r0, #32]
 801425e:	4770      	bx	lr
 8014260:	ffff0000 	.word	0xffff0000

08014264 <uxr_prepare_reliable_buffer_to_write>:
 8014264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014268:	4604      	mov	r4, r0
 801426a:	b091      	sub	sp, #68	@ 0x44
 801426c:	8900      	ldrh	r0, [r0, #8]
 801426e:	89e6      	ldrh	r6, [r4, #14]
 8014270:	6823      	ldr	r3, [r4, #0]
 8014272:	9204      	str	r2, [sp, #16]
 8014274:	fbb6 f2f0 	udiv	r2, r6, r0
 8014278:	fb00 6212 	mls	r2, r0, r2, r6
 801427c:	b292      	uxth	r2, r2
 801427e:	6865      	ldr	r5, [r4, #4]
 8014280:	fbb5 f5f0 	udiv	r5, r5, r0
 8014284:	fb05 3202 	mla	r2, r5, r2, r3
 8014288:	3204      	adds	r2, #4
 801428a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801428e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014292:	9203      	str	r2, [sp, #12]
 8014294:	468b      	mov	fp, r1
 8014296:	1f2f      	subs	r7, r5, #4
 8014298:	2800      	cmp	r0, #0
 801429a:	f000 814c 	beq.w	8014536 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801429e:	f04f 0c00 	mov.w	ip, #0
 80142a2:	46e2      	mov	sl, ip
 80142a4:	4661      	mov	r1, ip
 80142a6:	fbb1 f2f0 	udiv	r2, r1, r0
 80142aa:	fb00 1212 	mls	r2, r0, r2, r1
 80142ae:	b292      	uxth	r2, r2
 80142b0:	fb05 f202 	mul.w	r2, r5, r2
 80142b4:	f10c 0c01 	add.w	ip, ip, #1
 80142b8:	589a      	ldr	r2, [r3, r2]
 80142ba:	454a      	cmp	r2, r9
 80142bc:	bf08      	it	eq
 80142be:	f10a 0a01 	addeq.w	sl, sl, #1
 80142c2:	fa1f f18c 	uxth.w	r1, ip
 80142c6:	bf08      	it	eq
 80142c8:	fa1f fa8a 	uxtheq.w	sl, sl
 80142cc:	4281      	cmp	r1, r0
 80142ce:	d3ea      	bcc.n	80142a6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80142d0:	4640      	mov	r0, r8
 80142d2:	2104      	movs	r1, #4
 80142d4:	f8cd a014 	str.w	sl, [sp, #20]
 80142d8:	f7f7 fe3c 	bl	800bf54 <ucdr_alignment>
 80142dc:	4480      	add	r8, r0
 80142de:	eb08 020b 	add.w	r2, r8, fp
 80142e2:	42ba      	cmp	r2, r7
 80142e4:	f240 80cd 	bls.w	8014482 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80142e8:	7b22      	ldrb	r2, [r4, #12]
 80142ea:	445a      	add	r2, fp
 80142ec:	42ba      	cmp	r2, r7
 80142ee:	f240 80b5 	bls.w	801445c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80142f2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80142f6:	33fc      	adds	r3, #252	@ 0xfc
 80142f8:	b2ba      	uxth	r2, r7
 80142fa:	4413      	add	r3, r2
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	fb0a f903 	mul.w	r9, sl, r3
 8014302:	45d9      	cmp	r9, fp
 8014304:	9305      	str	r3, [sp, #20]
 8014306:	9306      	str	r3, [sp, #24]
 8014308:	f0c0 80b7 	bcc.w	801447a <uxr_prepare_reliable_buffer_to_write+0x216>
 801430c:	f108 0304 	add.w	r3, r8, #4
 8014310:	42bb      	cmp	r3, r7
 8014312:	f080 80db 	bcs.w	80144cc <uxr_prepare_reliable_buffer_to_write+0x268>
 8014316:	f1a2 0904 	sub.w	r9, r2, #4
 801431a:	eba9 0908 	sub.w	r9, r9, r8
 801431e:	9b05      	ldr	r3, [sp, #20]
 8014320:	fa1f f989 	uxth.w	r9, r9
 8014324:	ebab 0b09 	sub.w	fp, fp, r9
 8014328:	fbbb f2f3 	udiv	r2, fp, r3
 801432c:	fb03 b312 	mls	r3, r3, r2, fp
 8014330:	2b00      	cmp	r3, #0
 8014332:	f000 80c8 	beq.w	80144c6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8014336:	3201      	adds	r2, #1
 8014338:	b292      	uxth	r2, r2
 801433a:	9306      	str	r3, [sp, #24]
 801433c:	4552      	cmp	r2, sl
 801433e:	f200 809c 	bhi.w	801447a <uxr_prepare_reliable_buffer_to_write+0x216>
 8014342:	f10d 0b20 	add.w	fp, sp, #32
 8014346:	2a00      	cmp	r2, #0
 8014348:	d042      	beq.n	80143d0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801434a:	f8cd 801c 	str.w	r8, [sp, #28]
 801434e:	f04f 0a00 	mov.w	sl, #0
 8014352:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014356:	9505      	str	r5, [sp, #20]
 8014358:	f10d 0b20 	add.w	fp, sp, #32
 801435c:	4615      	mov	r5, r2
 801435e:	e000      	b.n	8014362 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014360:	46c1      	mov	r9, r8
 8014362:	8920      	ldrh	r0, [r4, #8]
 8014364:	fbb6 f2f0 	udiv	r2, r6, r0
 8014368:	fb00 6112 	mls	r1, r0, r2, r6
 801436c:	b28a      	uxth	r2, r1
 801436e:	6863      	ldr	r3, [r4, #4]
 8014370:	fbb3 f1f0 	udiv	r1, r3, r0
 8014374:	6823      	ldr	r3, [r4, #0]
 8014376:	fb02 f101 	mul.w	r1, r2, r1
 801437a:	3104      	adds	r1, #4
 801437c:	4419      	add	r1, r3
 801437e:	4658      	mov	r0, fp
 8014380:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014384:	9200      	str	r2, [sp, #0]
 8014386:	2300      	movs	r3, #0
 8014388:	463a      	mov	r2, r7
 801438a:	f7f7 fdcd 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 801438e:	464a      	mov	r2, r9
 8014390:	2300      	movs	r3, #0
 8014392:	210d      	movs	r1, #13
 8014394:	4658      	mov	r0, fp
 8014396:	f7fa f8c9 	bl	800e52c <uxr_buffer_submessage_header>
 801439a:	8921      	ldrh	r1, [r4, #8]
 801439c:	fbb6 f2f1 	udiv	r2, r6, r1
 80143a0:	fb01 6212 	mls	r2, r1, r2, r6
 80143a4:	b292      	uxth	r2, r2
 80143a6:	6863      	ldr	r3, [r4, #4]
 80143a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80143ac:	fb02 f303 	mul.w	r3, r2, r3
 80143b0:	6822      	ldr	r2, [r4, #0]
 80143b2:	4630      	mov	r0, r6
 80143b4:	50d7      	str	r7, [r2, r3]
 80143b6:	2101      	movs	r1, #1
 80143b8:	f000 f9c4 	bl	8014744 <uxr_seq_num_add>
 80143bc:	f10a 0a01 	add.w	sl, sl, #1
 80143c0:	fa1f f38a 	uxth.w	r3, sl
 80143c4:	429d      	cmp	r5, r3
 80143c6:	4606      	mov	r6, r0
 80143c8:	d8ca      	bhi.n	8014360 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80143ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80143ce:	9d05      	ldr	r5, [sp, #20]
 80143d0:	8920      	ldrh	r0, [r4, #8]
 80143d2:	fbb6 f3f0 	udiv	r3, r6, r0
 80143d6:	fb00 6313 	mls	r3, r0, r3, r6
 80143da:	b299      	uxth	r1, r3
 80143dc:	6863      	ldr	r3, [r4, #4]
 80143de:	fbb3 f3f0 	udiv	r3, r3, r0
 80143e2:	fb01 f303 	mul.w	r3, r1, r3
 80143e6:	6821      	ldr	r1, [r4, #0]
 80143e8:	3304      	adds	r3, #4
 80143ea:	4419      	add	r1, r3
 80143ec:	463a      	mov	r2, r7
 80143ee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80143f2:	9000      	str	r0, [sp, #0]
 80143f4:	2300      	movs	r3, #0
 80143f6:	4658      	mov	r0, fp
 80143f8:	f7f7 fd96 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 80143fc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014400:	4658      	mov	r0, fp
 8014402:	fa1f f289 	uxth.w	r2, r9
 8014406:	2302      	movs	r3, #2
 8014408:	210d      	movs	r1, #13
 801440a:	f7fa f88f 	bl	800e52c <uxr_buffer_submessage_header>
 801440e:	9b03      	ldr	r3, [sp, #12]
 8014410:	8927      	ldrh	r7, [r4, #8]
 8014412:	7b20      	ldrb	r0, [r4, #12]
 8014414:	f108 0104 	add.w	r1, r8, #4
 8014418:	440b      	add	r3, r1
 801441a:	4619      	mov	r1, r3
 801441c:	fbb6 f3f7 	udiv	r3, r6, r7
 8014420:	fb07 6313 	mls	r3, r7, r3, r6
 8014424:	f1a5 0208 	sub.w	r2, r5, #8
 8014428:	b29d      	uxth	r5, r3
 801442a:	3004      	adds	r0, #4
 801442c:	6863      	ldr	r3, [r4, #4]
 801442e:	fbb3 f3f7 	udiv	r3, r3, r7
 8014432:	fb05 f303 	mul.w	r3, r5, r3
 8014436:	6825      	ldr	r5, [r4, #0]
 8014438:	4448      	add	r0, r9
 801443a:	50e8      	str	r0, [r5, r3]
 801443c:	9d04      	ldr	r5, [sp, #16]
 801443e:	eba2 0208 	sub.w	r2, r2, r8
 8014442:	4628      	mov	r0, r5
 8014444:	f7f7 fd82 	bl	800bf4c <ucdr_init_buffer>
 8014448:	4628      	mov	r0, r5
 801444a:	493c      	ldr	r1, [pc, #240]	@ (801453c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801444c:	4622      	mov	r2, r4
 801444e:	f7f7 fd51 	bl	800bef4 <ucdr_set_on_full_buffer_callback>
 8014452:	2001      	movs	r0, #1
 8014454:	81e6      	strh	r6, [r4, #14]
 8014456:	b011      	add	sp, #68	@ 0x44
 8014458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445c:	2101      	movs	r1, #1
 801445e:	89e0      	ldrh	r0, [r4, #14]
 8014460:	f000 f970 	bl	8014744 <uxr_seq_num_add>
 8014464:	8921      	ldrh	r1, [r4, #8]
 8014466:	4605      	mov	r5, r0
 8014468:	8a60      	ldrh	r0, [r4, #18]
 801446a:	f000 f96b 	bl	8014744 <uxr_seq_num_add>
 801446e:	4601      	mov	r1, r0
 8014470:	4628      	mov	r0, r5
 8014472:	f000 f96f 	bl	8014754 <uxr_seq_num_cmp>
 8014476:	2800      	cmp	r0, #0
 8014478:	dd42      	ble.n	8014500 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801447a:	2000      	movs	r0, #0
 801447c:	b011      	add	sp, #68	@ 0x44
 801447e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014482:	8921      	ldrh	r1, [r4, #8]
 8014484:	8a60      	ldrh	r0, [r4, #18]
 8014486:	9205      	str	r2, [sp, #20]
 8014488:	f000 f95c 	bl	8014744 <uxr_seq_num_add>
 801448c:	4601      	mov	r1, r0
 801448e:	4630      	mov	r0, r6
 8014490:	f000 f960 	bl	8014754 <uxr_seq_num_cmp>
 8014494:	2800      	cmp	r0, #0
 8014496:	9a05      	ldr	r2, [sp, #20]
 8014498:	dcef      	bgt.n	801447a <uxr_prepare_reliable_buffer_to_write+0x216>
 801449a:	8927      	ldrh	r7, [r4, #8]
 801449c:	fbb6 f3f7 	udiv	r3, r6, r7
 80144a0:	fb07 6313 	mls	r3, r7, r3, r6
 80144a4:	b29d      	uxth	r5, r3
 80144a6:	6863      	ldr	r3, [r4, #4]
 80144a8:	6824      	ldr	r4, [r4, #0]
 80144aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80144ae:	fb05 f303 	mul.w	r3, r5, r3
 80144b2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80144b6:	50e2      	str	r2, [r4, r3]
 80144b8:	2300      	movs	r3, #0
 80144ba:	f8cd 8000 	str.w	r8, [sp]
 80144be:	f7f7 fd33 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 80144c2:	2001      	movs	r0, #1
 80144c4:	e7da      	b.n	801447c <uxr_prepare_reliable_buffer_to_write+0x218>
 80144c6:	b293      	uxth	r3, r2
 80144c8:	461a      	mov	r2, r3
 80144ca:	e737      	b.n	801433c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80144cc:	4630      	mov	r0, r6
 80144ce:	2101      	movs	r1, #1
 80144d0:	9207      	str	r2, [sp, #28]
 80144d2:	f000 f937 	bl	8014744 <uxr_seq_num_add>
 80144d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80144da:	fbb0 f1fc 	udiv	r1, r0, ip
 80144de:	fb0c 0111 	mls	r1, ip, r1, r0
 80144e2:	4606      	mov	r6, r0
 80144e4:	b288      	uxth	r0, r1
 80144e6:	6863      	ldr	r3, [r4, #4]
 80144e8:	fbb3 f1fc 	udiv	r1, r3, ip
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	9a07      	ldr	r2, [sp, #28]
 80144f0:	fb00 f101 	mul.w	r1, r0, r1
 80144f4:	3104      	adds	r1, #4
 80144f6:	440b      	add	r3, r1
 80144f8:	9303      	str	r3, [sp, #12]
 80144fa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80144fe:	e70a      	b.n	8014316 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014500:	8921      	ldrh	r1, [r4, #8]
 8014502:	fbb5 f3f1 	udiv	r3, r5, r1
 8014506:	fb01 5313 	mls	r3, r1, r3, r5
 801450a:	b29a      	uxth	r2, r3
 801450c:	6863      	ldr	r3, [r4, #4]
 801450e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014512:	6821      	ldr	r1, [r4, #0]
 8014514:	9804      	ldr	r0, [sp, #16]
 8014516:	fb02 f303 	mul.w	r3, r2, r3
 801451a:	3304      	adds	r3, #4
 801451c:	7b22      	ldrb	r2, [r4, #12]
 801451e:	4419      	add	r1, r3
 8014520:	445a      	add	r2, fp
 8014522:	f841 2c04 	str.w	r2, [r1, #-4]
 8014526:	7b23      	ldrb	r3, [r4, #12]
 8014528:	9300      	str	r3, [sp, #0]
 801452a:	2300      	movs	r3, #0
 801452c:	f7f7 fcfc 	bl	800bf28 <ucdr_init_buffer_origin_offset>
 8014530:	81e5      	strh	r5, [r4, #14]
 8014532:	2001      	movs	r0, #1
 8014534:	e7a2      	b.n	801447c <uxr_prepare_reliable_buffer_to_write+0x218>
 8014536:	4682      	mov	sl, r0
 8014538:	e6ca      	b.n	80142d0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801453a:	bf00      	nop
 801453c:	08014145 	.word	0x08014145

08014540 <uxr_prepare_next_reliable_buffer_to_send>:
 8014540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014542:	4604      	mov	r4, r0
 8014544:	460f      	mov	r7, r1
 8014546:	8a00      	ldrh	r0, [r0, #16]
 8014548:	2101      	movs	r1, #1
 801454a:	4616      	mov	r6, r2
 801454c:	461d      	mov	r5, r3
 801454e:	f000 f8f9 	bl	8014744 <uxr_seq_num_add>
 8014552:	8028      	strh	r0, [r5, #0]
 8014554:	8922      	ldrh	r2, [r4, #8]
 8014556:	fbb0 f3f2 	udiv	r3, r0, r2
 801455a:	fb02 0c13 	mls	ip, r2, r3, r0
 801455e:	fa1f fc8c 	uxth.w	ip, ip
 8014562:	6863      	ldr	r3, [r4, #4]
 8014564:	fbb3 f3f2 	udiv	r3, r3, r2
 8014568:	fb0c fc03 	mul.w	ip, ip, r3
 801456c:	6823      	ldr	r3, [r4, #0]
 801456e:	89e1      	ldrh	r1, [r4, #14]
 8014570:	f10c 0c04 	add.w	ip, ip, #4
 8014574:	4463      	add	r3, ip
 8014576:	603b      	str	r3, [r7, #0]
 8014578:	6823      	ldr	r3, [r4, #0]
 801457a:	449c      	add	ip, r3
 801457c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014580:	6033      	str	r3, [r6, #0]
 8014582:	f000 f8e7 	bl	8014754 <uxr_seq_num_cmp>
 8014586:	2800      	cmp	r0, #0
 8014588:	dd01      	ble.n	801458e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801458a:	2000      	movs	r0, #0
 801458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801458e:	7b23      	ldrb	r3, [r4, #12]
 8014590:	6832      	ldr	r2, [r6, #0]
 8014592:	429a      	cmp	r2, r3
 8014594:	d9f9      	bls.n	801458a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014596:	8a61      	ldrh	r1, [r4, #18]
 8014598:	8a20      	ldrh	r0, [r4, #16]
 801459a:	f000 f8d7 	bl	801474c <uxr_seq_num_sub>
 801459e:	8923      	ldrh	r3, [r4, #8]
 80145a0:	4283      	cmp	r3, r0
 80145a2:	d0f2      	beq.n	801458a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80145a4:	8828      	ldrh	r0, [r5, #0]
 80145a6:	89e3      	ldrh	r3, [r4, #14]
 80145a8:	8220      	strh	r0, [r4, #16]
 80145aa:	4298      	cmp	r0, r3
 80145ac:	d001      	beq.n	80145b2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80145ae:	2001      	movs	r0, #1
 80145b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145b2:	2101      	movs	r1, #1
 80145b4:	f000 f8c6 	bl	8014744 <uxr_seq_num_add>
 80145b8:	81e0      	strh	r0, [r4, #14]
 80145ba:	2001      	movs	r0, #1
 80145bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145be:	bf00      	nop

080145c0 <uxr_update_output_stream_heartbeat_timestamp>:
 80145c0:	b570      	push	{r4, r5, r6, lr}
 80145c2:	8a01      	ldrh	r1, [r0, #16]
 80145c4:	4604      	mov	r4, r0
 80145c6:	8a40      	ldrh	r0, [r0, #18]
 80145c8:	4615      	mov	r5, r2
 80145ca:	461e      	mov	r6, r3
 80145cc:	f000 f8c2 	bl	8014754 <uxr_seq_num_cmp>
 80145d0:	2800      	cmp	r0, #0
 80145d2:	db07      	blt.n	80145e4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80145d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80145d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80145dc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80145e0:	2000      	movs	r0, #0
 80145e2:	bd70      	pop	{r4, r5, r6, pc}
 80145e4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80145e8:	b940      	cbnz	r0, 80145fc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80145ea:	2301      	movs	r3, #1
 80145ec:	f884 3020 	strb.w	r3, [r4, #32]
 80145f0:	3564      	adds	r5, #100	@ 0x64
 80145f2:	f146 0600 	adc.w	r6, r6, #0
 80145f6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80145fa:	bd70      	pop	{r4, r5, r6, pc}
 80145fc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014600:	4295      	cmp	r5, r2
 8014602:	eb76 0303 	sbcs.w	r3, r6, r3
 8014606:	bfa5      	ittet	ge
 8014608:	3001      	addge	r0, #1
 801460a:	f884 0020 	strbge.w	r0, [r4, #32]
 801460e:	2000      	movlt	r0, #0
 8014610:	2001      	movge	r0, #1
 8014612:	e7ed      	b.n	80145f0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014614 <uxr_begin_output_nack_buffer_it>:
 8014614:	8a40      	ldrh	r0, [r0, #18]
 8014616:	4770      	bx	lr

08014618 <uxr_next_reliable_nack_buffer_to_send>:
 8014618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801461c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014620:	b082      	sub	sp, #8
 8014622:	f1b8 0f00 	cmp.w	r8, #0
 8014626:	d011      	beq.n	801464c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014628:	4604      	mov	r4, r0
 801462a:	8818      	ldrh	r0, [r3, #0]
 801462c:	460e      	mov	r6, r1
 801462e:	4617      	mov	r7, r2
 8014630:	461d      	mov	r5, r3
 8014632:	2101      	movs	r1, #1
 8014634:	f000 f886 	bl	8014744 <uxr_seq_num_add>
 8014638:	8028      	strh	r0, [r5, #0]
 801463a:	8a21      	ldrh	r1, [r4, #16]
 801463c:	f000 f88a 	bl	8014754 <uxr_seq_num_cmp>
 8014640:	2800      	cmp	r0, #0
 8014642:	dd07      	ble.n	8014654 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014644:	f04f 0800 	mov.w	r8, #0
 8014648:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801464c:	4640      	mov	r0, r8
 801464e:	b002      	add	sp, #8
 8014650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014654:	8921      	ldrh	r1, [r4, #8]
 8014656:	8828      	ldrh	r0, [r5, #0]
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	fbb0 f2f1 	udiv	r2, r0, r1
 801465e:	fb01 0c12 	mls	ip, r1, r2, r0
 8014662:	fa1f f28c 	uxth.w	r2, ip
 8014666:	9301      	str	r3, [sp, #4]
 8014668:	6863      	ldr	r3, [r4, #4]
 801466a:	fbb3 fcf1 	udiv	ip, r3, r1
 801466e:	9b01      	ldr	r3, [sp, #4]
 8014670:	fb02 fc0c 	mul.w	ip, r2, ip
 8014674:	f10c 0c04 	add.w	ip, ip, #4
 8014678:	4463      	add	r3, ip
 801467a:	6033      	str	r3, [r6, #0]
 801467c:	6823      	ldr	r3, [r4, #0]
 801467e:	4463      	add	r3, ip
 8014680:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014684:	603b      	str	r3, [r7, #0]
 8014686:	7b22      	ldrb	r2, [r4, #12]
 8014688:	429a      	cmp	r2, r3
 801468a:	d0d2      	beq.n	8014632 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801468c:	4640      	mov	r0, r8
 801468e:	b002      	add	sp, #8
 8014690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014694 <uxr_process_acknack>:
 8014694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014696:	4604      	mov	r4, r0
 8014698:	460e      	mov	r6, r1
 801469a:	4610      	mov	r0, r2
 801469c:	2101      	movs	r1, #1
 801469e:	f000 f855 	bl	801474c <uxr_seq_num_sub>
 80146a2:	8a61      	ldrh	r1, [r4, #18]
 80146a4:	f000 f852 	bl	801474c <uxr_seq_num_sub>
 80146a8:	b1c0      	cbz	r0, 80146dc <uxr_process_acknack+0x48>
 80146aa:	4605      	mov	r5, r0
 80146ac:	2700      	movs	r7, #0
 80146ae:	2101      	movs	r1, #1
 80146b0:	8a60      	ldrh	r0, [r4, #18]
 80146b2:	f000 f847 	bl	8014744 <uxr_seq_num_add>
 80146b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80146ba:	fbb0 f1fc 	udiv	r1, r0, ip
 80146be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80146c2:	fb0c 0111 	mls	r1, ip, r1, r0
 80146c6:	b289      	uxth	r1, r1
 80146c8:	3701      	adds	r7, #1
 80146ca:	fbb3 f3fc 	udiv	r3, r3, ip
 80146ce:	fb01 f303 	mul.w	r3, r1, r3
 80146d2:	42bd      	cmp	r5, r7
 80146d4:	7b21      	ldrb	r1, [r4, #12]
 80146d6:	8260      	strh	r0, [r4, #18]
 80146d8:	50d1      	str	r1, [r2, r3]
 80146da:	d1e8      	bne.n	80146ae <uxr_process_acknack+0x1a>
 80146dc:	3e00      	subs	r6, #0
 80146de:	f04f 0300 	mov.w	r3, #0
 80146e2:	bf18      	it	ne
 80146e4:	2601      	movne	r6, #1
 80146e6:	f884 3020 	strb.w	r3, [r4, #32]
 80146ea:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80146ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080146f0 <uxr_is_output_up_to_date>:
 80146f0:	8a01      	ldrh	r1, [r0, #16]
 80146f2:	8a40      	ldrh	r0, [r0, #18]
 80146f4:	b508      	push	{r3, lr}
 80146f6:	f000 f82d 	bl	8014754 <uxr_seq_num_cmp>
 80146fa:	fab0 f080 	clz	r0, r0
 80146fe:	0940      	lsrs	r0, r0, #5
 8014700:	bd08      	pop	{r3, pc}
 8014702:	bf00      	nop

08014704 <get_available_free_slots>:
 8014704:	8902      	ldrh	r2, [r0, #8]
 8014706:	b1da      	cbz	r2, 8014740 <get_available_free_slots+0x3c>
 8014708:	b530      	push	{r4, r5, lr}
 801470a:	2100      	movs	r1, #0
 801470c:	6843      	ldr	r3, [r0, #4]
 801470e:	6805      	ldr	r5, [r0, #0]
 8014710:	7b04      	ldrb	r4, [r0, #12]
 8014712:	fbb3 fef2 	udiv	lr, r3, r2
 8014716:	4608      	mov	r0, r1
 8014718:	460b      	mov	r3, r1
 801471a:	fbb3 fcf2 	udiv	ip, r3, r2
 801471e:	fb02 331c 	mls	r3, r2, ip, r3
 8014722:	b29b      	uxth	r3, r3
 8014724:	fb0e f303 	mul.w	r3, lr, r3
 8014728:	3101      	adds	r1, #1
 801472a:	f855 c003 	ldr.w	ip, [r5, r3]
 801472e:	4564      	cmp	r4, ip
 8014730:	bf08      	it	eq
 8014732:	3001      	addeq	r0, #1
 8014734:	b28b      	uxth	r3, r1
 8014736:	bf08      	it	eq
 8014738:	b280      	uxtheq	r0, r0
 801473a:	4293      	cmp	r3, r2
 801473c:	d3ed      	bcc.n	801471a <get_available_free_slots+0x16>
 801473e:	bd30      	pop	{r4, r5, pc}
 8014740:	4610      	mov	r0, r2
 8014742:	4770      	bx	lr

08014744 <uxr_seq_num_add>:
 8014744:	4408      	add	r0, r1
 8014746:	b280      	uxth	r0, r0
 8014748:	4770      	bx	lr
 801474a:	bf00      	nop

0801474c <uxr_seq_num_sub>:
 801474c:	1a40      	subs	r0, r0, r1
 801474e:	b280      	uxth	r0, r0
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop

08014754 <uxr_seq_num_cmp>:
 8014754:	4288      	cmp	r0, r1
 8014756:	d011      	beq.n	801477c <uxr_seq_num_cmp+0x28>
 8014758:	d309      	bcc.n	801476e <uxr_seq_num_cmp+0x1a>
 801475a:	4288      	cmp	r0, r1
 801475c:	d910      	bls.n	8014780 <uxr_seq_num_cmp+0x2c>
 801475e:	1a40      	subs	r0, r0, r1
 8014760:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014764:	bfd4      	ite	le
 8014766:	2001      	movle	r0, #1
 8014768:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801476c:	4770      	bx	lr
 801476e:	1a0b      	subs	r3, r1, r0
 8014770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014774:	daf1      	bge.n	801475a <uxr_seq_num_cmp+0x6>
 8014776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801477a:	4770      	bx	lr
 801477c:	2000      	movs	r0, #0
 801477e:	4770      	bx	lr
 8014780:	2001      	movs	r0, #1
 8014782:	4770      	bx	lr

08014784 <rcl_get_default_domain_id>:
 8014784:	b530      	push	{r4, r5, lr}
 8014786:	b083      	sub	sp, #12
 8014788:	2300      	movs	r3, #0
 801478a:	9300      	str	r3, [sp, #0]
 801478c:	b1d0      	cbz	r0, 80147c4 <rcl_get_default_domain_id+0x40>
 801478e:	4604      	mov	r4, r0
 8014790:	4669      	mov	r1, sp
 8014792:	4815      	ldr	r0, [pc, #84]	@ (80147e8 <rcl_get_default_domain_id+0x64>)
 8014794:	f7fd ff14 	bl	80125c0 <rcutils_get_env>
 8014798:	4602      	mov	r2, r0
 801479a:	b110      	cbz	r0, 80147a2 <rcl_get_default_domain_id+0x1e>
 801479c:	2001      	movs	r0, #1
 801479e:	b003      	add	sp, #12
 80147a0:	bd30      	pop	{r4, r5, pc}
 80147a2:	9b00      	ldr	r3, [sp, #0]
 80147a4:	b18b      	cbz	r3, 80147ca <rcl_get_default_domain_id+0x46>
 80147a6:	7818      	ldrb	r0, [r3, #0]
 80147a8:	2800      	cmp	r0, #0
 80147aa:	d0f8      	beq.n	801479e <rcl_get_default_domain_id+0x1a>
 80147ac:	a901      	add	r1, sp, #4
 80147ae:	4618      	mov	r0, r3
 80147b0:	9201      	str	r2, [sp, #4]
 80147b2:	f000 fdf1 	bl	8015398 <strtoul>
 80147b6:	4605      	mov	r5, r0
 80147b8:	b150      	cbz	r0, 80147d0 <rcl_get_default_domain_id+0x4c>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d00d      	beq.n	80147da <rcl_get_default_domain_id+0x56>
 80147be:	6025      	str	r5, [r4, #0]
 80147c0:	2000      	movs	r0, #0
 80147c2:	e7ec      	b.n	801479e <rcl_get_default_domain_id+0x1a>
 80147c4:	200b      	movs	r0, #11
 80147c6:	b003      	add	sp, #12
 80147c8:	bd30      	pop	{r4, r5, pc}
 80147ca:	4618      	mov	r0, r3
 80147cc:	b003      	add	sp, #12
 80147ce:	bd30      	pop	{r4, r5, pc}
 80147d0:	9b01      	ldr	r3, [sp, #4]
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d0f2      	beq.n	80147be <rcl_get_default_domain_id+0x3a>
 80147d8:	e7e0      	b.n	801479c <rcl_get_default_domain_id+0x18>
 80147da:	f001 f82f 	bl	801583c <__errno>
 80147de:	6803      	ldr	r3, [r0, #0]
 80147e0:	2b22      	cmp	r3, #34	@ 0x22
 80147e2:	d1ec      	bne.n	80147be <rcl_get_default_domain_id+0x3a>
 80147e4:	e7da      	b.n	801479c <rcl_get_default_domain_id+0x18>
 80147e6:	bf00      	nop
 80147e8:	08016dcc 	.word	0x08016dcc

080147ec <rcl_expand_topic_name>:
 80147ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f0:	b08b      	sub	sp, #44	@ 0x2c
 80147f2:	9306      	str	r3, [sp, #24]
 80147f4:	2800      	cmp	r0, #0
 80147f6:	f000 80ad 	beq.w	8014954 <rcl_expand_topic_name+0x168>
 80147fa:	460e      	mov	r6, r1
 80147fc:	2900      	cmp	r1, #0
 80147fe:	f000 80a9 	beq.w	8014954 <rcl_expand_topic_name+0x168>
 8014802:	4617      	mov	r7, r2
 8014804:	2a00      	cmp	r2, #0
 8014806:	f000 80a5 	beq.w	8014954 <rcl_expand_topic_name+0x168>
 801480a:	2b00      	cmp	r3, #0
 801480c:	f000 80a2 	beq.w	8014954 <rcl_expand_topic_name+0x168>
 8014810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014812:	2b00      	cmp	r3, #0
 8014814:	f000 809e 	beq.w	8014954 <rcl_expand_topic_name+0x168>
 8014818:	2200      	movs	r2, #0
 801481a:	a909      	add	r1, sp, #36	@ 0x24
 801481c:	4680      	mov	r8, r0
 801481e:	f000 fa57 	bl	8014cd0 <rcl_validate_topic_name>
 8014822:	4604      	mov	r4, r0
 8014824:	2800      	cmp	r0, #0
 8014826:	f040 8096 	bne.w	8014956 <rcl_expand_topic_name+0x16a>
 801482a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801482c:	2b00      	cmp	r3, #0
 801482e:	f040 809a 	bne.w	8014966 <rcl_expand_topic_name+0x17a>
 8014832:	4602      	mov	r2, r0
 8014834:	a909      	add	r1, sp, #36	@ 0x24
 8014836:	4630      	mov	r0, r6
 8014838:	f7fe fafc 	bl	8012e34 <rmw_validate_node_name>
 801483c:	2800      	cmp	r0, #0
 801483e:	f040 808e 	bne.w	801495e <rcl_expand_topic_name+0x172>
 8014842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014844:	2a00      	cmp	r2, #0
 8014846:	f040 8093 	bne.w	8014970 <rcl_expand_topic_name+0x184>
 801484a:	a909      	add	r1, sp, #36	@ 0x24
 801484c:	4638      	mov	r0, r7
 801484e:	f7fe fad3 	bl	8012df8 <rmw_validate_namespace>
 8014852:	2800      	cmp	r0, #0
 8014854:	f040 8083 	bne.w	801495e <rcl_expand_topic_name+0x172>
 8014858:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801485a:	2c00      	cmp	r4, #0
 801485c:	f040 80ed 	bne.w	8014a3a <rcl_expand_topic_name+0x24e>
 8014860:	217b      	movs	r1, #123	@ 0x7b
 8014862:	4640      	mov	r0, r8
 8014864:	f000 ff5e 	bl	8015724 <strchr>
 8014868:	f898 3000 	ldrb.w	r3, [r8]
 801486c:	2b2f      	cmp	r3, #47	@ 0x2f
 801486e:	4605      	mov	r5, r0
 8014870:	f000 809e 	beq.w	80149b0 <rcl_expand_topic_name+0x1c4>
 8014874:	2b7e      	cmp	r3, #126	@ 0x7e
 8014876:	f040 80a2 	bne.w	80149be <rcl_expand_topic_name+0x1d2>
 801487a:	4638      	mov	r0, r7
 801487c:	f7eb fcda 	bl	8000234 <strlen>
 8014880:	4a82      	ldr	r2, [pc, #520]	@ (8014a8c <rcl_expand_topic_name+0x2a0>)
 8014882:	4b83      	ldr	r3, [pc, #524]	@ (8014a90 <rcl_expand_topic_name+0x2a4>)
 8014884:	2801      	cmp	r0, #1
 8014886:	bf18      	it	ne
 8014888:	4613      	movne	r3, r2
 801488a:	9302      	str	r3, [sp, #8]
 801488c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801488e:	9300      	str	r3, [sp, #0]
 8014890:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014894:	f108 0301 	add.w	r3, r8, #1
 8014898:	9305      	str	r3, [sp, #20]
 801489a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	ab14      	add	r3, sp, #80	@ 0x50
 80148a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80148a4:	f7fd fea4 	bl	80125f0 <rcutils_format_string_limit>
 80148a8:	4682      	mov	sl, r0
 80148aa:	2800      	cmp	r0, #0
 80148ac:	f000 80c7 	beq.w	8014a3e <rcl_expand_topic_name+0x252>
 80148b0:	2d00      	cmp	r5, #0
 80148b2:	f000 80a2 	beq.w	80149fa <rcl_expand_topic_name+0x20e>
 80148b6:	217b      	movs	r1, #123	@ 0x7b
 80148b8:	f000 ff34 	bl	8015724 <strchr>
 80148bc:	46d1      	mov	r9, sl
 80148be:	4605      	mov	r5, r0
 80148c0:	9407      	str	r4, [sp, #28]
 80148c2:	46d3      	mov	fp, sl
 80148c4:	464c      	mov	r4, r9
 80148c6:	2d00      	cmp	r5, #0
 80148c8:	f000 80be 	beq.w	8014a48 <rcl_expand_topic_name+0x25c>
 80148cc:	217d      	movs	r1, #125	@ 0x7d
 80148ce:	4620      	mov	r0, r4
 80148d0:	f000 ff28 	bl	8015724 <strchr>
 80148d4:	eba0 0905 	sub.w	r9, r0, r5
 80148d8:	f109 0a01 	add.w	sl, r9, #1
 80148dc:	486d      	ldr	r0, [pc, #436]	@ (8014a94 <rcl_expand_topic_name+0x2a8>)
 80148de:	4652      	mov	r2, sl
 80148e0:	4629      	mov	r1, r5
 80148e2:	f000 ff2c 	bl	801573e <strncmp>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d067      	beq.n	80149ba <rcl_expand_topic_name+0x1ce>
 80148ea:	486b      	ldr	r0, [pc, #428]	@ (8014a98 <rcl_expand_topic_name+0x2ac>)
 80148ec:	4652      	mov	r2, sl
 80148ee:	4629      	mov	r1, r5
 80148f0:	f000 ff25 	bl	801573e <strncmp>
 80148f4:	b130      	cbz	r0, 8014904 <rcl_expand_topic_name+0x118>
 80148f6:	4869      	ldr	r0, [pc, #420]	@ (8014a9c <rcl_expand_topic_name+0x2b0>)
 80148f8:	4652      	mov	r2, sl
 80148fa:	4629      	mov	r1, r5
 80148fc:	f000 ff1f 	bl	801573e <strncmp>
 8014900:	2800      	cmp	r0, #0
 8014902:	d137      	bne.n	8014974 <rcl_expand_topic_name+0x188>
 8014904:	46b9      	mov	r9, r7
 8014906:	ab16      	add	r3, sp, #88	@ 0x58
 8014908:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801490c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014910:	ab14      	add	r3, sp, #80	@ 0x50
 8014912:	4628      	mov	r0, r5
 8014914:	cb0c      	ldmia	r3, {r2, r3}
 8014916:	4651      	mov	r1, sl
 8014918:	f7fd ffa6 	bl	8012868 <rcutils_strndup>
 801491c:	4605      	mov	r5, r0
 801491e:	2800      	cmp	r0, #0
 8014920:	f000 809c 	beq.w	8014a5c <rcl_expand_topic_name+0x270>
 8014924:	464a      	mov	r2, r9
 8014926:	4620      	mov	r0, r4
 8014928:	ab14      	add	r3, sp, #80	@ 0x50
 801492a:	4629      	mov	r1, r5
 801492c:	f7fd fe9a 	bl	8012664 <rcutils_repl_str>
 8014930:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014932:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014934:	4604      	mov	r4, r0
 8014936:	4628      	mov	r0, r5
 8014938:	4798      	blx	r3
 801493a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801493c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801493e:	4658      	mov	r0, fp
 8014940:	4798      	blx	r3
 8014942:	2c00      	cmp	r4, #0
 8014944:	d07b      	beq.n	8014a3e <rcl_expand_topic_name+0x252>
 8014946:	217b      	movs	r1, #123	@ 0x7b
 8014948:	4620      	mov	r0, r4
 801494a:	f000 feeb 	bl	8015724 <strchr>
 801494e:	46a3      	mov	fp, r4
 8014950:	4605      	mov	r5, r0
 8014952:	e7b8      	b.n	80148c6 <rcl_expand_topic_name+0xda>
 8014954:	240b      	movs	r4, #11
 8014956:	4620      	mov	r0, r4
 8014958:	b00b      	add	sp, #44	@ 0x2c
 801495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495e:	f7fb f8fd 	bl	800fb5c <rcl_convert_rmw_ret_to_rcl_ret>
 8014962:	4604      	mov	r4, r0
 8014964:	e7f7      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 8014966:	2467      	movs	r4, #103	@ 0x67
 8014968:	4620      	mov	r0, r4
 801496a:	b00b      	add	sp, #44	@ 0x2c
 801496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014970:	24c9      	movs	r4, #201	@ 0xc9
 8014972:	e7f0      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 8014974:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8014978:	9806      	ldr	r0, [sp, #24]
 801497a:	1c69      	adds	r1, r5, #1
 801497c:	f7fe f88e 	bl	8012a9c <rcutils_string_map_getn>
 8014980:	4681      	mov	r9, r0
 8014982:	2800      	cmp	r0, #0
 8014984:	d1bf      	bne.n	8014906 <rcl_expand_topic_name+0x11a>
 8014986:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014988:	aa16      	add	r2, sp, #88	@ 0x58
 801498a:	6018      	str	r0, [r3, #0]
 801498c:	ca07      	ldmia	r2, {r0, r1, r2}
 801498e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014992:	ab14      	add	r3, sp, #80	@ 0x50
 8014994:	cb0c      	ldmia	r3, {r2, r3}
 8014996:	4651      	mov	r1, sl
 8014998:	4628      	mov	r0, r5
 801499a:	f7fd ff65 	bl	8012868 <rcutils_strndup>
 801499e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80149a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149a2:	4798      	blx	r3
 80149a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80149a8:	4658      	mov	r0, fp
 80149aa:	2469      	movs	r4, #105	@ 0x69
 80149ac:	4798      	blx	r3
 80149ae:	e7d2      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d05b      	beq.n	8014a6c <rcl_expand_topic_name+0x280>
 80149b4:	46c1      	mov	r9, r8
 80149b6:	46a2      	mov	sl, r4
 80149b8:	e782      	b.n	80148c0 <rcl_expand_topic_name+0xd4>
 80149ba:	46b1      	mov	r9, r6
 80149bc:	e7a3      	b.n	8014906 <rcl_expand_topic_name+0x11a>
 80149be:	2800      	cmp	r0, #0
 80149c0:	d1f8      	bne.n	80149b4 <rcl_expand_topic_name+0x1c8>
 80149c2:	4638      	mov	r0, r7
 80149c4:	f7eb fc36 	bl	8000234 <strlen>
 80149c8:	4a35      	ldr	r2, [pc, #212]	@ (8014aa0 <rcl_expand_topic_name+0x2b4>)
 80149ca:	4b36      	ldr	r3, [pc, #216]	@ (8014aa4 <rcl_expand_topic_name+0x2b8>)
 80149cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80149d0:	2801      	cmp	r0, #1
 80149d2:	bf18      	it	ne
 80149d4:	4613      	movne	r3, r2
 80149d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80149da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80149de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80149e0:	9703      	str	r7, [sp, #12]
 80149e2:	9200      	str	r2, [sp, #0]
 80149e4:	ab14      	add	r3, sp, #80	@ 0x50
 80149e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80149e8:	f7fd fe02 	bl	80125f0 <rcutils_format_string_limit>
 80149ec:	4682      	mov	sl, r0
 80149ee:	4653      	mov	r3, sl
 80149f0:	b32b      	cbz	r3, 8014a3e <rcl_expand_topic_name+0x252>
 80149f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80149f4:	f8c3 a000 	str.w	sl, [r3]
 80149f8:	e7ad      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 80149fa:	f89a 3000 	ldrb.w	r3, [sl]
 80149fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a00:	d0f7      	beq.n	80149f2 <rcl_expand_topic_name+0x206>
 8014a02:	4638      	mov	r0, r7
 8014a04:	f7eb fc16 	bl	8000234 <strlen>
 8014a08:	4a25      	ldr	r2, [pc, #148]	@ (8014aa0 <rcl_expand_topic_name+0x2b4>)
 8014a0a:	4b26      	ldr	r3, [pc, #152]	@ (8014aa4 <rcl_expand_topic_name+0x2b8>)
 8014a0c:	f8cd a010 	str.w	sl, [sp, #16]
 8014a10:	2801      	cmp	r0, #1
 8014a12:	bf18      	it	ne
 8014a14:	4613      	movne	r3, r2
 8014a16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a1a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a20:	9703      	str	r7, [sp, #12]
 8014a22:	9200      	str	r2, [sp, #0]
 8014a24:	ab14      	add	r3, sp, #80	@ 0x50
 8014a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a28:	f7fd fde2 	bl	80125f0 <rcutils_format_string_limit>
 8014a2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a2e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a30:	4605      	mov	r5, r0
 8014a32:	4650      	mov	r0, sl
 8014a34:	4798      	blx	r3
 8014a36:	46aa      	mov	sl, r5
 8014a38:	e7d9      	b.n	80149ee <rcl_expand_topic_name+0x202>
 8014a3a:	24ca      	movs	r4, #202	@ 0xca
 8014a3c:	e78b      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 8014a3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014a40:	2300      	movs	r3, #0
 8014a42:	6013      	str	r3, [r2, #0]
 8014a44:	240a      	movs	r4, #10
 8014a46:	e786      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 8014a48:	465b      	mov	r3, fp
 8014a4a:	9c07      	ldr	r4, [sp, #28]
 8014a4c:	46da      	mov	sl, fp
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d1d3      	bne.n	80149fa <rcl_expand_topic_name+0x20e>
 8014a52:	f898 3000 	ldrb.w	r3, [r8]
 8014a56:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a58:	d0cb      	beq.n	80149f2 <rcl_expand_topic_name+0x206>
 8014a5a:	e7b2      	b.n	80149c2 <rcl_expand_topic_name+0x1d6>
 8014a5c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014a60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a62:	6015      	str	r5, [r2, #0]
 8014a64:	4658      	mov	r0, fp
 8014a66:	4798      	blx	r3
 8014a68:	240a      	movs	r4, #10
 8014a6a:	e774      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 8014a6c:	ab17      	add	r3, sp, #92	@ 0x5c
 8014a6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014a72:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014a76:	ab14      	add	r3, sp, #80	@ 0x50
 8014a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014a7a:	4640      	mov	r0, r8
 8014a7c:	f7fd fed2 	bl	8012824 <rcutils_strdup>
 8014a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014a82:	2800      	cmp	r0, #0
 8014a84:	6018      	str	r0, [r3, #0]
 8014a86:	bf08      	it	eq
 8014a88:	240a      	moveq	r4, #10
 8014a8a:	e764      	b.n	8014956 <rcl_expand_topic_name+0x16a>
 8014a8c:	08016ddc 	.word	0x08016ddc
 8014a90:	08016938 	.word	0x08016938
 8014a94:	08016de4 	.word	0x08016de4
 8014a98:	08016dec 	.word	0x08016dec
 8014a9c:	08016df4 	.word	0x08016df4
 8014aa0:	08016900 	.word	0x08016900
 8014aa4:	08016948 	.word	0x08016948

08014aa8 <rcl_get_default_topic_name_substitutions>:
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	bf0c      	ite	eq
 8014aac:	200b      	moveq	r0, #11
 8014aae:	2000      	movne	r0, #0
 8014ab0:	4770      	bx	lr
 8014ab2:	bf00      	nop

08014ab4 <rcl_get_zero_initialized_guard_condition>:
 8014ab4:	4a03      	ldr	r2, [pc, #12]	@ (8014ac4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014abc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	4770      	bx	lr
 8014ac4:	080171c8 	.word	0x080171c8

08014ac8 <rcl_guard_condition_init>:
 8014ac8:	b082      	sub	sp, #8
 8014aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014acc:	b087      	sub	sp, #28
 8014ace:	ac0c      	add	r4, sp, #48	@ 0x30
 8014ad0:	e884 000c 	stmia.w	r4, {r2, r3}
 8014ad4:	46a6      	mov	lr, r4
 8014ad6:	460d      	mov	r5, r1
 8014ad8:	4604      	mov	r4, r0
 8014ada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ade:	f10d 0c04 	add.w	ip, sp, #4
 8014ae2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ae6:	f8de 3000 	ldr.w	r3, [lr]
 8014aea:	f8cc 3000 	str.w	r3, [ip]
 8014aee:	a801      	add	r0, sp, #4
 8014af0:	f7f4 fed8 	bl	80098a4 <rcutils_allocator_is_valid>
 8014af4:	b338      	cbz	r0, 8014b46 <rcl_guard_condition_init+0x7e>
 8014af6:	b334      	cbz	r4, 8014b46 <rcl_guard_condition_init+0x7e>
 8014af8:	6866      	ldr	r6, [r4, #4]
 8014afa:	b9ee      	cbnz	r6, 8014b38 <rcl_guard_condition_init+0x70>
 8014afc:	b31d      	cbz	r5, 8014b46 <rcl_guard_condition_init+0x7e>
 8014afe:	4628      	mov	r0, r5
 8014b00:	f7fb f84a 	bl	800fb98 <rcl_context_is_valid>
 8014b04:	b308      	cbz	r0, 8014b4a <rcl_guard_condition_init+0x82>
 8014b06:	9b01      	ldr	r3, [sp, #4]
 8014b08:	9905      	ldr	r1, [sp, #20]
 8014b0a:	201c      	movs	r0, #28
 8014b0c:	4798      	blx	r3
 8014b0e:	4607      	mov	r7, r0
 8014b10:	6060      	str	r0, [r4, #4]
 8014b12:	b310      	cbz	r0, 8014b5a <rcl_guard_condition_init+0x92>
 8014b14:	6828      	ldr	r0, [r5, #0]
 8014b16:	3028      	adds	r0, #40	@ 0x28
 8014b18:	f000 f9d4 	bl	8014ec4 <rmw_create_guard_condition>
 8014b1c:	6038      	str	r0, [r7, #0]
 8014b1e:	6860      	ldr	r0, [r4, #4]
 8014b20:	6805      	ldr	r5, [r0, #0]
 8014b22:	b1a5      	cbz	r5, 8014b4e <rcl_guard_condition_init+0x86>
 8014b24:	2301      	movs	r3, #1
 8014b26:	ac01      	add	r4, sp, #4
 8014b28:	7103      	strb	r3, [r0, #4]
 8014b2a:	f100 0708 	add.w	r7, r0, #8
 8014b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b32:	6823      	ldr	r3, [r4, #0]
 8014b34:	603b      	str	r3, [r7, #0]
 8014b36:	e000      	b.n	8014b3a <rcl_guard_condition_init+0x72>
 8014b38:	2664      	movs	r6, #100	@ 0x64
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	b007      	add	sp, #28
 8014b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b42:	b002      	add	sp, #8
 8014b44:	4770      	bx	lr
 8014b46:	260b      	movs	r6, #11
 8014b48:	e7f7      	b.n	8014b3a <rcl_guard_condition_init+0x72>
 8014b4a:	2665      	movs	r6, #101	@ 0x65
 8014b4c:	e7f5      	b.n	8014b3a <rcl_guard_condition_init+0x72>
 8014b4e:	9b02      	ldr	r3, [sp, #8]
 8014b50:	9905      	ldr	r1, [sp, #20]
 8014b52:	4798      	blx	r3
 8014b54:	2601      	movs	r6, #1
 8014b56:	6065      	str	r5, [r4, #4]
 8014b58:	e7ef      	b.n	8014b3a <rcl_guard_condition_init+0x72>
 8014b5a:	260a      	movs	r6, #10
 8014b5c:	e7ed      	b.n	8014b3a <rcl_guard_condition_init+0x72>
 8014b5e:	bf00      	nop

08014b60 <rcl_guard_condition_init_from_rmw>:
 8014b60:	b082      	sub	sp, #8
 8014b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014b72:	460e      	mov	r6, r1
 8014b74:	4617      	mov	r7, r2
 8014b76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b7a:	f10d 0e04 	add.w	lr, sp, #4
 8014b7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b82:	f8dc 3000 	ldr.w	r3, [ip]
 8014b86:	f8ce 3000 	str.w	r3, [lr]
 8014b8a:	a801      	add	r0, sp, #4
 8014b8c:	f7f4 fe8a 	bl	80098a4 <rcutils_allocator_is_valid>
 8014b90:	b350      	cbz	r0, 8014be8 <rcl_guard_condition_init_from_rmw+0x88>
 8014b92:	b34c      	cbz	r4, 8014be8 <rcl_guard_condition_init_from_rmw+0x88>
 8014b94:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014b98:	f1b8 0f00 	cmp.w	r8, #0
 8014b9c:	d11e      	bne.n	8014bdc <rcl_guard_condition_init_from_rmw+0x7c>
 8014b9e:	b31f      	cbz	r7, 8014be8 <rcl_guard_condition_init_from_rmw+0x88>
 8014ba0:	4638      	mov	r0, r7
 8014ba2:	f7fa fff9 	bl	800fb98 <rcl_context_is_valid>
 8014ba6:	b328      	cbz	r0, 8014bf4 <rcl_guard_condition_init_from_rmw+0x94>
 8014ba8:	9b01      	ldr	r3, [sp, #4]
 8014baa:	9905      	ldr	r1, [sp, #20]
 8014bac:	201c      	movs	r0, #28
 8014bae:	4798      	blx	r3
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	6060      	str	r0, [r4, #4]
 8014bb4:	b358      	cbz	r0, 8014c0e <rcl_guard_condition_init_from_rmw+0xae>
 8014bb6:	b1fe      	cbz	r6, 8014bf8 <rcl_guard_condition_init_from_rmw+0x98>
 8014bb8:	6006      	str	r6, [r0, #0]
 8014bba:	f880 8004 	strb.w	r8, [r0, #4]
 8014bbe:	ac01      	add	r4, sp, #4
 8014bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bc2:	f105 0c08 	add.w	ip, r5, #8
 8014bc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	f8cc 3000 	str.w	r3, [ip]
 8014bd0:	2000      	movs	r0, #0
 8014bd2:	b006      	add	sp, #24
 8014bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd8:	b002      	add	sp, #8
 8014bda:	4770      	bx	lr
 8014bdc:	2064      	movs	r0, #100	@ 0x64
 8014bde:	b006      	add	sp, #24
 8014be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014be4:	b002      	add	sp, #8
 8014be6:	4770      	bx	lr
 8014be8:	200b      	movs	r0, #11
 8014bea:	b006      	add	sp, #24
 8014bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf0:	b002      	add	sp, #8
 8014bf2:	4770      	bx	lr
 8014bf4:	2065      	movs	r0, #101	@ 0x65
 8014bf6:	e7f2      	b.n	8014bde <rcl_guard_condition_init_from_rmw+0x7e>
 8014bf8:	6838      	ldr	r0, [r7, #0]
 8014bfa:	3028      	adds	r0, #40	@ 0x28
 8014bfc:	f000 f962 	bl	8014ec4 <rmw_create_guard_condition>
 8014c00:	6028      	str	r0, [r5, #0]
 8014c02:	6865      	ldr	r5, [r4, #4]
 8014c04:	682e      	ldr	r6, [r5, #0]
 8014c06:	b126      	cbz	r6, 8014c12 <rcl_guard_condition_init_from_rmw+0xb2>
 8014c08:	2301      	movs	r3, #1
 8014c0a:	712b      	strb	r3, [r5, #4]
 8014c0c:	e7d7      	b.n	8014bbe <rcl_guard_condition_init_from_rmw+0x5e>
 8014c0e:	200a      	movs	r0, #10
 8014c10:	e7e5      	b.n	8014bde <rcl_guard_condition_init_from_rmw+0x7e>
 8014c12:	4628      	mov	r0, r5
 8014c14:	9b02      	ldr	r3, [sp, #8]
 8014c16:	9905      	ldr	r1, [sp, #20]
 8014c18:	4798      	blx	r3
 8014c1a:	6066      	str	r6, [r4, #4]
 8014c1c:	2001      	movs	r0, #1
 8014c1e:	e7de      	b.n	8014bde <rcl_guard_condition_init_from_rmw+0x7e>

08014c20 <rcl_guard_condition_fini>:
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	b1f0      	cbz	r0, 8014c64 <rcl_guard_condition_fini+0x44>
 8014c26:	6843      	ldr	r3, [r0, #4]
 8014c28:	4604      	mov	r4, r0
 8014c2a:	b163      	cbz	r3, 8014c46 <rcl_guard_condition_fini+0x26>
 8014c2c:	6818      	ldr	r0, [r3, #0]
 8014c2e:	68de      	ldr	r6, [r3, #12]
 8014c30:	6999      	ldr	r1, [r3, #24]
 8014c32:	b160      	cbz	r0, 8014c4e <rcl_guard_condition_fini+0x2e>
 8014c34:	791d      	ldrb	r5, [r3, #4]
 8014c36:	b965      	cbnz	r5, 8014c52 <rcl_guard_condition_fini+0x32>
 8014c38:	4618      	mov	r0, r3
 8014c3a:	47b0      	blx	r6
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	4628      	mov	r0, r5
 8014c40:	6063      	str	r3, [r4, #4]
 8014c42:	b002      	add	sp, #8
 8014c44:	bd70      	pop	{r4, r5, r6, pc}
 8014c46:	461d      	mov	r5, r3
 8014c48:	4628      	mov	r0, r5
 8014c4a:	b002      	add	sp, #8
 8014c4c:	bd70      	pop	{r4, r5, r6, pc}
 8014c4e:	4605      	mov	r5, r0
 8014c50:	e7f2      	b.n	8014c38 <rcl_guard_condition_fini+0x18>
 8014c52:	9101      	str	r1, [sp, #4]
 8014c54:	f000 f94a 	bl	8014eec <rmw_destroy_guard_condition>
 8014c58:	1e05      	subs	r5, r0, #0
 8014c5a:	6863      	ldr	r3, [r4, #4]
 8014c5c:	9901      	ldr	r1, [sp, #4]
 8014c5e:	bf18      	it	ne
 8014c60:	2501      	movne	r5, #1
 8014c62:	e7e9      	b.n	8014c38 <rcl_guard_condition_fini+0x18>
 8014c64:	250b      	movs	r5, #11
 8014c66:	4628      	mov	r0, r5
 8014c68:	b002      	add	sp, #8
 8014c6a:	bd70      	pop	{r4, r5, r6, pc}

08014c6c <rcl_guard_condition_get_default_options>:
 8014c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c6e:	b087      	sub	sp, #28
 8014c70:	4606      	mov	r6, r0
 8014c72:	4668      	mov	r0, sp
 8014c74:	f7f4 fe08 	bl	8009888 <rcutils_get_default_allocator>
 8014c78:	4b09      	ldr	r3, [pc, #36]	@ (8014ca0 <rcl_guard_condition_get_default_options+0x34>)
 8014c7a:	46ee      	mov	lr, sp
 8014c7c:	469c      	mov	ip, r3
 8014c7e:	461d      	mov	r5, r3
 8014c80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c8a:	4634      	mov	r4, r6
 8014c8c:	f8de 7000 	ldr.w	r7, [lr]
 8014c90:	f8cc 7000 	str.w	r7, [ip]
 8014c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c96:	4630      	mov	r0, r6
 8014c98:	6027      	str	r7, [r4, #0]
 8014c9a:	b007      	add	sp, #28
 8014c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	2000abfc 	.word	0x2000abfc

08014ca4 <rcl_trigger_guard_condition>:
 8014ca4:	b148      	cbz	r0, 8014cba <rcl_trigger_guard_condition+0x16>
 8014ca6:	b508      	push	{r3, lr}
 8014ca8:	6843      	ldr	r3, [r0, #4]
 8014caa:	b143      	cbz	r3, 8014cbe <rcl_trigger_guard_condition+0x1a>
 8014cac:	6818      	ldr	r0, [r3, #0]
 8014cae:	f000 f931 	bl	8014f14 <rmw_trigger_guard_condition>
 8014cb2:	3800      	subs	r0, #0
 8014cb4:	bf18      	it	ne
 8014cb6:	2001      	movne	r0, #1
 8014cb8:	bd08      	pop	{r3, pc}
 8014cba:	200b      	movs	r0, #11
 8014cbc:	4770      	bx	lr
 8014cbe:	200b      	movs	r0, #11
 8014cc0:	bd08      	pop	{r3, pc}
 8014cc2:	bf00      	nop

08014cc4 <rcl_guard_condition_get_rmw_handle>:
 8014cc4:	b110      	cbz	r0, 8014ccc <rcl_guard_condition_get_rmw_handle+0x8>
 8014cc6:	6840      	ldr	r0, [r0, #4]
 8014cc8:	b100      	cbz	r0, 8014ccc <rcl_guard_condition_get_rmw_handle+0x8>
 8014cca:	6800      	ldr	r0, [r0, #0]
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop

08014cd0 <rcl_validate_topic_name>:
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d07a      	beq.n	8014dca <rcl_validate_topic_name+0xfa>
 8014cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd8:	460e      	mov	r6, r1
 8014cda:	2900      	cmp	r1, #0
 8014cdc:	d07c      	beq.n	8014dd8 <rcl_validate_topic_name+0x108>
 8014cde:	4617      	mov	r7, r2
 8014ce0:	4605      	mov	r5, r0
 8014ce2:	f7eb faa7 	bl	8000234 <strlen>
 8014ce6:	b1b0      	cbz	r0, 8014d16 <rcl_validate_topic_name+0x46>
 8014ce8:	f895 9000 	ldrb.w	r9, [r5]
 8014cec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8014e70 <rcl_validate_topic_name+0x1a0>
 8014cf0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014cf4:	f013 0304 	ands.w	r3, r3, #4
 8014cf8:	d169      	bne.n	8014dce <rcl_validate_topic_name+0xfe>
 8014cfa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014cfe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014d02:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d04:	d10e      	bne.n	8014d24 <rcl_validate_topic_name+0x54>
 8014d06:	2202      	movs	r2, #2
 8014d08:	6032      	str	r2, [r6, #0]
 8014d0a:	b36f      	cbz	r7, 8014d68 <rcl_validate_topic_name+0x98>
 8014d0c:	f8c7 8000 	str.w	r8, [r7]
 8014d10:	4618      	mov	r0, r3
 8014d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d16:	2301      	movs	r3, #1
 8014d18:	6033      	str	r3, [r6, #0]
 8014d1a:	b32f      	cbz	r7, 8014d68 <rcl_validate_topic_name+0x98>
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	6038      	str	r0, [r7, #0]
 8014d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d24:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014d28:	461c      	mov	r4, r3
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014d30:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014d34:	f1be 0f09 	cmp.w	lr, #9
 8014d38:	d919      	bls.n	8014d6e <rcl_validate_topic_name+0x9e>
 8014d3a:	f022 0e20 	bic.w	lr, r2, #32
 8014d3e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014d42:	f1be 0f19 	cmp.w	lr, #25
 8014d46:	d912      	bls.n	8014d6e <rcl_validate_topic_name+0x9e>
 8014d48:	2a5f      	cmp	r2, #95	@ 0x5f
 8014d4a:	d019      	beq.n	8014d80 <rcl_validate_topic_name+0xb0>
 8014d4c:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d4e:	d051      	beq.n	8014df4 <rcl_validate_topic_name+0x124>
 8014d50:	2a7e      	cmp	r2, #126	@ 0x7e
 8014d52:	d048      	beq.n	8014de6 <rcl_validate_topic_name+0x116>
 8014d54:	2a7b      	cmp	r2, #123	@ 0x7b
 8014d56:	d054      	beq.n	8014e02 <rcl_validate_topic_name+0x132>
 8014d58:	2a7d      	cmp	r2, #125	@ 0x7d
 8014d5a:	d161      	bne.n	8014e20 <rcl_validate_topic_name+0x150>
 8014d5c:	2c00      	cmp	r4, #0
 8014d5e:	d155      	bne.n	8014e0c <rcl_validate_topic_name+0x13c>
 8014d60:	2305      	movs	r3, #5
 8014d62:	6033      	str	r3, [r6, #0]
 8014d64:	b107      	cbz	r7, 8014d68 <rcl_validate_topic_name+0x98>
 8014d66:	6039      	str	r1, [r7, #0]
 8014d68:	2000      	movs	r0, #0
 8014d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d6e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014d72:	0752      	lsls	r2, r2, #29
 8014d74:	d504      	bpl.n	8014d80 <rcl_validate_topic_name+0xb0>
 8014d76:	b11c      	cbz	r4, 8014d80 <rcl_validate_topic_name+0xb0>
 8014d78:	b111      	cbz	r1, 8014d80 <rcl_validate_topic_name+0xb0>
 8014d7a:	1e4a      	subs	r2, r1, #1
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d02d      	beq.n	8014ddc <rcl_validate_topic_name+0x10c>
 8014d80:	3101      	adds	r1, #1
 8014d82:	4288      	cmp	r0, r1
 8014d84:	d1d2      	bne.n	8014d2c <rcl_validate_topic_name+0x5c>
 8014d86:	2c00      	cmp	r4, #0
 8014d88:	d145      	bne.n	8014e16 <rcl_validate_topic_name+0x146>
 8014d8a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014d8e:	d04f      	beq.n	8014e30 <rcl_validate_topic_name+0x160>
 8014d90:	4620      	mov	r0, r4
 8014d92:	2301      	movs	r3, #1
 8014d94:	e006      	b.n	8014da4 <rcl_validate_topic_name+0xd4>
 8014d96:	428b      	cmp	r3, r1
 8014d98:	f105 0501 	add.w	r5, r5, #1
 8014d9c:	f103 0201 	add.w	r2, r3, #1
 8014da0:	d236      	bcs.n	8014e10 <rcl_validate_topic_name+0x140>
 8014da2:	4613      	mov	r3, r2
 8014da4:	4580      	cmp	r8, r0
 8014da6:	f100 0001 	add.w	r0, r0, #1
 8014daa:	d0f4      	beq.n	8014d96 <rcl_validate_topic_name+0xc6>
 8014dac:	782a      	ldrb	r2, [r5, #0]
 8014dae:	2a2f      	cmp	r2, #47	@ 0x2f
 8014db0:	d1f1      	bne.n	8014d96 <rcl_validate_topic_name+0xc6>
 8014db2:	786a      	ldrb	r2, [r5, #1]
 8014db4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014db8:	0754      	lsls	r4, r2, #29
 8014dba:	d5ec      	bpl.n	8014d96 <rcl_validate_topic_name+0xc6>
 8014dbc:	2204      	movs	r2, #4
 8014dbe:	6032      	str	r2, [r6, #0]
 8014dc0:	2f00      	cmp	r7, #0
 8014dc2:	d0d1      	beq.n	8014d68 <rcl_validate_topic_name+0x98>
 8014dc4:	603b      	str	r3, [r7, #0]
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	e7aa      	b.n	8014d20 <rcl_validate_topic_name+0x50>
 8014dca:	200b      	movs	r0, #11
 8014dcc:	4770      	bx	lr
 8014dce:	2304      	movs	r3, #4
 8014dd0:	6033      	str	r3, [r6, #0]
 8014dd2:	2f00      	cmp	r7, #0
 8014dd4:	d1a2      	bne.n	8014d1c <rcl_validate_topic_name+0x4c>
 8014dd6:	e7c7      	b.n	8014d68 <rcl_validate_topic_name+0x98>
 8014dd8:	200b      	movs	r0, #11
 8014dda:	e7a1      	b.n	8014d20 <rcl_validate_topic_name+0x50>
 8014ddc:	2309      	movs	r3, #9
 8014dde:	6033      	str	r3, [r6, #0]
 8014de0:	2f00      	cmp	r7, #0
 8014de2:	d1c0      	bne.n	8014d66 <rcl_validate_topic_name+0x96>
 8014de4:	e7c0      	b.n	8014d68 <rcl_validate_topic_name+0x98>
 8014de6:	2900      	cmp	r1, #0
 8014de8:	d0ca      	beq.n	8014d80 <rcl_validate_topic_name+0xb0>
 8014dea:	2306      	movs	r3, #6
 8014dec:	6033      	str	r3, [r6, #0]
 8014dee:	2f00      	cmp	r7, #0
 8014df0:	d1b9      	bne.n	8014d66 <rcl_validate_topic_name+0x96>
 8014df2:	e7b9      	b.n	8014d68 <rcl_validate_topic_name+0x98>
 8014df4:	2c00      	cmp	r4, #0
 8014df6:	d0c3      	beq.n	8014d80 <rcl_validate_topic_name+0xb0>
 8014df8:	2308      	movs	r3, #8
 8014dfa:	6033      	str	r3, [r6, #0]
 8014dfc:	2f00      	cmp	r7, #0
 8014dfe:	d1b2      	bne.n	8014d66 <rcl_validate_topic_name+0x96>
 8014e00:	e7b2      	b.n	8014d68 <rcl_validate_topic_name+0x98>
 8014e02:	2c00      	cmp	r4, #0
 8014e04:	d1f8      	bne.n	8014df8 <rcl_validate_topic_name+0x128>
 8014e06:	460b      	mov	r3, r1
 8014e08:	2401      	movs	r4, #1
 8014e0a:	e7b9      	b.n	8014d80 <rcl_validate_topic_name+0xb0>
 8014e0c:	2400      	movs	r4, #0
 8014e0e:	e7b7      	b.n	8014d80 <rcl_validate_topic_name+0xb0>
 8014e10:	2000      	movs	r0, #0
 8014e12:	6030      	str	r0, [r6, #0]
 8014e14:	e784      	b.n	8014d20 <rcl_validate_topic_name+0x50>
 8014e16:	2205      	movs	r2, #5
 8014e18:	6032      	str	r2, [r6, #0]
 8014e1a:	2f00      	cmp	r7, #0
 8014e1c:	d1d2      	bne.n	8014dc4 <rcl_validate_topic_name+0xf4>
 8014e1e:	e7a3      	b.n	8014d68 <rcl_validate_topic_name+0x98>
 8014e20:	2c00      	cmp	r4, #0
 8014e22:	bf14      	ite	ne
 8014e24:	2308      	movne	r3, #8
 8014e26:	2303      	moveq	r3, #3
 8014e28:	6033      	str	r3, [r6, #0]
 8014e2a:	2f00      	cmp	r7, #0
 8014e2c:	d19b      	bne.n	8014d66 <rcl_validate_topic_name+0x96>
 8014e2e:	e79b      	b.n	8014d68 <rcl_validate_topic_name+0x98>
 8014e30:	2301      	movs	r3, #1
 8014e32:	e00a      	b.n	8014e4a <rcl_validate_topic_name+0x17a>
 8014e34:	2c01      	cmp	r4, #1
 8014e36:	d013      	beq.n	8014e60 <rcl_validate_topic_name+0x190>
 8014e38:	4299      	cmp	r1, r3
 8014e3a:	f104 0401 	add.w	r4, r4, #1
 8014e3e:	f105 0501 	add.w	r5, r5, #1
 8014e42:	f103 0201 	add.w	r2, r3, #1
 8014e46:	d9e3      	bls.n	8014e10 <rcl_validate_topic_name+0x140>
 8014e48:	4613      	mov	r3, r2
 8014e4a:	45a0      	cmp	r8, r4
 8014e4c:	d0f4      	beq.n	8014e38 <rcl_validate_topic_name+0x168>
 8014e4e:	782a      	ldrb	r2, [r5, #0]
 8014e50:	2a2f      	cmp	r2, #47	@ 0x2f
 8014e52:	d1ef      	bne.n	8014e34 <rcl_validate_topic_name+0x164>
 8014e54:	786a      	ldrb	r2, [r5, #1]
 8014e56:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014e5a:	0752      	lsls	r2, r2, #29
 8014e5c:	d5ec      	bpl.n	8014e38 <rcl_validate_topic_name+0x168>
 8014e5e:	e7ad      	b.n	8014dbc <rcl_validate_topic_name+0xec>
 8014e60:	2307      	movs	r3, #7
 8014e62:	6033      	str	r3, [r6, #0]
 8014e64:	2f00      	cmp	r7, #0
 8014e66:	f43f af7f 	beq.w	8014d68 <rcl_validate_topic_name+0x98>
 8014e6a:	603c      	str	r4, [r7, #0]
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	e757      	b.n	8014d20 <rcl_validate_topic_name+0x50>
 8014e70:	080172af 	.word	0x080172af

08014e74 <rcutils_string_array_fini>:
 8014e74:	b320      	cbz	r0, 8014ec0 <rcutils_string_array_fini+0x4c>
 8014e76:	b570      	push	{r4, r5, r6, lr}
 8014e78:	4604      	mov	r4, r0
 8014e7a:	6840      	ldr	r0, [r0, #4]
 8014e7c:	b1d8      	cbz	r0, 8014eb6 <rcutils_string_array_fini+0x42>
 8014e7e:	f104 0008 	add.w	r0, r4, #8
 8014e82:	f7f4 fd0f 	bl	80098a4 <rcutils_allocator_is_valid>
 8014e86:	b1b8      	cbz	r0, 8014eb8 <rcutils_string_array_fini+0x44>
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	b1bb      	cbz	r3, 8014ebc <rcutils_string_array_fini+0x48>
 8014e8c:	2500      	movs	r5, #0
 8014e8e:	6860      	ldr	r0, [r4, #4]
 8014e90:	462e      	mov	r6, r5
 8014e92:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014e96:	68e3      	ldr	r3, [r4, #12]
 8014e98:	69a1      	ldr	r1, [r4, #24]
 8014e9a:	4798      	blx	r3
 8014e9c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014ea0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014ea4:	3501      	adds	r5, #1
 8014ea6:	429d      	cmp	r5, r3
 8014ea8:	d3f3      	bcc.n	8014e92 <rcutils_string_array_fini+0x1e>
 8014eaa:	68e3      	ldr	r3, [r4, #12]
 8014eac:	69a1      	ldr	r1, [r4, #24]
 8014eae:	4798      	blx	r3
 8014eb0:	2000      	movs	r0, #0
 8014eb2:	e9c4 0000 	strd	r0, r0, [r4]
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}
 8014eb8:	200b      	movs	r0, #11
 8014eba:	bd70      	pop	{r4, r5, r6, pc}
 8014ebc:	6860      	ldr	r0, [r4, #4]
 8014ebe:	e7f4      	b.n	8014eaa <rcutils_string_array_fini+0x36>
 8014ec0:	200b      	movs	r0, #11
 8014ec2:	4770      	bx	lr

08014ec4 <rmw_create_guard_condition>:
 8014ec4:	b538      	push	{r3, r4, r5, lr}
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	4807      	ldr	r0, [pc, #28]	@ (8014ee8 <rmw_create_guard_condition+0x24>)
 8014eca:	f7fe f8f9 	bl	80130c0 <get_memory>
 8014ece:	b148      	cbz	r0, 8014ee4 <rmw_create_guard_condition+0x20>
 8014ed0:	6884      	ldr	r4, [r0, #8]
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	7423      	strb	r3, [r4, #16]
 8014ed6:	61e5      	str	r5, [r4, #28]
 8014ed8:	f7fe f95a 	bl	8013190 <rmw_get_implementation_identifier>
 8014edc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8014ee0:	f104 0014 	add.w	r0, r4, #20
 8014ee4:	bd38      	pop	{r3, r4, r5, pc}
 8014ee6:	bf00      	nop
 8014ee8:	2000aa24 	.word	0x2000aa24

08014eec <rmw_destroy_guard_condition>:
 8014eec:	b508      	push	{r3, lr}
 8014eee:	4b08      	ldr	r3, [pc, #32]	@ (8014f10 <rmw_destroy_guard_condition+0x24>)
 8014ef0:	6819      	ldr	r1, [r3, #0]
 8014ef2:	b911      	cbnz	r1, 8014efa <rmw_destroy_guard_condition+0xe>
 8014ef4:	e00a      	b.n	8014f0c <rmw_destroy_guard_condition+0x20>
 8014ef6:	6849      	ldr	r1, [r1, #4]
 8014ef8:	b141      	cbz	r1, 8014f0c <rmw_destroy_guard_condition+0x20>
 8014efa:	688b      	ldr	r3, [r1, #8]
 8014efc:	3314      	adds	r3, #20
 8014efe:	4298      	cmp	r0, r3
 8014f00:	d1f9      	bne.n	8014ef6 <rmw_destroy_guard_condition+0xa>
 8014f02:	4803      	ldr	r0, [pc, #12]	@ (8014f10 <rmw_destroy_guard_condition+0x24>)
 8014f04:	f7fe f8ec 	bl	80130e0 <put_memory>
 8014f08:	2000      	movs	r0, #0
 8014f0a:	bd08      	pop	{r3, pc}
 8014f0c:	2001      	movs	r0, #1
 8014f0e:	bd08      	pop	{r3, pc}
 8014f10:	2000aa24 	.word	0x2000aa24

08014f14 <rmw_trigger_guard_condition>:
 8014f14:	b160      	cbz	r0, 8014f30 <rmw_trigger_guard_condition+0x1c>
 8014f16:	b510      	push	{r4, lr}
 8014f18:	4604      	mov	r4, r0
 8014f1a:	6800      	ldr	r0, [r0, #0]
 8014f1c:	f7f5 ffca 	bl	800aeb4 <is_uxrce_rmw_identifier_valid>
 8014f20:	b908      	cbnz	r0, 8014f26 <rmw_trigger_guard_condition+0x12>
 8014f22:	2001      	movs	r0, #1
 8014f24:	bd10      	pop	{r4, pc}
 8014f26:	6863      	ldr	r3, [r4, #4]
 8014f28:	2201      	movs	r2, #1
 8014f2a:	741a      	strb	r2, [r3, #16]
 8014f2c:	2000      	movs	r0, #0
 8014f2e:	bd10      	pop	{r4, pc}
 8014f30:	2001      	movs	r0, #1
 8014f32:	4770      	bx	lr

08014f34 <calloc>:
 8014f34:	4b02      	ldr	r3, [pc, #8]	@ (8014f40 <calloc+0xc>)
 8014f36:	460a      	mov	r2, r1
 8014f38:	4601      	mov	r1, r0
 8014f3a:	6818      	ldr	r0, [r3, #0]
 8014f3c:	f000 b802 	b.w	8014f44 <_calloc_r>
 8014f40:	200000c4 	.word	0x200000c4

08014f44 <_calloc_r>:
 8014f44:	b570      	push	{r4, r5, r6, lr}
 8014f46:	fba1 5402 	umull	r5, r4, r1, r2
 8014f4a:	b934      	cbnz	r4, 8014f5a <_calloc_r+0x16>
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	f000 f887 	bl	8015060 <_malloc_r>
 8014f52:	4606      	mov	r6, r0
 8014f54:	b928      	cbnz	r0, 8014f62 <_calloc_r+0x1e>
 8014f56:	4630      	mov	r0, r6
 8014f58:	bd70      	pop	{r4, r5, r6, pc}
 8014f5a:	220c      	movs	r2, #12
 8014f5c:	6002      	str	r2, [r0, #0]
 8014f5e:	2600      	movs	r6, #0
 8014f60:	e7f9      	b.n	8014f56 <_calloc_r+0x12>
 8014f62:	462a      	mov	r2, r5
 8014f64:	4621      	mov	r1, r4
 8014f66:	f000 fbd5 	bl	8015714 <memset>
 8014f6a:	e7f4      	b.n	8014f56 <_calloc_r+0x12>

08014f6c <getenv>:
 8014f6c:	b507      	push	{r0, r1, r2, lr}
 8014f6e:	4b04      	ldr	r3, [pc, #16]	@ (8014f80 <getenv+0x14>)
 8014f70:	4601      	mov	r1, r0
 8014f72:	aa01      	add	r2, sp, #4
 8014f74:	6818      	ldr	r0, [r3, #0]
 8014f76:	f000 f805 	bl	8014f84 <_findenv_r>
 8014f7a:	b003      	add	sp, #12
 8014f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f80:	200000c4 	.word	0x200000c4

08014f84 <_findenv_r>:
 8014f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f88:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8014ff8 <_findenv_r+0x74>
 8014f8c:	4606      	mov	r6, r0
 8014f8e:	4689      	mov	r9, r1
 8014f90:	4617      	mov	r7, r2
 8014f92:	f000 fcb5 	bl	8015900 <__env_lock>
 8014f96:	f8da 4000 	ldr.w	r4, [sl]
 8014f9a:	b134      	cbz	r4, 8014faa <_findenv_r+0x26>
 8014f9c:	464b      	mov	r3, r9
 8014f9e:	4698      	mov	r8, r3
 8014fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fa4:	b13a      	cbz	r2, 8014fb6 <_findenv_r+0x32>
 8014fa6:	2a3d      	cmp	r2, #61	@ 0x3d
 8014fa8:	d1f9      	bne.n	8014f9e <_findenv_r+0x1a>
 8014faa:	4630      	mov	r0, r6
 8014fac:	f000 fcae 	bl	801590c <__env_unlock>
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb6:	eba8 0809 	sub.w	r8, r8, r9
 8014fba:	46a3      	mov	fp, r4
 8014fbc:	f854 0b04 	ldr.w	r0, [r4], #4
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d0f2      	beq.n	8014faa <_findenv_r+0x26>
 8014fc4:	4642      	mov	r2, r8
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	f000 fbb9 	bl	801573e <strncmp>
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d1f4      	bne.n	8014fba <_findenv_r+0x36>
 8014fd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014fd4:	eb03 0508 	add.w	r5, r3, r8
 8014fd8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014fdc:	2b3d      	cmp	r3, #61	@ 0x3d
 8014fde:	d1ec      	bne.n	8014fba <_findenv_r+0x36>
 8014fe0:	f8da 3000 	ldr.w	r3, [sl]
 8014fe4:	ebab 0303 	sub.w	r3, fp, r3
 8014fe8:	109b      	asrs	r3, r3, #2
 8014fea:	4630      	mov	r0, r6
 8014fec:	603b      	str	r3, [r7, #0]
 8014fee:	f000 fc8d 	bl	801590c <__env_unlock>
 8014ff2:	1c68      	adds	r0, r5, #1
 8014ff4:	e7dd      	b.n	8014fb2 <_findenv_r+0x2e>
 8014ff6:	bf00      	nop
 8014ff8:	20000004 	.word	0x20000004

08014ffc <malloc>:
 8014ffc:	4b02      	ldr	r3, [pc, #8]	@ (8015008 <malloc+0xc>)
 8014ffe:	4601      	mov	r1, r0
 8015000:	6818      	ldr	r0, [r3, #0]
 8015002:	f000 b82d 	b.w	8015060 <_malloc_r>
 8015006:	bf00      	nop
 8015008:	200000c4 	.word	0x200000c4

0801500c <free>:
 801500c:	4b02      	ldr	r3, [pc, #8]	@ (8015018 <free+0xc>)
 801500e:	4601      	mov	r1, r0
 8015010:	6818      	ldr	r0, [r3, #0]
 8015012:	f000 bc81 	b.w	8015918 <_free_r>
 8015016:	bf00      	nop
 8015018:	200000c4 	.word	0x200000c4

0801501c <sbrk_aligned>:
 801501c:	b570      	push	{r4, r5, r6, lr}
 801501e:	4e0f      	ldr	r6, [pc, #60]	@ (801505c <sbrk_aligned+0x40>)
 8015020:	460c      	mov	r4, r1
 8015022:	6831      	ldr	r1, [r6, #0]
 8015024:	4605      	mov	r5, r0
 8015026:	b911      	cbnz	r1, 801502e <sbrk_aligned+0x12>
 8015028:	f000 fbe6 	bl	80157f8 <_sbrk_r>
 801502c:	6030      	str	r0, [r6, #0]
 801502e:	4621      	mov	r1, r4
 8015030:	4628      	mov	r0, r5
 8015032:	f000 fbe1 	bl	80157f8 <_sbrk_r>
 8015036:	1c43      	adds	r3, r0, #1
 8015038:	d103      	bne.n	8015042 <sbrk_aligned+0x26>
 801503a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801503e:	4620      	mov	r0, r4
 8015040:	bd70      	pop	{r4, r5, r6, pc}
 8015042:	1cc4      	adds	r4, r0, #3
 8015044:	f024 0403 	bic.w	r4, r4, #3
 8015048:	42a0      	cmp	r0, r4
 801504a:	d0f8      	beq.n	801503e <sbrk_aligned+0x22>
 801504c:	1a21      	subs	r1, r4, r0
 801504e:	4628      	mov	r0, r5
 8015050:	f000 fbd2 	bl	80157f8 <_sbrk_r>
 8015054:	3001      	adds	r0, #1
 8015056:	d1f2      	bne.n	801503e <sbrk_aligned+0x22>
 8015058:	e7ef      	b.n	801503a <sbrk_aligned+0x1e>
 801505a:	bf00      	nop
 801505c:	2000ac10 	.word	0x2000ac10

08015060 <_malloc_r>:
 8015060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015064:	1ccd      	adds	r5, r1, #3
 8015066:	f025 0503 	bic.w	r5, r5, #3
 801506a:	3508      	adds	r5, #8
 801506c:	2d0c      	cmp	r5, #12
 801506e:	bf38      	it	cc
 8015070:	250c      	movcc	r5, #12
 8015072:	2d00      	cmp	r5, #0
 8015074:	4606      	mov	r6, r0
 8015076:	db01      	blt.n	801507c <_malloc_r+0x1c>
 8015078:	42a9      	cmp	r1, r5
 801507a:	d904      	bls.n	8015086 <_malloc_r+0x26>
 801507c:	230c      	movs	r3, #12
 801507e:	6033      	str	r3, [r6, #0]
 8015080:	2000      	movs	r0, #0
 8015082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801515c <_malloc_r+0xfc>
 801508a:	f000 f869 	bl	8015160 <__malloc_lock>
 801508e:	f8d8 3000 	ldr.w	r3, [r8]
 8015092:	461c      	mov	r4, r3
 8015094:	bb44      	cbnz	r4, 80150e8 <_malloc_r+0x88>
 8015096:	4629      	mov	r1, r5
 8015098:	4630      	mov	r0, r6
 801509a:	f7ff ffbf 	bl	801501c <sbrk_aligned>
 801509e:	1c43      	adds	r3, r0, #1
 80150a0:	4604      	mov	r4, r0
 80150a2:	d158      	bne.n	8015156 <_malloc_r+0xf6>
 80150a4:	f8d8 4000 	ldr.w	r4, [r8]
 80150a8:	4627      	mov	r7, r4
 80150aa:	2f00      	cmp	r7, #0
 80150ac:	d143      	bne.n	8015136 <_malloc_r+0xd6>
 80150ae:	2c00      	cmp	r4, #0
 80150b0:	d04b      	beq.n	801514a <_malloc_r+0xea>
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	4639      	mov	r1, r7
 80150b6:	4630      	mov	r0, r6
 80150b8:	eb04 0903 	add.w	r9, r4, r3
 80150bc:	f000 fb9c 	bl	80157f8 <_sbrk_r>
 80150c0:	4581      	cmp	r9, r0
 80150c2:	d142      	bne.n	801514a <_malloc_r+0xea>
 80150c4:	6821      	ldr	r1, [r4, #0]
 80150c6:	1a6d      	subs	r5, r5, r1
 80150c8:	4629      	mov	r1, r5
 80150ca:	4630      	mov	r0, r6
 80150cc:	f7ff ffa6 	bl	801501c <sbrk_aligned>
 80150d0:	3001      	adds	r0, #1
 80150d2:	d03a      	beq.n	801514a <_malloc_r+0xea>
 80150d4:	6823      	ldr	r3, [r4, #0]
 80150d6:	442b      	add	r3, r5
 80150d8:	6023      	str	r3, [r4, #0]
 80150da:	f8d8 3000 	ldr.w	r3, [r8]
 80150de:	685a      	ldr	r2, [r3, #4]
 80150e0:	bb62      	cbnz	r2, 801513c <_malloc_r+0xdc>
 80150e2:	f8c8 7000 	str.w	r7, [r8]
 80150e6:	e00f      	b.n	8015108 <_malloc_r+0xa8>
 80150e8:	6822      	ldr	r2, [r4, #0]
 80150ea:	1b52      	subs	r2, r2, r5
 80150ec:	d420      	bmi.n	8015130 <_malloc_r+0xd0>
 80150ee:	2a0b      	cmp	r2, #11
 80150f0:	d917      	bls.n	8015122 <_malloc_r+0xc2>
 80150f2:	1961      	adds	r1, r4, r5
 80150f4:	42a3      	cmp	r3, r4
 80150f6:	6025      	str	r5, [r4, #0]
 80150f8:	bf18      	it	ne
 80150fa:	6059      	strne	r1, [r3, #4]
 80150fc:	6863      	ldr	r3, [r4, #4]
 80150fe:	bf08      	it	eq
 8015100:	f8c8 1000 	streq.w	r1, [r8]
 8015104:	5162      	str	r2, [r4, r5]
 8015106:	604b      	str	r3, [r1, #4]
 8015108:	4630      	mov	r0, r6
 801510a:	f000 f82f 	bl	801516c <__malloc_unlock>
 801510e:	f104 000b 	add.w	r0, r4, #11
 8015112:	1d23      	adds	r3, r4, #4
 8015114:	f020 0007 	bic.w	r0, r0, #7
 8015118:	1ac2      	subs	r2, r0, r3
 801511a:	bf1c      	itt	ne
 801511c:	1a1b      	subne	r3, r3, r0
 801511e:	50a3      	strne	r3, [r4, r2]
 8015120:	e7af      	b.n	8015082 <_malloc_r+0x22>
 8015122:	6862      	ldr	r2, [r4, #4]
 8015124:	42a3      	cmp	r3, r4
 8015126:	bf0c      	ite	eq
 8015128:	f8c8 2000 	streq.w	r2, [r8]
 801512c:	605a      	strne	r2, [r3, #4]
 801512e:	e7eb      	b.n	8015108 <_malloc_r+0xa8>
 8015130:	4623      	mov	r3, r4
 8015132:	6864      	ldr	r4, [r4, #4]
 8015134:	e7ae      	b.n	8015094 <_malloc_r+0x34>
 8015136:	463c      	mov	r4, r7
 8015138:	687f      	ldr	r7, [r7, #4]
 801513a:	e7b6      	b.n	80150aa <_malloc_r+0x4a>
 801513c:	461a      	mov	r2, r3
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	42a3      	cmp	r3, r4
 8015142:	d1fb      	bne.n	801513c <_malloc_r+0xdc>
 8015144:	2300      	movs	r3, #0
 8015146:	6053      	str	r3, [r2, #4]
 8015148:	e7de      	b.n	8015108 <_malloc_r+0xa8>
 801514a:	230c      	movs	r3, #12
 801514c:	6033      	str	r3, [r6, #0]
 801514e:	4630      	mov	r0, r6
 8015150:	f000 f80c 	bl	801516c <__malloc_unlock>
 8015154:	e794      	b.n	8015080 <_malloc_r+0x20>
 8015156:	6005      	str	r5, [r0, #0]
 8015158:	e7d6      	b.n	8015108 <_malloc_r+0xa8>
 801515a:	bf00      	nop
 801515c:	2000ac14 	.word	0x2000ac14

08015160 <__malloc_lock>:
 8015160:	4801      	ldr	r0, [pc, #4]	@ (8015168 <__malloc_lock+0x8>)
 8015162:	f000 bb96 	b.w	8015892 <__retarget_lock_acquire_recursive>
 8015166:	bf00      	nop
 8015168:	2000ad59 	.word	0x2000ad59

0801516c <__malloc_unlock>:
 801516c:	4801      	ldr	r0, [pc, #4]	@ (8015174 <__malloc_unlock+0x8>)
 801516e:	f000 bb91 	b.w	8015894 <__retarget_lock_release_recursive>
 8015172:	bf00      	nop
 8015174:	2000ad59 	.word	0x2000ad59

08015178 <srand>:
 8015178:	b538      	push	{r3, r4, r5, lr}
 801517a:	4b10      	ldr	r3, [pc, #64]	@ (80151bc <srand+0x44>)
 801517c:	681d      	ldr	r5, [r3, #0]
 801517e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015180:	4604      	mov	r4, r0
 8015182:	b9b3      	cbnz	r3, 80151b2 <srand+0x3a>
 8015184:	2018      	movs	r0, #24
 8015186:	f7ff ff39 	bl	8014ffc <malloc>
 801518a:	4602      	mov	r2, r0
 801518c:	6328      	str	r0, [r5, #48]	@ 0x30
 801518e:	b920      	cbnz	r0, 801519a <srand+0x22>
 8015190:	4b0b      	ldr	r3, [pc, #44]	@ (80151c0 <srand+0x48>)
 8015192:	480c      	ldr	r0, [pc, #48]	@ (80151c4 <srand+0x4c>)
 8015194:	2146      	movs	r1, #70	@ 0x46
 8015196:	f000 fb95 	bl	80158c4 <__assert_func>
 801519a:	490b      	ldr	r1, [pc, #44]	@ (80151c8 <srand+0x50>)
 801519c:	4b0b      	ldr	r3, [pc, #44]	@ (80151cc <srand+0x54>)
 801519e:	e9c0 1300 	strd	r1, r3, [r0]
 80151a2:	4b0b      	ldr	r3, [pc, #44]	@ (80151d0 <srand+0x58>)
 80151a4:	6083      	str	r3, [r0, #8]
 80151a6:	230b      	movs	r3, #11
 80151a8:	8183      	strh	r3, [r0, #12]
 80151aa:	2100      	movs	r1, #0
 80151ac:	2001      	movs	r0, #1
 80151ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80151b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151b4:	2200      	movs	r2, #0
 80151b6:	611c      	str	r4, [r3, #16]
 80151b8:	615a      	str	r2, [r3, #20]
 80151ba:	bd38      	pop	{r3, r4, r5, pc}
 80151bc:	200000c4 	.word	0x200000c4
 80151c0:	080171d0 	.word	0x080171d0
 80151c4:	080171e7 	.word	0x080171e7
 80151c8:	abcd330e 	.word	0xabcd330e
 80151cc:	e66d1234 	.word	0xe66d1234
 80151d0:	0005deec 	.word	0x0005deec

080151d4 <rand>:
 80151d4:	4b16      	ldr	r3, [pc, #88]	@ (8015230 <rand+0x5c>)
 80151d6:	b510      	push	{r4, lr}
 80151d8:	681c      	ldr	r4, [r3, #0]
 80151da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151dc:	b9b3      	cbnz	r3, 801520c <rand+0x38>
 80151de:	2018      	movs	r0, #24
 80151e0:	f7ff ff0c 	bl	8014ffc <malloc>
 80151e4:	4602      	mov	r2, r0
 80151e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80151e8:	b920      	cbnz	r0, 80151f4 <rand+0x20>
 80151ea:	4b12      	ldr	r3, [pc, #72]	@ (8015234 <rand+0x60>)
 80151ec:	4812      	ldr	r0, [pc, #72]	@ (8015238 <rand+0x64>)
 80151ee:	2152      	movs	r1, #82	@ 0x52
 80151f0:	f000 fb68 	bl	80158c4 <__assert_func>
 80151f4:	4911      	ldr	r1, [pc, #68]	@ (801523c <rand+0x68>)
 80151f6:	4b12      	ldr	r3, [pc, #72]	@ (8015240 <rand+0x6c>)
 80151f8:	e9c0 1300 	strd	r1, r3, [r0]
 80151fc:	4b11      	ldr	r3, [pc, #68]	@ (8015244 <rand+0x70>)
 80151fe:	6083      	str	r3, [r0, #8]
 8015200:	230b      	movs	r3, #11
 8015202:	8183      	strh	r3, [r0, #12]
 8015204:	2100      	movs	r1, #0
 8015206:	2001      	movs	r0, #1
 8015208:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801520c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801520e:	480e      	ldr	r0, [pc, #56]	@ (8015248 <rand+0x74>)
 8015210:	690b      	ldr	r3, [r1, #16]
 8015212:	694c      	ldr	r4, [r1, #20]
 8015214:	4a0d      	ldr	r2, [pc, #52]	@ (801524c <rand+0x78>)
 8015216:	4358      	muls	r0, r3
 8015218:	fb02 0004 	mla	r0, r2, r4, r0
 801521c:	fba3 3202 	umull	r3, r2, r3, r2
 8015220:	3301      	adds	r3, #1
 8015222:	eb40 0002 	adc.w	r0, r0, r2
 8015226:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801522a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801522e:	bd10      	pop	{r4, pc}
 8015230:	200000c4 	.word	0x200000c4
 8015234:	080171d0 	.word	0x080171d0
 8015238:	080171e7 	.word	0x080171e7
 801523c:	abcd330e 	.word	0xabcd330e
 8015240:	e66d1234 	.word	0xe66d1234
 8015244:	0005deec 	.word	0x0005deec
 8015248:	5851f42d 	.word	0x5851f42d
 801524c:	4c957f2d 	.word	0x4c957f2d

08015250 <realloc>:
 8015250:	4b02      	ldr	r3, [pc, #8]	@ (801525c <realloc+0xc>)
 8015252:	460a      	mov	r2, r1
 8015254:	4601      	mov	r1, r0
 8015256:	6818      	ldr	r0, [r3, #0]
 8015258:	f000 b802 	b.w	8015260 <_realloc_r>
 801525c:	200000c4 	.word	0x200000c4

08015260 <_realloc_r>:
 8015260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015264:	4607      	mov	r7, r0
 8015266:	4614      	mov	r4, r2
 8015268:	460d      	mov	r5, r1
 801526a:	b921      	cbnz	r1, 8015276 <_realloc_r+0x16>
 801526c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015270:	4611      	mov	r1, r2
 8015272:	f7ff bef5 	b.w	8015060 <_malloc_r>
 8015276:	b92a      	cbnz	r2, 8015284 <_realloc_r+0x24>
 8015278:	f000 fb4e 	bl	8015918 <_free_r>
 801527c:	4625      	mov	r5, r4
 801527e:	4628      	mov	r0, r5
 8015280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015284:	f000 fb92 	bl	80159ac <_malloc_usable_size_r>
 8015288:	4284      	cmp	r4, r0
 801528a:	4606      	mov	r6, r0
 801528c:	d802      	bhi.n	8015294 <_realloc_r+0x34>
 801528e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015292:	d8f4      	bhi.n	801527e <_realloc_r+0x1e>
 8015294:	4621      	mov	r1, r4
 8015296:	4638      	mov	r0, r7
 8015298:	f7ff fee2 	bl	8015060 <_malloc_r>
 801529c:	4680      	mov	r8, r0
 801529e:	b908      	cbnz	r0, 80152a4 <_realloc_r+0x44>
 80152a0:	4645      	mov	r5, r8
 80152a2:	e7ec      	b.n	801527e <_realloc_r+0x1e>
 80152a4:	42b4      	cmp	r4, r6
 80152a6:	4622      	mov	r2, r4
 80152a8:	4629      	mov	r1, r5
 80152aa:	bf28      	it	cs
 80152ac:	4632      	movcs	r2, r6
 80152ae:	f000 fafa 	bl	80158a6 <memcpy>
 80152b2:	4629      	mov	r1, r5
 80152b4:	4638      	mov	r0, r7
 80152b6:	f000 fb2f 	bl	8015918 <_free_r>
 80152ba:	e7f1      	b.n	80152a0 <_realloc_r+0x40>

080152bc <_strtoul_l.isra.0>:
 80152bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152c0:	4e34      	ldr	r6, [pc, #208]	@ (8015394 <_strtoul_l.isra.0+0xd8>)
 80152c2:	4686      	mov	lr, r0
 80152c4:	460d      	mov	r5, r1
 80152c6:	4628      	mov	r0, r5
 80152c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152cc:	5d37      	ldrb	r7, [r6, r4]
 80152ce:	f017 0708 	ands.w	r7, r7, #8
 80152d2:	d1f8      	bne.n	80152c6 <_strtoul_l.isra.0+0xa>
 80152d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80152d6:	d110      	bne.n	80152fa <_strtoul_l.isra.0+0x3e>
 80152d8:	782c      	ldrb	r4, [r5, #0]
 80152da:	2701      	movs	r7, #1
 80152dc:	1c85      	adds	r5, r0, #2
 80152de:	f033 0010 	bics.w	r0, r3, #16
 80152e2:	d115      	bne.n	8015310 <_strtoul_l.isra.0+0x54>
 80152e4:	2c30      	cmp	r4, #48	@ 0x30
 80152e6:	d10d      	bne.n	8015304 <_strtoul_l.isra.0+0x48>
 80152e8:	7828      	ldrb	r0, [r5, #0]
 80152ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80152ee:	2858      	cmp	r0, #88	@ 0x58
 80152f0:	d108      	bne.n	8015304 <_strtoul_l.isra.0+0x48>
 80152f2:	786c      	ldrb	r4, [r5, #1]
 80152f4:	3502      	adds	r5, #2
 80152f6:	2310      	movs	r3, #16
 80152f8:	e00a      	b.n	8015310 <_strtoul_l.isra.0+0x54>
 80152fa:	2c2b      	cmp	r4, #43	@ 0x2b
 80152fc:	bf04      	itt	eq
 80152fe:	782c      	ldrbeq	r4, [r5, #0]
 8015300:	1c85      	addeq	r5, r0, #2
 8015302:	e7ec      	b.n	80152de <_strtoul_l.isra.0+0x22>
 8015304:	2b00      	cmp	r3, #0
 8015306:	d1f6      	bne.n	80152f6 <_strtoul_l.isra.0+0x3a>
 8015308:	2c30      	cmp	r4, #48	@ 0x30
 801530a:	bf14      	ite	ne
 801530c:	230a      	movne	r3, #10
 801530e:	2308      	moveq	r3, #8
 8015310:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015314:	2600      	movs	r6, #0
 8015316:	fbb8 f8f3 	udiv	r8, r8, r3
 801531a:	fb03 f908 	mul.w	r9, r3, r8
 801531e:	ea6f 0909 	mvn.w	r9, r9
 8015322:	4630      	mov	r0, r6
 8015324:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015328:	f1bc 0f09 	cmp.w	ip, #9
 801532c:	d810      	bhi.n	8015350 <_strtoul_l.isra.0+0x94>
 801532e:	4664      	mov	r4, ip
 8015330:	42a3      	cmp	r3, r4
 8015332:	dd1e      	ble.n	8015372 <_strtoul_l.isra.0+0xb6>
 8015334:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015338:	d007      	beq.n	801534a <_strtoul_l.isra.0+0x8e>
 801533a:	4580      	cmp	r8, r0
 801533c:	d316      	bcc.n	801536c <_strtoul_l.isra.0+0xb0>
 801533e:	d101      	bne.n	8015344 <_strtoul_l.isra.0+0x88>
 8015340:	45a1      	cmp	r9, r4
 8015342:	db13      	blt.n	801536c <_strtoul_l.isra.0+0xb0>
 8015344:	fb00 4003 	mla	r0, r0, r3, r4
 8015348:	2601      	movs	r6, #1
 801534a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801534e:	e7e9      	b.n	8015324 <_strtoul_l.isra.0+0x68>
 8015350:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015354:	f1bc 0f19 	cmp.w	ip, #25
 8015358:	d801      	bhi.n	801535e <_strtoul_l.isra.0+0xa2>
 801535a:	3c37      	subs	r4, #55	@ 0x37
 801535c:	e7e8      	b.n	8015330 <_strtoul_l.isra.0+0x74>
 801535e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015362:	f1bc 0f19 	cmp.w	ip, #25
 8015366:	d804      	bhi.n	8015372 <_strtoul_l.isra.0+0xb6>
 8015368:	3c57      	subs	r4, #87	@ 0x57
 801536a:	e7e1      	b.n	8015330 <_strtoul_l.isra.0+0x74>
 801536c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015370:	e7eb      	b.n	801534a <_strtoul_l.isra.0+0x8e>
 8015372:	1c73      	adds	r3, r6, #1
 8015374:	d106      	bne.n	8015384 <_strtoul_l.isra.0+0xc8>
 8015376:	2322      	movs	r3, #34	@ 0x22
 8015378:	f8ce 3000 	str.w	r3, [lr]
 801537c:	4630      	mov	r0, r6
 801537e:	b932      	cbnz	r2, 801538e <_strtoul_l.isra.0+0xd2>
 8015380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015384:	b107      	cbz	r7, 8015388 <_strtoul_l.isra.0+0xcc>
 8015386:	4240      	negs	r0, r0
 8015388:	2a00      	cmp	r2, #0
 801538a:	d0f9      	beq.n	8015380 <_strtoul_l.isra.0+0xc4>
 801538c:	b106      	cbz	r6, 8015390 <_strtoul_l.isra.0+0xd4>
 801538e:	1e69      	subs	r1, r5, #1
 8015390:	6011      	str	r1, [r2, #0]
 8015392:	e7f5      	b.n	8015380 <_strtoul_l.isra.0+0xc4>
 8015394:	080172af 	.word	0x080172af

08015398 <strtoul>:
 8015398:	4613      	mov	r3, r2
 801539a:	460a      	mov	r2, r1
 801539c:	4601      	mov	r1, r0
 801539e:	4802      	ldr	r0, [pc, #8]	@ (80153a8 <strtoul+0x10>)
 80153a0:	6800      	ldr	r0, [r0, #0]
 80153a2:	f7ff bf8b 	b.w	80152bc <_strtoul_l.isra.0>
 80153a6:	bf00      	nop
 80153a8:	200000c4 	.word	0x200000c4

080153ac <std>:
 80153ac:	2300      	movs	r3, #0
 80153ae:	b510      	push	{r4, lr}
 80153b0:	4604      	mov	r4, r0
 80153b2:	e9c0 3300 	strd	r3, r3, [r0]
 80153b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153ba:	6083      	str	r3, [r0, #8]
 80153bc:	8181      	strh	r1, [r0, #12]
 80153be:	6643      	str	r3, [r0, #100]	@ 0x64
 80153c0:	81c2      	strh	r2, [r0, #14]
 80153c2:	6183      	str	r3, [r0, #24]
 80153c4:	4619      	mov	r1, r3
 80153c6:	2208      	movs	r2, #8
 80153c8:	305c      	adds	r0, #92	@ 0x5c
 80153ca:	f000 f9a3 	bl	8015714 <memset>
 80153ce:	4b0d      	ldr	r3, [pc, #52]	@ (8015404 <std+0x58>)
 80153d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80153d2:	4b0d      	ldr	r3, [pc, #52]	@ (8015408 <std+0x5c>)
 80153d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80153d6:	4b0d      	ldr	r3, [pc, #52]	@ (801540c <std+0x60>)
 80153d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80153da:	4b0d      	ldr	r3, [pc, #52]	@ (8015410 <std+0x64>)
 80153dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80153de:	4b0d      	ldr	r3, [pc, #52]	@ (8015414 <std+0x68>)
 80153e0:	6224      	str	r4, [r4, #32]
 80153e2:	429c      	cmp	r4, r3
 80153e4:	d006      	beq.n	80153f4 <std+0x48>
 80153e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80153ea:	4294      	cmp	r4, r2
 80153ec:	d002      	beq.n	80153f4 <std+0x48>
 80153ee:	33d0      	adds	r3, #208	@ 0xd0
 80153f0:	429c      	cmp	r4, r3
 80153f2:	d105      	bne.n	8015400 <std+0x54>
 80153f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80153f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153fc:	f000 ba48 	b.w	8015890 <__retarget_lock_init_recursive>
 8015400:	bd10      	pop	{r4, pc}
 8015402:	bf00      	nop
 8015404:	080155c1 	.word	0x080155c1
 8015408:	080155e3 	.word	0x080155e3
 801540c:	0801561b 	.word	0x0801561b
 8015410:	0801563f 	.word	0x0801563f
 8015414:	2000ac18 	.word	0x2000ac18

08015418 <stdio_exit_handler>:
 8015418:	4a02      	ldr	r2, [pc, #8]	@ (8015424 <stdio_exit_handler+0xc>)
 801541a:	4903      	ldr	r1, [pc, #12]	@ (8015428 <stdio_exit_handler+0x10>)
 801541c:	4803      	ldr	r0, [pc, #12]	@ (801542c <stdio_exit_handler+0x14>)
 801541e:	f000 b869 	b.w	80154f4 <_fwalk_sglue>
 8015422:	bf00      	nop
 8015424:	200000b8 	.word	0x200000b8
 8015428:	08016311 	.word	0x08016311
 801542c:	200000c8 	.word	0x200000c8

08015430 <cleanup_stdio>:
 8015430:	6841      	ldr	r1, [r0, #4]
 8015432:	4b0c      	ldr	r3, [pc, #48]	@ (8015464 <cleanup_stdio+0x34>)
 8015434:	4299      	cmp	r1, r3
 8015436:	b510      	push	{r4, lr}
 8015438:	4604      	mov	r4, r0
 801543a:	d001      	beq.n	8015440 <cleanup_stdio+0x10>
 801543c:	f000 ff68 	bl	8016310 <_fflush_r>
 8015440:	68a1      	ldr	r1, [r4, #8]
 8015442:	4b09      	ldr	r3, [pc, #36]	@ (8015468 <cleanup_stdio+0x38>)
 8015444:	4299      	cmp	r1, r3
 8015446:	d002      	beq.n	801544e <cleanup_stdio+0x1e>
 8015448:	4620      	mov	r0, r4
 801544a:	f000 ff61 	bl	8016310 <_fflush_r>
 801544e:	68e1      	ldr	r1, [r4, #12]
 8015450:	4b06      	ldr	r3, [pc, #24]	@ (801546c <cleanup_stdio+0x3c>)
 8015452:	4299      	cmp	r1, r3
 8015454:	d004      	beq.n	8015460 <cleanup_stdio+0x30>
 8015456:	4620      	mov	r0, r4
 8015458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801545c:	f000 bf58 	b.w	8016310 <_fflush_r>
 8015460:	bd10      	pop	{r4, pc}
 8015462:	bf00      	nop
 8015464:	2000ac18 	.word	0x2000ac18
 8015468:	2000ac80 	.word	0x2000ac80
 801546c:	2000ace8 	.word	0x2000ace8

08015470 <global_stdio_init.part.0>:
 8015470:	b510      	push	{r4, lr}
 8015472:	4b0b      	ldr	r3, [pc, #44]	@ (80154a0 <global_stdio_init.part.0+0x30>)
 8015474:	4c0b      	ldr	r4, [pc, #44]	@ (80154a4 <global_stdio_init.part.0+0x34>)
 8015476:	4a0c      	ldr	r2, [pc, #48]	@ (80154a8 <global_stdio_init.part.0+0x38>)
 8015478:	601a      	str	r2, [r3, #0]
 801547a:	4620      	mov	r0, r4
 801547c:	2200      	movs	r2, #0
 801547e:	2104      	movs	r1, #4
 8015480:	f7ff ff94 	bl	80153ac <std>
 8015484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015488:	2201      	movs	r2, #1
 801548a:	2109      	movs	r1, #9
 801548c:	f7ff ff8e 	bl	80153ac <std>
 8015490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015494:	2202      	movs	r2, #2
 8015496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801549a:	2112      	movs	r1, #18
 801549c:	f7ff bf86 	b.w	80153ac <std>
 80154a0:	2000ad50 	.word	0x2000ad50
 80154a4:	2000ac18 	.word	0x2000ac18
 80154a8:	08015419 	.word	0x08015419

080154ac <__sfp_lock_acquire>:
 80154ac:	4801      	ldr	r0, [pc, #4]	@ (80154b4 <__sfp_lock_acquire+0x8>)
 80154ae:	f000 b9f0 	b.w	8015892 <__retarget_lock_acquire_recursive>
 80154b2:	bf00      	nop
 80154b4:	2000ad5a 	.word	0x2000ad5a

080154b8 <__sfp_lock_release>:
 80154b8:	4801      	ldr	r0, [pc, #4]	@ (80154c0 <__sfp_lock_release+0x8>)
 80154ba:	f000 b9eb 	b.w	8015894 <__retarget_lock_release_recursive>
 80154be:	bf00      	nop
 80154c0:	2000ad5a 	.word	0x2000ad5a

080154c4 <__sinit>:
 80154c4:	b510      	push	{r4, lr}
 80154c6:	4604      	mov	r4, r0
 80154c8:	f7ff fff0 	bl	80154ac <__sfp_lock_acquire>
 80154cc:	6a23      	ldr	r3, [r4, #32]
 80154ce:	b11b      	cbz	r3, 80154d8 <__sinit+0x14>
 80154d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154d4:	f7ff bff0 	b.w	80154b8 <__sfp_lock_release>
 80154d8:	4b04      	ldr	r3, [pc, #16]	@ (80154ec <__sinit+0x28>)
 80154da:	6223      	str	r3, [r4, #32]
 80154dc:	4b04      	ldr	r3, [pc, #16]	@ (80154f0 <__sinit+0x2c>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d1f5      	bne.n	80154d0 <__sinit+0xc>
 80154e4:	f7ff ffc4 	bl	8015470 <global_stdio_init.part.0>
 80154e8:	e7f2      	b.n	80154d0 <__sinit+0xc>
 80154ea:	bf00      	nop
 80154ec:	08015431 	.word	0x08015431
 80154f0:	2000ad50 	.word	0x2000ad50

080154f4 <_fwalk_sglue>:
 80154f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154f8:	4607      	mov	r7, r0
 80154fa:	4688      	mov	r8, r1
 80154fc:	4614      	mov	r4, r2
 80154fe:	2600      	movs	r6, #0
 8015500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015504:	f1b9 0901 	subs.w	r9, r9, #1
 8015508:	d505      	bpl.n	8015516 <_fwalk_sglue+0x22>
 801550a:	6824      	ldr	r4, [r4, #0]
 801550c:	2c00      	cmp	r4, #0
 801550e:	d1f7      	bne.n	8015500 <_fwalk_sglue+0xc>
 8015510:	4630      	mov	r0, r6
 8015512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015516:	89ab      	ldrh	r3, [r5, #12]
 8015518:	2b01      	cmp	r3, #1
 801551a:	d907      	bls.n	801552c <_fwalk_sglue+0x38>
 801551c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015520:	3301      	adds	r3, #1
 8015522:	d003      	beq.n	801552c <_fwalk_sglue+0x38>
 8015524:	4629      	mov	r1, r5
 8015526:	4638      	mov	r0, r7
 8015528:	47c0      	blx	r8
 801552a:	4306      	orrs	r6, r0
 801552c:	3568      	adds	r5, #104	@ 0x68
 801552e:	e7e9      	b.n	8015504 <_fwalk_sglue+0x10>

08015530 <iprintf>:
 8015530:	b40f      	push	{r0, r1, r2, r3}
 8015532:	b507      	push	{r0, r1, r2, lr}
 8015534:	4906      	ldr	r1, [pc, #24]	@ (8015550 <iprintf+0x20>)
 8015536:	ab04      	add	r3, sp, #16
 8015538:	6808      	ldr	r0, [r1, #0]
 801553a:	f853 2b04 	ldr.w	r2, [r3], #4
 801553e:	6881      	ldr	r1, [r0, #8]
 8015540:	9301      	str	r3, [sp, #4]
 8015542:	f000 fbbd 	bl	8015cc0 <_vfiprintf_r>
 8015546:	b003      	add	sp, #12
 8015548:	f85d eb04 	ldr.w	lr, [sp], #4
 801554c:	b004      	add	sp, #16
 801554e:	4770      	bx	lr
 8015550:	200000c4 	.word	0x200000c4

08015554 <sniprintf>:
 8015554:	b40c      	push	{r2, r3}
 8015556:	b530      	push	{r4, r5, lr}
 8015558:	4b18      	ldr	r3, [pc, #96]	@ (80155bc <sniprintf+0x68>)
 801555a:	1e0c      	subs	r4, r1, #0
 801555c:	681d      	ldr	r5, [r3, #0]
 801555e:	b09d      	sub	sp, #116	@ 0x74
 8015560:	da08      	bge.n	8015574 <sniprintf+0x20>
 8015562:	238b      	movs	r3, #139	@ 0x8b
 8015564:	602b      	str	r3, [r5, #0]
 8015566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801556a:	b01d      	add	sp, #116	@ 0x74
 801556c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015570:	b002      	add	sp, #8
 8015572:	4770      	bx	lr
 8015574:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015578:	f8ad 3014 	strh.w	r3, [sp, #20]
 801557c:	f04f 0300 	mov.w	r3, #0
 8015580:	931b      	str	r3, [sp, #108]	@ 0x6c
 8015582:	bf14      	ite	ne
 8015584:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015588:	4623      	moveq	r3, r4
 801558a:	9304      	str	r3, [sp, #16]
 801558c:	9307      	str	r3, [sp, #28]
 801558e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015592:	9002      	str	r0, [sp, #8]
 8015594:	9006      	str	r0, [sp, #24]
 8015596:	f8ad 3016 	strh.w	r3, [sp, #22]
 801559a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801559c:	ab21      	add	r3, sp, #132	@ 0x84
 801559e:	a902      	add	r1, sp, #8
 80155a0:	4628      	mov	r0, r5
 80155a2:	9301      	str	r3, [sp, #4]
 80155a4:	f000 fa66 	bl	8015a74 <_svfiprintf_r>
 80155a8:	1c43      	adds	r3, r0, #1
 80155aa:	bfbc      	itt	lt
 80155ac:	238b      	movlt	r3, #139	@ 0x8b
 80155ae:	602b      	strlt	r3, [r5, #0]
 80155b0:	2c00      	cmp	r4, #0
 80155b2:	d0da      	beq.n	801556a <sniprintf+0x16>
 80155b4:	9b02      	ldr	r3, [sp, #8]
 80155b6:	2200      	movs	r2, #0
 80155b8:	701a      	strb	r2, [r3, #0]
 80155ba:	e7d6      	b.n	801556a <sniprintf+0x16>
 80155bc:	200000c4 	.word	0x200000c4

080155c0 <__sread>:
 80155c0:	b510      	push	{r4, lr}
 80155c2:	460c      	mov	r4, r1
 80155c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155c8:	f000 f904 	bl	80157d4 <_read_r>
 80155cc:	2800      	cmp	r0, #0
 80155ce:	bfab      	itete	ge
 80155d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80155d2:	89a3      	ldrhlt	r3, [r4, #12]
 80155d4:	181b      	addge	r3, r3, r0
 80155d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80155da:	bfac      	ite	ge
 80155dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80155de:	81a3      	strhlt	r3, [r4, #12]
 80155e0:	bd10      	pop	{r4, pc}

080155e2 <__swrite>:
 80155e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e6:	461f      	mov	r7, r3
 80155e8:	898b      	ldrh	r3, [r1, #12]
 80155ea:	05db      	lsls	r3, r3, #23
 80155ec:	4605      	mov	r5, r0
 80155ee:	460c      	mov	r4, r1
 80155f0:	4616      	mov	r6, r2
 80155f2:	d505      	bpl.n	8015600 <__swrite+0x1e>
 80155f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155f8:	2302      	movs	r3, #2
 80155fa:	2200      	movs	r2, #0
 80155fc:	f000 f8d8 	bl	80157b0 <_lseek_r>
 8015600:	89a3      	ldrh	r3, [r4, #12]
 8015602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801560a:	81a3      	strh	r3, [r4, #12]
 801560c:	4632      	mov	r2, r6
 801560e:	463b      	mov	r3, r7
 8015610:	4628      	mov	r0, r5
 8015612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015616:	f000 b8ff 	b.w	8015818 <_write_r>

0801561a <__sseek>:
 801561a:	b510      	push	{r4, lr}
 801561c:	460c      	mov	r4, r1
 801561e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015622:	f000 f8c5 	bl	80157b0 <_lseek_r>
 8015626:	1c43      	adds	r3, r0, #1
 8015628:	89a3      	ldrh	r3, [r4, #12]
 801562a:	bf15      	itete	ne
 801562c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801562e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015636:	81a3      	strheq	r3, [r4, #12]
 8015638:	bf18      	it	ne
 801563a:	81a3      	strhne	r3, [r4, #12]
 801563c:	bd10      	pop	{r4, pc}

0801563e <__sclose>:
 801563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015642:	f000 b8a5 	b.w	8015790 <_close_r>

08015646 <_vsniprintf_r>:
 8015646:	b530      	push	{r4, r5, lr}
 8015648:	4614      	mov	r4, r2
 801564a:	2c00      	cmp	r4, #0
 801564c:	b09b      	sub	sp, #108	@ 0x6c
 801564e:	4605      	mov	r5, r0
 8015650:	461a      	mov	r2, r3
 8015652:	da05      	bge.n	8015660 <_vsniprintf_r+0x1a>
 8015654:	238b      	movs	r3, #139	@ 0x8b
 8015656:	6003      	str	r3, [r0, #0]
 8015658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801565c:	b01b      	add	sp, #108	@ 0x6c
 801565e:	bd30      	pop	{r4, r5, pc}
 8015660:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015664:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015668:	f04f 0300 	mov.w	r3, #0
 801566c:	9319      	str	r3, [sp, #100]	@ 0x64
 801566e:	bf14      	ite	ne
 8015670:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015674:	4623      	moveq	r3, r4
 8015676:	9302      	str	r3, [sp, #8]
 8015678:	9305      	str	r3, [sp, #20]
 801567a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801567e:	9100      	str	r1, [sp, #0]
 8015680:	9104      	str	r1, [sp, #16]
 8015682:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015686:	4669      	mov	r1, sp
 8015688:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801568a:	f000 f9f3 	bl	8015a74 <_svfiprintf_r>
 801568e:	1c43      	adds	r3, r0, #1
 8015690:	bfbc      	itt	lt
 8015692:	238b      	movlt	r3, #139	@ 0x8b
 8015694:	602b      	strlt	r3, [r5, #0]
 8015696:	2c00      	cmp	r4, #0
 8015698:	d0e0      	beq.n	801565c <_vsniprintf_r+0x16>
 801569a:	9b00      	ldr	r3, [sp, #0]
 801569c:	2200      	movs	r2, #0
 801569e:	701a      	strb	r2, [r3, #0]
 80156a0:	e7dc      	b.n	801565c <_vsniprintf_r+0x16>
	...

080156a4 <vsniprintf>:
 80156a4:	b507      	push	{r0, r1, r2, lr}
 80156a6:	9300      	str	r3, [sp, #0]
 80156a8:	4613      	mov	r3, r2
 80156aa:	460a      	mov	r2, r1
 80156ac:	4601      	mov	r1, r0
 80156ae:	4803      	ldr	r0, [pc, #12]	@ (80156bc <vsniprintf+0x18>)
 80156b0:	6800      	ldr	r0, [r0, #0]
 80156b2:	f7ff ffc8 	bl	8015646 <_vsniprintf_r>
 80156b6:	b003      	add	sp, #12
 80156b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80156bc:	200000c4 	.word	0x200000c4

080156c0 <memcmp>:
 80156c0:	b510      	push	{r4, lr}
 80156c2:	3901      	subs	r1, #1
 80156c4:	4402      	add	r2, r0
 80156c6:	4290      	cmp	r0, r2
 80156c8:	d101      	bne.n	80156ce <memcmp+0xe>
 80156ca:	2000      	movs	r0, #0
 80156cc:	e005      	b.n	80156da <memcmp+0x1a>
 80156ce:	7803      	ldrb	r3, [r0, #0]
 80156d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80156d4:	42a3      	cmp	r3, r4
 80156d6:	d001      	beq.n	80156dc <memcmp+0x1c>
 80156d8:	1b18      	subs	r0, r3, r4
 80156da:	bd10      	pop	{r4, pc}
 80156dc:	3001      	adds	r0, #1
 80156de:	e7f2      	b.n	80156c6 <memcmp+0x6>

080156e0 <memmove>:
 80156e0:	4288      	cmp	r0, r1
 80156e2:	b510      	push	{r4, lr}
 80156e4:	eb01 0402 	add.w	r4, r1, r2
 80156e8:	d902      	bls.n	80156f0 <memmove+0x10>
 80156ea:	4284      	cmp	r4, r0
 80156ec:	4623      	mov	r3, r4
 80156ee:	d807      	bhi.n	8015700 <memmove+0x20>
 80156f0:	1e43      	subs	r3, r0, #1
 80156f2:	42a1      	cmp	r1, r4
 80156f4:	d008      	beq.n	8015708 <memmove+0x28>
 80156f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156fe:	e7f8      	b.n	80156f2 <memmove+0x12>
 8015700:	4402      	add	r2, r0
 8015702:	4601      	mov	r1, r0
 8015704:	428a      	cmp	r2, r1
 8015706:	d100      	bne.n	801570a <memmove+0x2a>
 8015708:	bd10      	pop	{r4, pc}
 801570a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801570e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015712:	e7f7      	b.n	8015704 <memmove+0x24>

08015714 <memset>:
 8015714:	4402      	add	r2, r0
 8015716:	4603      	mov	r3, r0
 8015718:	4293      	cmp	r3, r2
 801571a:	d100      	bne.n	801571e <memset+0xa>
 801571c:	4770      	bx	lr
 801571e:	f803 1b01 	strb.w	r1, [r3], #1
 8015722:	e7f9      	b.n	8015718 <memset+0x4>

08015724 <strchr>:
 8015724:	b2c9      	uxtb	r1, r1
 8015726:	4603      	mov	r3, r0
 8015728:	4618      	mov	r0, r3
 801572a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801572e:	b112      	cbz	r2, 8015736 <strchr+0x12>
 8015730:	428a      	cmp	r2, r1
 8015732:	d1f9      	bne.n	8015728 <strchr+0x4>
 8015734:	4770      	bx	lr
 8015736:	2900      	cmp	r1, #0
 8015738:	bf18      	it	ne
 801573a:	2000      	movne	r0, #0
 801573c:	4770      	bx	lr

0801573e <strncmp>:
 801573e:	b510      	push	{r4, lr}
 8015740:	b16a      	cbz	r2, 801575e <strncmp+0x20>
 8015742:	3901      	subs	r1, #1
 8015744:	1884      	adds	r4, r0, r2
 8015746:	f810 2b01 	ldrb.w	r2, [r0], #1
 801574a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801574e:	429a      	cmp	r2, r3
 8015750:	d103      	bne.n	801575a <strncmp+0x1c>
 8015752:	42a0      	cmp	r0, r4
 8015754:	d001      	beq.n	801575a <strncmp+0x1c>
 8015756:	2a00      	cmp	r2, #0
 8015758:	d1f5      	bne.n	8015746 <strncmp+0x8>
 801575a:	1ad0      	subs	r0, r2, r3
 801575c:	bd10      	pop	{r4, pc}
 801575e:	4610      	mov	r0, r2
 8015760:	e7fc      	b.n	801575c <strncmp+0x1e>

08015762 <strstr>:
 8015762:	780a      	ldrb	r2, [r1, #0]
 8015764:	b570      	push	{r4, r5, r6, lr}
 8015766:	b96a      	cbnz	r2, 8015784 <strstr+0x22>
 8015768:	bd70      	pop	{r4, r5, r6, pc}
 801576a:	429a      	cmp	r2, r3
 801576c:	d109      	bne.n	8015782 <strstr+0x20>
 801576e:	460c      	mov	r4, r1
 8015770:	4605      	mov	r5, r0
 8015772:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015776:	2b00      	cmp	r3, #0
 8015778:	d0f6      	beq.n	8015768 <strstr+0x6>
 801577a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801577e:	429e      	cmp	r6, r3
 8015780:	d0f7      	beq.n	8015772 <strstr+0x10>
 8015782:	3001      	adds	r0, #1
 8015784:	7803      	ldrb	r3, [r0, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d1ef      	bne.n	801576a <strstr+0x8>
 801578a:	4618      	mov	r0, r3
 801578c:	e7ec      	b.n	8015768 <strstr+0x6>
	...

08015790 <_close_r>:
 8015790:	b538      	push	{r3, r4, r5, lr}
 8015792:	4d06      	ldr	r5, [pc, #24]	@ (80157ac <_close_r+0x1c>)
 8015794:	2300      	movs	r3, #0
 8015796:	4604      	mov	r4, r0
 8015798:	4608      	mov	r0, r1
 801579a:	602b      	str	r3, [r5, #0]
 801579c:	f7eb ff7e 	bl	800169c <_close>
 80157a0:	1c43      	adds	r3, r0, #1
 80157a2:	d102      	bne.n	80157aa <_close_r+0x1a>
 80157a4:	682b      	ldr	r3, [r5, #0]
 80157a6:	b103      	cbz	r3, 80157aa <_close_r+0x1a>
 80157a8:	6023      	str	r3, [r4, #0]
 80157aa:	bd38      	pop	{r3, r4, r5, pc}
 80157ac:	2000ad54 	.word	0x2000ad54

080157b0 <_lseek_r>:
 80157b0:	b538      	push	{r3, r4, r5, lr}
 80157b2:	4d07      	ldr	r5, [pc, #28]	@ (80157d0 <_lseek_r+0x20>)
 80157b4:	4604      	mov	r4, r0
 80157b6:	4608      	mov	r0, r1
 80157b8:	4611      	mov	r1, r2
 80157ba:	2200      	movs	r2, #0
 80157bc:	602a      	str	r2, [r5, #0]
 80157be:	461a      	mov	r2, r3
 80157c0:	f7eb ff93 	bl	80016ea <_lseek>
 80157c4:	1c43      	adds	r3, r0, #1
 80157c6:	d102      	bne.n	80157ce <_lseek_r+0x1e>
 80157c8:	682b      	ldr	r3, [r5, #0]
 80157ca:	b103      	cbz	r3, 80157ce <_lseek_r+0x1e>
 80157cc:	6023      	str	r3, [r4, #0]
 80157ce:	bd38      	pop	{r3, r4, r5, pc}
 80157d0:	2000ad54 	.word	0x2000ad54

080157d4 <_read_r>:
 80157d4:	b538      	push	{r3, r4, r5, lr}
 80157d6:	4d07      	ldr	r5, [pc, #28]	@ (80157f4 <_read_r+0x20>)
 80157d8:	4604      	mov	r4, r0
 80157da:	4608      	mov	r0, r1
 80157dc:	4611      	mov	r1, r2
 80157de:	2200      	movs	r2, #0
 80157e0:	602a      	str	r2, [r5, #0]
 80157e2:	461a      	mov	r2, r3
 80157e4:	f7eb ff21 	bl	800162a <_read>
 80157e8:	1c43      	adds	r3, r0, #1
 80157ea:	d102      	bne.n	80157f2 <_read_r+0x1e>
 80157ec:	682b      	ldr	r3, [r5, #0]
 80157ee:	b103      	cbz	r3, 80157f2 <_read_r+0x1e>
 80157f0:	6023      	str	r3, [r4, #0]
 80157f2:	bd38      	pop	{r3, r4, r5, pc}
 80157f4:	2000ad54 	.word	0x2000ad54

080157f8 <_sbrk_r>:
 80157f8:	b538      	push	{r3, r4, r5, lr}
 80157fa:	4d06      	ldr	r5, [pc, #24]	@ (8015814 <_sbrk_r+0x1c>)
 80157fc:	2300      	movs	r3, #0
 80157fe:	4604      	mov	r4, r0
 8015800:	4608      	mov	r0, r1
 8015802:	602b      	str	r3, [r5, #0]
 8015804:	f7eb ff7e 	bl	8001704 <_sbrk>
 8015808:	1c43      	adds	r3, r0, #1
 801580a:	d102      	bne.n	8015812 <_sbrk_r+0x1a>
 801580c:	682b      	ldr	r3, [r5, #0]
 801580e:	b103      	cbz	r3, 8015812 <_sbrk_r+0x1a>
 8015810:	6023      	str	r3, [r4, #0]
 8015812:	bd38      	pop	{r3, r4, r5, pc}
 8015814:	2000ad54 	.word	0x2000ad54

08015818 <_write_r>:
 8015818:	b538      	push	{r3, r4, r5, lr}
 801581a:	4d07      	ldr	r5, [pc, #28]	@ (8015838 <_write_r+0x20>)
 801581c:	4604      	mov	r4, r0
 801581e:	4608      	mov	r0, r1
 8015820:	4611      	mov	r1, r2
 8015822:	2200      	movs	r2, #0
 8015824:	602a      	str	r2, [r5, #0]
 8015826:	461a      	mov	r2, r3
 8015828:	f7eb ff1c 	bl	8001664 <_write>
 801582c:	1c43      	adds	r3, r0, #1
 801582e:	d102      	bne.n	8015836 <_write_r+0x1e>
 8015830:	682b      	ldr	r3, [r5, #0]
 8015832:	b103      	cbz	r3, 8015836 <_write_r+0x1e>
 8015834:	6023      	str	r3, [r4, #0]
 8015836:	bd38      	pop	{r3, r4, r5, pc}
 8015838:	2000ad54 	.word	0x2000ad54

0801583c <__errno>:
 801583c:	4b01      	ldr	r3, [pc, #4]	@ (8015844 <__errno+0x8>)
 801583e:	6818      	ldr	r0, [r3, #0]
 8015840:	4770      	bx	lr
 8015842:	bf00      	nop
 8015844:	200000c4 	.word	0x200000c4

08015848 <__libc_init_array>:
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	4d0d      	ldr	r5, [pc, #52]	@ (8015880 <__libc_init_array+0x38>)
 801584c:	4c0d      	ldr	r4, [pc, #52]	@ (8015884 <__libc_init_array+0x3c>)
 801584e:	1b64      	subs	r4, r4, r5
 8015850:	10a4      	asrs	r4, r4, #2
 8015852:	2600      	movs	r6, #0
 8015854:	42a6      	cmp	r6, r4
 8015856:	d109      	bne.n	801586c <__libc_init_array+0x24>
 8015858:	4d0b      	ldr	r5, [pc, #44]	@ (8015888 <__libc_init_array+0x40>)
 801585a:	4c0c      	ldr	r4, [pc, #48]	@ (801588c <__libc_init_array+0x44>)
 801585c:	f000 fef6 	bl	801664c <_init>
 8015860:	1b64      	subs	r4, r4, r5
 8015862:	10a4      	asrs	r4, r4, #2
 8015864:	2600      	movs	r6, #0
 8015866:	42a6      	cmp	r6, r4
 8015868:	d105      	bne.n	8015876 <__libc_init_array+0x2e>
 801586a:	bd70      	pop	{r4, r5, r6, pc}
 801586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015870:	4798      	blx	r3
 8015872:	3601      	adds	r6, #1
 8015874:	e7ee      	b.n	8015854 <__libc_init_array+0xc>
 8015876:	f855 3b04 	ldr.w	r3, [r5], #4
 801587a:	4798      	blx	r3
 801587c:	3601      	adds	r6, #1
 801587e:	e7f2      	b.n	8015866 <__libc_init_array+0x1e>
 8015880:	080173b8 	.word	0x080173b8
 8015884:	080173b8 	.word	0x080173b8
 8015888:	080173b8 	.word	0x080173b8
 801588c:	080173c0 	.word	0x080173c0

08015890 <__retarget_lock_init_recursive>:
 8015890:	4770      	bx	lr

08015892 <__retarget_lock_acquire_recursive>:
 8015892:	4770      	bx	lr

08015894 <__retarget_lock_release_recursive>:
 8015894:	4770      	bx	lr

08015896 <strcpy>:
 8015896:	4603      	mov	r3, r0
 8015898:	f811 2b01 	ldrb.w	r2, [r1], #1
 801589c:	f803 2b01 	strb.w	r2, [r3], #1
 80158a0:	2a00      	cmp	r2, #0
 80158a2:	d1f9      	bne.n	8015898 <strcpy+0x2>
 80158a4:	4770      	bx	lr

080158a6 <memcpy>:
 80158a6:	440a      	add	r2, r1
 80158a8:	4291      	cmp	r1, r2
 80158aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80158ae:	d100      	bne.n	80158b2 <memcpy+0xc>
 80158b0:	4770      	bx	lr
 80158b2:	b510      	push	{r4, lr}
 80158b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158bc:	4291      	cmp	r1, r2
 80158be:	d1f9      	bne.n	80158b4 <memcpy+0xe>
 80158c0:	bd10      	pop	{r4, pc}
	...

080158c4 <__assert_func>:
 80158c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80158c6:	4614      	mov	r4, r2
 80158c8:	461a      	mov	r2, r3
 80158ca:	4b09      	ldr	r3, [pc, #36]	@ (80158f0 <__assert_func+0x2c>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	4605      	mov	r5, r0
 80158d0:	68d8      	ldr	r0, [r3, #12]
 80158d2:	b14c      	cbz	r4, 80158e8 <__assert_func+0x24>
 80158d4:	4b07      	ldr	r3, [pc, #28]	@ (80158f4 <__assert_func+0x30>)
 80158d6:	9100      	str	r1, [sp, #0]
 80158d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80158dc:	4906      	ldr	r1, [pc, #24]	@ (80158f8 <__assert_func+0x34>)
 80158de:	462b      	mov	r3, r5
 80158e0:	f000 fd3e 	bl	8016360 <fiprintf>
 80158e4:	f000 fde2 	bl	80164ac <abort>
 80158e8:	4b04      	ldr	r3, [pc, #16]	@ (80158fc <__assert_func+0x38>)
 80158ea:	461c      	mov	r4, r3
 80158ec:	e7f3      	b.n	80158d6 <__assert_func+0x12>
 80158ee:	bf00      	nop
 80158f0:	200000c4 	.word	0x200000c4
 80158f4:	0801723f 	.word	0x0801723f
 80158f8:	0801724c 	.word	0x0801724c
 80158fc:	0801727a 	.word	0x0801727a

08015900 <__env_lock>:
 8015900:	4801      	ldr	r0, [pc, #4]	@ (8015908 <__env_lock+0x8>)
 8015902:	f7ff bfc6 	b.w	8015892 <__retarget_lock_acquire_recursive>
 8015906:	bf00      	nop
 8015908:	2000ad58 	.word	0x2000ad58

0801590c <__env_unlock>:
 801590c:	4801      	ldr	r0, [pc, #4]	@ (8015914 <__env_unlock+0x8>)
 801590e:	f7ff bfc1 	b.w	8015894 <__retarget_lock_release_recursive>
 8015912:	bf00      	nop
 8015914:	2000ad58 	.word	0x2000ad58

08015918 <_free_r>:
 8015918:	b538      	push	{r3, r4, r5, lr}
 801591a:	4605      	mov	r5, r0
 801591c:	2900      	cmp	r1, #0
 801591e:	d041      	beq.n	80159a4 <_free_r+0x8c>
 8015920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015924:	1f0c      	subs	r4, r1, #4
 8015926:	2b00      	cmp	r3, #0
 8015928:	bfb8      	it	lt
 801592a:	18e4      	addlt	r4, r4, r3
 801592c:	f7ff fc18 	bl	8015160 <__malloc_lock>
 8015930:	4a1d      	ldr	r2, [pc, #116]	@ (80159a8 <_free_r+0x90>)
 8015932:	6813      	ldr	r3, [r2, #0]
 8015934:	b933      	cbnz	r3, 8015944 <_free_r+0x2c>
 8015936:	6063      	str	r3, [r4, #4]
 8015938:	6014      	str	r4, [r2, #0]
 801593a:	4628      	mov	r0, r5
 801593c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015940:	f7ff bc14 	b.w	801516c <__malloc_unlock>
 8015944:	42a3      	cmp	r3, r4
 8015946:	d908      	bls.n	801595a <_free_r+0x42>
 8015948:	6820      	ldr	r0, [r4, #0]
 801594a:	1821      	adds	r1, r4, r0
 801594c:	428b      	cmp	r3, r1
 801594e:	bf01      	itttt	eq
 8015950:	6819      	ldreq	r1, [r3, #0]
 8015952:	685b      	ldreq	r3, [r3, #4]
 8015954:	1809      	addeq	r1, r1, r0
 8015956:	6021      	streq	r1, [r4, #0]
 8015958:	e7ed      	b.n	8015936 <_free_r+0x1e>
 801595a:	461a      	mov	r2, r3
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	b10b      	cbz	r3, 8015964 <_free_r+0x4c>
 8015960:	42a3      	cmp	r3, r4
 8015962:	d9fa      	bls.n	801595a <_free_r+0x42>
 8015964:	6811      	ldr	r1, [r2, #0]
 8015966:	1850      	adds	r0, r2, r1
 8015968:	42a0      	cmp	r0, r4
 801596a:	d10b      	bne.n	8015984 <_free_r+0x6c>
 801596c:	6820      	ldr	r0, [r4, #0]
 801596e:	4401      	add	r1, r0
 8015970:	1850      	adds	r0, r2, r1
 8015972:	4283      	cmp	r3, r0
 8015974:	6011      	str	r1, [r2, #0]
 8015976:	d1e0      	bne.n	801593a <_free_r+0x22>
 8015978:	6818      	ldr	r0, [r3, #0]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	6053      	str	r3, [r2, #4]
 801597e:	4408      	add	r0, r1
 8015980:	6010      	str	r0, [r2, #0]
 8015982:	e7da      	b.n	801593a <_free_r+0x22>
 8015984:	d902      	bls.n	801598c <_free_r+0x74>
 8015986:	230c      	movs	r3, #12
 8015988:	602b      	str	r3, [r5, #0]
 801598a:	e7d6      	b.n	801593a <_free_r+0x22>
 801598c:	6820      	ldr	r0, [r4, #0]
 801598e:	1821      	adds	r1, r4, r0
 8015990:	428b      	cmp	r3, r1
 8015992:	bf04      	itt	eq
 8015994:	6819      	ldreq	r1, [r3, #0]
 8015996:	685b      	ldreq	r3, [r3, #4]
 8015998:	6063      	str	r3, [r4, #4]
 801599a:	bf04      	itt	eq
 801599c:	1809      	addeq	r1, r1, r0
 801599e:	6021      	streq	r1, [r4, #0]
 80159a0:	6054      	str	r4, [r2, #4]
 80159a2:	e7ca      	b.n	801593a <_free_r+0x22>
 80159a4:	bd38      	pop	{r3, r4, r5, pc}
 80159a6:	bf00      	nop
 80159a8:	2000ac14 	.word	0x2000ac14

080159ac <_malloc_usable_size_r>:
 80159ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159b0:	1f18      	subs	r0, r3, #4
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	bfbc      	itt	lt
 80159b6:	580b      	ldrlt	r3, [r1, r0]
 80159b8:	18c0      	addlt	r0, r0, r3
 80159ba:	4770      	bx	lr

080159bc <__ssputs_r>:
 80159bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159c0:	688e      	ldr	r6, [r1, #8]
 80159c2:	461f      	mov	r7, r3
 80159c4:	42be      	cmp	r6, r7
 80159c6:	680b      	ldr	r3, [r1, #0]
 80159c8:	4682      	mov	sl, r0
 80159ca:	460c      	mov	r4, r1
 80159cc:	4690      	mov	r8, r2
 80159ce:	d82d      	bhi.n	8015a2c <__ssputs_r+0x70>
 80159d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80159d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80159d8:	d026      	beq.n	8015a28 <__ssputs_r+0x6c>
 80159da:	6965      	ldr	r5, [r4, #20]
 80159dc:	6909      	ldr	r1, [r1, #16]
 80159de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159e2:	eba3 0901 	sub.w	r9, r3, r1
 80159e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159ea:	1c7b      	adds	r3, r7, #1
 80159ec:	444b      	add	r3, r9
 80159ee:	106d      	asrs	r5, r5, #1
 80159f0:	429d      	cmp	r5, r3
 80159f2:	bf38      	it	cc
 80159f4:	461d      	movcc	r5, r3
 80159f6:	0553      	lsls	r3, r2, #21
 80159f8:	d527      	bpl.n	8015a4a <__ssputs_r+0x8e>
 80159fa:	4629      	mov	r1, r5
 80159fc:	f7ff fb30 	bl	8015060 <_malloc_r>
 8015a00:	4606      	mov	r6, r0
 8015a02:	b360      	cbz	r0, 8015a5e <__ssputs_r+0xa2>
 8015a04:	6921      	ldr	r1, [r4, #16]
 8015a06:	464a      	mov	r2, r9
 8015a08:	f7ff ff4d 	bl	80158a6 <memcpy>
 8015a0c:	89a3      	ldrh	r3, [r4, #12]
 8015a0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a16:	81a3      	strh	r3, [r4, #12]
 8015a18:	6126      	str	r6, [r4, #16]
 8015a1a:	6165      	str	r5, [r4, #20]
 8015a1c:	444e      	add	r6, r9
 8015a1e:	eba5 0509 	sub.w	r5, r5, r9
 8015a22:	6026      	str	r6, [r4, #0]
 8015a24:	60a5      	str	r5, [r4, #8]
 8015a26:	463e      	mov	r6, r7
 8015a28:	42be      	cmp	r6, r7
 8015a2a:	d900      	bls.n	8015a2e <__ssputs_r+0x72>
 8015a2c:	463e      	mov	r6, r7
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	4632      	mov	r2, r6
 8015a32:	4641      	mov	r1, r8
 8015a34:	f7ff fe54 	bl	80156e0 <memmove>
 8015a38:	68a3      	ldr	r3, [r4, #8]
 8015a3a:	1b9b      	subs	r3, r3, r6
 8015a3c:	60a3      	str	r3, [r4, #8]
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	4433      	add	r3, r6
 8015a42:	6023      	str	r3, [r4, #0]
 8015a44:	2000      	movs	r0, #0
 8015a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a4a:	462a      	mov	r2, r5
 8015a4c:	f7ff fc08 	bl	8015260 <_realloc_r>
 8015a50:	4606      	mov	r6, r0
 8015a52:	2800      	cmp	r0, #0
 8015a54:	d1e0      	bne.n	8015a18 <__ssputs_r+0x5c>
 8015a56:	6921      	ldr	r1, [r4, #16]
 8015a58:	4650      	mov	r0, sl
 8015a5a:	f7ff ff5d 	bl	8015918 <_free_r>
 8015a5e:	230c      	movs	r3, #12
 8015a60:	f8ca 3000 	str.w	r3, [sl]
 8015a64:	89a3      	ldrh	r3, [r4, #12]
 8015a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a6a:	81a3      	strh	r3, [r4, #12]
 8015a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a70:	e7e9      	b.n	8015a46 <__ssputs_r+0x8a>
	...

08015a74 <_svfiprintf_r>:
 8015a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a78:	4698      	mov	r8, r3
 8015a7a:	898b      	ldrh	r3, [r1, #12]
 8015a7c:	061b      	lsls	r3, r3, #24
 8015a7e:	b09d      	sub	sp, #116	@ 0x74
 8015a80:	4607      	mov	r7, r0
 8015a82:	460d      	mov	r5, r1
 8015a84:	4614      	mov	r4, r2
 8015a86:	d510      	bpl.n	8015aaa <_svfiprintf_r+0x36>
 8015a88:	690b      	ldr	r3, [r1, #16]
 8015a8a:	b973      	cbnz	r3, 8015aaa <_svfiprintf_r+0x36>
 8015a8c:	2140      	movs	r1, #64	@ 0x40
 8015a8e:	f7ff fae7 	bl	8015060 <_malloc_r>
 8015a92:	6028      	str	r0, [r5, #0]
 8015a94:	6128      	str	r0, [r5, #16]
 8015a96:	b930      	cbnz	r0, 8015aa6 <_svfiprintf_r+0x32>
 8015a98:	230c      	movs	r3, #12
 8015a9a:	603b      	str	r3, [r7, #0]
 8015a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015aa0:	b01d      	add	sp, #116	@ 0x74
 8015aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa6:	2340      	movs	r3, #64	@ 0x40
 8015aa8:	616b      	str	r3, [r5, #20]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8015aae:	2320      	movs	r3, #32
 8015ab0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ab8:	2330      	movs	r3, #48	@ 0x30
 8015aba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015c58 <_svfiprintf_r+0x1e4>
 8015abe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ac2:	f04f 0901 	mov.w	r9, #1
 8015ac6:	4623      	mov	r3, r4
 8015ac8:	469a      	mov	sl, r3
 8015aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ace:	b10a      	cbz	r2, 8015ad4 <_svfiprintf_r+0x60>
 8015ad0:	2a25      	cmp	r2, #37	@ 0x25
 8015ad2:	d1f9      	bne.n	8015ac8 <_svfiprintf_r+0x54>
 8015ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8015ad8:	d00b      	beq.n	8015af2 <_svfiprintf_r+0x7e>
 8015ada:	465b      	mov	r3, fp
 8015adc:	4622      	mov	r2, r4
 8015ade:	4629      	mov	r1, r5
 8015ae0:	4638      	mov	r0, r7
 8015ae2:	f7ff ff6b 	bl	80159bc <__ssputs_r>
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	f000 80a7 	beq.w	8015c3a <_svfiprintf_r+0x1c6>
 8015aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015aee:	445a      	add	r2, fp
 8015af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015af2:	f89a 3000 	ldrb.w	r3, [sl]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	f000 809f 	beq.w	8015c3a <_svfiprintf_r+0x1c6>
 8015afc:	2300      	movs	r3, #0
 8015afe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b06:	f10a 0a01 	add.w	sl, sl, #1
 8015b0a:	9304      	str	r3, [sp, #16]
 8015b0c:	9307      	str	r3, [sp, #28]
 8015b0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015b12:	931a      	str	r3, [sp, #104]	@ 0x68
 8015b14:	4654      	mov	r4, sl
 8015b16:	2205      	movs	r2, #5
 8015b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b1c:	484e      	ldr	r0, [pc, #312]	@ (8015c58 <_svfiprintf_r+0x1e4>)
 8015b1e:	f7ea fb97 	bl	8000250 <memchr>
 8015b22:	9a04      	ldr	r2, [sp, #16]
 8015b24:	b9d8      	cbnz	r0, 8015b5e <_svfiprintf_r+0xea>
 8015b26:	06d0      	lsls	r0, r2, #27
 8015b28:	bf44      	itt	mi
 8015b2a:	2320      	movmi	r3, #32
 8015b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b30:	0711      	lsls	r1, r2, #28
 8015b32:	bf44      	itt	mi
 8015b34:	232b      	movmi	r3, #43	@ 0x2b
 8015b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8015b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b40:	d015      	beq.n	8015b6e <_svfiprintf_r+0xfa>
 8015b42:	9a07      	ldr	r2, [sp, #28]
 8015b44:	4654      	mov	r4, sl
 8015b46:	2000      	movs	r0, #0
 8015b48:	f04f 0c0a 	mov.w	ip, #10
 8015b4c:	4621      	mov	r1, r4
 8015b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b52:	3b30      	subs	r3, #48	@ 0x30
 8015b54:	2b09      	cmp	r3, #9
 8015b56:	d94b      	bls.n	8015bf0 <_svfiprintf_r+0x17c>
 8015b58:	b1b0      	cbz	r0, 8015b88 <_svfiprintf_r+0x114>
 8015b5a:	9207      	str	r2, [sp, #28]
 8015b5c:	e014      	b.n	8015b88 <_svfiprintf_r+0x114>
 8015b5e:	eba0 0308 	sub.w	r3, r0, r8
 8015b62:	fa09 f303 	lsl.w	r3, r9, r3
 8015b66:	4313      	orrs	r3, r2
 8015b68:	9304      	str	r3, [sp, #16]
 8015b6a:	46a2      	mov	sl, r4
 8015b6c:	e7d2      	b.n	8015b14 <_svfiprintf_r+0xa0>
 8015b6e:	9b03      	ldr	r3, [sp, #12]
 8015b70:	1d19      	adds	r1, r3, #4
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	9103      	str	r1, [sp, #12]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	bfbb      	ittet	lt
 8015b7a:	425b      	neglt	r3, r3
 8015b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8015b80:	9307      	strge	r3, [sp, #28]
 8015b82:	9307      	strlt	r3, [sp, #28]
 8015b84:	bfb8      	it	lt
 8015b86:	9204      	strlt	r2, [sp, #16]
 8015b88:	7823      	ldrb	r3, [r4, #0]
 8015b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b8c:	d10a      	bne.n	8015ba4 <_svfiprintf_r+0x130>
 8015b8e:	7863      	ldrb	r3, [r4, #1]
 8015b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b92:	d132      	bne.n	8015bfa <_svfiprintf_r+0x186>
 8015b94:	9b03      	ldr	r3, [sp, #12]
 8015b96:	1d1a      	adds	r2, r3, #4
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	9203      	str	r2, [sp, #12]
 8015b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015ba0:	3402      	adds	r4, #2
 8015ba2:	9305      	str	r3, [sp, #20]
 8015ba4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015c68 <_svfiprintf_r+0x1f4>
 8015ba8:	7821      	ldrb	r1, [r4, #0]
 8015baa:	2203      	movs	r2, #3
 8015bac:	4650      	mov	r0, sl
 8015bae:	f7ea fb4f 	bl	8000250 <memchr>
 8015bb2:	b138      	cbz	r0, 8015bc4 <_svfiprintf_r+0x150>
 8015bb4:	9b04      	ldr	r3, [sp, #16]
 8015bb6:	eba0 000a 	sub.w	r0, r0, sl
 8015bba:	2240      	movs	r2, #64	@ 0x40
 8015bbc:	4082      	lsls	r2, r0
 8015bbe:	4313      	orrs	r3, r2
 8015bc0:	3401      	adds	r4, #1
 8015bc2:	9304      	str	r3, [sp, #16]
 8015bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bc8:	4824      	ldr	r0, [pc, #144]	@ (8015c5c <_svfiprintf_r+0x1e8>)
 8015bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015bce:	2206      	movs	r2, #6
 8015bd0:	f7ea fb3e 	bl	8000250 <memchr>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	d036      	beq.n	8015c46 <_svfiprintf_r+0x1d2>
 8015bd8:	4b21      	ldr	r3, [pc, #132]	@ (8015c60 <_svfiprintf_r+0x1ec>)
 8015bda:	bb1b      	cbnz	r3, 8015c24 <_svfiprintf_r+0x1b0>
 8015bdc:	9b03      	ldr	r3, [sp, #12]
 8015bde:	3307      	adds	r3, #7
 8015be0:	f023 0307 	bic.w	r3, r3, #7
 8015be4:	3308      	adds	r3, #8
 8015be6:	9303      	str	r3, [sp, #12]
 8015be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bea:	4433      	add	r3, r6
 8015bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bee:	e76a      	b.n	8015ac6 <_svfiprintf_r+0x52>
 8015bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bf4:	460c      	mov	r4, r1
 8015bf6:	2001      	movs	r0, #1
 8015bf8:	e7a8      	b.n	8015b4c <_svfiprintf_r+0xd8>
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	3401      	adds	r4, #1
 8015bfe:	9305      	str	r3, [sp, #20]
 8015c00:	4619      	mov	r1, r3
 8015c02:	f04f 0c0a 	mov.w	ip, #10
 8015c06:	4620      	mov	r0, r4
 8015c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c0c:	3a30      	subs	r2, #48	@ 0x30
 8015c0e:	2a09      	cmp	r2, #9
 8015c10:	d903      	bls.n	8015c1a <_svfiprintf_r+0x1a6>
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d0c6      	beq.n	8015ba4 <_svfiprintf_r+0x130>
 8015c16:	9105      	str	r1, [sp, #20]
 8015c18:	e7c4      	b.n	8015ba4 <_svfiprintf_r+0x130>
 8015c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c1e:	4604      	mov	r4, r0
 8015c20:	2301      	movs	r3, #1
 8015c22:	e7f0      	b.n	8015c06 <_svfiprintf_r+0x192>
 8015c24:	ab03      	add	r3, sp, #12
 8015c26:	9300      	str	r3, [sp, #0]
 8015c28:	462a      	mov	r2, r5
 8015c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8015c64 <_svfiprintf_r+0x1f0>)
 8015c2c:	a904      	add	r1, sp, #16
 8015c2e:	4638      	mov	r0, r7
 8015c30:	f3af 8000 	nop.w
 8015c34:	1c42      	adds	r2, r0, #1
 8015c36:	4606      	mov	r6, r0
 8015c38:	d1d6      	bne.n	8015be8 <_svfiprintf_r+0x174>
 8015c3a:	89ab      	ldrh	r3, [r5, #12]
 8015c3c:	065b      	lsls	r3, r3, #25
 8015c3e:	f53f af2d 	bmi.w	8015a9c <_svfiprintf_r+0x28>
 8015c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c44:	e72c      	b.n	8015aa0 <_svfiprintf_r+0x2c>
 8015c46:	ab03      	add	r3, sp, #12
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	462a      	mov	r2, r5
 8015c4c:	4b05      	ldr	r3, [pc, #20]	@ (8015c64 <_svfiprintf_r+0x1f0>)
 8015c4e:	a904      	add	r1, sp, #16
 8015c50:	4638      	mov	r0, r7
 8015c52:	f000 f9bb 	bl	8015fcc <_printf_i>
 8015c56:	e7ed      	b.n	8015c34 <_svfiprintf_r+0x1c0>
 8015c58:	0801727b 	.word	0x0801727b
 8015c5c:	08017285 	.word	0x08017285
 8015c60:	00000000 	.word	0x00000000
 8015c64:	080159bd 	.word	0x080159bd
 8015c68:	08017281 	.word	0x08017281

08015c6c <__sfputc_r>:
 8015c6c:	6893      	ldr	r3, [r2, #8]
 8015c6e:	3b01      	subs	r3, #1
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	b410      	push	{r4}
 8015c74:	6093      	str	r3, [r2, #8]
 8015c76:	da08      	bge.n	8015c8a <__sfputc_r+0x1e>
 8015c78:	6994      	ldr	r4, [r2, #24]
 8015c7a:	42a3      	cmp	r3, r4
 8015c7c:	db01      	blt.n	8015c82 <__sfputc_r+0x16>
 8015c7e:	290a      	cmp	r1, #10
 8015c80:	d103      	bne.n	8015c8a <__sfputc_r+0x1e>
 8015c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c86:	f000 bb7d 	b.w	8016384 <__swbuf_r>
 8015c8a:	6813      	ldr	r3, [r2, #0]
 8015c8c:	1c58      	adds	r0, r3, #1
 8015c8e:	6010      	str	r0, [r2, #0]
 8015c90:	7019      	strb	r1, [r3, #0]
 8015c92:	4608      	mov	r0, r1
 8015c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c98:	4770      	bx	lr

08015c9a <__sfputs_r>:
 8015c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c9c:	4606      	mov	r6, r0
 8015c9e:	460f      	mov	r7, r1
 8015ca0:	4614      	mov	r4, r2
 8015ca2:	18d5      	adds	r5, r2, r3
 8015ca4:	42ac      	cmp	r4, r5
 8015ca6:	d101      	bne.n	8015cac <__sfputs_r+0x12>
 8015ca8:	2000      	movs	r0, #0
 8015caa:	e007      	b.n	8015cbc <__sfputs_r+0x22>
 8015cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb0:	463a      	mov	r2, r7
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	f7ff ffda 	bl	8015c6c <__sfputc_r>
 8015cb8:	1c43      	adds	r3, r0, #1
 8015cba:	d1f3      	bne.n	8015ca4 <__sfputs_r+0xa>
 8015cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015cc0 <_vfiprintf_r>:
 8015cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc4:	460d      	mov	r5, r1
 8015cc6:	b09d      	sub	sp, #116	@ 0x74
 8015cc8:	4614      	mov	r4, r2
 8015cca:	4698      	mov	r8, r3
 8015ccc:	4606      	mov	r6, r0
 8015cce:	b118      	cbz	r0, 8015cd8 <_vfiprintf_r+0x18>
 8015cd0:	6a03      	ldr	r3, [r0, #32]
 8015cd2:	b90b      	cbnz	r3, 8015cd8 <_vfiprintf_r+0x18>
 8015cd4:	f7ff fbf6 	bl	80154c4 <__sinit>
 8015cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015cda:	07d9      	lsls	r1, r3, #31
 8015cdc:	d405      	bmi.n	8015cea <_vfiprintf_r+0x2a>
 8015cde:	89ab      	ldrh	r3, [r5, #12]
 8015ce0:	059a      	lsls	r2, r3, #22
 8015ce2:	d402      	bmi.n	8015cea <_vfiprintf_r+0x2a>
 8015ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015ce6:	f7ff fdd4 	bl	8015892 <__retarget_lock_acquire_recursive>
 8015cea:	89ab      	ldrh	r3, [r5, #12]
 8015cec:	071b      	lsls	r3, r3, #28
 8015cee:	d501      	bpl.n	8015cf4 <_vfiprintf_r+0x34>
 8015cf0:	692b      	ldr	r3, [r5, #16]
 8015cf2:	b99b      	cbnz	r3, 8015d1c <_vfiprintf_r+0x5c>
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	f000 fb82 	bl	8016400 <__swsetup_r>
 8015cfc:	b170      	cbz	r0, 8015d1c <_vfiprintf_r+0x5c>
 8015cfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d00:	07dc      	lsls	r4, r3, #31
 8015d02:	d504      	bpl.n	8015d0e <_vfiprintf_r+0x4e>
 8015d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d08:	b01d      	add	sp, #116	@ 0x74
 8015d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0e:	89ab      	ldrh	r3, [r5, #12]
 8015d10:	0598      	lsls	r0, r3, #22
 8015d12:	d4f7      	bmi.n	8015d04 <_vfiprintf_r+0x44>
 8015d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d16:	f7ff fdbd 	bl	8015894 <__retarget_lock_release_recursive>
 8015d1a:	e7f3      	b.n	8015d04 <_vfiprintf_r+0x44>
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d20:	2320      	movs	r3, #32
 8015d22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d2a:	2330      	movs	r3, #48	@ 0x30
 8015d2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015edc <_vfiprintf_r+0x21c>
 8015d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015d34:	f04f 0901 	mov.w	r9, #1
 8015d38:	4623      	mov	r3, r4
 8015d3a:	469a      	mov	sl, r3
 8015d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d40:	b10a      	cbz	r2, 8015d46 <_vfiprintf_r+0x86>
 8015d42:	2a25      	cmp	r2, #37	@ 0x25
 8015d44:	d1f9      	bne.n	8015d3a <_vfiprintf_r+0x7a>
 8015d46:	ebba 0b04 	subs.w	fp, sl, r4
 8015d4a:	d00b      	beq.n	8015d64 <_vfiprintf_r+0xa4>
 8015d4c:	465b      	mov	r3, fp
 8015d4e:	4622      	mov	r2, r4
 8015d50:	4629      	mov	r1, r5
 8015d52:	4630      	mov	r0, r6
 8015d54:	f7ff ffa1 	bl	8015c9a <__sfputs_r>
 8015d58:	3001      	adds	r0, #1
 8015d5a:	f000 80a7 	beq.w	8015eac <_vfiprintf_r+0x1ec>
 8015d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d60:	445a      	add	r2, fp
 8015d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d64:	f89a 3000 	ldrb.w	r3, [sl]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	f000 809f 	beq.w	8015eac <_vfiprintf_r+0x1ec>
 8015d6e:	2300      	movs	r3, #0
 8015d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d78:	f10a 0a01 	add.w	sl, sl, #1
 8015d7c:	9304      	str	r3, [sp, #16]
 8015d7e:	9307      	str	r3, [sp, #28]
 8015d80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015d84:	931a      	str	r3, [sp, #104]	@ 0x68
 8015d86:	4654      	mov	r4, sl
 8015d88:	2205      	movs	r2, #5
 8015d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d8e:	4853      	ldr	r0, [pc, #332]	@ (8015edc <_vfiprintf_r+0x21c>)
 8015d90:	f7ea fa5e 	bl	8000250 <memchr>
 8015d94:	9a04      	ldr	r2, [sp, #16]
 8015d96:	b9d8      	cbnz	r0, 8015dd0 <_vfiprintf_r+0x110>
 8015d98:	06d1      	lsls	r1, r2, #27
 8015d9a:	bf44      	itt	mi
 8015d9c:	2320      	movmi	r3, #32
 8015d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015da2:	0713      	lsls	r3, r2, #28
 8015da4:	bf44      	itt	mi
 8015da6:	232b      	movmi	r3, #43	@ 0x2b
 8015da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015dac:	f89a 3000 	ldrb.w	r3, [sl]
 8015db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8015db2:	d015      	beq.n	8015de0 <_vfiprintf_r+0x120>
 8015db4:	9a07      	ldr	r2, [sp, #28]
 8015db6:	4654      	mov	r4, sl
 8015db8:	2000      	movs	r0, #0
 8015dba:	f04f 0c0a 	mov.w	ip, #10
 8015dbe:	4621      	mov	r1, r4
 8015dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dc4:	3b30      	subs	r3, #48	@ 0x30
 8015dc6:	2b09      	cmp	r3, #9
 8015dc8:	d94b      	bls.n	8015e62 <_vfiprintf_r+0x1a2>
 8015dca:	b1b0      	cbz	r0, 8015dfa <_vfiprintf_r+0x13a>
 8015dcc:	9207      	str	r2, [sp, #28]
 8015dce:	e014      	b.n	8015dfa <_vfiprintf_r+0x13a>
 8015dd0:	eba0 0308 	sub.w	r3, r0, r8
 8015dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8015dd8:	4313      	orrs	r3, r2
 8015dda:	9304      	str	r3, [sp, #16]
 8015ddc:	46a2      	mov	sl, r4
 8015dde:	e7d2      	b.n	8015d86 <_vfiprintf_r+0xc6>
 8015de0:	9b03      	ldr	r3, [sp, #12]
 8015de2:	1d19      	adds	r1, r3, #4
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	9103      	str	r1, [sp, #12]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	bfbb      	ittet	lt
 8015dec:	425b      	neglt	r3, r3
 8015dee:	f042 0202 	orrlt.w	r2, r2, #2
 8015df2:	9307      	strge	r3, [sp, #28]
 8015df4:	9307      	strlt	r3, [sp, #28]
 8015df6:	bfb8      	it	lt
 8015df8:	9204      	strlt	r2, [sp, #16]
 8015dfa:	7823      	ldrb	r3, [r4, #0]
 8015dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8015dfe:	d10a      	bne.n	8015e16 <_vfiprintf_r+0x156>
 8015e00:	7863      	ldrb	r3, [r4, #1]
 8015e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e04:	d132      	bne.n	8015e6c <_vfiprintf_r+0x1ac>
 8015e06:	9b03      	ldr	r3, [sp, #12]
 8015e08:	1d1a      	adds	r2, r3, #4
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	9203      	str	r2, [sp, #12]
 8015e0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015e12:	3402      	adds	r4, #2
 8015e14:	9305      	str	r3, [sp, #20]
 8015e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015eec <_vfiprintf_r+0x22c>
 8015e1a:	7821      	ldrb	r1, [r4, #0]
 8015e1c:	2203      	movs	r2, #3
 8015e1e:	4650      	mov	r0, sl
 8015e20:	f7ea fa16 	bl	8000250 <memchr>
 8015e24:	b138      	cbz	r0, 8015e36 <_vfiprintf_r+0x176>
 8015e26:	9b04      	ldr	r3, [sp, #16]
 8015e28:	eba0 000a 	sub.w	r0, r0, sl
 8015e2c:	2240      	movs	r2, #64	@ 0x40
 8015e2e:	4082      	lsls	r2, r0
 8015e30:	4313      	orrs	r3, r2
 8015e32:	3401      	adds	r4, #1
 8015e34:	9304      	str	r3, [sp, #16]
 8015e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e3a:	4829      	ldr	r0, [pc, #164]	@ (8015ee0 <_vfiprintf_r+0x220>)
 8015e3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015e40:	2206      	movs	r2, #6
 8015e42:	f7ea fa05 	bl	8000250 <memchr>
 8015e46:	2800      	cmp	r0, #0
 8015e48:	d03f      	beq.n	8015eca <_vfiprintf_r+0x20a>
 8015e4a:	4b26      	ldr	r3, [pc, #152]	@ (8015ee4 <_vfiprintf_r+0x224>)
 8015e4c:	bb1b      	cbnz	r3, 8015e96 <_vfiprintf_r+0x1d6>
 8015e4e:	9b03      	ldr	r3, [sp, #12]
 8015e50:	3307      	adds	r3, #7
 8015e52:	f023 0307 	bic.w	r3, r3, #7
 8015e56:	3308      	adds	r3, #8
 8015e58:	9303      	str	r3, [sp, #12]
 8015e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e5c:	443b      	add	r3, r7
 8015e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e60:	e76a      	b.n	8015d38 <_vfiprintf_r+0x78>
 8015e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e66:	460c      	mov	r4, r1
 8015e68:	2001      	movs	r0, #1
 8015e6a:	e7a8      	b.n	8015dbe <_vfiprintf_r+0xfe>
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	3401      	adds	r4, #1
 8015e70:	9305      	str	r3, [sp, #20]
 8015e72:	4619      	mov	r1, r3
 8015e74:	f04f 0c0a 	mov.w	ip, #10
 8015e78:	4620      	mov	r0, r4
 8015e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e7e:	3a30      	subs	r2, #48	@ 0x30
 8015e80:	2a09      	cmp	r2, #9
 8015e82:	d903      	bls.n	8015e8c <_vfiprintf_r+0x1cc>
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d0c6      	beq.n	8015e16 <_vfiprintf_r+0x156>
 8015e88:	9105      	str	r1, [sp, #20]
 8015e8a:	e7c4      	b.n	8015e16 <_vfiprintf_r+0x156>
 8015e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e90:	4604      	mov	r4, r0
 8015e92:	2301      	movs	r3, #1
 8015e94:	e7f0      	b.n	8015e78 <_vfiprintf_r+0x1b8>
 8015e96:	ab03      	add	r3, sp, #12
 8015e98:	9300      	str	r3, [sp, #0]
 8015e9a:	462a      	mov	r2, r5
 8015e9c:	4b12      	ldr	r3, [pc, #72]	@ (8015ee8 <_vfiprintf_r+0x228>)
 8015e9e:	a904      	add	r1, sp, #16
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f3af 8000 	nop.w
 8015ea6:	4607      	mov	r7, r0
 8015ea8:	1c78      	adds	r0, r7, #1
 8015eaa:	d1d6      	bne.n	8015e5a <_vfiprintf_r+0x19a>
 8015eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015eae:	07d9      	lsls	r1, r3, #31
 8015eb0:	d405      	bmi.n	8015ebe <_vfiprintf_r+0x1fe>
 8015eb2:	89ab      	ldrh	r3, [r5, #12]
 8015eb4:	059a      	lsls	r2, r3, #22
 8015eb6:	d402      	bmi.n	8015ebe <_vfiprintf_r+0x1fe>
 8015eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015eba:	f7ff fceb 	bl	8015894 <__retarget_lock_release_recursive>
 8015ebe:	89ab      	ldrh	r3, [r5, #12]
 8015ec0:	065b      	lsls	r3, r3, #25
 8015ec2:	f53f af1f 	bmi.w	8015d04 <_vfiprintf_r+0x44>
 8015ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ec8:	e71e      	b.n	8015d08 <_vfiprintf_r+0x48>
 8015eca:	ab03      	add	r3, sp, #12
 8015ecc:	9300      	str	r3, [sp, #0]
 8015ece:	462a      	mov	r2, r5
 8015ed0:	4b05      	ldr	r3, [pc, #20]	@ (8015ee8 <_vfiprintf_r+0x228>)
 8015ed2:	a904      	add	r1, sp, #16
 8015ed4:	4630      	mov	r0, r6
 8015ed6:	f000 f879 	bl	8015fcc <_printf_i>
 8015eda:	e7e4      	b.n	8015ea6 <_vfiprintf_r+0x1e6>
 8015edc:	0801727b 	.word	0x0801727b
 8015ee0:	08017285 	.word	0x08017285
 8015ee4:	00000000 	.word	0x00000000
 8015ee8:	08015c9b 	.word	0x08015c9b
 8015eec:	08017281 	.word	0x08017281

08015ef0 <_printf_common>:
 8015ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ef4:	4616      	mov	r6, r2
 8015ef6:	4698      	mov	r8, r3
 8015ef8:	688a      	ldr	r2, [r1, #8]
 8015efa:	690b      	ldr	r3, [r1, #16]
 8015efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015f00:	4293      	cmp	r3, r2
 8015f02:	bfb8      	it	lt
 8015f04:	4613      	movlt	r3, r2
 8015f06:	6033      	str	r3, [r6, #0]
 8015f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015f0c:	4607      	mov	r7, r0
 8015f0e:	460c      	mov	r4, r1
 8015f10:	b10a      	cbz	r2, 8015f16 <_printf_common+0x26>
 8015f12:	3301      	adds	r3, #1
 8015f14:	6033      	str	r3, [r6, #0]
 8015f16:	6823      	ldr	r3, [r4, #0]
 8015f18:	0699      	lsls	r1, r3, #26
 8015f1a:	bf42      	ittt	mi
 8015f1c:	6833      	ldrmi	r3, [r6, #0]
 8015f1e:	3302      	addmi	r3, #2
 8015f20:	6033      	strmi	r3, [r6, #0]
 8015f22:	6825      	ldr	r5, [r4, #0]
 8015f24:	f015 0506 	ands.w	r5, r5, #6
 8015f28:	d106      	bne.n	8015f38 <_printf_common+0x48>
 8015f2a:	f104 0a19 	add.w	sl, r4, #25
 8015f2e:	68e3      	ldr	r3, [r4, #12]
 8015f30:	6832      	ldr	r2, [r6, #0]
 8015f32:	1a9b      	subs	r3, r3, r2
 8015f34:	42ab      	cmp	r3, r5
 8015f36:	dc26      	bgt.n	8015f86 <_printf_common+0x96>
 8015f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015f3c:	6822      	ldr	r2, [r4, #0]
 8015f3e:	3b00      	subs	r3, #0
 8015f40:	bf18      	it	ne
 8015f42:	2301      	movne	r3, #1
 8015f44:	0692      	lsls	r2, r2, #26
 8015f46:	d42b      	bmi.n	8015fa0 <_printf_common+0xb0>
 8015f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015f4c:	4641      	mov	r1, r8
 8015f4e:	4638      	mov	r0, r7
 8015f50:	47c8      	blx	r9
 8015f52:	3001      	adds	r0, #1
 8015f54:	d01e      	beq.n	8015f94 <_printf_common+0xa4>
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	6922      	ldr	r2, [r4, #16]
 8015f5a:	f003 0306 	and.w	r3, r3, #6
 8015f5e:	2b04      	cmp	r3, #4
 8015f60:	bf02      	ittt	eq
 8015f62:	68e5      	ldreq	r5, [r4, #12]
 8015f64:	6833      	ldreq	r3, [r6, #0]
 8015f66:	1aed      	subeq	r5, r5, r3
 8015f68:	68a3      	ldr	r3, [r4, #8]
 8015f6a:	bf0c      	ite	eq
 8015f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f70:	2500      	movne	r5, #0
 8015f72:	4293      	cmp	r3, r2
 8015f74:	bfc4      	itt	gt
 8015f76:	1a9b      	subgt	r3, r3, r2
 8015f78:	18ed      	addgt	r5, r5, r3
 8015f7a:	2600      	movs	r6, #0
 8015f7c:	341a      	adds	r4, #26
 8015f7e:	42b5      	cmp	r5, r6
 8015f80:	d11a      	bne.n	8015fb8 <_printf_common+0xc8>
 8015f82:	2000      	movs	r0, #0
 8015f84:	e008      	b.n	8015f98 <_printf_common+0xa8>
 8015f86:	2301      	movs	r3, #1
 8015f88:	4652      	mov	r2, sl
 8015f8a:	4641      	mov	r1, r8
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	47c8      	blx	r9
 8015f90:	3001      	adds	r0, #1
 8015f92:	d103      	bne.n	8015f9c <_printf_common+0xac>
 8015f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f9c:	3501      	adds	r5, #1
 8015f9e:	e7c6      	b.n	8015f2e <_printf_common+0x3e>
 8015fa0:	18e1      	adds	r1, r4, r3
 8015fa2:	1c5a      	adds	r2, r3, #1
 8015fa4:	2030      	movs	r0, #48	@ 0x30
 8015fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015faa:	4422      	add	r2, r4
 8015fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015fb4:	3302      	adds	r3, #2
 8015fb6:	e7c7      	b.n	8015f48 <_printf_common+0x58>
 8015fb8:	2301      	movs	r3, #1
 8015fba:	4622      	mov	r2, r4
 8015fbc:	4641      	mov	r1, r8
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	47c8      	blx	r9
 8015fc2:	3001      	adds	r0, #1
 8015fc4:	d0e6      	beq.n	8015f94 <_printf_common+0xa4>
 8015fc6:	3601      	adds	r6, #1
 8015fc8:	e7d9      	b.n	8015f7e <_printf_common+0x8e>
	...

08015fcc <_printf_i>:
 8015fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fd0:	7e0f      	ldrb	r7, [r1, #24]
 8015fd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015fd4:	2f78      	cmp	r7, #120	@ 0x78
 8015fd6:	4691      	mov	r9, r2
 8015fd8:	4680      	mov	r8, r0
 8015fda:	460c      	mov	r4, r1
 8015fdc:	469a      	mov	sl, r3
 8015fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015fe2:	d807      	bhi.n	8015ff4 <_printf_i+0x28>
 8015fe4:	2f62      	cmp	r7, #98	@ 0x62
 8015fe6:	d80a      	bhi.n	8015ffe <_printf_i+0x32>
 8015fe8:	2f00      	cmp	r7, #0
 8015fea:	f000 80d1 	beq.w	8016190 <_printf_i+0x1c4>
 8015fee:	2f58      	cmp	r7, #88	@ 0x58
 8015ff0:	f000 80b8 	beq.w	8016164 <_printf_i+0x198>
 8015ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ffc:	e03a      	b.n	8016074 <_printf_i+0xa8>
 8015ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016002:	2b15      	cmp	r3, #21
 8016004:	d8f6      	bhi.n	8015ff4 <_printf_i+0x28>
 8016006:	a101      	add	r1, pc, #4	@ (adr r1, 801600c <_printf_i+0x40>)
 8016008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801600c:	08016065 	.word	0x08016065
 8016010:	08016079 	.word	0x08016079
 8016014:	08015ff5 	.word	0x08015ff5
 8016018:	08015ff5 	.word	0x08015ff5
 801601c:	08015ff5 	.word	0x08015ff5
 8016020:	08015ff5 	.word	0x08015ff5
 8016024:	08016079 	.word	0x08016079
 8016028:	08015ff5 	.word	0x08015ff5
 801602c:	08015ff5 	.word	0x08015ff5
 8016030:	08015ff5 	.word	0x08015ff5
 8016034:	08015ff5 	.word	0x08015ff5
 8016038:	08016177 	.word	0x08016177
 801603c:	080160a3 	.word	0x080160a3
 8016040:	08016131 	.word	0x08016131
 8016044:	08015ff5 	.word	0x08015ff5
 8016048:	08015ff5 	.word	0x08015ff5
 801604c:	08016199 	.word	0x08016199
 8016050:	08015ff5 	.word	0x08015ff5
 8016054:	080160a3 	.word	0x080160a3
 8016058:	08015ff5 	.word	0x08015ff5
 801605c:	08015ff5 	.word	0x08015ff5
 8016060:	08016139 	.word	0x08016139
 8016064:	6833      	ldr	r3, [r6, #0]
 8016066:	1d1a      	adds	r2, r3, #4
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	6032      	str	r2, [r6, #0]
 801606c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016074:	2301      	movs	r3, #1
 8016076:	e09c      	b.n	80161b2 <_printf_i+0x1e6>
 8016078:	6833      	ldr	r3, [r6, #0]
 801607a:	6820      	ldr	r0, [r4, #0]
 801607c:	1d19      	adds	r1, r3, #4
 801607e:	6031      	str	r1, [r6, #0]
 8016080:	0606      	lsls	r6, r0, #24
 8016082:	d501      	bpl.n	8016088 <_printf_i+0xbc>
 8016084:	681d      	ldr	r5, [r3, #0]
 8016086:	e003      	b.n	8016090 <_printf_i+0xc4>
 8016088:	0645      	lsls	r5, r0, #25
 801608a:	d5fb      	bpl.n	8016084 <_printf_i+0xb8>
 801608c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016090:	2d00      	cmp	r5, #0
 8016092:	da03      	bge.n	801609c <_printf_i+0xd0>
 8016094:	232d      	movs	r3, #45	@ 0x2d
 8016096:	426d      	negs	r5, r5
 8016098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801609c:	4858      	ldr	r0, [pc, #352]	@ (8016200 <_printf_i+0x234>)
 801609e:	230a      	movs	r3, #10
 80160a0:	e011      	b.n	80160c6 <_printf_i+0xfa>
 80160a2:	6821      	ldr	r1, [r4, #0]
 80160a4:	6833      	ldr	r3, [r6, #0]
 80160a6:	0608      	lsls	r0, r1, #24
 80160a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80160ac:	d402      	bmi.n	80160b4 <_printf_i+0xe8>
 80160ae:	0649      	lsls	r1, r1, #25
 80160b0:	bf48      	it	mi
 80160b2:	b2ad      	uxthmi	r5, r5
 80160b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80160b6:	4852      	ldr	r0, [pc, #328]	@ (8016200 <_printf_i+0x234>)
 80160b8:	6033      	str	r3, [r6, #0]
 80160ba:	bf14      	ite	ne
 80160bc:	230a      	movne	r3, #10
 80160be:	2308      	moveq	r3, #8
 80160c0:	2100      	movs	r1, #0
 80160c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80160c6:	6866      	ldr	r6, [r4, #4]
 80160c8:	60a6      	str	r6, [r4, #8]
 80160ca:	2e00      	cmp	r6, #0
 80160cc:	db05      	blt.n	80160da <_printf_i+0x10e>
 80160ce:	6821      	ldr	r1, [r4, #0]
 80160d0:	432e      	orrs	r6, r5
 80160d2:	f021 0104 	bic.w	r1, r1, #4
 80160d6:	6021      	str	r1, [r4, #0]
 80160d8:	d04b      	beq.n	8016172 <_printf_i+0x1a6>
 80160da:	4616      	mov	r6, r2
 80160dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80160e0:	fb03 5711 	mls	r7, r3, r1, r5
 80160e4:	5dc7      	ldrb	r7, [r0, r7]
 80160e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80160ea:	462f      	mov	r7, r5
 80160ec:	42bb      	cmp	r3, r7
 80160ee:	460d      	mov	r5, r1
 80160f0:	d9f4      	bls.n	80160dc <_printf_i+0x110>
 80160f2:	2b08      	cmp	r3, #8
 80160f4:	d10b      	bne.n	801610e <_printf_i+0x142>
 80160f6:	6823      	ldr	r3, [r4, #0]
 80160f8:	07df      	lsls	r7, r3, #31
 80160fa:	d508      	bpl.n	801610e <_printf_i+0x142>
 80160fc:	6923      	ldr	r3, [r4, #16]
 80160fe:	6861      	ldr	r1, [r4, #4]
 8016100:	4299      	cmp	r1, r3
 8016102:	bfde      	ittt	le
 8016104:	2330      	movle	r3, #48	@ 0x30
 8016106:	f806 3c01 	strble.w	r3, [r6, #-1]
 801610a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801610e:	1b92      	subs	r2, r2, r6
 8016110:	6122      	str	r2, [r4, #16]
 8016112:	f8cd a000 	str.w	sl, [sp]
 8016116:	464b      	mov	r3, r9
 8016118:	aa03      	add	r2, sp, #12
 801611a:	4621      	mov	r1, r4
 801611c:	4640      	mov	r0, r8
 801611e:	f7ff fee7 	bl	8015ef0 <_printf_common>
 8016122:	3001      	adds	r0, #1
 8016124:	d14a      	bne.n	80161bc <_printf_i+0x1f0>
 8016126:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801612a:	b004      	add	sp, #16
 801612c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016130:	6823      	ldr	r3, [r4, #0]
 8016132:	f043 0320 	orr.w	r3, r3, #32
 8016136:	6023      	str	r3, [r4, #0]
 8016138:	4832      	ldr	r0, [pc, #200]	@ (8016204 <_printf_i+0x238>)
 801613a:	2778      	movs	r7, #120	@ 0x78
 801613c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016140:	6823      	ldr	r3, [r4, #0]
 8016142:	6831      	ldr	r1, [r6, #0]
 8016144:	061f      	lsls	r7, r3, #24
 8016146:	f851 5b04 	ldr.w	r5, [r1], #4
 801614a:	d402      	bmi.n	8016152 <_printf_i+0x186>
 801614c:	065f      	lsls	r7, r3, #25
 801614e:	bf48      	it	mi
 8016150:	b2ad      	uxthmi	r5, r5
 8016152:	6031      	str	r1, [r6, #0]
 8016154:	07d9      	lsls	r1, r3, #31
 8016156:	bf44      	itt	mi
 8016158:	f043 0320 	orrmi.w	r3, r3, #32
 801615c:	6023      	strmi	r3, [r4, #0]
 801615e:	b11d      	cbz	r5, 8016168 <_printf_i+0x19c>
 8016160:	2310      	movs	r3, #16
 8016162:	e7ad      	b.n	80160c0 <_printf_i+0xf4>
 8016164:	4826      	ldr	r0, [pc, #152]	@ (8016200 <_printf_i+0x234>)
 8016166:	e7e9      	b.n	801613c <_printf_i+0x170>
 8016168:	6823      	ldr	r3, [r4, #0]
 801616a:	f023 0320 	bic.w	r3, r3, #32
 801616e:	6023      	str	r3, [r4, #0]
 8016170:	e7f6      	b.n	8016160 <_printf_i+0x194>
 8016172:	4616      	mov	r6, r2
 8016174:	e7bd      	b.n	80160f2 <_printf_i+0x126>
 8016176:	6833      	ldr	r3, [r6, #0]
 8016178:	6825      	ldr	r5, [r4, #0]
 801617a:	6961      	ldr	r1, [r4, #20]
 801617c:	1d18      	adds	r0, r3, #4
 801617e:	6030      	str	r0, [r6, #0]
 8016180:	062e      	lsls	r6, r5, #24
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	d501      	bpl.n	801618a <_printf_i+0x1be>
 8016186:	6019      	str	r1, [r3, #0]
 8016188:	e002      	b.n	8016190 <_printf_i+0x1c4>
 801618a:	0668      	lsls	r0, r5, #25
 801618c:	d5fb      	bpl.n	8016186 <_printf_i+0x1ba>
 801618e:	8019      	strh	r1, [r3, #0]
 8016190:	2300      	movs	r3, #0
 8016192:	6123      	str	r3, [r4, #16]
 8016194:	4616      	mov	r6, r2
 8016196:	e7bc      	b.n	8016112 <_printf_i+0x146>
 8016198:	6833      	ldr	r3, [r6, #0]
 801619a:	1d1a      	adds	r2, r3, #4
 801619c:	6032      	str	r2, [r6, #0]
 801619e:	681e      	ldr	r6, [r3, #0]
 80161a0:	6862      	ldr	r2, [r4, #4]
 80161a2:	2100      	movs	r1, #0
 80161a4:	4630      	mov	r0, r6
 80161a6:	f7ea f853 	bl	8000250 <memchr>
 80161aa:	b108      	cbz	r0, 80161b0 <_printf_i+0x1e4>
 80161ac:	1b80      	subs	r0, r0, r6
 80161ae:	6060      	str	r0, [r4, #4]
 80161b0:	6863      	ldr	r3, [r4, #4]
 80161b2:	6123      	str	r3, [r4, #16]
 80161b4:	2300      	movs	r3, #0
 80161b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80161ba:	e7aa      	b.n	8016112 <_printf_i+0x146>
 80161bc:	6923      	ldr	r3, [r4, #16]
 80161be:	4632      	mov	r2, r6
 80161c0:	4649      	mov	r1, r9
 80161c2:	4640      	mov	r0, r8
 80161c4:	47d0      	blx	sl
 80161c6:	3001      	adds	r0, #1
 80161c8:	d0ad      	beq.n	8016126 <_printf_i+0x15a>
 80161ca:	6823      	ldr	r3, [r4, #0]
 80161cc:	079b      	lsls	r3, r3, #30
 80161ce:	d413      	bmi.n	80161f8 <_printf_i+0x22c>
 80161d0:	68e0      	ldr	r0, [r4, #12]
 80161d2:	9b03      	ldr	r3, [sp, #12]
 80161d4:	4298      	cmp	r0, r3
 80161d6:	bfb8      	it	lt
 80161d8:	4618      	movlt	r0, r3
 80161da:	e7a6      	b.n	801612a <_printf_i+0x15e>
 80161dc:	2301      	movs	r3, #1
 80161de:	4632      	mov	r2, r6
 80161e0:	4649      	mov	r1, r9
 80161e2:	4640      	mov	r0, r8
 80161e4:	47d0      	blx	sl
 80161e6:	3001      	adds	r0, #1
 80161e8:	d09d      	beq.n	8016126 <_printf_i+0x15a>
 80161ea:	3501      	adds	r5, #1
 80161ec:	68e3      	ldr	r3, [r4, #12]
 80161ee:	9903      	ldr	r1, [sp, #12]
 80161f0:	1a5b      	subs	r3, r3, r1
 80161f2:	42ab      	cmp	r3, r5
 80161f4:	dcf2      	bgt.n	80161dc <_printf_i+0x210>
 80161f6:	e7eb      	b.n	80161d0 <_printf_i+0x204>
 80161f8:	2500      	movs	r5, #0
 80161fa:	f104 0619 	add.w	r6, r4, #25
 80161fe:	e7f5      	b.n	80161ec <_printf_i+0x220>
 8016200:	0801728c 	.word	0x0801728c
 8016204:	0801729d 	.word	0x0801729d

08016208 <__sflush_r>:
 8016208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016210:	0716      	lsls	r6, r2, #28
 8016212:	4605      	mov	r5, r0
 8016214:	460c      	mov	r4, r1
 8016216:	d454      	bmi.n	80162c2 <__sflush_r+0xba>
 8016218:	684b      	ldr	r3, [r1, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	dc02      	bgt.n	8016224 <__sflush_r+0x1c>
 801621e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016220:	2b00      	cmp	r3, #0
 8016222:	dd48      	ble.n	80162b6 <__sflush_r+0xae>
 8016224:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016226:	2e00      	cmp	r6, #0
 8016228:	d045      	beq.n	80162b6 <__sflush_r+0xae>
 801622a:	2300      	movs	r3, #0
 801622c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016230:	682f      	ldr	r7, [r5, #0]
 8016232:	6a21      	ldr	r1, [r4, #32]
 8016234:	602b      	str	r3, [r5, #0]
 8016236:	d030      	beq.n	801629a <__sflush_r+0x92>
 8016238:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801623a:	89a3      	ldrh	r3, [r4, #12]
 801623c:	0759      	lsls	r1, r3, #29
 801623e:	d505      	bpl.n	801624c <__sflush_r+0x44>
 8016240:	6863      	ldr	r3, [r4, #4]
 8016242:	1ad2      	subs	r2, r2, r3
 8016244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016246:	b10b      	cbz	r3, 801624c <__sflush_r+0x44>
 8016248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801624a:	1ad2      	subs	r2, r2, r3
 801624c:	2300      	movs	r3, #0
 801624e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016250:	6a21      	ldr	r1, [r4, #32]
 8016252:	4628      	mov	r0, r5
 8016254:	47b0      	blx	r6
 8016256:	1c43      	adds	r3, r0, #1
 8016258:	89a3      	ldrh	r3, [r4, #12]
 801625a:	d106      	bne.n	801626a <__sflush_r+0x62>
 801625c:	6829      	ldr	r1, [r5, #0]
 801625e:	291d      	cmp	r1, #29
 8016260:	d82b      	bhi.n	80162ba <__sflush_r+0xb2>
 8016262:	4a2a      	ldr	r2, [pc, #168]	@ (801630c <__sflush_r+0x104>)
 8016264:	40ca      	lsrs	r2, r1
 8016266:	07d6      	lsls	r6, r2, #31
 8016268:	d527      	bpl.n	80162ba <__sflush_r+0xb2>
 801626a:	2200      	movs	r2, #0
 801626c:	6062      	str	r2, [r4, #4]
 801626e:	04d9      	lsls	r1, r3, #19
 8016270:	6922      	ldr	r2, [r4, #16]
 8016272:	6022      	str	r2, [r4, #0]
 8016274:	d504      	bpl.n	8016280 <__sflush_r+0x78>
 8016276:	1c42      	adds	r2, r0, #1
 8016278:	d101      	bne.n	801627e <__sflush_r+0x76>
 801627a:	682b      	ldr	r3, [r5, #0]
 801627c:	b903      	cbnz	r3, 8016280 <__sflush_r+0x78>
 801627e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016282:	602f      	str	r7, [r5, #0]
 8016284:	b1b9      	cbz	r1, 80162b6 <__sflush_r+0xae>
 8016286:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801628a:	4299      	cmp	r1, r3
 801628c:	d002      	beq.n	8016294 <__sflush_r+0x8c>
 801628e:	4628      	mov	r0, r5
 8016290:	f7ff fb42 	bl	8015918 <_free_r>
 8016294:	2300      	movs	r3, #0
 8016296:	6363      	str	r3, [r4, #52]	@ 0x34
 8016298:	e00d      	b.n	80162b6 <__sflush_r+0xae>
 801629a:	2301      	movs	r3, #1
 801629c:	4628      	mov	r0, r5
 801629e:	47b0      	blx	r6
 80162a0:	4602      	mov	r2, r0
 80162a2:	1c50      	adds	r0, r2, #1
 80162a4:	d1c9      	bne.n	801623a <__sflush_r+0x32>
 80162a6:	682b      	ldr	r3, [r5, #0]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d0c6      	beq.n	801623a <__sflush_r+0x32>
 80162ac:	2b1d      	cmp	r3, #29
 80162ae:	d001      	beq.n	80162b4 <__sflush_r+0xac>
 80162b0:	2b16      	cmp	r3, #22
 80162b2:	d11e      	bne.n	80162f2 <__sflush_r+0xea>
 80162b4:	602f      	str	r7, [r5, #0]
 80162b6:	2000      	movs	r0, #0
 80162b8:	e022      	b.n	8016300 <__sflush_r+0xf8>
 80162ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162be:	b21b      	sxth	r3, r3
 80162c0:	e01b      	b.n	80162fa <__sflush_r+0xf2>
 80162c2:	690f      	ldr	r7, [r1, #16]
 80162c4:	2f00      	cmp	r7, #0
 80162c6:	d0f6      	beq.n	80162b6 <__sflush_r+0xae>
 80162c8:	0793      	lsls	r3, r2, #30
 80162ca:	680e      	ldr	r6, [r1, #0]
 80162cc:	bf08      	it	eq
 80162ce:	694b      	ldreq	r3, [r1, #20]
 80162d0:	600f      	str	r7, [r1, #0]
 80162d2:	bf18      	it	ne
 80162d4:	2300      	movne	r3, #0
 80162d6:	eba6 0807 	sub.w	r8, r6, r7
 80162da:	608b      	str	r3, [r1, #8]
 80162dc:	f1b8 0f00 	cmp.w	r8, #0
 80162e0:	dde9      	ble.n	80162b6 <__sflush_r+0xae>
 80162e2:	6a21      	ldr	r1, [r4, #32]
 80162e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80162e6:	4643      	mov	r3, r8
 80162e8:	463a      	mov	r2, r7
 80162ea:	4628      	mov	r0, r5
 80162ec:	47b0      	blx	r6
 80162ee:	2800      	cmp	r0, #0
 80162f0:	dc08      	bgt.n	8016304 <__sflush_r+0xfc>
 80162f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162fa:	81a3      	strh	r3, [r4, #12]
 80162fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016304:	4407      	add	r7, r0
 8016306:	eba8 0800 	sub.w	r8, r8, r0
 801630a:	e7e7      	b.n	80162dc <__sflush_r+0xd4>
 801630c:	20400001 	.word	0x20400001

08016310 <_fflush_r>:
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	690b      	ldr	r3, [r1, #16]
 8016314:	4605      	mov	r5, r0
 8016316:	460c      	mov	r4, r1
 8016318:	b913      	cbnz	r3, 8016320 <_fflush_r+0x10>
 801631a:	2500      	movs	r5, #0
 801631c:	4628      	mov	r0, r5
 801631e:	bd38      	pop	{r3, r4, r5, pc}
 8016320:	b118      	cbz	r0, 801632a <_fflush_r+0x1a>
 8016322:	6a03      	ldr	r3, [r0, #32]
 8016324:	b90b      	cbnz	r3, 801632a <_fflush_r+0x1a>
 8016326:	f7ff f8cd 	bl	80154c4 <__sinit>
 801632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d0f3      	beq.n	801631a <_fflush_r+0xa>
 8016332:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016334:	07d0      	lsls	r0, r2, #31
 8016336:	d404      	bmi.n	8016342 <_fflush_r+0x32>
 8016338:	0599      	lsls	r1, r3, #22
 801633a:	d402      	bmi.n	8016342 <_fflush_r+0x32>
 801633c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801633e:	f7ff faa8 	bl	8015892 <__retarget_lock_acquire_recursive>
 8016342:	4628      	mov	r0, r5
 8016344:	4621      	mov	r1, r4
 8016346:	f7ff ff5f 	bl	8016208 <__sflush_r>
 801634a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801634c:	07da      	lsls	r2, r3, #31
 801634e:	4605      	mov	r5, r0
 8016350:	d4e4      	bmi.n	801631c <_fflush_r+0xc>
 8016352:	89a3      	ldrh	r3, [r4, #12]
 8016354:	059b      	lsls	r3, r3, #22
 8016356:	d4e1      	bmi.n	801631c <_fflush_r+0xc>
 8016358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801635a:	f7ff fa9b 	bl	8015894 <__retarget_lock_release_recursive>
 801635e:	e7dd      	b.n	801631c <_fflush_r+0xc>

08016360 <fiprintf>:
 8016360:	b40e      	push	{r1, r2, r3}
 8016362:	b503      	push	{r0, r1, lr}
 8016364:	4601      	mov	r1, r0
 8016366:	ab03      	add	r3, sp, #12
 8016368:	4805      	ldr	r0, [pc, #20]	@ (8016380 <fiprintf+0x20>)
 801636a:	f853 2b04 	ldr.w	r2, [r3], #4
 801636e:	6800      	ldr	r0, [r0, #0]
 8016370:	9301      	str	r3, [sp, #4]
 8016372:	f7ff fca5 	bl	8015cc0 <_vfiprintf_r>
 8016376:	b002      	add	sp, #8
 8016378:	f85d eb04 	ldr.w	lr, [sp], #4
 801637c:	b003      	add	sp, #12
 801637e:	4770      	bx	lr
 8016380:	200000c4 	.word	0x200000c4

08016384 <__swbuf_r>:
 8016384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016386:	460e      	mov	r6, r1
 8016388:	4614      	mov	r4, r2
 801638a:	4605      	mov	r5, r0
 801638c:	b118      	cbz	r0, 8016396 <__swbuf_r+0x12>
 801638e:	6a03      	ldr	r3, [r0, #32]
 8016390:	b90b      	cbnz	r3, 8016396 <__swbuf_r+0x12>
 8016392:	f7ff f897 	bl	80154c4 <__sinit>
 8016396:	69a3      	ldr	r3, [r4, #24]
 8016398:	60a3      	str	r3, [r4, #8]
 801639a:	89a3      	ldrh	r3, [r4, #12]
 801639c:	071a      	lsls	r2, r3, #28
 801639e:	d501      	bpl.n	80163a4 <__swbuf_r+0x20>
 80163a0:	6923      	ldr	r3, [r4, #16]
 80163a2:	b943      	cbnz	r3, 80163b6 <__swbuf_r+0x32>
 80163a4:	4621      	mov	r1, r4
 80163a6:	4628      	mov	r0, r5
 80163a8:	f000 f82a 	bl	8016400 <__swsetup_r>
 80163ac:	b118      	cbz	r0, 80163b6 <__swbuf_r+0x32>
 80163ae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80163b2:	4638      	mov	r0, r7
 80163b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163b6:	6823      	ldr	r3, [r4, #0]
 80163b8:	6922      	ldr	r2, [r4, #16]
 80163ba:	1a98      	subs	r0, r3, r2
 80163bc:	6963      	ldr	r3, [r4, #20]
 80163be:	b2f6      	uxtb	r6, r6
 80163c0:	4283      	cmp	r3, r0
 80163c2:	4637      	mov	r7, r6
 80163c4:	dc05      	bgt.n	80163d2 <__swbuf_r+0x4e>
 80163c6:	4621      	mov	r1, r4
 80163c8:	4628      	mov	r0, r5
 80163ca:	f7ff ffa1 	bl	8016310 <_fflush_r>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d1ed      	bne.n	80163ae <__swbuf_r+0x2a>
 80163d2:	68a3      	ldr	r3, [r4, #8]
 80163d4:	3b01      	subs	r3, #1
 80163d6:	60a3      	str	r3, [r4, #8]
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	1c5a      	adds	r2, r3, #1
 80163dc:	6022      	str	r2, [r4, #0]
 80163de:	701e      	strb	r6, [r3, #0]
 80163e0:	6962      	ldr	r2, [r4, #20]
 80163e2:	1c43      	adds	r3, r0, #1
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d004      	beq.n	80163f2 <__swbuf_r+0x6e>
 80163e8:	89a3      	ldrh	r3, [r4, #12]
 80163ea:	07db      	lsls	r3, r3, #31
 80163ec:	d5e1      	bpl.n	80163b2 <__swbuf_r+0x2e>
 80163ee:	2e0a      	cmp	r6, #10
 80163f0:	d1df      	bne.n	80163b2 <__swbuf_r+0x2e>
 80163f2:	4621      	mov	r1, r4
 80163f4:	4628      	mov	r0, r5
 80163f6:	f7ff ff8b 	bl	8016310 <_fflush_r>
 80163fa:	2800      	cmp	r0, #0
 80163fc:	d0d9      	beq.n	80163b2 <__swbuf_r+0x2e>
 80163fe:	e7d6      	b.n	80163ae <__swbuf_r+0x2a>

08016400 <__swsetup_r>:
 8016400:	b538      	push	{r3, r4, r5, lr}
 8016402:	4b29      	ldr	r3, [pc, #164]	@ (80164a8 <__swsetup_r+0xa8>)
 8016404:	4605      	mov	r5, r0
 8016406:	6818      	ldr	r0, [r3, #0]
 8016408:	460c      	mov	r4, r1
 801640a:	b118      	cbz	r0, 8016414 <__swsetup_r+0x14>
 801640c:	6a03      	ldr	r3, [r0, #32]
 801640e:	b90b      	cbnz	r3, 8016414 <__swsetup_r+0x14>
 8016410:	f7ff f858 	bl	80154c4 <__sinit>
 8016414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016418:	0719      	lsls	r1, r3, #28
 801641a:	d422      	bmi.n	8016462 <__swsetup_r+0x62>
 801641c:	06da      	lsls	r2, r3, #27
 801641e:	d407      	bmi.n	8016430 <__swsetup_r+0x30>
 8016420:	2209      	movs	r2, #9
 8016422:	602a      	str	r2, [r5, #0]
 8016424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016428:	81a3      	strh	r3, [r4, #12]
 801642a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801642e:	e033      	b.n	8016498 <__swsetup_r+0x98>
 8016430:	0758      	lsls	r0, r3, #29
 8016432:	d512      	bpl.n	801645a <__swsetup_r+0x5a>
 8016434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016436:	b141      	cbz	r1, 801644a <__swsetup_r+0x4a>
 8016438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801643c:	4299      	cmp	r1, r3
 801643e:	d002      	beq.n	8016446 <__swsetup_r+0x46>
 8016440:	4628      	mov	r0, r5
 8016442:	f7ff fa69 	bl	8015918 <_free_r>
 8016446:	2300      	movs	r3, #0
 8016448:	6363      	str	r3, [r4, #52]	@ 0x34
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016450:	81a3      	strh	r3, [r4, #12]
 8016452:	2300      	movs	r3, #0
 8016454:	6063      	str	r3, [r4, #4]
 8016456:	6923      	ldr	r3, [r4, #16]
 8016458:	6023      	str	r3, [r4, #0]
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	f043 0308 	orr.w	r3, r3, #8
 8016460:	81a3      	strh	r3, [r4, #12]
 8016462:	6923      	ldr	r3, [r4, #16]
 8016464:	b94b      	cbnz	r3, 801647a <__swsetup_r+0x7a>
 8016466:	89a3      	ldrh	r3, [r4, #12]
 8016468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801646c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016470:	d003      	beq.n	801647a <__swsetup_r+0x7a>
 8016472:	4621      	mov	r1, r4
 8016474:	4628      	mov	r0, r5
 8016476:	f000 f846 	bl	8016506 <__smakebuf_r>
 801647a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801647e:	f013 0201 	ands.w	r2, r3, #1
 8016482:	d00a      	beq.n	801649a <__swsetup_r+0x9a>
 8016484:	2200      	movs	r2, #0
 8016486:	60a2      	str	r2, [r4, #8]
 8016488:	6962      	ldr	r2, [r4, #20]
 801648a:	4252      	negs	r2, r2
 801648c:	61a2      	str	r2, [r4, #24]
 801648e:	6922      	ldr	r2, [r4, #16]
 8016490:	b942      	cbnz	r2, 80164a4 <__swsetup_r+0xa4>
 8016492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016496:	d1c5      	bne.n	8016424 <__swsetup_r+0x24>
 8016498:	bd38      	pop	{r3, r4, r5, pc}
 801649a:	0799      	lsls	r1, r3, #30
 801649c:	bf58      	it	pl
 801649e:	6962      	ldrpl	r2, [r4, #20]
 80164a0:	60a2      	str	r2, [r4, #8]
 80164a2:	e7f4      	b.n	801648e <__swsetup_r+0x8e>
 80164a4:	2000      	movs	r0, #0
 80164a6:	e7f7      	b.n	8016498 <__swsetup_r+0x98>
 80164a8:	200000c4 	.word	0x200000c4

080164ac <abort>:
 80164ac:	b508      	push	{r3, lr}
 80164ae:	2006      	movs	r0, #6
 80164b0:	f000 f88e 	bl	80165d0 <raise>
 80164b4:	2001      	movs	r0, #1
 80164b6:	f7eb f8ad 	bl	8001614 <_exit>

080164ba <__swhatbuf_r>:
 80164ba:	b570      	push	{r4, r5, r6, lr}
 80164bc:	460c      	mov	r4, r1
 80164be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164c2:	2900      	cmp	r1, #0
 80164c4:	b096      	sub	sp, #88	@ 0x58
 80164c6:	4615      	mov	r5, r2
 80164c8:	461e      	mov	r6, r3
 80164ca:	da0d      	bge.n	80164e8 <__swhatbuf_r+0x2e>
 80164cc:	89a3      	ldrh	r3, [r4, #12]
 80164ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80164d2:	f04f 0100 	mov.w	r1, #0
 80164d6:	bf14      	ite	ne
 80164d8:	2340      	movne	r3, #64	@ 0x40
 80164da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80164de:	2000      	movs	r0, #0
 80164e0:	6031      	str	r1, [r6, #0]
 80164e2:	602b      	str	r3, [r5, #0]
 80164e4:	b016      	add	sp, #88	@ 0x58
 80164e6:	bd70      	pop	{r4, r5, r6, pc}
 80164e8:	466a      	mov	r2, sp
 80164ea:	f000 f879 	bl	80165e0 <_fstat_r>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	dbec      	blt.n	80164cc <__swhatbuf_r+0x12>
 80164f2:	9901      	ldr	r1, [sp, #4]
 80164f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80164f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80164fc:	4259      	negs	r1, r3
 80164fe:	4159      	adcs	r1, r3
 8016500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016504:	e7eb      	b.n	80164de <__swhatbuf_r+0x24>

08016506 <__smakebuf_r>:
 8016506:	898b      	ldrh	r3, [r1, #12]
 8016508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801650a:	079d      	lsls	r5, r3, #30
 801650c:	4606      	mov	r6, r0
 801650e:	460c      	mov	r4, r1
 8016510:	d507      	bpl.n	8016522 <__smakebuf_r+0x1c>
 8016512:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016516:	6023      	str	r3, [r4, #0]
 8016518:	6123      	str	r3, [r4, #16]
 801651a:	2301      	movs	r3, #1
 801651c:	6163      	str	r3, [r4, #20]
 801651e:	b003      	add	sp, #12
 8016520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016522:	ab01      	add	r3, sp, #4
 8016524:	466a      	mov	r2, sp
 8016526:	f7ff ffc8 	bl	80164ba <__swhatbuf_r>
 801652a:	9f00      	ldr	r7, [sp, #0]
 801652c:	4605      	mov	r5, r0
 801652e:	4639      	mov	r1, r7
 8016530:	4630      	mov	r0, r6
 8016532:	f7fe fd95 	bl	8015060 <_malloc_r>
 8016536:	b948      	cbnz	r0, 801654c <__smakebuf_r+0x46>
 8016538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801653c:	059a      	lsls	r2, r3, #22
 801653e:	d4ee      	bmi.n	801651e <__smakebuf_r+0x18>
 8016540:	f023 0303 	bic.w	r3, r3, #3
 8016544:	f043 0302 	orr.w	r3, r3, #2
 8016548:	81a3      	strh	r3, [r4, #12]
 801654a:	e7e2      	b.n	8016512 <__smakebuf_r+0xc>
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	6020      	str	r0, [r4, #0]
 8016550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016554:	81a3      	strh	r3, [r4, #12]
 8016556:	9b01      	ldr	r3, [sp, #4]
 8016558:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801655c:	b15b      	cbz	r3, 8016576 <__smakebuf_r+0x70>
 801655e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016562:	4630      	mov	r0, r6
 8016564:	f000 f84e 	bl	8016604 <_isatty_r>
 8016568:	b128      	cbz	r0, 8016576 <__smakebuf_r+0x70>
 801656a:	89a3      	ldrh	r3, [r4, #12]
 801656c:	f023 0303 	bic.w	r3, r3, #3
 8016570:	f043 0301 	orr.w	r3, r3, #1
 8016574:	81a3      	strh	r3, [r4, #12]
 8016576:	89a3      	ldrh	r3, [r4, #12]
 8016578:	431d      	orrs	r5, r3
 801657a:	81a5      	strh	r5, [r4, #12]
 801657c:	e7cf      	b.n	801651e <__smakebuf_r+0x18>

0801657e <_raise_r>:
 801657e:	291f      	cmp	r1, #31
 8016580:	b538      	push	{r3, r4, r5, lr}
 8016582:	4605      	mov	r5, r0
 8016584:	460c      	mov	r4, r1
 8016586:	d904      	bls.n	8016592 <_raise_r+0x14>
 8016588:	2316      	movs	r3, #22
 801658a:	6003      	str	r3, [r0, #0]
 801658c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016590:	bd38      	pop	{r3, r4, r5, pc}
 8016592:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016594:	b112      	cbz	r2, 801659c <_raise_r+0x1e>
 8016596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801659a:	b94b      	cbnz	r3, 80165b0 <_raise_r+0x32>
 801659c:	4628      	mov	r0, r5
 801659e:	f000 f853 	bl	8016648 <_getpid_r>
 80165a2:	4622      	mov	r2, r4
 80165a4:	4601      	mov	r1, r0
 80165a6:	4628      	mov	r0, r5
 80165a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165ac:	f000 b83a 	b.w	8016624 <_kill_r>
 80165b0:	2b01      	cmp	r3, #1
 80165b2:	d00a      	beq.n	80165ca <_raise_r+0x4c>
 80165b4:	1c59      	adds	r1, r3, #1
 80165b6:	d103      	bne.n	80165c0 <_raise_r+0x42>
 80165b8:	2316      	movs	r3, #22
 80165ba:	6003      	str	r3, [r0, #0]
 80165bc:	2001      	movs	r0, #1
 80165be:	e7e7      	b.n	8016590 <_raise_r+0x12>
 80165c0:	2100      	movs	r1, #0
 80165c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80165c6:	4620      	mov	r0, r4
 80165c8:	4798      	blx	r3
 80165ca:	2000      	movs	r0, #0
 80165cc:	e7e0      	b.n	8016590 <_raise_r+0x12>
	...

080165d0 <raise>:
 80165d0:	4b02      	ldr	r3, [pc, #8]	@ (80165dc <raise+0xc>)
 80165d2:	4601      	mov	r1, r0
 80165d4:	6818      	ldr	r0, [r3, #0]
 80165d6:	f7ff bfd2 	b.w	801657e <_raise_r>
 80165da:	bf00      	nop
 80165dc:	200000c4 	.word	0x200000c4

080165e0 <_fstat_r>:
 80165e0:	b538      	push	{r3, r4, r5, lr}
 80165e2:	4d07      	ldr	r5, [pc, #28]	@ (8016600 <_fstat_r+0x20>)
 80165e4:	2300      	movs	r3, #0
 80165e6:	4604      	mov	r4, r0
 80165e8:	4608      	mov	r0, r1
 80165ea:	4611      	mov	r1, r2
 80165ec:	602b      	str	r3, [r5, #0]
 80165ee:	f7eb f861 	bl	80016b4 <_fstat>
 80165f2:	1c43      	adds	r3, r0, #1
 80165f4:	d102      	bne.n	80165fc <_fstat_r+0x1c>
 80165f6:	682b      	ldr	r3, [r5, #0]
 80165f8:	b103      	cbz	r3, 80165fc <_fstat_r+0x1c>
 80165fa:	6023      	str	r3, [r4, #0]
 80165fc:	bd38      	pop	{r3, r4, r5, pc}
 80165fe:	bf00      	nop
 8016600:	2000ad54 	.word	0x2000ad54

08016604 <_isatty_r>:
 8016604:	b538      	push	{r3, r4, r5, lr}
 8016606:	4d06      	ldr	r5, [pc, #24]	@ (8016620 <_isatty_r+0x1c>)
 8016608:	2300      	movs	r3, #0
 801660a:	4604      	mov	r4, r0
 801660c:	4608      	mov	r0, r1
 801660e:	602b      	str	r3, [r5, #0]
 8016610:	f7eb f860 	bl	80016d4 <_isatty>
 8016614:	1c43      	adds	r3, r0, #1
 8016616:	d102      	bne.n	801661e <_isatty_r+0x1a>
 8016618:	682b      	ldr	r3, [r5, #0]
 801661a:	b103      	cbz	r3, 801661e <_isatty_r+0x1a>
 801661c:	6023      	str	r3, [r4, #0]
 801661e:	bd38      	pop	{r3, r4, r5, pc}
 8016620:	2000ad54 	.word	0x2000ad54

08016624 <_kill_r>:
 8016624:	b538      	push	{r3, r4, r5, lr}
 8016626:	4d07      	ldr	r5, [pc, #28]	@ (8016644 <_kill_r+0x20>)
 8016628:	2300      	movs	r3, #0
 801662a:	4604      	mov	r4, r0
 801662c:	4608      	mov	r0, r1
 801662e:	4611      	mov	r1, r2
 8016630:	602b      	str	r3, [r5, #0]
 8016632:	f7ea ffdf 	bl	80015f4 <_kill>
 8016636:	1c43      	adds	r3, r0, #1
 8016638:	d102      	bne.n	8016640 <_kill_r+0x1c>
 801663a:	682b      	ldr	r3, [r5, #0]
 801663c:	b103      	cbz	r3, 8016640 <_kill_r+0x1c>
 801663e:	6023      	str	r3, [r4, #0]
 8016640:	bd38      	pop	{r3, r4, r5, pc}
 8016642:	bf00      	nop
 8016644:	2000ad54 	.word	0x2000ad54

08016648 <_getpid_r>:
 8016648:	f7ea bfcc 	b.w	80015e4 <_getpid>

0801664c <_init>:
 801664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801664e:	bf00      	nop
 8016650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016652:	bc08      	pop	{r3}
 8016654:	469e      	mov	lr, r3
 8016656:	4770      	bx	lr

08016658 <_fini>:
 8016658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801665a:	bf00      	nop
 801665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801665e:	bc08      	pop	{r3}
 8016660:	469e      	mov	lr, r3
 8016662:	4770      	bx	lr
