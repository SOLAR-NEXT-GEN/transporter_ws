
solar_transport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d48  08017f68  08017f68  00018f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cb0  08018cb0  0001a114  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018cb0  08018cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018cb8  08018cb8  0001a114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018cb8  08018cb8  00019cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018cc0  08018cc0  00019cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  08018cc4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae1c  20000118  08018dd8  0001a118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000af34  08018dd8  0001af34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023463  00000000  00000000  0001a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f6e  00000000  00000000  0003d5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  00042518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001535  00000000  00000000  000440b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008813  00000000  00000000  000455e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021edc  00000000  00000000  0004ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112644  00000000  00000000  0006fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00182318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fcc  00000000  00000000  00182390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018a35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017f4c 	.word	0x08017f4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	08017f4c 	.word	0x08017f4c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9d3 	b.w	80006b8 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <MX_FREERTOS_Init+0x18>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_FREERTOS_Init+0x1c>)
 80006c6:	f006 fe63 	bl	8007390 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <MX_FREERTOS_Init+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08018008 	.word	0x08018008
 80006d8:	08000f29 	.word	0x08000f29
 80006dc:	20000134 	.word	0x20000134

080006e0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006ec:	f007 ff24 	bl	8008538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006f0:	4b5a      	ldr	r3, [pc, #360]	@ (800085c <pvPortMallocMicroROS+0x17c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006f8:	f000 f986 	bl	8000a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <pvPortMallocMicroROS+0x180>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4013      	ands	r3, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 8090 	bne.w	800082a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01e      	beq.n	800074e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000710:	2208      	movs	r2, #8
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	2b00      	cmp	r3, #0
 8000720:	d015      	beq.n	800074e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f023 0307 	bic.w	r3, r3, #7
 8000728:	3308      	adds	r3, #8
 800072a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00b      	beq.n	800074e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800073a:	f383 8811 	msr	BASEPRI, r3
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	e7fd      	b.n	800074a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d06a      	beq.n	800082a <pvPortMallocMicroROS+0x14a>
 8000754:	4b43      	ldr	r3, [pc, #268]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d865      	bhi.n	800082a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800075e:	4b42      	ldr	r3, [pc, #264]	@ (8000868 <pvPortMallocMicroROS+0x188>)
 8000760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000762:	4b41      	ldr	r3, [pc, #260]	@ (8000868 <pvPortMallocMicroROS+0x188>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000768:	e004      	b.n	8000774 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d903      	bls.n	8000786 <pvPortMallocMicroROS+0xa6>
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f1      	bne.n	800076a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000786:	4b35      	ldr	r3, [pc, #212]	@ (800085c <pvPortMallocMicroROS+0x17c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800078c:	429a      	cmp	r2, r3
 800078e:	d04c      	beq.n	800082a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2208      	movs	r2, #8
 8000796:	4413      	add	r3, r2
 8000798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1ad2      	subs	r2, r2, r3
 80007aa:	2308      	movs	r3, #8
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d920      	bls.n	80007f4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00b      	beq.n	80007dc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	613b      	str	r3, [r7, #16]
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ee:	69b8      	ldr	r0, [r7, #24]
 80007f0:	f000 f96c 	bl	8000acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <pvPortMallocMicroROS+0x18c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d203      	bcs.n	8000816 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <pvPortMallocMicroROS+0x184>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <pvPortMallocMicroROS+0x18c>)
 8000814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <pvPortMallocMicroROS+0x180>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	431a      	orrs	r2, r3
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800082a:	f007 fe93 	bl	8008554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00b      	beq.n	8000850 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800083c:	f383 8811 	msr	BASEPRI, r3
 8000840:	f3bf 8f6f 	isb	sy
 8000844:	f3bf 8f4f 	dsb	sy
 8000848:	60fb      	str	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000850:	69fb      	ldr	r3, [r7, #28]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20003c7c 	.word	0x20003c7c
 8000860:	20003c88 	.word	0x20003c88
 8000864:	20003c80 	.word	0x20003c80
 8000868:	20003c74 	.word	0x20003c74
 800086c:	20003c84 	.word	0x20003c84

08000870 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d04a      	beq.n	8000918 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000882:	2308      	movs	r3, #8
 8000884:	425b      	negs	r3, r3
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4013      	ands	r3, r2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <vPortFreeMicroROS+0x46>
	__asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	60fb      	str	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00b      	beq.n	80008d6 <vPortFreeMicroROS+0x66>
	__asm volatile
 80008be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	60bb      	str	r3, [r7, #8]
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	e7fd      	b.n	80008d2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <vPortFreeMicroROS+0xb0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008fc:	f007 fe1c 	bl	8008538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <vPortFreeMicroROS+0xb4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <vPortFreeMicroROS+0xb4>)
 800090c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f000 f8dc 	bl	8000acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000914:	f007 fe1e 	bl	8008554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20003c88 	.word	0x20003c88
 8000924:	20003c80 	.word	0x20003c80

08000928 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000934:	2308      	movs	r3, #8
 8000936:	425b      	negs	r3, r3
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <getBlockSize+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	43db      	mvns	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	return count;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20003c88 	.word	0x20003c88

08000964 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096e:	f007 fde3 	bl	8008538 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff feb4 	bl	80006e0 <pvPortMallocMicroROS>
 8000978:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffce 	bl	8000928 <getBlockSize>
 800098c:	4603      	mov	r3, r0
 800098e:	2208      	movs	r2, #8
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d201      	bcs.n	80009a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f016 fbfe 	bl	80171a6 <memcpy>

		vPortFreeMicroROS(pv);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff60 	bl	8000870 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009b0:	f007 fdd0 	bl	8008554 <xTaskResumeAll>

	return newmem;
 80009b4:	68bb      	ldr	r3, [r7, #8]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009c8:	f007 fdb6 	bl	8008538 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe82 	bl	80006e0 <pvPortMallocMicroROS>
 80009dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009e2:	e004      	b.n	80009ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f5      	bne.n	80009e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009f8:	f007 fdac 	bl	8008554 <xTaskResumeAll>
  	return mem;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a14:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <prvHeapInit+0xac>)
 8000a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00c      	beq.n	8000a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <prvHeapInit+0xac>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <prvHeapInit+0xb0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <prvHeapInit+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a54:	2208      	movs	r2, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <prvHeapInit+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <prvHeapInit+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <prvHeapInit+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <prvHeapInit+0xb4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <prvHeapInit+0xb8>)
 8000a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <prvHeapInit+0xbc>)
 8000a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <prvHeapInit+0xc0>)
 8000aa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20003074 	.word	0x20003074
 8000ab8:	20003c74 	.word	0x20003c74
 8000abc:	20003c7c 	.word	0x20003c7c
 8000ac0:	20003c84 	.word	0x20003c84
 8000ac4:	20003c80 	.word	0x20003c80
 8000ac8:	20003c88 	.word	0x20003c88

08000acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ad4:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <prvInsertBlockIntoFreeList+0xac>)
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e002      	b.n	8000ae0 <prvInsertBlockIntoFreeList+0x14>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8f7      	bhi.n	8000ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d108      	bne.n	8000b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d118      	bne.n	8000b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d002      	beq.n	8000b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20003c74 	.word	0x20003c74
 8000b7c:	20003c7c 	.word	0x20003c7c

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <MX_DMA_Init+0x60>)
 8000bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	200b      	movs	r0, #11
 8000bbc:	f001 fc30 	bl	8002420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f001 fc47 	bl	8002454 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2105      	movs	r1, #5
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f001 fc28 	bl	8002420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bd0:	200c      	movs	r0, #12
 8000bd2:	f001 fc3f 	bl	8002454 <HAL_NVIC_EnableIRQ>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bf2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bf8:	4904      	ldr	r1, [pc, #16]	@ (8000c0c <cubemx_transport_open+0x28>)
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f004 fe26 	bl	800584c <HAL_UART_Receive_DMA>
    return true;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20003c8c 	.word	0x20003c8c

08000c10 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f004 fe5f 	bl	80058e4 <HAL_UART_DMAStop>
    return true;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c44:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4c:	2b20      	cmp	r3, #32
 8000c4e:	d11b      	bne.n	8000c88 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f004 fd77 	bl	800574c <HAL_UART_Transmit_DMA>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c62:	e002      	b.n	8000c6a <cubemx_transport_write+0x3a>
            osDelay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f006 fc25 	bl	80074b4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c6a:	7cfb      	ldrb	r3, [r7, #19]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <cubemx_transport_write+0x4a>
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	2b20      	cmp	r3, #32
 8000c78:	d1f4      	bne.n	8000c64 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c7a:	7cfb      	ldrb	r3, [r7, #19]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <cubemx_transport_write+0x54>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	e002      	b.n	8000c8a <cubemx_transport_write+0x5a>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e000      	b.n	8000c8a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000c88:	2300      	movs	r3, #0
    }
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ca8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cae:	b672      	cpsid	i
}
 8000cb0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <cubemx_transport_read+0x9c>)
 8000cc2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cc4:	b662      	cpsie	i
}
 8000cc6:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f006 fbf0 	bl	80074b4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <cubemx_transport_read+0x9c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d103      	bne.n	8000ce8 <cubemx_transport_read+0x54>
 8000ce0:	69fa      	ldr	r2, [r7, #28]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbe2      	blt.n	8000cae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cec:	e011      	b.n	8000d12 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	490f      	ldr	r1, [pc, #60]	@ (8000d38 <cubemx_transport_read+0xa4>)
 8000cfa:	5c8a      	ldrb	r2, [r1, r2]
 8000cfc:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000d0a:	6013      	str	r3, [r2, #0]
        wrote++;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <cubemx_transport_read+0xa0>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <cubemx_transport_read+0x9c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d003      	beq.n	8000d26 <cubemx_transport_read+0x92>
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3e3      	bcc.n	8000cee <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8000d26:	69bb      	ldr	r3, [r7, #24]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20004490 	.word	0x20004490
 8000d34:	2000448c 	.word	0x2000448c
 8000d38:	20003c8c 	.word	0x20003c8c

08000d3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b3b      	ldr	r3, [pc, #236]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a3a      	ldr	r2, [pc, #232]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b38      	ldr	r3, [pc, #224]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b35      	ldr	r3, [pc, #212]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a34      	ldr	r2, [pc, #208]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a2e      	ldr	r2, [pc, #184]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a28      	ldr	r2, [pc, #160]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <MX_GPIO_Init+0x104>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbc:	f002 f818 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000dc6:	481f      	ldr	r0, [pc, #124]	@ (8000e44 <MX_GPIO_Init+0x108>)
 8000dc8:	f002 f812 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4819      	ldr	r0, [pc, #100]	@ (8000e48 <MX_GPIO_Init+0x10c>)
 8000de4:	f001 fe82 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000de8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e04:	f001 fe72 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000e08:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <MX_GPIO_Init+0x108>)
 8000e22:	f001 fe63 	bl	8002aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2105      	movs	r1, #5
 8000e2a:	2028      	movs	r0, #40	@ 0x28
 8000e2c:	f001 faf8 	bl	8002420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e30:	2028      	movs	r0, #40	@ 0x28
 8000e32:	f001 fb0f 	bl	8002454 <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	@ 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000800 	.word	0x48000800

08000e4c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_IWDG_Init+0x34>)
 8000e52:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <MX_IWDG_Init+0x38>)
 8000e54:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_IWDG_Init+0x34>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_IWDG_Init+0x34>)
 8000e5e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000e62:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_IWDG_Init+0x34>)
 8000e66:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000e6a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_IWDG_Init+0x34>)
 8000e6e:	f002 f814 	bl	8002e9a <HAL_IWDG_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000e78:	f000 f9b0 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20004494 	.word	0x20004494
 8000e84:	40003000 	.word	0x40003000

08000e88 <timer_callback>:
std_msgs__msg__Int32 msg;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	e9c7 2300 	strd	r2, r3, [r7]
	static uint8_t cnt = 0;
	if (timer != NULL) {
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d024      	beq.n	8000ee4 <timer_callback+0x5c>
		if (cnt == 0)
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <timer_callback+0x64>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <timer_callback+0x24>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea8:	f001 ffba 	bl	8002e20 <HAL_GPIO_TogglePin>
		cnt = (cnt + 1) % 100;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <timer_callback+0x64>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef0 <timer_callback+0x68>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	1151      	asrs	r1, r2, #5
 8000eba:	17da      	asrs	r2, r3, #31
 8000ebc:	1a8a      	subs	r2, r1, r2
 8000ebe:	2164      	movs	r1, #100	@ 0x64
 8000ec0:	fb01 f202 	mul.w	r2, r1, r2
 8000ec4:	1a9a      	subs	r2, r3, r2
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <timer_callback+0x64>)
 8000eca:	701a      	strb	r2, [r3, #0]
		pub_msg.data += step;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <timer_callback+0x6c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <timer_callback+0x70>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <timer_callback+0x6c>)
 8000ed8:	6013      	str	r3, [r2, #0]
		RCSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
 8000eda:	2200      	movs	r2, #0
 8000edc:	4905      	ldr	r1, [pc, #20]	@ (8000ef4 <timer_callback+0x6c>)
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <timer_callback+0x74>)
 8000ee0:	f009 f982 	bl	800a1e8 <rcl_publish>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20004598 	.word	0x20004598
 8000ef0:	51eb851f 	.word	0x51eb851f
 8000ef4:	20004590 	.word	0x20004590
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20004588 	.word	0x20004588

08000f00 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * sub_msg = (const std_msgs__msg__Int32 *)msgin;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
  step = sub_msg->data;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a03      	ldr	r2, [pc, #12]	@ (8000f20 <subscription_callback+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000000 	.word	0x20000000
 8000f24:	00000000 	.word	0x00000000

08000f28 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b0b2      	sub	sp, #200	@ 0xc8
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 8000f32:	4b4f      	ldr	r3, [pc, #316]	@ (8001070 <StartDefaultTask+0x148>)
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	4b4f      	ldr	r3, [pc, #316]	@ (8001074 <StartDefaultTask+0x14c>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <StartDefaultTask+0x150>)
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <StartDefaultTask+0x154>)
 8000f3e:	4950      	ldr	r1, [pc, #320]	@ (8001080 <StartDefaultTask+0x158>)
 8000f40:	2001      	movs	r0, #1
 8000f42:	f00a f9d9 	bl	800b2f8 <rmw_uros_set_custom_transport>
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8000f46:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00a f8f0 	bl	800b130 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8000f50:	4b4c      	ldr	r3, [pc, #304]	@ (8001084 <StartDefaultTask+0x15c>)
 8000f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8000f56:	4b4c      	ldr	r3, [pc, #304]	@ (8001088 <StartDefaultTask+0x160>)
 8000f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8000f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800108c <StartDefaultTask+0x164>)
 8000f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8000f62:	4b4b      	ldr	r3, [pc, #300]	@ (8001090 <StartDefaultTask+0x168>)
 8000f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00a f8ed 	bl	800b14c <rcutils_set_default_allocator>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8000f7e:	217f      	movs	r1, #127	@ 0x7f
 8000f80:	4844      	ldr	r0, [pc, #272]	@ (8001094 <StartDefaultTask+0x16c>)
 8000f82:	f015 ff55 	bl	8016e30 <iprintf>
	}

	// micro-ROS app

	allocator = rcl_get_default_allocator();
 8000f86:	4c44      	ldr	r4, [pc, #272]	@ (8001098 <StartDefaultTask+0x170>)
 8000f88:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00a f8fb 	bl	800b188 <rcutils_get_default_allocator>
 8000f92:	4625      	mov	r5, r4
 8000f94:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8000fa0:	f008 ff52 	bl	8009e48 <rcl_get_zero_initialized_init_options>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a3d      	ldr	r2, [pc, #244]	@ (800109c <StartDefaultTask+0x174>)
 8000fa8:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <StartDefaultTask+0x170>)
 8000fac:	466c      	mov	r4, sp
 8000fae:	f103 020c 	add.w	r2, r3, #12
 8000fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb6:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbc:	4837      	ldr	r0, [pc, #220]	@ (800109c <StartDefaultTask+0x174>)
 8000fbe:	f008 ff45 	bl	8009e4c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 8000fc2:	2163      	movs	r1, #99	@ 0x63
 8000fc4:	4835      	ldr	r0, [pc, #212]	@ (800109c <StartDefaultTask+0x174>)
 8000fc6:	f009 f83d 	bl	800a044 <rcl_init_options_set_domain_id>
	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8000fca:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <StartDefaultTask+0x170>)
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4b33      	ldr	r3, [pc, #204]	@ (800109c <StartDefaultTask+0x174>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4832      	ldr	r0, [pc, #200]	@ (80010a0 <StartDefaultTask+0x178>)
 8000fd6:	f009 ff9b 	bl	800af10 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <StartDefaultTask+0x178>)
 8000fdc:	4a31      	ldr	r2, [pc, #196]	@ (80010a4 <StartDefaultTask+0x17c>)
 8000fde:	4932      	ldr	r1, [pc, #200]	@ (80010a8 <StartDefaultTask+0x180>)
 8000fe0:	4832      	ldr	r0, [pc, #200]	@ (80010ac <StartDefaultTask+0x184>)
 8000fe2:	f009 ffc9 	bl	800af78 <rclc_node_init_default>
	//create pub
	rclc_publisher_init_default(&publisher, &node,
 8000fe6:	f00b fbff 	bl	800c7e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <StartDefaultTask+0x188>)
 8000fee:	492f      	ldr	r1, [pc, #188]	@ (80010ac <StartDefaultTask+0x184>)
 8000ff0:	4830      	ldr	r0, [pc, #192]	@ (80010b4 <StartDefaultTask+0x18c>)
 8000ff2:	f009 fffd 	bl	800aff0 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher");
	//create sub
	rclc_subscription_init_default(&subscriber, &node,
 8000ff6:	f00b fbf7 	bl	800c7e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <StartDefaultTask+0x190>)
 8000ffe:	492b      	ldr	r1, [pc, #172]	@ (80010ac <StartDefaultTask+0x184>)
 8001000:	482e      	ldr	r0, [pc, #184]	@ (80010bc <StartDefaultTask+0x194>)
 8001002:	f00a f829 	bl	800b058 <rclc_subscription_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_subscription");
	//create msg
	pub_msg.data = 0;
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <StartDefaultTask+0x198>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
	//create timer
	rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(100),
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <StartDefaultTask+0x19c>)
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	a315      	add	r3, pc, #84	@ (adr r3, 8001068 <StartDefaultTask+0x140>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	4922      	ldr	r1, [pc, #136]	@ (80010a0 <StartDefaultTask+0x178>)
 8001018:	482b      	ldr	r0, [pc, #172]	@ (80010c8 <StartDefaultTask+0x1a0>)
 800101a:	f00a f851 	bl	800b0c0 <rclc_timer_init_default>
			timer_callback);
	//create executor
	executor = rclc_executor_get_zero_initialized_executor();
 800101e:	4c2b      	ldr	r4, [pc, #172]	@ (80010cc <StartDefaultTask+0x1a4>)
 8001020:	463b      	mov	r3, r7
 8001022:	4618      	mov	r0, r3
 8001024:	f009 fc6e 	bl	800a904 <rclc_executor_get_zero_initialized_executor>
 8001028:	4620      	mov	r0, r4
 800102a:	463b      	mov	r3, r7
 800102c:	2288      	movs	r2, #136	@ 0x88
 800102e:	4619      	mov	r1, r3
 8001030:	f016 f8b9 	bl	80171a6 <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <StartDefaultTask+0x170>)
 8001036:	2202      	movs	r2, #2
 8001038:	4919      	ldr	r1, [pc, #100]	@ (80010a0 <StartDefaultTask+0x178>)
 800103a:	4824      	ldr	r0, [pc, #144]	@ (80010cc <StartDefaultTask+0x1a4>)
 800103c:	f009 fc6c 	bl	800a918 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 8001040:	4921      	ldr	r1, [pc, #132]	@ (80010c8 <StartDefaultTask+0x1a0>)
 8001042:	4822      	ldr	r0, [pc, #136]	@ (80010cc <StartDefaultTask+0x1a4>)
 8001044:	f009 fd0c 	bl	800aa60 <rclc_executor_add_timer>
	rclc_executor_add_subscription(&executor, &subscriber, &sub_msg, &subscription_callback, ON_NEW_DATA);
 8001048:	2300      	movs	r3, #0
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <StartDefaultTask+0x1a8>)
 800104e:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <StartDefaultTask+0x1ac>)
 8001050:	491a      	ldr	r1, [pc, #104]	@ (80010bc <StartDefaultTask+0x194>)
 8001052:	481e      	ldr	r0, [pc, #120]	@ (80010cc <StartDefaultTask+0x1a4>)
 8001054:	f009 fcd0 	bl	800a9f8 <rclc_executor_add_subscription>
	rclc_executor_spin(&executor);
 8001058:	481c      	ldr	r0, [pc, #112]	@ (80010cc <StartDefaultTask+0x1a4>)
 800105a:	f009 ff17 	bl	800ae8c <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f006 fa28 	bl	80074b4 <osDelay>
 8001064:	e7fb      	b.n	800105e <StartDefaultTask+0x136>
 8001066:	bf00      	nop
 8001068:	05f5e100 	.word	0x05f5e100
 800106c:	00000000 	.word	0x00000000
 8001070:	08000c95 	.word	0x08000c95
 8001074:	08000c31 	.word	0x08000c31
 8001078:	08000c11 	.word	0x08000c11
 800107c:	08000be5 	.word	0x08000be5
 8001080:	200047c0 	.word	0x200047c0
 8001084:	080011e9 	.word	0x080011e9
 8001088:	0800122d 	.word	0x0800122d
 800108c:	08001265 	.word	0x08001265
 8001090:	080012d1 	.word	0x080012d1
 8001094:	08017f74 	.word	0x08017f74
 8001098:	200044d8 	.word	0x200044d8
 800109c:	200044f4 	.word	0x200044f4
 80010a0:	200044a4 	.word	0x200044a4
 80010a4:	08017f9c 	.word	0x08017f9c
 80010a8:	08017fa0 	.word	0x08017fa0
 80010ac:	200044ec 	.word	0x200044ec
 80010b0:	08017fac 	.word	0x08017fac
 80010b4:	20004588 	.word	0x20004588
 80010b8:	08017fc0 	.word	0x08017fc0
 80010bc:	2000458c 	.word	0x2000458c
 80010c0:	20004590 	.word	0x20004590
 80010c4:	08000e89 	.word	0x08000e89
 80010c8:	200044f8 	.word	0x200044f8
 80010cc:	20004500 	.word	0x20004500
 80010d0:	08000f01 	.word	0x08000f01
 80010d4:	20004594 	.word	0x20004594

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f001 f8b1 	bl	8002242 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f81c 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f7ff fe2a 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80010e8:	f7ff fd4a 	bl	8000b80 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010ec:	f000 ff78 	bl	8001fe0 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 80010f0:	f7ff feac 	bl	8000e4c <MX_IWDG_Init>
  MX_TIM2_Init();
 80010f4:	f000 fba0 	bl	8001838 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f8:	f000 fbec 	bl	80018d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010fc:	f000 fc40 	bl	8001980 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001100:	f000 fc94 	bl	8001a2c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001104:	f000 fce8 	bl	8001ad8 <MX_TIM8_Init>
  MX_TIM20_Init();
 8001108:	f000 fd9e 	bl	8001c48 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800110c:	f006 f8f6 	bl	80072fc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001110:	f7ff fad4 	bl	80006bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001114:	f006 f916 	bl	8007344 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <main+0x40>

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	@ 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	2238      	movs	r2, #56	@ 0x38
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f015 ff72 	bl	8017014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800113e:	2000      	movs	r0, #0
 8001140:	f001 fefa 	bl	8002f38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001144:	230a      	movs	r3, #10
 8001146:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114e:	2340      	movs	r3, #64	@ 0x40
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001152:	2301      	movs	r3, #1
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800115e:	2304      	movs	r3, #4
 8001160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001162:	2355      	movs	r3, #85	@ 0x55
 8001164:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4618      	mov	r0, r3
 8001178:	f001 ff92 	bl	80030a0 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001182:	f000 f82b 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2303      	movs	r3, #3
 800118c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2104      	movs	r1, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fa90 	bl	80036c4 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011aa:	f000 f817 	bl	80011dc <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	@ 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011ca:	f001 f853 	bl	8002274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012c00 	.word	0x40012c00

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <Error_Handler+0x8>

080011e8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <microros_allocate+0x3c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <microros_allocate+0x3c>)
 8001200:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <microros_allocate+0x40>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <microros_allocate+0x40>)
 8001210:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fa64 	bl	80006e0 <pvPortMallocMicroROS>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000459c 	.word	0x2000459c
 8001228:	200045a0 	.word	0x200045a0

0800122c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00c      	beq.n	8001256 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fb73 	bl	8000928 <getBlockSize>
 8001242:	4603      	mov	r3, r0
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <microros_deallocate+0x34>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	461a      	mov	r2, r3
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <microros_deallocate+0x34>)
 800124e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fb0d 	bl	8000870 <vPortFreeMicroROS>
  }
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200045a0 	.word	0x200045a0

08001264 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <microros_reallocate+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4413      	add	r3, r2
 800127a:	461a      	mov	r2, r3
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <microros_reallocate+0x64>)
 800127e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <microros_reallocate+0x68>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	4413      	add	r3, r2
 800128a:	461a      	mov	r2, r3
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <microros_reallocate+0x68>)
 800128e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d104      	bne.n	80012a0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff fa22 	bl	80006e0 <pvPortMallocMicroROS>
 800129c:	4603      	mov	r3, r0
 800129e:	e00e      	b.n	80012be <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff fb41 	bl	8000928 <getBlockSize>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a08      	ldr	r2, [pc, #32]	@ (80012cc <microros_reallocate+0x68>)
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <microros_reallocate+0x68>)
 80012b2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff fb54 	bl	8000964 <pvPortReallocMicroROS>
 80012bc:	4603      	mov	r3, r0
  }
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000459c 	.word	0x2000459c
 80012cc:	200045a0 	.word	0x200045a0

080012d0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <microros_zero_allocate+0x48>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <microros_zero_allocate+0x48>)
 80012ee:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	4a08      	ldr	r2, [pc, #32]	@ (800131c <microros_zero_allocate+0x4c>)
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	461a      	mov	r2, r3
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <microros_zero_allocate+0x4c>)
 8001302:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff fb59 	bl	80009be <pvPortCallocMicroROS>
 800130c:	4603      	mov	r3, r0
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000459c 	.word	0x2000459c
 800131c:	200045a0 	.word	0x200045a0

08001320 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001336:	a320      	add	r3, pc, #128	@ (adr r3, 80013b8 <UTILS_NanosecondsToTimespec+0x98>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ffd8 	bl	80002f0 <__aeabi_ldivmod>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800134a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134e:	a31a      	add	r3, pc, #104	@ (adr r3, 80013b8 <UTILS_NanosecondsToTimespec+0x98>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7fe ffcc 	bl	80002f0 <__aeabi_ldivmod>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da20      	bge.n	80013a6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a11      	ldr	r2, [pc, #68]	@ (80013b0 <UTILS_NanosecondsToTimespec+0x90>)
 800136a:	fb82 1203 	smull	r1, r2, r2, r3
 800136e:	1712      	asrs	r2, r2, #28
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	6979      	ldr	r1, [r7, #20]
 8001380:	17c8      	asrs	r0, r1, #31
 8001382:	460c      	mov	r4, r1
 8001384:	4605      	mov	r5, r0
 8001386:	ebb2 0804 	subs.w	r8, r2, r4
 800138a:	eb63 0905 	sbc.w	r9, r3, r5
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4906      	ldr	r1, [pc, #24]	@ (80013b4 <UTILS_NanosecondsToTimespec+0x94>)
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	441a      	add	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
    }
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013b0:	44b82fa1 	.word	0x44b82fa1
 80013b4:	3b9aca00 	.word	0x3b9aca00
 80013b8:	3b9aca00 	.word	0x3b9aca00
 80013bc:	00000000 	.word	0x00000000

080013c0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80013c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c4:	b08e      	sub	sp, #56	@ 0x38
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80013ca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80013cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80013d0:	2300      	movs	r3, #0
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 fb30 	bl	8008a4c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ee:	17da      	asrs	r2, r3, #31
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	61fa      	str	r2, [r7, #28]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	69b9      	ldr	r1, [r7, #24]
 80013fe:	000b      	movs	r3, r1
 8001400:	2200      	movs	r2, #0
 8001402:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001408:	2200      	movs	r2, #0
 800140a:	461c      	mov	r4, r3
 800140c:	4615      	mov	r5, r2
 800140e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001412:	1911      	adds	r1, r2, r4
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	416b      	adcs	r3, r5
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800141e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001422:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	f04f 0400 	mov.w	r4, #0
 800142e:	f04f 0500 	mov.w	r5, #0
 8001432:	015d      	lsls	r5, r3, #5
 8001434:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001438:	0154      	lsls	r4, r2, #5
 800143a:	4622      	mov	r2, r4
 800143c:	462b      	mov	r3, r5
 800143e:	ebb2 0800 	subs.w	r8, r2, r0
 8001442:	eb63 0901 	sbc.w	r9, r3, r1
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001452:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001456:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800145a:	4690      	mov	r8, r2
 800145c:	4699      	mov	r9, r3
 800145e:	eb18 0a00 	adds.w	sl, r8, r0
 8001462:	eb49 0b01 	adc.w	fp, r9, r1
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001472:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001476:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800147a:	ebb2 040a 	subs.w	r4, r2, sl
 800147e:	603c      	str	r4, [r7, #0]
 8001480:	eb63 030b 	sbc.w	r3, r3, fp
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800148a:	4623      	mov	r3, r4
 800148c:	181b      	adds	r3, r3, r0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	462b      	mov	r3, r5
 8001492:	eb41 0303 	adc.w	r3, r1, r3
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800149e:	f7ff ff3f 	bl	8001320 <UTILS_NanosecondsToTimespec>

    return 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	3738      	adds	r7, #56	@ 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_MspInit+0x50>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ba:	4a11      	ldr	r2, [pc, #68]	@ (8001500 <HAL_MspInit+0x50>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_MspInit+0x50>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <HAL_MspInit+0x50>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_MspInit+0x50>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_MspInit+0x50>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210f      	movs	r1, #15
 80014ea:	f06f 0001 	mvn.w	r0, #1
 80014ee:	f000 ff97 	bl	8002420 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014f2:	f001 fdc5 	bl	8003080 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001514:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <HAL_InitTick+0xc4>)
 8001516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001518:	4a2b      	ldr	r2, [pc, #172]	@ (80015c8 <HAL_InitTick+0xc4>)
 800151a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <HAL_InitTick+0xc4>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fa9a 	bl	8003a70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800153c:	f002 fa82 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8001540:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <HAL_InitTick+0xc8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3b01      	subs	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_InitTick+0xcc>)
 8001552:	4a20      	ldr	r2, [pc, #128]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001554:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <HAL_InitTick+0xcc>)
 8001558:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800155c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800155e:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <HAL_InitTick+0xcc>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_InitTick+0xcc>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_InitTick+0xcc>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001570:	4817      	ldr	r0, [pc, #92]	@ (80015d0 <HAL_InitTick+0xcc>)
 8001572:	f002 fd43 	bl	8003ffc <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800157c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11b      	bne.n	80015bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001584:	4812      	ldr	r0, [pc, #72]	@ (80015d0 <HAL_InitTick+0xcc>)
 8001586:	f002 fd91 	bl	80040ac <HAL_TIM_Base_Start_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001598:	2019      	movs	r0, #25
 800159a:	f000 ff5b 	bl	8002454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d808      	bhi.n	80015b6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	2019      	movs	r0, #25
 80015aa:	f000 ff39 	bl	8002420 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_InitTick+0xd4>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e002      	b.n	80015bc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3730      	adds	r7, #48	@ 0x30
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	200045a4 	.word	0x200045a4
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	2000000c 	.word	0x2000000c

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <DMA1_Channel1_IRQHandler+0x10>)
 800161a:	f001 f90c 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20004854 	.word	0x20004854

08001628 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <DMA1_Channel2_IRQHandler+0x10>)
 800162e:	f001 f902 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200048b4 	.word	0x200048b4

0800163c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001642:	f002 fea8 	bl	8004396 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200045a4 	.word	0x200045a4

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f002 fe9e 	bl	8004396 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200045f8 	.word	0x200045f8

08001664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001668:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800166c:	f001 fbf2 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <LPUART1_IRQHandler+0x10>)
 800167a:	f004 f9c9 	bl	8005a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200047c0 	.word	0x200047c0

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a2:	f015 fd4b 	bl	801713c <__errno>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2216      	movs	r2, #22
 80016aa:	601a      	str	r2, [r3, #0]
  return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_exit>:

void _exit (int status)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe7 	bl	8001698 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ca:	bf00      	nop
 80016cc:	e7fd      	b.n	80016ca <_exit+0x12>

080016ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e00a      	b.n	80016f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e0:	f3af 8000 	nop.w
 80016e4:	4601      	mov	r1, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	60ba      	str	r2, [r7, #8]
 80016ec:	b2ca      	uxtb	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbf0      	blt.n	80016e0 <_read+0x12>
  }

  return len;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e009      	b.n	800172e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf1      	blt.n	800171a <_write+0x12>
  }
  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_close>:

int _close(int file)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001768:	605a      	str	r2, [r3, #4]
  return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_isatty>:

int _isatty(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f015 fcb0 	bl	801713c <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20020000 	.word	0x20020000
 8001808:	00000400 	.word	0x00000400
 800180c:	200045f4 	.word	0x200045f4
 8001810:	2000af38 	.word	0x2000af38

08001814 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <MX_TIM2_Init+0x98>)
 8001858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800185c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <MX_TIM2_Init+0x98>)
 8001860:	22a9      	movs	r2, #169	@ 0xa9
 8001862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <MX_TIM2_Init+0x98>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <MX_TIM2_Init+0x98>)
 800186c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <MX_TIM2_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <MX_TIM2_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187e:	4814      	ldr	r0, [pc, #80]	@ (80018d0 <MX_TIM2_Init+0x98>)
 8001880:	f002 fbbc 	bl	8003ffc <HAL_TIM_Base_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800188a:	f7ff fca7 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <MX_TIM2_Init+0x98>)
 800189c:	f002 ffde 	bl	800485c <HAL_TIM_ConfigClockSource>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018a6:	f7ff fc99 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018aa:	2320      	movs	r3, #32
 80018ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	@ (80018d0 <MX_TIM2_Init+0x98>)
 80018b8:	f003 fd88 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018c2:	f7ff fc8b 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200045f8 	.word	0x200045f8

080018d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2224      	movs	r2, #36	@ 0x24
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f015 fb96 	bl	8017014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f2:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <MX_TIM3_Init+0xa4>)
 80018f4:	4a21      	ldr	r2, [pc, #132]	@ (800197c <MX_TIM3_Init+0xa8>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_TIM3_Init+0xa4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <MX_TIM3_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_TIM3_Init+0xa4>)
 8001906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800190a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_TIM3_Init+0xa4>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_TIM3_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001918:	2303      	movs	r3, #3
 800191a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001920:	2301      	movs	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4619      	mov	r1, r3
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <MX_TIM3_Init+0xa4>)
 8001944:	f002 fc81 	bl	800424a <HAL_TIM_Encoder_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800194e:	f7ff fc45 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <MX_TIM3_Init+0xa4>)
 8001960:	f003 fd34 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800196a:	f7ff fc37 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	@ 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20004644 	.word	0x20004644
 800197c:	40000400 	.word	0x40000400

08001980 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2224      	movs	r2, #36	@ 0x24
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f015 fb40 	bl	8017014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800199e:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019a0:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <MX_TIM4_Init+0xa8>)
 80019a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019be:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019c4:	2303      	movs	r3, #3
 80019c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019cc:	2301      	movs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 80019f0:	f002 fc2b 	bl	800424a <HAL_TIM_Encoder_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019fa:	f7ff fbef 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a06:	463b      	mov	r3, r7
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <MX_TIM4_Init+0xa4>)
 8001a0c:	f003 fcde 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a16:	f7ff fbe1 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3730      	adds	r7, #48	@ 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20004690 	.word	0x20004690
 8001a28:	40000800 	.word	0x40000800

08001a2c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2224      	movs	r2, #36	@ 0x24
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f015 faea 	bl	8017014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <MX_TIM5_Init+0xa8>)
 8001a4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a70:	2303      	movs	r3, #3
 8001a72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001a9c:	f002 fbd5 	bl	800424a <HAL_TIM_Encoder_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001aa6:	f7ff fb99 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <MX_TIM5_Init+0xa4>)
 8001ab8:	f003 fc88 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001ac2:	f7ff fb8b 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3730      	adds	r7, #48	@ 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200046dc 	.word	0x200046dc
 8001ad4:	40000c00 	.word	0x40000c00

08001ad8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b098      	sub	sp, #96	@ 0x60
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2234      	movs	r2, #52	@ 0x34
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f015 fa85 	bl	8017014 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c44 <MX_TIM8_Init+0x16c>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b10:	4b4b      	ldr	r3, [pc, #300]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b1c:	4b48      	ldr	r3, [pc, #288]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b46      	ldr	r3, [pc, #280]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b2a:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b36:	4842      	ldr	r0, [pc, #264]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b38:	f002 fb30 	bl	800419c <HAL_TIM_PWM_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f7ff fb4b 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b56:	4619      	mov	r1, r3
 8001b58:	4839      	ldr	r0, [pc, #228]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b5a:	f003 fc37 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001b64:	f7ff fb3a 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	@ 0x60
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	482c      	ldr	r0, [pc, #176]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001b8e:	f002 fd51 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b98:	f7ff fb20 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4826      	ldr	r0, [pc, #152]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001ba6:	f002 fd45 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001bb0:	f7ff fb14 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bb8:	2208      	movs	r2, #8
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4820      	ldr	r0, [pc, #128]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001bbe:	f002 fd39 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001bc8:	f7ff fb08 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481a      	ldr	r0, [pc, #104]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001bd6:	f002 fd2d 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001be0:	f7ff fafc 	bl	80011dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001c22:	f003 fc69 	bl	80054f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8001c2c:	f7ff fad6 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <MX_TIM8_Init+0x168>)
 8001c32:	f000 f99d 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001c36:	bf00      	nop
 8001c38:	3760      	adds	r7, #96	@ 0x60
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20004728 	.word	0x20004728
 8001c44:	40013400 	.word	0x40013400

08001c48 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	@ 0x30
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	2224      	movs	r2, #36	@ 0x24
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f015 f9dc 	bl	8017014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001c66:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c68:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <MX_TIM20_Init+0xb0>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001c78:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7e:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c92:	2303      	movs	r3, #3
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001cbe:	f002 fac4 	bl	800424a <HAL_TIM_Encoder_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8001cc8:	f7ff fa88 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_TIM20_Init+0xac>)
 8001cde:	f003 fb75 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8001ce8:	f7ff fa78 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	@ 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20004774 	.word	0x20004774
 8001cf8:	40015000 	.word	0x40015000

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0c:	d113      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f000 fb78 	bl	8002420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d30:	201c      	movs	r0, #28
 8001d32:	f000 fb8f 	bl	8002454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b090      	sub	sp, #64	@ 0x40
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6c      	ldr	r2, [pc, #432]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d129      	bne.n	8001dba <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d66:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d72:	4b69      	ldr	r3, [pc, #420]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b66      	ldr	r3, [pc, #408]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a65      	ldr	r2, [pc, #404]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8a:	4b63      	ldr	r3, [pc, #396]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d96:	2350      	movs	r3, #80	@ 0x50
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db4:	f000 fe9a 	bl	8002aec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8001db8:	e0a7      	b.n	8001f0a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d12a      	bne.n	8001e1a <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc4:	4b54      	ldr	r3, [pc, #336]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	4a53      	ldr	r2, [pc, #332]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd0:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	623b      	str	r3, [r7, #32]
 8001dda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a4d      	ldr	r2, [pc, #308]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001df4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e06:	230a      	movs	r3, #10
 8001e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e14:	f000 fe6a 	bl	8002aec <HAL_GPIO_Init>
}
 8001e18:	e077      	b.n	8001f0a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	@ (8001f20 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d129      	bne.n	8001e78 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e24:	4b3c      	ldr	r3, [pc, #240]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	4a3b      	ldr	r2, [pc, #236]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	4a35      	ldr	r2, [pc, #212]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e48:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e64:	2302      	movs	r3, #2
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e72:	f000 fe3b 	bl	8002aec <HAL_GPIO_Init>
}
 8001e76:	e048      	b.n	8001f0a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM20)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d143      	bne.n	8001f0a <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001e82:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	4a24      	ldr	r2, [pc, #144]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001eda:	2306      	movs	r3, #6
 8001edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4810      	ldr	r0, [pc, #64]	@ (8001f28 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001ee6:	f000 fe01 	bl	8002aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eea:	2304      	movs	r3, #4
 8001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001efa:	2303      	movs	r3, #3
 8001efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4809      	ldr	r0, [pc, #36]	@ (8001f2c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001f06:	f000 fdf1 	bl	8002aec <HAL_GPIO_Init>
}
 8001f0a:	bf00      	nop
 8001f0c:	3740      	adds	r7, #64	@ 0x40
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40000c00 	.word	0x40000c00
 8001f24:	40015000 	.word	0x40015000
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000400 	.word	0x48000400

08001f30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x38>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10b      	bne.n	8001f5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40013400 	.word	0x40013400
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d11c      	bne.n	8001fcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_TIM_MspPostInit+0x68>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_TIM_MspPostInit+0x68>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_TIM_MspPostInit+0x68>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001faa:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001fae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <HAL_TIM_MspPostInit+0x6c>)
 8001fc8:	f000 fd90 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40013400 	.word	0x40013400
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	48000800 	.word	0x48000800

08001fe0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fe4:	4b21      	ldr	r3, [pc, #132]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8001fe6:	4a22      	ldr	r2, [pc, #136]	@ (8002070 <MX_LPUART1_UART_Init+0x90>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 800201e:	2200      	movs	r2, #0
 8002020:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002022:	4812      	ldr	r0, [pc, #72]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002024:	f003 fb42 	bl	80056ac <HAL_UART_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800202e:	f7ff f8d5 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002032:	2100      	movs	r1, #0
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002036:	f005 f852 	bl	80070de <HAL_UARTEx_SetTxFifoThreshold>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002040:	f7ff f8cc 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	4809      	ldr	r0, [pc, #36]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002048:	f005 f887 	bl	800715a <HAL_UARTEx_SetRxFifoThreshold>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002052:	f7ff f8c3 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_LPUART1_UART_Init+0x8c>)
 8002058:	f005 f808 	bl	800706c <HAL_UARTEx_DisableFifoMode>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002062:	f7ff f8bb 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200047c0 	.word	0x200047c0
 8002070:	40008000 	.word	0x40008000

08002074 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09e      	sub	sp, #120	@ 0x78
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2254      	movs	r2, #84	@ 0x54
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f014 ffbd 	bl	8017014 <memset>
  if(uartHandle->Instance==LPUART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4e      	ldr	r2, [pc, #312]	@ (80021d8 <HAL_UART_MspInit+0x164>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f040 8094 	bne.w	80021ce <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020a6:	2320      	movs	r3, #32
 80020a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fd54 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020be:	f7ff f88d 	bl	80011dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020c2:	4b46      	ldr	r3, [pc, #280]	@ (80021dc <HAL_UART_MspInit+0x168>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	4a45      	ldr	r2, [pc, #276]	@ (80021dc <HAL_UART_MspInit+0x168>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_UART_MspInit+0x168>)
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	4b40      	ldr	r3, [pc, #256]	@ (80021dc <HAL_UART_MspInit+0x168>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	4a3f      	ldr	r2, [pc, #252]	@ (80021dc <HAL_UART_MspInit+0x168>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e6:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_UART_MspInit+0x168>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80020f2:	230c      	movs	r3, #12
 80020f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002102:	230c      	movs	r3, #12
 8002104:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800210a:	4619      	mov	r1, r3
 800210c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002110:	f000 fcec 	bl	8002aec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002114:	4b32      	ldr	r3, [pc, #200]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002116:	4a33      	ldr	r2, [pc, #204]	@ (80021e4 <HAL_UART_MspInit+0x170>)
 8002118:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800211a:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 800211c:	2222      	movs	r2, #34	@ 0x22
 800211e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002126:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800212c:	4b2c      	ldr	r3, [pc, #176]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 800212e:	2280      	movs	r2, #128	@ 0x80
 8002130:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002132:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002138:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002140:	2220      	movs	r2, #32
 8002142:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002144:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002146:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800214a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800214c:	4824      	ldr	r0, [pc, #144]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 800214e:	f000 f98f 	bl	8002470 <HAL_DMA_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002158:	f7ff f840 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a20      	ldr	r2, [pc, #128]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002164:	4a1e      	ldr	r2, [pc, #120]	@ (80021e0 <HAL_UART_MspInit+0x16c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_UART_MspInit+0x178>)
 800216e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 8002172:	2223      	movs	r2, #35	@ 0x23
 8002174:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 8002178:	2210      	movs	r2, #16
 800217a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 8002184:	2280      	movs	r2, #128	@ 0x80
 8002186:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 800219c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80021a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80021a2:	4811      	ldr	r0, [pc, #68]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 80021a4:	f000 f964 	bl	8002470 <HAL_DMA_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80021ae:	f7ff f815 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0c      	ldr	r2, [pc, #48]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 80021b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021b8:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <HAL_UART_MspInit+0x174>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2105      	movs	r1, #5
 80021c2:	205b      	movs	r0, #91	@ 0x5b
 80021c4:	f000 f92c 	bl	8002420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021c8:	205b      	movs	r0, #91	@ 0x5b
 80021ca:	f000 f943 	bl	8002454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80021ce:	bf00      	nop
 80021d0:	3778      	adds	r7, #120	@ 0x78
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40008000 	.word	0x40008000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	20004854 	.word	0x20004854
 80021e4:	40020008 	.word	0x40020008
 80021e8:	200048b4 	.word	0x200048b4
 80021ec:	4002001c 	.word	0x4002001c

080021f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021f0:	480d      	ldr	r0, [pc, #52]	@ (8002228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f4:	f7ff fb0e 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopForever+0x6>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopForever+0xe>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopForever+0x16>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f014 ff93 	bl	8017148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002222:	f7fe ff59 	bl	80010d8 <main>

08002226 <LoopForever>:

LoopForever:
    b LoopForever
 8002226:	e7fe      	b.n	8002226 <LoopForever>
  ldr   r0, =_estack
 8002228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002234:	08018cc4 	.word	0x08018cc4
  ldr r2, =_sbss
 8002238:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800223c:	2000af34 	.word	0x2000af34

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>

08002242 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f000 f8dc 	bl	800240a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002252:	200f      	movs	r0, #15
 8002254:	f7ff f956 	bl	8001504 <HAL_InitTick>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	e001      	b.n	8002268 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002264:	f7ff f924 	bl	80014b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002268:	79fb      	ldrb	r3, [r7, #7]

}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_IncTick+0x1c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_IncTick+0x20>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	4a03      	ldr	r2, [pc, #12]	@ (8002290 <HAL_IncTick+0x1c>)
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20004914 	.word	0x20004914
 8002294:	20000010 	.word	0x20000010

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20004914 	.word	0x20004914

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff4c 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800242e:	f7ff ff63 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002432:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	6978      	ldr	r0, [r7, #20]
 800243a:	f7ff ffb3 	bl	80023a4 <NVIC_EncodePriority>
 800243e:	4602      	mov	r2, r0
 8002440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff82 	bl	8002350 <__NVIC_SetPriority>
}
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff56 	bl	8002314 <__NVIC_EnableIRQ>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e08d      	b.n	800259e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_DMA_Init+0x138>)
 800248a:	429a      	cmp	r2, r3
 800248c:	d80f      	bhi.n	80024ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	4b45      	ldr	r3, [pc, #276]	@ (80025ac <HAL_DMA_Init+0x13c>)
 8002496:	4413      	add	r3, r2
 8002498:	4a45      	ldr	r2, [pc, #276]	@ (80025b0 <HAL_DMA_Init+0x140>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	009a      	lsls	r2, r3, #2
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a42      	ldr	r2, [pc, #264]	@ (80025b4 <HAL_DMA_Init+0x144>)
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ac:	e00e      	b.n	80024cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b40      	ldr	r3, [pc, #256]	@ (80025b8 <HAL_DMA_Init+0x148>)
 80024b6:	4413      	add	r3, r2
 80024b8:	4a3d      	ldr	r2, [pc, #244]	@ (80025b0 <HAL_DMA_Init+0x140>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a3c      	ldr	r2, [pc, #240]	@ (80025bc <HAL_DMA_Init+0x14c>)
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80024e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa82 	bl	8002a28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800252c:	d102      	bne.n	8002534 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002548:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_DMA_Init+0x104>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d80c      	bhi.n	8002574 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 faa2 	bl	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	e008      	b.n	8002586 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020407 	.word	0x40020407
 80025ac:	bffdfff8 	.word	0xbffdfff8
 80025b0:	cccccccd 	.word	0xcccccccd
 80025b4:	40020000 	.word	0x40020000
 80025b8:	bffdfbf8 	.word	0xbffdfbf8
 80025bc:	40020400 	.word	0x40020400

080025c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Start_IT+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e066      	b.n	80026ae <HAL_DMA_Start_IT+0xee>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d155      	bne.n	80026a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f9c7 	bl	80029ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 020e 	orr.w	r2, r2, #14
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e00f      	b.n	8002658 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 020a 	orr.w	r2, r2, #10
 8002656:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002674:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800268c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e005      	b.n	80026ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
 80026aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d005      	beq.n	80026da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e037      	b.n	800274a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 020e 	bic.w	r2, r2, #14
 80026e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002726:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800273e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002748:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d00d      	beq.n	800279c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2204      	movs	r2, #4
 8002784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	e047      	b.n	800282c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020e 	bic.w	r2, r2, #14
 80027aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00c      	beq.n	800280c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002800:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800280a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
    }
  }
  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2204      	movs	r2, #4
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d026      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x7a>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0204 	bic.w	r2, r2, #4
 8002888:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2104      	movs	r1, #4
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d071      	beq.n	800298a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ae:	e06c      	b.n	800298a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2202      	movs	r2, #2
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02e      	beq.n	8002922 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d029      	beq.n	8002922 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020a 	bic.w	r2, r2, #10
 80028ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2102      	movs	r1, #2
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d038      	beq.n	800298a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002920:	e033      	b.n	800298a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2208      	movs	r2, #8
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02a      	beq.n	800298c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d025      	beq.n	800298c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020e 	bic.w	r2, r2, #14
 800294e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800298a:	bf00      	nop
 800298c:	bf00      	nop
}
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2101      	movs	r1, #1
 80029e4:	fa01 f202 	lsl.w	r2, r1, r2
 80029e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d108      	bne.n	8002a0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a0a:	e007      	b.n	8002a1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d802      	bhi.n	8002a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e001      	b.n	8002a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a44:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3b08      	subs	r3, #8
 8002a52:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40020407 	.word	0x40020407
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020820 	.word	0x40020820
 8002a9c:	cccccccd 	.word	0xcccccccd
 8002aa0:	40020880 	.word	0x40020880

08002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ac6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	1000823f 	.word	0x1000823f
 8002ae8:	40020940 	.word	0x40020940

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002afa:	e15a      	b.n	8002db2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 814c 	beq.w	8002dac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d005      	beq.n	8002b2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d130      	bne.n	8002b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b62:	2201      	movs	r2, #1
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 0201 	and.w	r2, r3, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d017      	beq.n	8002bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d123      	bne.n	8002c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	6939      	ldr	r1, [r7, #16]
 8002c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0203 	and.w	r2, r3, #3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80a6 	beq.w	8002dac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c60:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd0 <HAL_GPIO_Init+0x2e4>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c64:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd0 <HAL_GPIO_Init+0x2e4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c6c:	4b58      	ldr	r3, [pc, #352]	@ (8002dd0 <HAL_GPIO_Init+0x2e4>)
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c78:	4a56      	ldr	r2, [pc, #344]	@ (8002dd4 <HAL_GPIO_Init+0x2e8>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ca2:	d01f      	beq.n	8002ce4 <HAL_GPIO_Init+0x1f8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd8 <HAL_GPIO_Init+0x2ec>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d019      	beq.n	8002ce0 <HAL_GPIO_Init+0x1f4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a4b      	ldr	r2, [pc, #300]	@ (8002ddc <HAL_GPIO_Init+0x2f0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_GPIO_Init+0x1f0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8002de0 <HAL_GPIO_Init+0x2f4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00d      	beq.n	8002cd8 <HAL_GPIO_Init+0x1ec>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a49      	ldr	r2, [pc, #292]	@ (8002de4 <HAL_GPIO_Init+0x2f8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <HAL_GPIO_Init+0x1e8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_GPIO_Init+0x2fc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_GPIO_Init+0x1e4>
 8002ccc:	2305      	movs	r3, #5
 8002cce:	e00a      	b.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	e008      	b.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	e006      	b.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e004      	b.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	f002 0203 	and.w	r2, r2, #3
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	4093      	lsls	r3, r2
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf6:	4937      	ldr	r1, [pc, #220]	@ (8002dd4 <HAL_GPIO_Init+0x2e8>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d04:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d28:	4a30      	ldr	r2, [pc, #192]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d52:	4a26      	ldr	r2, [pc, #152]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d58:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002da6:	4a11      	ldr	r2, [pc, #68]	@ (8002dec <HAL_GPIO_Init+0x300>)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f ae9d 	bne.w	8002afc <HAL_GPIO_Init+0x10>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	48000800 	.word	0x48000800
 8002de0:	48000c00 	.word	0x48000c00
 8002de4:	48001000 	.word	0x48001000
 8002de8:	48001400 	.word	0x48001400
 8002dec:	40010400 	.word	0x40010400

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43d9      	mvns	r1, r3
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	400b      	ands	r3, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f806 	bl	8002e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e041      	b.n	8002f30 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6852      	ldr	r2, [r2, #4]
 8002ec8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002ed4:	f7ff f9e0 	bl	8002298 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002eda:	e00f      	b.n	8002efc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002edc:	f7ff f9dc 	bl	8002298 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b31      	cmp	r3, #49	@ 0x31
 8002ee8:	d908      	bls.n	8002efc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e019      	b.n	8002f30 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e8      	bne.n	8002edc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d005      	beq.n	8002f24 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68d2      	ldr	r2, [r2, #12]
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	e004      	b.n	8002f2e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d141      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f46:	4b4b      	ldr	r3, [pc, #300]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f52:	d131      	bne.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f54:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5a:	4a46      	ldr	r2, [pc, #280]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f64:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f6c:	4a41      	ldr	r2, [pc, #260]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f74:	4b40      	ldr	r3, [pc, #256]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2232      	movs	r2, #50	@ 0x32
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	0c9b      	lsrs	r3, r3, #18
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	e002      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9e:	d102      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f2      	bne.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa6:	4b33      	ldr	r3, [pc, #204]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb2:	d158      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e057      	b.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fc8:	e04d      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd0:	d141      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fd2:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fde:	d131      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe0:	4b24      	ldr	r3, [pc, #144]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe6:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff0:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003000:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2232      	movs	r2, #50	@ 0x32
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003016:	e002      	b.n	800301e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3b01      	subs	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302a:	d102      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f2      	bne.n	8003018 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303e:	d112      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e011      	b.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800304a:	4a0a      	ldr	r2, [pc, #40]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003050:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003054:	e007      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003056:	4b07      	ldr	r3, [pc, #28]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800305e:	4a05      	ldr	r2, [pc, #20]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003060:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003064:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40007000 	.word	0x40007000
 8003078:	20000008 	.word	0x20000008
 800307c:	431bde83 	.word	0x431bde83

08003080 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800308a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800308e:	6093      	str	r3, [r2, #8]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40007000 	.word	0x40007000

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e2fe      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030be:	4b97      	ldr	r3, [pc, #604]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c8:	4b94      	ldr	r3, [pc, #592]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d102      	bne.n	80030de <HAL_RCC_OscConfig+0x3e>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b8d      	ldr	r3, [pc, #564]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e2d9      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b85      	ldr	r3, [pc, #532]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a84      	ldr	r2, [pc, #528]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b7f      	ldr	r3, [pc, #508]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7e      	ldr	r2, [pc, #504]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b7c      	ldr	r3, [pc, #496]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7b      	ldr	r2, [pc, #492]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b78      	ldr	r3, [pc, #480]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a77      	ldr	r2, [pc, #476]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b75      	ldr	r3, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a74      	ldr	r2, [pc, #464]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7ff f89e 	bl	8002298 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff f89a 	bl	8002298 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	@ 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e29e      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003172:	4b6a      	ldr	r3, [pc, #424]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7ff f88a 	bl	8002298 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff f886 	bl	8002298 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	@ 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e28a      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319a:	4b60      	ldr	r3, [pc, #384]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d075      	beq.n	80032a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4b59      	ldr	r3, [pc, #356]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c0:	4b56      	ldr	r3, [pc, #344]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_OscConfig+0x136>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_OscConfig+0x13c>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11f      	bne.n	800321c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	4b4f      	ldr	r3, [pc, #316]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x154>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e25d      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b49      	ldr	r3, [pc, #292]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	4946      	ldr	r1, [pc, #280]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003208:	4b45      	ldr	r3, [pc, #276]	@ (8003320 <HAL_RCC_OscConfig+0x280>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe f979 	bl	8001504 <HAL_InitTick>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d043      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e249      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d023      	beq.n	800326c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3c      	ldr	r2, [pc, #240]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7ff f832 	bl	8002298 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7ff f82e 	bl	8002298 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e232      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324a:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b31      	ldr	r3, [pc, #196]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	492d      	ldr	r1, [pc, #180]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
 800326a:	e01a      	b.n	80032a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326c:	4b2b      	ldr	r3, [pc, #172]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2a      	ldr	r2, [pc, #168]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003272:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7ff f80e 	bl	8002298 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7ff f80a 	bl	8002298 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e20e      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003292:	4b22      	ldr	r3, [pc, #136]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x1e0>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d041      	beq.n	8003332 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032bc:	4a17      	ldr	r2, [pc, #92]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fe ffe7 	bl	8002298 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fe ffe3 	bl	8002298 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1e7      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ef      	beq.n	80032ce <HAL_RCC_OscConfig+0x22e>
 80032ee:	e020      	b.n	8003332 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe ffca 	bl	8002298 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003306:	e00d      	b.n	8003324 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003308:	f7fe ffc6 	bl	8002298 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d906      	bls.n	8003324 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1ca      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003324:	4b8c      	ldr	r3, [pc, #560]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ea      	bne.n	8003308 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a6 	beq.w	800348c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003344:	4b84      	ldr	r3, [pc, #528]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x2b4>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x2b6>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b7f      	ldr	r3, [pc, #508]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	4a7e      	ldr	r2, [pc, #504]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	@ 0x58
 8003366:	4b7c      	ldr	r3, [pc, #496]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003376:	4b79      	ldr	r3, [pc, #484]	@ (800355c <HAL_RCC_OscConfig+0x4bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003382:	4b76      	ldr	r3, [pc, #472]	@ (800355c <HAL_RCC_OscConfig+0x4bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a75      	ldr	r2, [pc, #468]	@ (800355c <HAL_RCC_OscConfig+0x4bc>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fe ff83 	bl	8002298 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fe ff7f 	bl	8002298 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e183      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a8:	4b6c      	ldr	r3, [pc, #432]	@ (800355c <HAL_RCC_OscConfig+0x4bc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d108      	bne.n	80033ce <HAL_RCC_OscConfig+0x32e>
 80033bc:	4b66      	ldr	r3, [pc, #408]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	4a65      	ldr	r2, [pc, #404]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033cc:	e024      	b.n	8003418 <HAL_RCC_OscConfig+0x378>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d110      	bne.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033d6:	4b60      	ldr	r3, [pc, #384]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f6:	e00f      	b.n	8003418 <HAL_RCC_OscConfig+0x378>
 80033f8:	4b57      	ldr	r3, [pc, #348]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003408:	4b53      	ldr	r3, [pc, #332]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	4a52      	ldr	r2, [pc, #328]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe ff3a 	bl	8002298 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe ff36 	bl	8002298 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e138      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343e:	4b46      	ldr	r3, [pc, #280]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ed      	beq.n	8003428 <HAL_RCC_OscConfig+0x388>
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe ff23 	bl	8002298 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe ff1f 	bl	8002298 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e121      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800346c:	4b3a      	ldr	r3, [pc, #232]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ed      	bne.n	8003456 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d03c      	beq.n	8003512 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fef2 	bl	8002298 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b8:	f7fe feee 	bl	8002298 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0f2      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ca:	4b23      	ldr	r3, [pc, #140]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ef      	beq.n	80034b8 <HAL_RCC_OscConfig+0x418>
 80034d8:	e01b      	b.n	8003512 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034da:	4b1f      	ldr	r3, [pc, #124]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe fed5 	bl	8002298 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f2:	f7fe fed1 	bl	8002298 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0d5      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80c9 	beq.w	80036ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b0c      	cmp	r3, #12
 8003526:	f000 8083 	beq.w	8003630 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d15e      	bne.n	80035f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a08      	ldr	r2, [pc, #32]	@ (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fe feab 	bl	8002298 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003544:	e00c      	b.n	8003560 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fe fea7 	bl	8002298 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d905      	bls.n	8003560 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0ab      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003560:	4b55      	ldr	r3, [pc, #340]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ec      	bne.n	8003546 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356c:	4b52      	ldr	r3, [pc, #328]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	4b52      	ldr	r3, [pc, #328]	@ (80036bc <HAL_RCC_OscConfig+0x61c>)
 8003572:	4013      	ands	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6a11      	ldr	r1, [r2, #32]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800357c:	3a01      	subs	r2, #1
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003586:	0212      	lsls	r2, r2, #8
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800358e:	0852      	lsrs	r2, r2, #1
 8003590:	3a01      	subs	r2, #1
 8003592:	0552      	lsls	r2, r2, #21
 8003594:	4311      	orrs	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800359a:	0852      	lsrs	r2, r2, #1
 800359c:	3a01      	subs	r2, #1
 800359e:	0652      	lsls	r2, r2, #25
 80035a0:	4311      	orrs	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035a6:	06d2      	lsls	r2, r2, #27
 80035a8:	430a      	orrs	r2, r1
 80035aa:	4943      	ldr	r1, [pc, #268]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b41      	ldr	r3, [pc, #260]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a40      	ldr	r2, [pc, #256]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035bc:	4b3e      	ldr	r3, [pc, #248]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a3d      	ldr	r2, [pc, #244]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fe66 	bl	8002298 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fe62 	bl	8002298 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e066      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b35      	ldr	r3, [pc, #212]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x530>
 80035ee:	e05e      	b.n	80036ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a30      	ldr	r2, [pc, #192]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 80035f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe fe4c 	bl	8002298 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe fe48 	bl	8002298 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04c      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003616:	4b28      	ldr	r3, [pc, #160]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003622:	4b25      	ldr	r3, [pc, #148]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	4924      	ldr	r1, [pc, #144]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_RCC_OscConfig+0x620>)
 800362a:	4013      	ands	r3, r2
 800362c:	60cb      	str	r3, [r1, #12]
 800362e:	e03e      	b.n	80036ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e039      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800363c:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <HAL_RCC_OscConfig+0x618>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0203 	and.w	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	429a      	cmp	r2, r3
 800364e:	d12c      	bne.n	80036aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	3b01      	subs	r3, #1
 800365c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d123      	bne.n	80036aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d11b      	bne.n	80036aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d113      	bne.n	80036aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d109      	bne.n	80036aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	019f800c 	.word	0x019f800c
 80036c0:	feeefffc 	.word	0xfeeefffc

080036c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e11e      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b91      	ldr	r3, [pc, #580]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d910      	bls.n	800370c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 020f 	bic.w	r2, r3, #15
 80036f2:	498c      	ldr	r1, [pc, #560]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e106      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d073      	beq.n	8003800 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d129      	bne.n	8003774 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003720:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0f4      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003730:	f000 f9d0 	bl	8003ad4 <RCC_GetSysClockFreqFromPLLSource>
 8003734:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4a7c      	ldr	r2, [pc, #496]	@ (800392c <HAL_RCC_ClockConfig+0x268>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d93f      	bls.n	80037be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800373e:	4b7a      	ldr	r3, [pc, #488]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003752:	2b00      	cmp	r3, #0
 8003754:	d033      	beq.n	80037be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800375a:	2b00      	cmp	r3, #0
 800375c:	d12f      	bne.n	80037be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800375e:	4b72      	ldr	r3, [pc, #456]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003766:	4a70      	ldr	r2, [pc, #448]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800376c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e024      	b.n	80037be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d107      	bne.n	800378c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377c:	4b6a      	ldr	r3, [pc, #424]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0c6      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800378c:	4b66      	ldr	r3, [pc, #408]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0be      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800379c:	f000 f8ce 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4a61      	ldr	r2, [pc, #388]	@ (800392c <HAL_RCC_ClockConfig+0x268>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d909      	bls.n	80037be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b5a      	ldr	r3, [pc, #360]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4957      	ldr	r1, [pc, #348]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fe fd62 	bl	8002298 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fe fd5e 	bl	8002298 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e095      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b43      	ldr	r3, [pc, #268]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a42      	ldr	r2, [pc, #264]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800381e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003822:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003830:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003838:	4a3b      	ldr	r2, [pc, #236]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800383a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800383e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4936      	ldr	r1, [pc, #216]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
 8003852:	e008      	b.n	8003866 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	d105      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800385a:	4b33      	ldr	r3, [pc, #204]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003860:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003864:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003866:	4b2f      	ldr	r3, [pc, #188]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d21d      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003874:	4b2b      	ldr	r3, [pc, #172]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 020f 	bic.w	r2, r3, #15
 800387c:	4929      	ldr	r1, [pc, #164]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003884:	f7fe fd08 	bl	8002298 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fd04 	bl	8002298 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e03b      	b.n	800391a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_RCC_ClockConfig+0x260>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1ed      	bne.n	800388c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4917      	ldr	r1, [pc, #92]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038da:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490f      	ldr	r1, [pc, #60]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ee:	f000 f825 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490c      	ldr	r1, [pc, #48]	@ (8003930 <HAL_RCC_ClockConfig+0x26c>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_RCC_ClockConfig+0x270>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800390e:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <HAL_RCC_ClockConfig+0x274>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fdf6 	bl	8001504 <HAL_InitTick>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40022000 	.word	0x40022000
 8003928:	40021000 	.word	0x40021000
 800392c:	04c4b400 	.word	0x04c4b400
 8003930:	0801802c 	.word	0x0801802c
 8003934:	20000008 	.word	0x20000008
 8003938:	2000000c 	.word	0x2000000c

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003942:	4b2c      	ldr	r3, [pc, #176]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b04      	cmp	r3, #4
 800394c:	d102      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800394e:	4b2a      	ldr	r3, [pc, #168]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e047      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003954:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b08      	cmp	r3, #8
 800395e:	d102      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003960:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e03e      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003966:	4b23      	ldr	r3, [pc, #140]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d136      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003972:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800397c:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	3301      	adds	r3, #1
 8003988:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003990:	4a1a      	ldr	r2, [pc, #104]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800399a:	68d2      	ldr	r2, [r2, #12]
 800399c:	0a12      	lsrs	r2, r2, #8
 800399e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	e00c      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	4a10      	ldr	r2, [pc, #64]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	0a12      	lsrs	r2, r2, #8
 80039b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
      break;
 80039c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0e5b      	lsrs	r3, r3, #25
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e001      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039e4:	693b      	ldr	r3, [r7, #16]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	016e3600 	.word	0x016e3600

08003a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000008 	.word	0x20000008

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	0801803c 	.word	0x0801803c

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a48:	f7ff ffda 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0adb      	lsrs	r3, r3, #11
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0801803c 	.word	0x0801803c

08003a70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <HAL_RCC_GetClockConfig+0x60>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40022000 	.word	0x40022000

08003ad4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ada:	4b1e      	ldr	r3, [pc, #120]	@ (8003b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d10c      	bne.n	8003b12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af8:	4a17      	ldr	r2, [pc, #92]	@ (8003b58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	4a14      	ldr	r2, [pc, #80]	@ (8003b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
    break;
 8003b10:	e00c      	b.n	8003b2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b12:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	0a12      	lsrs	r2, r2, #8
 8003b20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
    break;
 8003b2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b2c:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0e5b      	lsrs	r3, r3, #25
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b46:	687b      	ldr	r3, [r7, #4]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40021000 	.word	0x40021000
 8003b58:	016e3600 	.word	0x016e3600
 8003b5c:	00f42400 	.word	0x00f42400

08003b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b68:	2300      	movs	r3, #0
 8003b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8098 	beq.w	8003cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	4b40      	ldr	r3, [pc, #256]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	4a3f      	ldr	r2, [pc, #252]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003baa:	4b3a      	ldr	r3, [pc, #232]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a39      	ldr	r2, [pc, #228]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb6:	f7fe fb6f 	bl	8002298 <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bbc:	e009      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbe:	f7fe fb6b 	bl	8002298 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d902      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	74fb      	strb	r3, [r7, #19]
        break;
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd2:	4b30      	ldr	r3, [pc, #192]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ef      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d159      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003be4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01e      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d019      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c00:	4b23      	ldr	r3, [pc, #140]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c0c:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	4a1f      	ldr	r2, [pc, #124]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c2c:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fb2b 	bl	8002298 <HAL_GetTick>
 8003c42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c44:	e00b      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe fb27 	bl	8002298 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d902      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c5c:	e006      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ec      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	74bb      	strb	r3, [r7, #18]
 8003c8e:	e005      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9c:	7c7b      	ldrb	r3, [r7, #17]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	4aa6      	ldr	r2, [pc, #664]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cba:	4ba1      	ldr	r3, [pc, #644]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f023 0203 	bic.w	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	499d      	ldr	r1, [pc, #628]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cdc:	4b98      	ldr	r3, [pc, #608]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f023 020c 	bic.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4995      	ldr	r1, [pc, #596]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cfe:	4b90      	ldr	r3, [pc, #576]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	498c      	ldr	r1, [pc, #560]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d20:	4b87      	ldr	r3, [pc, #540]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	4984      	ldr	r1, [pc, #528]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d42:	4b7f      	ldr	r3, [pc, #508]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	497b      	ldr	r1, [pc, #492]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d64:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	4973      	ldr	r1, [pc, #460]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d86:	4b6e      	ldr	r3, [pc, #440]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	496a      	ldr	r1, [pc, #424]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da8:	4b65      	ldr	r3, [pc, #404]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4962      	ldr	r1, [pc, #392]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dca:	4b5d      	ldr	r3, [pc, #372]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	4959      	ldr	r1, [pc, #356]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dec:	4b54      	ldr	r3, [pc, #336]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	4951      	ldr	r1, [pc, #324]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	4948      	ldr	r1, [pc, #288]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e30:	4b43      	ldr	r3, [pc, #268]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4940      	ldr	r1, [pc, #256]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a3a      	ldr	r2, [pc, #232]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e5a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e68:	4b35      	ldr	r3, [pc, #212]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	4932      	ldr	r1, [pc, #200]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e86:	d105      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b2d      	ldr	r3, [pc, #180]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	4924      	ldr	r1, [pc, #144]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	4916      	ldr	r1, [pc, #88]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef8:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a10      	ldr	r2, [pc, #64]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d019      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	4908      	ldr	r1, [pc, #32]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b03      	ldr	r3, [pc, #12]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a02      	ldr	r2, [pc, #8]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f50:	4b29      	ldr	r3, [pc, #164]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	4926      	ldr	r1, [pc, #152]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f70:	4b21      	ldr	r3, [pc, #132]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a20      	ldr	r2, [pc, #128]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f96:	4918      	ldr	r1, [pc, #96]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fa8:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	490a      	ldr	r1, [pc, #40]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e049      	b.n	80040a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fe6a 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 fd4c 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d001      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e054      	b.n	800416e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a26      	ldr	r2, [pc, #152]	@ (800417c <HAL_TIM_Base_Start_IT+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ee:	d01d      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a22      	ldr	r2, [pc, #136]	@ (8004180 <HAL_TIM_Base_Start_IT+0xd4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_TIM_Base_Start_IT+0xd8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <HAL_TIM_Base_Start_IT+0xdc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_TIM_Base_Start_IT+0xe0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_TIM_Base_Start_IT+0xe4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x80>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_TIM_Base_Start_IT+0xe8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d115      	bne.n	8004158 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	4b19      	ldr	r3, [pc, #100]	@ (8004198 <HAL_TIM_Base_Start_IT+0xec>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b06      	cmp	r3, #6
 800413c:	d015      	beq.n	800416a <HAL_TIM_Base_Start_IT+0xbe>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004144:	d011      	beq.n	800416a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	e008      	b.n	800416a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e000      	b.n	800416c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40013400 	.word	0x40013400
 8004190:	40014000 	.word	0x40014000
 8004194:	40015000 	.word	0x40015000
 8004198:	00010007 	.word	0x00010007

0800419c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e049      	b.n	8004242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd feb4 	bl	8001f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fc7c 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e097      	b.n	800438e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fd66 	bl	8001d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800428e:	f023 0307 	bic.w	r3, r3, #7
 8004292:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f000 fc1a 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042cc:	f023 0303 	bic.w	r3, r3, #3
 80042d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	4313      	orrs	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80042ea:	f023 030c 	bic.w	r3, r3, #12
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	4313      	orrs	r3, r2
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	011a      	lsls	r2, r3, #4
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	031b      	lsls	r3, r3, #12
 800431a:	4313      	orrs	r3, r2
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004328:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004330:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4313      	orrs	r3, r2
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01b      	beq.n	80043fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0202 	mvn.w	r2, #2
 80043ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fb5b 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 80043e6:	e005      	b.n	80043f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fb4d 	bl	8004a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fb5e 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d020      	beq.n	8004446 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01b      	beq.n	8004446 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0204 	mvn.w	r2, #4
 8004416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fb35 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 8004432:	e005      	b.n	8004440 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb27 	bl	8004a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fb38 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01b      	beq.n	8004492 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0208 	mvn.w	r2, #8
 8004462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb0f 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb01 	bl	8004a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fb12 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01b      	beq.n	80044de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f06f 0210 	mvn.w	r2, #16
 80044ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2208      	movs	r2, #8
 80044b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fae9 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 80044ca:	e005      	b.n	80044d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fadb 	bl	8004a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 faec 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0201 	mvn.w	r2, #1
 80044fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fe5b 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f001 f882 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 f87a 	bl	8005648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 faa6 	bl	8004ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0220 	mvn.w	r2, #32
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 f842 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f001 f84e 	bl	800565c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f001 f846 	bl	8005670 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f001 f83e 	bl	8005684 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 f836 	bl	8005698 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0ff      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b14      	cmp	r3, #20
 800465e:	f200 80f0 	bhi.w	8004842 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004843 	.word	0x08004843
 8004670:	08004843 	.word	0x08004843
 8004674:	08004843 	.word	0x08004843
 8004678:	080046fd 	.word	0x080046fd
 800467c:	08004843 	.word	0x08004843
 8004680:	08004843 	.word	0x08004843
 8004684:	08004843 	.word	0x08004843
 8004688:	0800473f 	.word	0x0800473f
 800468c:	08004843 	.word	0x08004843
 8004690:	08004843 	.word	0x08004843
 8004694:	08004843 	.word	0x08004843
 8004698:	0800477f 	.word	0x0800477f
 800469c:	08004843 	.word	0x08004843
 80046a0:	08004843 	.word	0x08004843
 80046a4:	08004843 	.word	0x08004843
 80046a8:	080047c1 	.word	0x080047c1
 80046ac:	08004843 	.word	0x08004843
 80046b0:	08004843 	.word	0x08004843
 80046b4:	08004843 	.word	0x08004843
 80046b8:	08004801 	.word	0x08004801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fabc 	bl	8004c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
      break;
 80046fa:	e0a5      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb36 	bl	8004d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
      break;
 800473c:	e084      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fba9 	bl	8004e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0208 	orr.w	r2, r2, #8
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	61da      	str	r2, [r3, #28]
      break;
 800477c:	e064      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fc1b 	bl	8004fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
      break;
 80047be:	e043      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fc8e 	bl	80050e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80047fe:	e023      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fcd8 	bl	80051bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800481a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800482a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004840:	e002      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIM_ConfigClockSource+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e0f6      	b.n	8004a66 <HAL_TIM_ConfigClockSource+0x20a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004896:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a6f      	ldr	r2, [pc, #444]	@ (8004a70 <HAL_TIM_ConfigClockSource+0x214>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	f000 80c1 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 80048b8:	4a6d      	ldr	r2, [pc, #436]	@ (8004a70 <HAL_TIM_ConfigClockSource+0x214>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f200 80c6 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 80048c0:	4a6c      	ldr	r2, [pc, #432]	@ (8004a74 <HAL_TIM_ConfigClockSource+0x218>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f000 80b9 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 80048c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a74 <HAL_TIM_ConfigClockSource+0x218>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f200 80be 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 80048d0:	4a69      	ldr	r2, [pc, #420]	@ (8004a78 <HAL_TIM_ConfigClockSource+0x21c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 80b1 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 80048d8:	4a67      	ldr	r2, [pc, #412]	@ (8004a78 <HAL_TIM_ConfigClockSource+0x21c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	f200 80b6 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 80048e0:	4a66      	ldr	r2, [pc, #408]	@ (8004a7c <HAL_TIM_ConfigClockSource+0x220>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	f000 80a9 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 80048e8:	4a64      	ldr	r2, [pc, #400]	@ (8004a7c <HAL_TIM_ConfigClockSource+0x220>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f200 80ae 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 80048f0:	4a63      	ldr	r2, [pc, #396]	@ (8004a80 <HAL_TIM_ConfigClockSource+0x224>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f000 80a1 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 80048f8:	4a61      	ldr	r2, [pc, #388]	@ (8004a80 <HAL_TIM_ConfigClockSource+0x224>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f200 80a6 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004900:	4a60      	ldr	r2, [pc, #384]	@ (8004a84 <HAL_TIM_ConfigClockSource+0x228>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f000 8099 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004908:	4a5e      	ldr	r2, [pc, #376]	@ (8004a84 <HAL_TIM_ConfigClockSource+0x228>)
 800490a:	4293      	cmp	r3, r2
 800490c:	f200 809e 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004910:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004914:	f000 8091 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004918:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800491c:	f200 8096 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004924:	f000 8089 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800492c:	f200 808e 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004934:	d03e      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x158>
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493a:	f200 8087 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004942:	f000 8086 	beq.w	8004a52 <HAL_TIM_ConfigClockSource+0x1f6>
 8004946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494a:	d87f      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 800494c:	2b70      	cmp	r3, #112	@ 0x70
 800494e:	d01a      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x12a>
 8004950:	2b70      	cmp	r3, #112	@ 0x70
 8004952:	d87b      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004954:	2b60      	cmp	r3, #96	@ 0x60
 8004956:	d050      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x19e>
 8004958:	2b60      	cmp	r3, #96	@ 0x60
 800495a:	d877      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 800495c:	2b50      	cmp	r3, #80	@ 0x50
 800495e:	d03c      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x17e>
 8004960:	2b50      	cmp	r3, #80	@ 0x50
 8004962:	d873      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d058      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x1be>
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d86f      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 800496c:	2b30      	cmp	r3, #48	@ 0x30
 800496e:	d064      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004970:	2b30      	cmp	r3, #48	@ 0x30
 8004972:	d86b      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d060      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004978:	2b20      	cmp	r3, #32
 800497a:	d867      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05c      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d05a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x1de>
 8004984:	e062      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	f000 fcf9 	bl	800538c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
      break;
 80049b2:	e04f      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	f000 fce2 	bl	800538c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049d6:	609a      	str	r2, [r3, #8]
      break;
 80049d8:	e03c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	461a      	mov	r2, r3
 80049e8:	f000 fc54 	bl	8005294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2150      	movs	r1, #80	@ 0x50
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fcad 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 80049f8:	e02c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 fc73 	bl	80052f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2160      	movs	r1, #96	@ 0x60
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fc9d 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8004a18:	e01c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fc34 	bl	8005294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2140      	movs	r1, #64	@ 0x40
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fc8d 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8004a38:	e00c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f000 fc84 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8004a4a:	e003      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a50:	e000      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	00100070 	.word	0x00100070
 8004a74:	00100060 	.word	0x00100060
 8004a78:	00100050 	.word	0x00100050
 8004a7c:	00100040 	.word	0x00100040
 8004a80:	00100030 	.word	0x00100030
 8004a84:	00100020 	.word	0x00100020

08004a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a4c      	ldr	r2, [pc, #304]	@ (8004c1c <TIM_Base_SetConfig+0x144>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d017      	beq.n	8004b20 <TIM_Base_SetConfig+0x48>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d013      	beq.n	8004b20 <TIM_Base_SetConfig+0x48>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a49      	ldr	r2, [pc, #292]	@ (8004c20 <TIM_Base_SetConfig+0x148>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0x48>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a48      	ldr	r2, [pc, #288]	@ (8004c24 <TIM_Base_SetConfig+0x14c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0x48>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a47      	ldr	r2, [pc, #284]	@ (8004c28 <TIM_Base_SetConfig+0x150>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0x48>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a46      	ldr	r2, [pc, #280]	@ (8004c2c <TIM_Base_SetConfig+0x154>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a45      	ldr	r2, [pc, #276]	@ (8004c30 <TIM_Base_SetConfig+0x158>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a39      	ldr	r2, [pc, #228]	@ (8004c1c <TIM_Base_SetConfig+0x144>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d023      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b40:	d01f      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a36      	ldr	r2, [pc, #216]	@ (8004c20 <TIM_Base_SetConfig+0x148>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01b      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a35      	ldr	r2, [pc, #212]	@ (8004c24 <TIM_Base_SetConfig+0x14c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d017      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a34      	ldr	r2, [pc, #208]	@ (8004c28 <TIM_Base_SetConfig+0x150>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <TIM_Base_SetConfig+0x154>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00f      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a33      	ldr	r2, [pc, #204]	@ (8004c34 <TIM_Base_SetConfig+0x15c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a32      	ldr	r2, [pc, #200]	@ (8004c38 <TIM_Base_SetConfig+0x160>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a31      	ldr	r2, [pc, #196]	@ (8004c3c <TIM_Base_SetConfig+0x164>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_Base_SetConfig+0xaa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c30 <TIM_Base_SetConfig+0x158>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d108      	bne.n	8004b94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <TIM_Base_SetConfig+0x144>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <TIM_Base_SetConfig+0x110>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <TIM_Base_SetConfig+0x154>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x110>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1a      	ldr	r2, [pc, #104]	@ (8004c34 <TIM_Base_SetConfig+0x15c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x110>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a19      	ldr	r2, [pc, #100]	@ (8004c38 <TIM_Base_SetConfig+0x160>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x110>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a18      	ldr	r2, [pc, #96]	@ (8004c3c <TIM_Base_SetConfig+0x164>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x110>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a13      	ldr	r2, [pc, #76]	@ (8004c30 <TIM_Base_SetConfig+0x158>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f023 0201 	bic.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40015000 	.word	0x40015000
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f023 0201 	bic.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f023 0302 	bic.w	r3, r3, #2
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a30      	ldr	r2, [pc, #192]	@ (8004d5c <TIM_OC1_SetConfig+0x11c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <TIM_OC1_SetConfig+0x88>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8004d60 <TIM_OC1_SetConfig+0x120>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00f      	beq.n	8004cc8 <TIM_OC1_SetConfig+0x88>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2e      	ldr	r2, [pc, #184]	@ (8004d64 <TIM_OC1_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <TIM_OC1_SetConfig+0x88>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <TIM_OC1_SetConfig+0x128>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_OC1_SetConfig+0x88>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a2c      	ldr	r2, [pc, #176]	@ (8004d6c <TIM_OC1_SetConfig+0x12c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_OC1_SetConfig+0x88>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d70 <TIM_OC1_SetConfig+0x130>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10c      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0308 	bic.w	r3, r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d5c <TIM_OC1_SetConfig+0x11c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_OC1_SetConfig+0xd2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <TIM_OC1_SetConfig+0x120>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_OC1_SetConfig+0xd2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <TIM_OC1_SetConfig+0x124>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_OC1_SetConfig+0xd2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004d68 <TIM_OC1_SetConfig+0x128>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_OC1_SetConfig+0xd2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a19      	ldr	r2, [pc, #100]	@ (8004d6c <TIM_OC1_SetConfig+0x12c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_OC1_SetConfig+0xd2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <TIM_OC1_SetConfig+0x130>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d111      	bne.n	8004d36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800
 8004d70:	40015000 	.word	0x40015000

08004d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f023 0210 	bic.w	r2, r3, #16
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0320 	bic.w	r3, r3, #32
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e84 <TIM_OC2_SetConfig+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_OC2_SetConfig+0x74>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a2b      	ldr	r2, [pc, #172]	@ (8004e88 <TIM_OC2_SetConfig+0x114>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_OC2_SetConfig+0x74>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e8c <TIM_OC2_SetConfig+0x118>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d10d      	bne.n	8004e04 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1f      	ldr	r2, [pc, #124]	@ (8004e84 <TIM_OC2_SetConfig+0x110>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <TIM_OC2_SetConfig+0xc0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <TIM_OC2_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <TIM_OC2_SetConfig+0xc0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <TIM_OC2_SetConfig+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_OC2_SetConfig+0xc0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004e94 <TIM_OC2_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_OC2_SetConfig+0xc0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a1c      	ldr	r2, [pc, #112]	@ (8004e98 <TIM_OC2_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC2_SetConfig+0xc0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	@ (8004e8c <TIM_OC2_SetConfig+0x118>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40015000 	.word	0x40015000
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800

08004e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa8 <TIM_OC3_SetConfig+0x10c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_OC3_SetConfig+0x72>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	@ (8004fac <TIM_OC3_SetConfig+0x110>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_OC3_SetConfig+0x72>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a29      	ldr	r2, [pc, #164]	@ (8004fb0 <TIM_OC3_SetConfig+0x114>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10d      	bne.n	8004f2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <TIM_OC3_SetConfig+0x10c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <TIM_OC3_SetConfig+0xbe>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <TIM_OC3_SetConfig+0x110>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_OC3_SetConfig+0xbe>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <TIM_OC3_SetConfig+0x118>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_OC3_SetConfig+0xbe>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb8 <TIM_OC3_SetConfig+0x11c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_OC3_SetConfig+0xbe>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fbc <TIM_OC3_SetConfig+0x120>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_OC3_SetConfig+0xbe>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <TIM_OC3_SetConfig+0x114>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d113      	bne.n	8004f82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40015000 	.word	0x40015000
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800

08004fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800500e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	031b      	lsls	r3, r3, #12
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <TIM_OC4_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_OC4_SetConfig+0x74>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2b      	ldr	r2, [pc, #172]	@ (80050d4 <TIM_OC4_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_OC4_SetConfig+0x74>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2a      	ldr	r2, [pc, #168]	@ (80050d8 <TIM_OC4_SetConfig+0x118>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d10d      	bne.n	8005050 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800503a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800504e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a1f      	ldr	r2, [pc, #124]	@ (80050d0 <TIM_OC4_SetConfig+0x110>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <TIM_OC4_SetConfig+0xc0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <TIM_OC4_SetConfig+0x114>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00f      	beq.n	8005080 <TIM_OC4_SetConfig+0xc0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <TIM_OC4_SetConfig+0x11c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_OC4_SetConfig+0xc0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <TIM_OC4_SetConfig+0x120>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_OC4_SetConfig+0xc0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <TIM_OC4_SetConfig+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC4_SetConfig+0xc0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a17      	ldr	r2, [pc, #92]	@ (80050d8 <TIM_OC4_SetConfig+0x118>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d113      	bne.n	80050a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005086:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800508e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	019b      	lsls	r3, r3, #6
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40013400 	.word	0x40013400
 80050d8:	40015000 	.word	0x40015000
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800

080050e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800512c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <TIM_OC5_SetConfig+0xbc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <TIM_OC5_SetConfig+0x82>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <TIM_OC5_SetConfig+0xc0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_OC5_SetConfig+0x82>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a17      	ldr	r2, [pc, #92]	@ (80051ac <TIM_OC5_SetConfig+0xc4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_OC5_SetConfig+0x82>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <TIM_OC5_SetConfig+0xc8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC5_SetConfig+0x82>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a15      	ldr	r2, [pc, #84]	@ (80051b4 <TIM_OC5_SetConfig+0xcc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC5_SetConfig+0x82>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a14      	ldr	r2, [pc, #80]	@ (80051b8 <TIM_OC5_SetConfig+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d109      	bne.n	800517e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800
 80051b8:	40015000 	.word	0x40015000

080051bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	051b      	lsls	r3, r3, #20
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1a      	ldr	r2, [pc, #104]	@ (800527c <TIM_OC6_SetConfig+0xc0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <TIM_OC6_SetConfig+0x84>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <TIM_OC6_SetConfig+0xc4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_OC6_SetConfig+0x84>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <TIM_OC6_SetConfig+0xc8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_OC6_SetConfig+0x84>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <TIM_OC6_SetConfig+0xcc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_OC6_SetConfig+0x84>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a16      	ldr	r2, [pc, #88]	@ (800528c <TIM_OC6_SetConfig+0xd0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC6_SetConfig+0x84>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <TIM_OC6_SetConfig+0xd4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800
 8005290:	40015000 	.word	0x40015000

08005294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 030a 	bic.w	r3, r3, #10
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f023 0210 	bic.w	r2, r3, #16
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800531c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800532e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	f043 0307 	orr.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e074      	b.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a34      	ldr	r2, [pc, #208]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a31      	ldr	r2, [pc, #196]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d108      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800543a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a21      	ldr	r2, [pc, #132]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d022      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005464:	d01d      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1f      	ldr	r2, [pc, #124]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d018      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1c      	ldr	r2, [pc, #112]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00e      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a15      	ldr	r2, [pc, #84]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d009      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a11      	ldr	r2, [pc, #68]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10c      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40015000 	.word	0x40015000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40014000 	.word	0x40014000

080054f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005510:	2302      	movs	r3, #2
 8005512:	e078      	b.n	8005606 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	041b      	lsls	r3, r3, #16
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005618 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	@ (800561c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d11c      	bne.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	051b      	lsls	r3, r3, #20
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40013400 	.word	0x40013400
 800561c:	40015000 	.word	0x40015000

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e042      	b.n	8005744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fc fccf 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2224      	movs	r2, #36	@ 0x24
 80056da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f806 	bl	8006708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fd07 	bl	8006110 <UART_SetConfig>
 8005702:	4603      	mov	r3, r0
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e01b      	b.n	8005744 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800571a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800572a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f885 	bl	800684c <UART_CheckIdleState>
 8005742:	4603      	mov	r3, r0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	@ 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005760:	2b20      	cmp	r3, #32
 8005762:	d167      	bne.n	8005834 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_Transmit_DMA+0x24>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e060      	b.n	8005836 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2221      	movs	r2, #33	@ 0x21
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d028      	beq.n	80057f4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a6:	4a26      	ldr	r2, [pc, #152]	@ (8005840 <HAL_UART_Transmit_DMA+0xf4>)
 80057a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ae:	4a25      	ldr	r2, [pc, #148]	@ (8005844 <HAL_UART_Transmit_DMA+0xf8>)
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057b6:	4a24      	ldr	r2, [pc, #144]	@ (8005848 <HAL_UART_Transmit_DMA+0xfc>)
 80057b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057be:	2200      	movs	r2, #0
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	4619      	mov	r1, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3328      	adds	r3, #40	@ 0x28
 80057d2:	461a      	mov	r2, r3
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	f7fc fef3 	bl	80025c0 <HAL_DMA_Start_IT>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2210      	movs	r2, #16
 80057e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e020      	b.n	8005836 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2240      	movs	r2, #64	@ 0x40
 80057fa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	613b      	str	r3, [r7, #16]
   return(result);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581c:	623a      	str	r2, [r7, #32]
 800581e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	69f9      	ldr	r1, [r7, #28]
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	61bb      	str	r3, [r7, #24]
   return(result);
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e5      	bne.n	80057fc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e000      	b.n	8005836 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005834:	2302      	movs	r3, #2
  }
}
 8005836:	4618      	mov	r0, r3
 8005838:	3728      	adds	r7, #40	@ 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08006d17 	.word	0x08006d17
 8005844:	08006db1 	.word	0x08006db1
 8005848:	08006f37 	.word	0x08006f37

0800584c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005860:	2b20      	cmp	r3, #32
 8005862:	d137      	bne.n	80058d4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_UART_Receive_DMA+0x24>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e030      	b.n	80058d6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	@ (80058e0 <HAL_UART_Receive_DMA+0x94>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d01f      	beq.n	80058c4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d018      	beq.n	80058c4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	613b      	str	r3, [r7, #16]
   return(result);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	69f9      	ldr	r1, [r7, #28]
 80058b6:	6a3a      	ldr	r2, [r7, #32]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	461a      	mov	r2, r3
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f001 f8d6 	bl	8006a7c <UART_Start_Receive_DMA>
 80058d0:	4603      	mov	r3, r0
 80058d2:	e000      	b.n	80058d6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3728      	adds	r7, #40	@ 0x28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40008000 	.word	0x40008000

080058e4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b090      	sub	sp, #64	@ 0x40
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b80      	cmp	r3, #128	@ 0x80
 8005908:	d139      	bne.n	800597e <HAL_UART_DMAStop+0x9a>
 800590a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590c:	2b21      	cmp	r3, #33	@ 0x21
 800590e:	d136      	bne.n	800597e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005926:	637b      	str	r3, [r7, #52]	@ 0x34
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3308      	adds	r3, #8
 800592e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005950:	4618      	mov	r0, r3
 8005952:	f7fc feb0 	bl	80026b6 <HAL_DMA_Abort>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005960:	4618      	mov	r0, r3
 8005962:	f7fd f817 	bl	8002994 <HAL_DMA_GetError>
 8005966:	4603      	mov	r3, r0
 8005968:	2b20      	cmp	r3, #32
 800596a:	d105      	bne.n	8005978 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2210      	movs	r2, #16
 8005970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e047      	b.n	8005a08 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 f925 	bl	8006bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005988:	2b40      	cmp	r3, #64	@ 0x40
 800598a:	d13c      	bne.n	8005a06 <HAL_UART_DMAStop+0x122>
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	2b22      	cmp	r3, #34	@ 0x22
 8005990:	d139      	bne.n	8005a06 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3308      	adds	r3, #8
 80059b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b2:	61ba      	str	r2, [r7, #24]
 80059b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	613b      	str	r3, [r7, #16]
   return(result);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e5      	bne.n	8005992 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d017      	beq.n	8005a00 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fc fe6d 	bl	80026b6 <HAL_DMA_Abort>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fc ffd3 	bl	8002994 <HAL_DMA_GetError>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d105      	bne.n	8005a00 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2210      	movs	r2, #16
 80059f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e003      	b.n	8005a08 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f922 	bl	8006c4a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3740      	adds	r7, #64	@ 0x40
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b0ba      	sub	sp, #232	@ 0xe8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a3e:	4013      	ands	r3, r2
 8005a40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11b      	bne.n	8005a84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8300 	beq.w	800607a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
      }
      return;
 8005a82:	e2fa      	b.n	800607a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8123 	beq.w	8005cd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a92:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc8 <HAL_UART_IRQHandler+0x2b8>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8005ccc <HAL_UART_IRQHandler+0x2bc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8116 	beq.w	8005cd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d011      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xc8>
 8005ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ace:	f043 0201 	orr.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <HAL_UART_IRQHandler+0xf8>
 8005ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2202      	movs	r2, #2
 8005af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afe:	f043 0204 	orr.w	r2, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d011      	beq.n	8005b38 <HAL_UART_IRQHandler+0x128>
 8005b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2204      	movs	r2, #4
 8005b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2e:	f043 0202 	orr.w	r2, r3, #2
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d105      	bne.n	8005b5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b54:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc8 <HAL_UART_IRQHandler+0x2b8>)
 8005b56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2208      	movs	r2, #8
 8005b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	f043 0208 	orr.w	r2, r3, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x196>
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9c:	f043 0220 	orr.w	r2, r3, #32
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8266 	beq.w	800607e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d013      	beq.n	8005be6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d005      	beq.n	8005c0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d054      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 f81d 	bl	8006c4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1a:	2b40      	cmp	r3, #64	@ 0x40
 8005c1c:	d146      	bne.n	8005cac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1d9      	bne.n	8005c1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7a:	4a15      	ldr	r2, [pc, #84]	@ (8005cd0 <HAL_UART_IRQHandler+0x2c0>)
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fc fd6f 	bl	8002768 <HAL_DMA_Abort_IT>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d019      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca2:	e00f      	b.n	8005cc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa1d 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005caa:	e00b      	b.n	8005cc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa19 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	e007      	b.n	8005cc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa15 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005cc2:	e1dc      	b.n	800607e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	bf00      	nop
    return;
 8005cc6:	e1da      	b.n	800607e <HAL_UART_IRQHandler+0x66e>
 8005cc8:	10000001 	.word	0x10000001
 8005ccc:	04000120 	.word	0x04000120
 8005cd0:	08006fb7 	.word	0x08006fb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f040 8170 	bne.w	8005fbe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8169 	beq.w	8005fbe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8162 	beq.w	8005fbe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b40      	cmp	r3, #64	@ 0x40
 8005d0e:	f040 80d8 	bne.w	8005ec2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80af 	beq.w	8005e88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d34:	429a      	cmp	r2, r3
 8005d36:	f080 80a7 	bcs.w	8005e88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 8087 	bne.w	8005e66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1da      	bne.n	8005d58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e1      	bne.n	8005da2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3308      	adds	r3, #8
 8005de4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e3      	bne.n	8005dde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e34:	f023 0310 	bic.w	r3, r3, #16
 8005e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e4      	bne.n	8005e24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fc fc28 	bl	80026b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f939 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e86:	e0fc      	b.n	8006082 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e92:	429a      	cmp	r2, r3
 8005e94:	f040 80f5 	bne.w	8006082 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	f040 80eb 	bne.w	8006082 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f91c 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
      return;
 8005ec0:	e0df      	b.n	8006082 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80d1 	beq.w	8006086 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80cc 	beq.w	8006086 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e4      	bne.n	8005eee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	623b      	str	r3, [r7, #32]
   return(result);
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e1      	bne.n	8005f24 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0310 	bic.w	r3, r3, #16
 8005f88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e4      	bne.n	8005f74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f89e 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fbc:	e063      	b.n	8006086 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x5d8>
 8005fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f825 	bl	8007030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fe6:	e051      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d014      	beq.n	800601e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006010:	2b00      	cmp	r3, #0
 8006012:	d03a      	beq.n	800608a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
    }
    return;
 800601c:	e035      	b.n	800608a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_UART_IRQHandler+0x62e>
 800602a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 ffcf 	bl	8006fda <UART_EndTransmit_IT>
    return;
 800603c:	e026      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <HAL_UART_IRQHandler+0x64e>
 800604a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fffe 	bl	8007058 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800605c:	e016      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006062:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <HAL_UART_IRQHandler+0x67c>
 800606a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606e:	2b00      	cmp	r3, #0
 8006070:	da0c      	bge.n	800608c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 ffe6 	bl	8007044 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006078:	e008      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
      return;
 800607a:	bf00      	nop
 800607c:	e006      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
    return;
 800607e:	bf00      	nop
 8006080:	e004      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
      return;
 8006082:	bf00      	nop
 8006084:	e002      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
      return;
 8006086:	bf00      	nop
 8006088:	e000      	b.n	800608c <HAL_UART_IRQHandler+0x67c>
    return;
 800608a:	bf00      	nop
  }
}
 800608c:	37e8      	adds	r7, #232	@ 0xe8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop

08006094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006114:	b08c      	sub	sp, #48	@ 0x30
 8006116:	af00      	add	r7, sp, #0
 8006118:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	431a      	orrs	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	431a      	orrs	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	4313      	orrs	r3, r2
 8006136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4baa      	ldr	r3, [pc, #680]	@ (80063e8 <UART_SetConfig+0x2d8>)
 8006140:	4013      	ands	r3, r2
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006148:	430b      	orrs	r3, r1
 800614a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a9f      	ldr	r2, [pc, #636]	@ (80063ec <UART_SetConfig+0x2dc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006178:	4313      	orrs	r3, r2
 800617a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006186:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006190:	430b      	orrs	r3, r1
 8006192:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	f023 010f 	bic.w	r1, r3, #15
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a90      	ldr	r2, [pc, #576]	@ (80063f0 <UART_SetConfig+0x2e0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d125      	bne.n	8006200 <UART_SetConfig+0xf0>
 80061b4:	4b8f      	ldr	r3, [pc, #572]	@ (80063f4 <UART_SetConfig+0x2e4>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d81a      	bhi.n	80061f8 <UART_SetConfig+0xe8>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <UART_SetConfig+0xb8>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061e9 	.word	0x080061e9
 80061d0:	080061e1 	.word	0x080061e1
 80061d4:	080061f1 	.word	0x080061f1
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061de:	e116      	b.n	800640e <UART_SetConfig+0x2fe>
 80061e0:	2302      	movs	r3, #2
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	e112      	b.n	800640e <UART_SetConfig+0x2fe>
 80061e8:	2304      	movs	r3, #4
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ee:	e10e      	b.n	800640e <UART_SetConfig+0x2fe>
 80061f0:	2308      	movs	r3, #8
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f6:	e10a      	b.n	800640e <UART_SetConfig+0x2fe>
 80061f8:	2310      	movs	r3, #16
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e106      	b.n	800640e <UART_SetConfig+0x2fe>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a7c      	ldr	r2, [pc, #496]	@ (80063f8 <UART_SetConfig+0x2e8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d138      	bne.n	800627c <UART_SetConfig+0x16c>
 800620a:	4b7a      	ldr	r3, [pc, #488]	@ (80063f4 <UART_SetConfig+0x2e4>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f003 030c 	and.w	r3, r3, #12
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d82d      	bhi.n	8006274 <UART_SetConfig+0x164>
 8006218:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <UART_SetConfig+0x110>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006255 	.word	0x08006255
 8006224:	08006275 	.word	0x08006275
 8006228:	08006275 	.word	0x08006275
 800622c:	08006275 	.word	0x08006275
 8006230:	08006265 	.word	0x08006265
 8006234:	08006275 	.word	0x08006275
 8006238:	08006275 	.word	0x08006275
 800623c:	08006275 	.word	0x08006275
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006275 	.word	0x08006275
 8006248:	08006275 	.word	0x08006275
 800624c:	08006275 	.word	0x08006275
 8006250:	0800626d 	.word	0x0800626d
 8006254:	2300      	movs	r3, #0
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625a:	e0d8      	b.n	800640e <UART_SetConfig+0x2fe>
 800625c:	2302      	movs	r3, #2
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006262:	e0d4      	b.n	800640e <UART_SetConfig+0x2fe>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626a:	e0d0      	b.n	800640e <UART_SetConfig+0x2fe>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006272:	e0cc      	b.n	800640e <UART_SetConfig+0x2fe>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627a:	e0c8      	b.n	800640e <UART_SetConfig+0x2fe>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a5e      	ldr	r2, [pc, #376]	@ (80063fc <UART_SetConfig+0x2ec>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d125      	bne.n	80062d2 <UART_SetConfig+0x1c2>
 8006286:	4b5b      	ldr	r3, [pc, #364]	@ (80063f4 <UART_SetConfig+0x2e4>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006290:	2b30      	cmp	r3, #48	@ 0x30
 8006292:	d016      	beq.n	80062c2 <UART_SetConfig+0x1b2>
 8006294:	2b30      	cmp	r3, #48	@ 0x30
 8006296:	d818      	bhi.n	80062ca <UART_SetConfig+0x1ba>
 8006298:	2b20      	cmp	r3, #32
 800629a:	d00a      	beq.n	80062b2 <UART_SetConfig+0x1a2>
 800629c:	2b20      	cmp	r3, #32
 800629e:	d814      	bhi.n	80062ca <UART_SetConfig+0x1ba>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <UART_SetConfig+0x19a>
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d008      	beq.n	80062ba <UART_SetConfig+0x1aa>
 80062a8:	e00f      	b.n	80062ca <UART_SetConfig+0x1ba>
 80062aa:	2300      	movs	r3, #0
 80062ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b0:	e0ad      	b.n	800640e <UART_SetConfig+0x2fe>
 80062b2:	2302      	movs	r3, #2
 80062b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b8:	e0a9      	b.n	800640e <UART_SetConfig+0x2fe>
 80062ba:	2304      	movs	r3, #4
 80062bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c0:	e0a5      	b.n	800640e <UART_SetConfig+0x2fe>
 80062c2:	2308      	movs	r3, #8
 80062c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c8:	e0a1      	b.n	800640e <UART_SetConfig+0x2fe>
 80062ca:	2310      	movs	r3, #16
 80062cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d0:	e09d      	b.n	800640e <UART_SetConfig+0x2fe>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006400 <UART_SetConfig+0x2f0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d125      	bne.n	8006328 <UART_SetConfig+0x218>
 80062dc:	4b45      	ldr	r3, [pc, #276]	@ (80063f4 <UART_SetConfig+0x2e4>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80062e8:	d016      	beq.n	8006318 <UART_SetConfig+0x208>
 80062ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80062ec:	d818      	bhi.n	8006320 <UART_SetConfig+0x210>
 80062ee:	2b80      	cmp	r3, #128	@ 0x80
 80062f0:	d00a      	beq.n	8006308 <UART_SetConfig+0x1f8>
 80062f2:	2b80      	cmp	r3, #128	@ 0x80
 80062f4:	d814      	bhi.n	8006320 <UART_SetConfig+0x210>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <UART_SetConfig+0x1f0>
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d008      	beq.n	8006310 <UART_SetConfig+0x200>
 80062fe:	e00f      	b.n	8006320 <UART_SetConfig+0x210>
 8006300:	2300      	movs	r3, #0
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006306:	e082      	b.n	800640e <UART_SetConfig+0x2fe>
 8006308:	2302      	movs	r3, #2
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e07e      	b.n	800640e <UART_SetConfig+0x2fe>
 8006310:	2304      	movs	r3, #4
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e07a      	b.n	800640e <UART_SetConfig+0x2fe>
 8006318:	2308      	movs	r3, #8
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631e:	e076      	b.n	800640e <UART_SetConfig+0x2fe>
 8006320:	2310      	movs	r3, #16
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006326:	e072      	b.n	800640e <UART_SetConfig+0x2fe>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a35      	ldr	r2, [pc, #212]	@ (8006404 <UART_SetConfig+0x2f4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d12a      	bne.n	8006388 <UART_SetConfig+0x278>
 8006332:	4b30      	ldr	r3, [pc, #192]	@ (80063f4 <UART_SetConfig+0x2e4>)
 8006334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006340:	d01a      	beq.n	8006378 <UART_SetConfig+0x268>
 8006342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006346:	d81b      	bhi.n	8006380 <UART_SetConfig+0x270>
 8006348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800634c:	d00c      	beq.n	8006368 <UART_SetConfig+0x258>
 800634e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006352:	d815      	bhi.n	8006380 <UART_SetConfig+0x270>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <UART_SetConfig+0x250>
 8006358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800635c:	d008      	beq.n	8006370 <UART_SetConfig+0x260>
 800635e:	e00f      	b.n	8006380 <UART_SetConfig+0x270>
 8006360:	2300      	movs	r3, #0
 8006362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006366:	e052      	b.n	800640e <UART_SetConfig+0x2fe>
 8006368:	2302      	movs	r3, #2
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636e:	e04e      	b.n	800640e <UART_SetConfig+0x2fe>
 8006370:	2304      	movs	r3, #4
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006376:	e04a      	b.n	800640e <UART_SetConfig+0x2fe>
 8006378:	2308      	movs	r3, #8
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637e:	e046      	b.n	800640e <UART_SetConfig+0x2fe>
 8006380:	2310      	movs	r3, #16
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006386:	e042      	b.n	800640e <UART_SetConfig+0x2fe>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a17      	ldr	r2, [pc, #92]	@ (80063ec <UART_SetConfig+0x2dc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d13a      	bne.n	8006408 <UART_SetConfig+0x2f8>
 8006392:	4b18      	ldr	r3, [pc, #96]	@ (80063f4 <UART_SetConfig+0x2e4>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006398:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800639c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063a0:	d01a      	beq.n	80063d8 <UART_SetConfig+0x2c8>
 80063a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063a6:	d81b      	bhi.n	80063e0 <UART_SetConfig+0x2d0>
 80063a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ac:	d00c      	beq.n	80063c8 <UART_SetConfig+0x2b8>
 80063ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b2:	d815      	bhi.n	80063e0 <UART_SetConfig+0x2d0>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <UART_SetConfig+0x2b0>
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063bc:	d008      	beq.n	80063d0 <UART_SetConfig+0x2c0>
 80063be:	e00f      	b.n	80063e0 <UART_SetConfig+0x2d0>
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	e022      	b.n	800640e <UART_SetConfig+0x2fe>
 80063c8:	2302      	movs	r3, #2
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ce:	e01e      	b.n	800640e <UART_SetConfig+0x2fe>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d6:	e01a      	b.n	800640e <UART_SetConfig+0x2fe>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063de:	e016      	b.n	800640e <UART_SetConfig+0x2fe>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e6:	e012      	b.n	800640e <UART_SetConfig+0x2fe>
 80063e8:	cfff69f3 	.word	0xcfff69f3
 80063ec:	40008000 	.word	0x40008000
 80063f0:	40013800 	.word	0x40013800
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40004400 	.word	0x40004400
 80063fc:	40004800 	.word	0x40004800
 8006400:	40004c00 	.word	0x40004c00
 8006404:	40005000 	.word	0x40005000
 8006408:	2310      	movs	r3, #16
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4aae      	ldr	r2, [pc, #696]	@ (80066cc <UART_SetConfig+0x5bc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	f040 8097 	bne.w	8006548 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800641a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800641e:	2b08      	cmp	r3, #8
 8006420:	d823      	bhi.n	800646a <UART_SetConfig+0x35a>
 8006422:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <UART_SetConfig+0x318>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	0800644d 	.word	0x0800644d
 800642c:	0800646b 	.word	0x0800646b
 8006430:	08006455 	.word	0x08006455
 8006434:	0800646b 	.word	0x0800646b
 8006438:	0800645b 	.word	0x0800645b
 800643c:	0800646b 	.word	0x0800646b
 8006440:	0800646b 	.word	0x0800646b
 8006444:	0800646b 	.word	0x0800646b
 8006448:	08006463 	.word	0x08006463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fd fae4 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006452:	e010      	b.n	8006476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006454:	4b9e      	ldr	r3, [pc, #632]	@ (80066d0 <UART_SetConfig+0x5c0>)
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006458:	e00d      	b.n	8006476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645a:	f7fd fa6f 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800645e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006460:	e009      	b.n	8006476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006468:	e005      	b.n	8006476 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8130 	beq.w	80066de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	4a94      	ldr	r2, [pc, #592]	@ (80066d4 <UART_SetConfig+0x5c4>)
 8006484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006488:	461a      	mov	r2, r3
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006490:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d305      	bcc.n	80064ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d903      	bls.n	80064b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064b4:	e113      	b.n	80066de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	2200      	movs	r2, #0
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	60fa      	str	r2, [r7, #12]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c2:	4a84      	ldr	r2, [pc, #528]	@ (80066d4 <UART_SetConfig+0x5c4>)
 80064c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2200      	movs	r2, #0
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064d8:	f7f9 ff5a 	bl	8000390 <__aeabi_uldivmod>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	020b      	lsls	r3, r1, #8
 80064ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064f2:	0202      	lsls	r2, r0, #8
 80064f4:	6979      	ldr	r1, [r7, #20]
 80064f6:	6849      	ldr	r1, [r1, #4]
 80064f8:	0849      	lsrs	r1, r1, #1
 80064fa:	2000      	movs	r0, #0
 80064fc:	460c      	mov	r4, r1
 80064fe:	4605      	mov	r5, r0
 8006500:	eb12 0804 	adds.w	r8, r2, r4
 8006504:	eb43 0905 	adc.w	r9, r3, r5
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	469a      	mov	sl, r3
 8006510:	4693      	mov	fp, r2
 8006512:	4652      	mov	r2, sl
 8006514:	465b      	mov	r3, fp
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7f9 ff39 	bl	8000390 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4613      	mov	r3, r2
 8006524:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800652c:	d308      	bcc.n	8006540 <UART_SetConfig+0x430>
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006534:	d204      	bcs.n	8006540 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6a3a      	ldr	r2, [r7, #32]
 800653c:	60da      	str	r2, [r3, #12]
 800653e:	e0ce      	b.n	80066de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006546:	e0ca      	b.n	80066de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006550:	d166      	bne.n	8006620 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006552:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006556:	2b08      	cmp	r3, #8
 8006558:	d827      	bhi.n	80065aa <UART_SetConfig+0x49a>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <UART_SetConfig+0x450>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006585 	.word	0x08006585
 8006564:	0800658d 	.word	0x0800658d
 8006568:	08006595 	.word	0x08006595
 800656c:	080065ab 	.word	0x080065ab
 8006570:	0800659b 	.word	0x0800659b
 8006574:	080065ab 	.word	0x080065ab
 8006578:	080065ab 	.word	0x080065ab
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fd fa48 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800658a:	e014      	b.n	80065b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fd fa5a 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8006590:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006592:	e010      	b.n	80065b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b4e      	ldr	r3, [pc, #312]	@ (80066d0 <UART_SetConfig+0x5c0>)
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006598:	e00d      	b.n	80065b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fd f9cf 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800659e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065a0:	e009      	b.n	80065b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8090 	beq.w	80066de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	4a44      	ldr	r2, [pc, #272]	@ (80066d4 <UART_SetConfig+0x5c4>)
 80065c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d0:	005a      	lsls	r2, r3, #1
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	441a      	add	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d916      	bls.n	8006618 <UART_SetConfig+0x508>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f0:	d212      	bcs.n	8006618 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f023 030f 	bic.w	r3, r3, #15
 80065fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	b29a      	uxth	r2, r3
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	4313      	orrs	r3, r2
 800660c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	8bfa      	ldrh	r2, [r7, #30]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	e062      	b.n	80066de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800661e:	e05e      	b.n	80066de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006620:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006624:	2b08      	cmp	r3, #8
 8006626:	d828      	bhi.n	800667a <UART_SetConfig+0x56a>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <UART_SetConfig+0x520>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006655 	.word	0x08006655
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006665 	.word	0x08006665
 800663c:	0800667b 	.word	0x0800667b
 8006640:	0800666b 	.word	0x0800666b
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800667b 	.word	0x0800667b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fd f9e0 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8006658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800665a:	e014      	b.n	8006686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7fd f9f2 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8006660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006662:	e010      	b.n	8006686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <UART_SetConfig+0x5c0>)
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006668:	e00d      	b.n	8006686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fd f967 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800666e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006670:	e009      	b.n	8006686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006678:	e005      	b.n	8006686 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006684:	bf00      	nop
    }

    if (pclk != 0U)
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d028      	beq.n	80066de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	4a10      	ldr	r2, [pc, #64]	@ (80066d4 <UART_SetConfig+0x5c4>)
 8006692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006696:	461a      	mov	r2, r3
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	fbb3 f2f2 	udiv	r2, r3, r2
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	441a      	add	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d910      	bls.n	80066d8 <UART_SetConfig+0x5c8>
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066bc:	d20c      	bcs.n	80066d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60da      	str	r2, [r3, #12]
 80066c8:	e009      	b.n	80066de <UART_SetConfig+0x5ce>
 80066ca:	bf00      	nop
 80066cc:	40008000 	.word	0x40008000
 80066d0:	00f42400 	.word	0x00f42400
 80066d4:	08018044 	.word	0x08018044
      }
      else
      {
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2200      	movs	r2, #0
 80066f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2200      	movs	r2, #0
 80066f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3730      	adds	r7, #48	@ 0x30
 8006702:	46bd      	mov	sp, r7
 8006704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01a      	beq.n	800681e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006806:	d10a      	bne.n	800681e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	605a      	str	r2, [r3, #4]
  }
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b098      	sub	sp, #96	@ 0x60
 8006850:	af02      	add	r7, sp, #8
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800685c:	f7fb fd1c 	bl	8002298 <HAL_GetTick>
 8006860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d12f      	bne.n	80068d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f88e 	bl	80069a0 <UART_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d022      	beq.n	80068d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689e:	653b      	str	r3, [r7, #80]	@ 0x50
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e063      	b.n	8006998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d149      	bne.n	8006972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e6:	2200      	movs	r2, #0
 80068e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f857 	bl	80069a0 <UART_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d03c      	beq.n	8006972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	623b      	str	r3, [r7, #32]
   return(result);
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800690c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006916:	633b      	str	r3, [r7, #48]	@ 0x30
 8006918:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800691c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e6      	bne.n	80068f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	60fb      	str	r3, [r7, #12]
   return(result);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800694a:	61fa      	str	r2, [r7, #28]
 800694c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	69b9      	ldr	r1, [r7, #24]
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	617b      	str	r3, [r7, #20]
   return(result);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e5      	bne.n	800692a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e012      	b.n	8006998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3758      	adds	r7, #88	@ 0x58
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b0:	e04f      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069b8:	d04b      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ba:	f7fb fc6d 	bl	8002298 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d302      	bcc.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e04e      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d037      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b80      	cmp	r3, #128	@ 0x80
 80069e6:	d034      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b40      	cmp	r3, #64	@ 0x40
 80069ec:	d031      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d110      	bne.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2208      	movs	r2, #8
 8006a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f920 	bl	8006c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e029      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2c:	d111      	bne.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f906 	bl	8006c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e00f      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	bf0c      	ite	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	2300      	movne	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d0a0      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b096      	sub	sp, #88	@ 0x58
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2222      	movs	r2, #34	@ 0x22
 8006aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d02d      	beq.n	8006b0e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab8:	4a40      	ldr	r2, [pc, #256]	@ (8006bbc <UART_Start_Receive_DMA+0x140>)
 8006aba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc0 <UART_Start_Receive_DMA+0x144>)
 8006ac4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006acc:	4a3d      	ldr	r2, [pc, #244]	@ (8006bc4 <UART_Start_Receive_DMA+0x148>)
 8006ace:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3324      	adds	r3, #36	@ 0x24
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aec:	461a      	mov	r2, r3
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	f7fb fd66 	bl	80025c0 <HAL_DMA_Start_IT>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2210      	movs	r2, #16
 8006afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e051      	b.n	8006bb2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d018      	beq.n	8006b48 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b36:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b68:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b9c:	623a      	str	r2, [r7, #32]
 8006b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	69f9      	ldr	r1, [r7, #28]
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3758      	adds	r7, #88	@ 0x58
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	08006dcd 	.word	0x08006dcd
 8006bc0:	08006ef9 	.word	0x08006ef9
 8006bc4:	08006f37 	.word	0x08006f37

08006bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b08f      	sub	sp, #60	@ 0x3c
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bf0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e6      	bne.n	8006bd0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c22:	61ba      	str	r2, [r7, #24]
 8006c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006c3e:	bf00      	nop
 8006c40:	373c      	adds	r7, #60	@ 0x3c
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b095      	sub	sp, #84	@ 0x54
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e3      	bne.n	8006c84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d118      	bne.n	8006cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0310 	bic.w	r3, r3, #16
 8006cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d0a:	bf00      	nop
 8006d0c:	3754      	adds	r7, #84	@ 0x54
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b090      	sub	sp, #64	@ 0x40
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d137      	bne.n	8006da2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	623b      	str	r3, [r7, #32]
   return(result);
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e5      	bne.n	8006d3a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006da0:	e002      	b.n	8006da8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006da2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006da4:	f7ff f976 	bl	8006094 <HAL_UART_TxCpltCallback>
}
 8006da8:	bf00      	nop
 8006daa:	3740      	adds	r7, #64	@ 0x40
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7ff f972 	bl	80060a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b09c      	sub	sp, #112	@ 0x70
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d171      	bne.n	8006ecc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e6      	bne.n	8006df0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e42:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	623b      	str	r3, [r7, #32]
   return(result);
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e76:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e5      	bne.n	8006e56 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d118      	bne.n	8006ecc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0310 	bic.w	r3, r3, #16
 8006eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ece:	2200      	movs	r2, #0
 8006ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d107      	bne.n	8006eea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ee4:	f7ff f908 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ee8:	e002      	b.n	8006ef0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006eea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006eec:	f7ff f8e6 	bl	80060bc <HAL_UART_RxCpltCallback>
}
 8006ef0:	bf00      	nop
 8006ef2:	3770      	adds	r7, #112	@ 0x70
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d109      	bne.n	8006f28 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff f8e9 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f26:	e002      	b.n	8006f2e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff f8d1 	bl	80060d0 <HAL_UART_RxHalfCpltCallback>
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f42:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5e:	2b80      	cmp	r3, #128	@ 0x80
 8006f60:	d109      	bne.n	8006f76 <UART_DMAError+0x40>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b21      	cmp	r3, #33	@ 0x21
 8006f66:	d106      	bne.n	8006f76 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006f70:	6978      	ldr	r0, [r7, #20]
 8006f72:	f7ff fe29 	bl	8006bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f80:	2b40      	cmp	r3, #64	@ 0x40
 8006f82:	d109      	bne.n	8006f98 <UART_DMAError+0x62>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b22      	cmp	r3, #34	@ 0x22
 8006f88:	d106      	bne.n	8006f98 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f7ff fe59 	bl	8006c4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9e:	f043 0210 	orr.w	r2, r3, #16
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa8:	6978      	ldr	r0, [r7, #20]
 8006faa:	f7ff f89b 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fae:	bf00      	nop
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff f889 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b088      	sub	sp, #32
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6979      	ldr	r1, [r7, #20]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	613b      	str	r3, [r7, #16]
   return(result);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e6      	bne.n	8006fe2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff f836 	bl	8006094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007028:	bf00      	nop
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_UARTEx_DisableFifoMode+0x16>
 800707e:	2302      	movs	r3, #2
 8007080:	e027      	b.n	80070d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2224      	movs	r2, #36	@ 0x24
 800708e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0201 	bic.w	r2, r2, #1
 80070a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e02d      	b.n	8007152 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2224      	movs	r2, #36	@ 0x24
 8007102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f850 	bl	80071d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800716e:	2302      	movs	r3, #2
 8007170:	e02d      	b.n	80071ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	@ 0x24
 800717e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f812 	bl	80071d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d108      	bne.n	80071fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071f8:	e031      	b.n	800725e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071fa:	2308      	movs	r3, #8
 80071fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071fe:	2308      	movs	r3, #8
 8007200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	0e5b      	lsrs	r3, r3, #25
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	0f5b      	lsrs	r3, r3, #29
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	7b3a      	ldrb	r2, [r7, #12]
 8007226:	4911      	ldr	r1, [pc, #68]	@ (800726c <UARTEx_SetNbDataToProcess+0x94>)
 8007228:	5c8a      	ldrb	r2, [r1, r2]
 800722a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800722e:	7b3a      	ldrb	r2, [r7, #12]
 8007230:	490f      	ldr	r1, [pc, #60]	@ (8007270 <UARTEx_SetNbDataToProcess+0x98>)
 8007232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007234:	fb93 f3f2 	sdiv	r3, r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	7b7a      	ldrb	r2, [r7, #13]
 8007244:	4909      	ldr	r1, [pc, #36]	@ (800726c <UARTEx_SetNbDataToProcess+0x94>)
 8007246:	5c8a      	ldrb	r2, [r1, r2]
 8007248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800724c:	7b7a      	ldrb	r2, [r7, #13]
 800724e:	4908      	ldr	r1, [pc, #32]	@ (8007270 <UARTEx_SetNbDataToProcess+0x98>)
 8007250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007252:	fb93 f3f2 	sdiv	r3, r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	0801805c 	.word	0x0801805c
 8007270:	08018064 	.word	0x08018064

08007274 <__NVIC_SetPriority>:
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007284:	2b00      	cmp	r3, #0
 8007286:	db0a      	blt.n	800729e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	490c      	ldr	r1, [pc, #48]	@ (80072c0 <__NVIC_SetPriority+0x4c>)
 800728e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007292:	0112      	lsls	r2, r2, #4
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	440b      	add	r3, r1
 8007298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800729c:	e00a      	b.n	80072b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	4908      	ldr	r1, [pc, #32]	@ (80072c4 <__NVIC_SetPriority+0x50>)
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	3b04      	subs	r3, #4
 80072ac:	0112      	lsls	r2, r2, #4
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	440b      	add	r3, r1
 80072b2:	761a      	strb	r2, [r3, #24]
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	e000e100 	.word	0xe000e100
 80072c4:	e000ed00 	.word	0xe000ed00

080072c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072cc:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <SysTick_Handler+0x1c>)
 80072ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072d0:	f001 fd40 	bl	8008d54 <xTaskGetSchedulerState>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d001      	beq.n	80072de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072da:	f002 fb35 	bl	8009948 <xPortSysTickHandler>
  }
}
 80072de:	bf00      	nop
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	e000e010 	.word	0xe000e010

080072e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072ec:	2100      	movs	r1, #0
 80072ee:	f06f 0004 	mvn.w	r0, #4
 80072f2:	f7ff ffbf 	bl	8007274 <__NVIC_SetPriority>
#endif
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007302:	f3ef 8305 	mrs	r3, IPSR
 8007306:	603b      	str	r3, [r7, #0]
  return(result);
 8007308:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800730e:	f06f 0305 	mvn.w	r3, #5
 8007312:	607b      	str	r3, [r7, #4]
 8007314:	e00c      	b.n	8007330 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007316:	4b0a      	ldr	r3, [pc, #40]	@ (8007340 <osKernelInitialize+0x44>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800731e:	4b08      	ldr	r3, [pc, #32]	@ (8007340 <osKernelInitialize+0x44>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007324:	2300      	movs	r3, #0
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	e002      	b.n	8007330 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800732a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800732e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007330:	687b      	ldr	r3, [r7, #4]
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20004918 	.word	0x20004918

08007344 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800734a:	f3ef 8305 	mrs	r3, IPSR
 800734e:	603b      	str	r3, [r7, #0]
  return(result);
 8007350:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007356:	f06f 0305 	mvn.w	r3, #5
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	e010      	b.n	8007380 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <osKernelStart+0x48>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d109      	bne.n	800737a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007366:	f7ff ffbf 	bl	80072e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800736a:	4b08      	ldr	r3, [pc, #32]	@ (800738c <osKernelStart+0x48>)
 800736c:	2202      	movs	r2, #2
 800736e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007370:	f001 f87a 	bl	8008468 <vTaskStartScheduler>
      stat = osOK;
 8007374:	2300      	movs	r3, #0
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	e002      	b.n	8007380 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800737a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800737e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007380:	687b      	ldr	r3, [r7, #4]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20004918 	.word	0x20004918

08007390 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	@ 0x38
 8007394:	af04      	add	r7, sp, #16
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a0:	f3ef 8305 	mrs	r3, IPSR
 80073a4:	617b      	str	r3, [r7, #20]
  return(result);
 80073a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d17e      	bne.n	80074aa <osThreadNew+0x11a>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d07b      	beq.n	80074aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073b2:	2380      	movs	r3, #128	@ 0x80
 80073b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073b6:	2318      	movs	r3, #24
 80073b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d045      	beq.n	8007456 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <osThreadNew+0x48>
        name = attr->name;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <osThreadNew+0x6e>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b38      	cmp	r3, #56	@ 0x38
 80073f0:	d805      	bhi.n	80073fe <osThreadNew+0x6e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <osThreadNew+0x72>
        return (NULL);
 80073fe:	2300      	movs	r3, #0
 8007400:	e054      	b.n	80074ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	089b      	lsrs	r3, r3, #2
 8007410:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <osThreadNew+0xa8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007420:	d90a      	bls.n	8007438 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007426:	2b00      	cmp	r3, #0
 8007428:	d006      	beq.n	8007438 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <osThreadNew+0xa8>
        mem = 1;
 8007432:	2301      	movs	r3, #1
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e010      	b.n	800745a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10c      	bne.n	800745a <osThreadNew+0xca>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d108      	bne.n	800745a <osThreadNew+0xca>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d104      	bne.n	800745a <osThreadNew+0xca>
          mem = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	e001      	b.n	800745a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d110      	bne.n	8007482 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007468:	9202      	str	r2, [sp, #8]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fe1a 	bl	80080b0 <xTaskCreateStatic>
 800747c:	4603      	mov	r3, r0
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	e013      	b.n	80074aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d110      	bne.n	80074aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	b29a      	uxth	r2, r3
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fe68 	bl	8008170 <xTaskCreate>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d001      	beq.n	80074aa <osThreadNew+0x11a>
            hTask = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074aa:	693b      	ldr	r3, [r7, #16]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3728      	adds	r7, #40	@ 0x28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074bc:	f3ef 8305 	mrs	r3, IPSR
 80074c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80074c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <osDelay+0x1c>
    stat = osErrorISR;
 80074c8:	f06f 0305 	mvn.w	r3, #5
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e007      	b.n	80074e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 ff8e 	bl	80083fc <vTaskDelay>
    }
  }

  return (stat);
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a07      	ldr	r2, [pc, #28]	@ (8007518 <vApplicationGetIdleTaskMemory+0x2c>)
 80074fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a06      	ldr	r2, [pc, #24]	@ (800751c <vApplicationGetIdleTaskMemory+0x30>)
 8007502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2280      	movs	r2, #128	@ 0x80
 8007508:	601a      	str	r2, [r3, #0]
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	2000491c 	.word	0x2000491c
 800751c:	20004978 	.word	0x20004978

08007520 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a07      	ldr	r2, [pc, #28]	@ (800754c <vApplicationGetTimerTaskMemory+0x2c>)
 8007530:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4a06      	ldr	r2, [pc, #24]	@ (8007550 <vApplicationGetTimerTaskMemory+0x30>)
 8007536:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800753e:	601a      	str	r2, [r3, #0]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20004b78 	.word	0x20004b78
 8007550:	20004bd4 	.word	0x20004bd4

08007554 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f103 0208 	add.w	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800756c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f103 0208 	add.w	r2, r3, #8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f103 0208 	add.w	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800760c:	d103      	bne.n	8007616 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e00c      	b.n	8007630 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3308      	adds	r3, #8
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e002      	b.n	8007624 <vListInsert+0x2e>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d2f6      	bcs.n	800761e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6892      	ldr	r2, [r2, #8]
 800767e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6852      	ldr	r2, [r2, #4]
 8007688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d103      	bne.n	800769c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	1e5a      	subs	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <xQueueGenericReset+0x2c>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60bb      	str	r3, [r7, #8]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076e8:	f002 f89e 	bl	8009828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f4:	68f9      	ldr	r1, [r7, #12]
 80076f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	441a      	add	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007718:	3b01      	subs	r3, #1
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	441a      	add	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	22ff      	movs	r2, #255	@ 0xff
 800772c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	22ff      	movs	r2, #255	@ 0xff
 8007734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d114      	bne.n	8007768 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01a      	beq.n	800777c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3310      	adds	r3, #16
 800774a:	4618      	mov	r0, r3
 800774c:	f001 f91a 	bl	8008984 <xTaskRemoveFromEventList>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <xQueueGenericReset+0xd0>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	e009      	b.n	800777c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3310      	adds	r3, #16
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fef1 	bl	8007554 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3324      	adds	r3, #36	@ 0x24
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff feec 	bl	8007554 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800777c:	f002 f886 	bl	800988c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007780:	2301      	movs	r3, #1
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08e      	sub	sp, #56	@ 0x38
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10b      	bne.n	80077bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	e7fd      	b.n	80077b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <xQueueGenericCreateStatic+0x56>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xQueueGenericCreateStatic+0x5a>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <xQueueGenericCreateStatic+0x5c>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10b      	bne.n	8007808 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	623b      	str	r3, [r7, #32]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <xQueueGenericCreateStatic+0x84>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <xQueueGenericCreateStatic+0x88>
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <xQueueGenericCreateStatic+0x8a>
 8007818:	2300      	movs	r3, #0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	61fb      	str	r3, [r7, #28]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007836:	2350      	movs	r3, #80	@ 0x50
 8007838:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b50      	cmp	r3, #80	@ 0x50
 800783e:	d00b      	beq.n	8007858 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	61bb      	str	r3, [r7, #24]
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	e7fd      	b.n	8007854 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007858:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800785e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00d      	beq.n	8007880 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800786c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f805 	bl	800788a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007882:	4618      	mov	r0, r3
 8007884:	3730      	adds	r7, #48	@ 0x30
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e002      	b.n	80078ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078b8:	2101      	movs	r1, #1
 80078ba:	69b8      	ldr	r0, [r7, #24]
 80078bc:	f7ff fefe 	bl	80076bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08e      	sub	sp, #56	@ 0x38
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078de:	2300      	movs	r3, #0
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <xQueueGenericSend+0x34>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <xQueueGenericSend+0x42>
 800790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <xQueueGenericSend+0x46>
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <xQueueGenericSend+0x48>
 8007916:	2300      	movs	r3, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xQueueGenericSend+0x64>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d103      	bne.n	8007942 <xQueueGenericSend+0x72>
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <xQueueGenericSend+0x76>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <xQueueGenericSend+0x78>
 8007946:	2300      	movs	r3, #0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <xQueueGenericSend+0x94>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	623b      	str	r3, [r7, #32]
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007964:	f001 f9f6 	bl	8008d54 <xTaskGetSchedulerState>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <xQueueGenericSend+0xa4>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <xQueueGenericSend+0xa8>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <xQueueGenericSend+0xaa>
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <xQueueGenericSend+0xc6>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	61fb      	str	r3, [r7, #28]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007996:	f001 ff47 	bl	8009828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <xQueueGenericSend+0xdc>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d129      	bne.n	8007a00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079b2:	f000 fa0f 	bl	8007dd4 <prvCopyDataToQueue>
 80079b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d010      	beq.n	80079e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	3324      	adds	r3, #36	@ 0x24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 ffdd 	bl	8008984 <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079d0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad0 <xQueueGenericSend+0x200>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	e00a      	b.n	80079f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079e8:	4b39      	ldr	r3, [pc, #228]	@ (8007ad0 <xQueueGenericSend+0x200>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079f8:	f001 ff48 	bl	800988c <vPortExitCritical>
				return pdPASS;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e063      	b.n	8007ac8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a06:	f001 ff41 	bl	800988c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e05c      	b.n	8007ac8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f83f 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a22:	f001 ff33 	bl	800988c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a26:	f000 fd87 	bl	8008538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a2a:	f001 fefd 	bl	8009828 <vPortEnterCritical>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a3a:	d103      	bne.n	8007a44 <xQueueGenericSend+0x174>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a4a:	b25b      	sxtb	r3, r3
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a50:	d103      	bne.n	8007a5a <xQueueGenericSend+0x18a>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a5a:	f001 ff17 	bl	800988c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a5e:	1d3a      	adds	r2, r7, #4
 8007a60:	f107 0314 	add.w	r3, r7, #20
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f82e 	bl	8008ac8 <xTaskCheckForTimeOut>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d124      	bne.n	8007abc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a74:	f000 faa6 	bl	8007fc4 <prvIsQueueFull>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	3310      	adds	r3, #16
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 ff2a 	bl	80088e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a8e:	f000 fa31 	bl	8007ef4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a92:	f000 fd5f 	bl	8008554 <xTaskResumeAll>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f47f af7c 	bne.w	8007996 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad0 <xQueueGenericSend+0x200>)
 8007aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	e772      	b.n	8007996 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ab2:	f000 fa1f 	bl	8007ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab6:	f000 fd4d 	bl	8008554 <xTaskResumeAll>
 8007aba:	e76c      	b.n	8007996 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007abe:	f000 fa19 	bl	8007ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ac2:	f000 fd47 	bl	8008554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3738      	adds	r7, #56	@ 0x38
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b090      	sub	sp, #64	@ 0x40
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	e7fd      	b.n	8007b00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <xQueueGenericSendFromISR+0x3e>
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <xQueueGenericSendFromISR+0x42>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <xQueueGenericSendFromISR+0x44>
 8007b16:	2300      	movs	r3, #0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10b      	bne.n	8007b34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	e7fd      	b.n	8007b30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <xQueueGenericSendFromISR+0x6e>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <xQueueGenericSendFromISR+0x72>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueGenericSendFromISR+0x74>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10b      	bne.n	8007b64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	623b      	str	r3, [r7, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	e7fd      	b.n	8007b60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b64:	f001 ff40 	bl	80099e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b68:	f3ef 8211 	mrs	r2, BASEPRI
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	61fa      	str	r2, [r7, #28]
 8007b7e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d302      	bcc.n	8007b96 <xQueueGenericSendFromISR+0xc2>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d12f      	bne.n	8007bf6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bac:	f000 f912 	bl	8007dd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bb0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bb8:	d112      	bne.n	8007be0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d016      	beq.n	8007bf0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	3324      	adds	r3, #36	@ 0x24
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fedc 	bl	8008984 <xTaskRemoveFromEventList>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00e      	beq.n	8007bf0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e007      	b.n	8007bf0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007be4:	3301      	adds	r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	b25a      	sxtb	r2, r3
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007bf4:	e001      	b.n	8007bfa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3740      	adds	r7, #64	@ 0x40
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08c      	sub	sp, #48	@ 0x30
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <xQueueReceive+0x32>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	623b      	str	r3, [r7, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <xQueueReceive+0x40>
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <xQueueReceive+0x44>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <xQueueReceive+0x46>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10b      	bne.n	8007c72 <xQueueReceive+0x62>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	61fb      	str	r3, [r7, #28]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c72:	f001 f86f 	bl	8008d54 <xTaskGetSchedulerState>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <xQueueReceive+0x72>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <xQueueReceive+0x76>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueReceive+0x78>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xQueueReceive+0x94>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61bb      	str	r3, [r7, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ca4:	f001 fdc0 	bl	8009828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01f      	beq.n	8007cf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb8:	f000 f8f6 	bl	8007ea8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	1e5a      	subs	r2, r3, #1
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00f      	beq.n	8007cec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	3310      	adds	r3, #16
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fe57 	bl	8008984 <xTaskRemoveFromEventList>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8007dd0 <xQueueReceive+0x1c0>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cec:	f001 fdce 	bl	800988c <vPortExitCritical>
				return pdPASS;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e069      	b.n	8007dc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cfa:	f001 fdc7 	bl	800988c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e062      	b.n	8007dc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fec5 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d16:	f001 fdb9 	bl	800988c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d1a:	f000 fc0d 	bl	8008538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d1e:	f001 fd83 	bl	8009828 <vPortEnterCritical>
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d28:	b25b      	sxtb	r3, r3
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d2e:	d103      	bne.n	8007d38 <xQueueReceive+0x128>
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d3e:	b25b      	sxtb	r3, r3
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d44:	d103      	bne.n	8007d4e <xQueueReceive+0x13e>
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d4e:	f001 fd9d 	bl	800988c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d52:	1d3a      	adds	r2, r7, #4
 8007d54:	f107 0310 	add.w	r3, r7, #16
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 feb4 	bl	8008ac8 <xTaskCheckForTimeOut>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d123      	bne.n	8007dae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d68:	f000 f916 	bl	8007f98 <prvIsQueueEmpty>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d017      	beq.n	8007da2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	3324      	adds	r3, #36	@ 0x24
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fdb0 	bl	80088e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d82:	f000 f8b7 	bl	8007ef4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d86:	f000 fbe5 	bl	8008554 <xTaskResumeAll>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d189      	bne.n	8007ca4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d90:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <xQueueReceive+0x1c0>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	e780      	b.n	8007ca4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007da4:	f000 f8a6 	bl	8007ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da8:	f000 fbd4 	bl	8008554 <xTaskResumeAll>
 8007dac:	e77a      	b.n	8007ca4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007db0:	f000 f8a0 	bl	8007ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007db4:	f000 fbce 	bl	8008554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dba:	f000 f8ed 	bl	8007f98 <prvIsQueueEmpty>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f43f af6f 	beq.w	8007ca4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3730      	adds	r7, #48	@ 0x30
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10d      	bne.n	8007e0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d14d      	bne.n	8007e96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ffc6 	bl	8008d90 <xTaskPriorityDisinherit>
 8007e04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	e043      	b.n	8007e96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d119      	bne.n	8007e48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6858      	ldr	r0, [r3, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	f00f f9c1 	bl	80171a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2c:	441a      	add	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d32b      	bcc.n	8007e96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	605a      	str	r2, [r3, #4]
 8007e46:	e026      	b.n	8007e96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68d8      	ldr	r0, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	461a      	mov	r2, r3
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	f00f f9a7 	bl	80171a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68da      	ldr	r2, [r3, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	425b      	negs	r3, r3
 8007e62:	441a      	add	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d207      	bcs.n	8007e84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7c:	425b      	negs	r3, r3
 8007e7e:	441a      	add	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d105      	bne.n	8007e96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e9e:	697b      	ldr	r3, [r7, #20]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	441a      	add	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d303      	bcc.n	8007edc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68d9      	ldr	r1, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6838      	ldr	r0, [r7, #0]
 8007ee8:	f00f f95d 	bl	80171a6 <memcpy>
	}
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007efc:	f001 fc94 	bl	8009828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f08:	e011      	b.n	8007f2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d012      	beq.n	8007f38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3324      	adds	r3, #36	@ 0x24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fd34 	bl	8008984 <xTaskRemoveFromEventList>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f22:	f000 fe35 	bl	8008b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dce9      	bgt.n	8007f0a <prvUnlockQueue+0x16>
 8007f36:	e000      	b.n	8007f3a <prvUnlockQueue+0x46>
					break;
 8007f38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	22ff      	movs	r2, #255	@ 0xff
 8007f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f42:	f001 fca3 	bl	800988c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f46:	f001 fc6f 	bl	8009828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f52:	e011      	b.n	8007f78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d012      	beq.n	8007f82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3310      	adds	r3, #16
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fd0f 	bl	8008984 <xTaskRemoveFromEventList>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f6c:	f000 fe10 	bl	8008b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dce9      	bgt.n	8007f54 <prvUnlockQueue+0x60>
 8007f80:	e000      	b.n	8007f84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	22ff      	movs	r2, #255	@ 0xff
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f8c:	f001 fc7e 	bl	800988c <vPortExitCritical>
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fa0:	f001 fc42 	bl	8009828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d102      	bne.n	8007fb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fac:	2301      	movs	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	e001      	b.n	8007fb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fb6:	f001 fc69 	bl	800988c <vPortExitCritical>

	return xReturn;
 8007fba:	68fb      	ldr	r3, [r7, #12]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fcc:	f001 fc2c 	bl	8009828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d102      	bne.n	8007fe2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e001      	b.n	8007fe6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fe6:	f001 fc51 	bl	800988c <vPortExitCritical>

	return xReturn;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	e014      	b.n	800802e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008004:	4a0f      	ldr	r2, [pc, #60]	@ (8008044 <vQueueAddToRegistry+0x50>)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008010:	490c      	ldr	r1, [pc, #48]	@ (8008044 <vQueueAddToRegistry+0x50>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800801a:	4a0a      	ldr	r2, [pc, #40]	@ (8008044 <vQueueAddToRegistry+0x50>)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4413      	add	r3, r2
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008026:	e006      	b.n	8008036 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b07      	cmp	r3, #7
 8008032:	d9e7      	bls.n	8008004 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20004fd4 	.word	0x20004fd4

08008048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008058:	f001 fbe6 	bl	8009828 <vPortEnterCritical>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008062:	b25b      	sxtb	r3, r3
 8008064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008068:	d103      	bne.n	8008072 <vQueueWaitForMessageRestricted+0x2a>
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008078:	b25b      	sxtb	r3, r3
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800807e:	d103      	bne.n	8008088 <vQueueWaitForMessageRestricted+0x40>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008088:	f001 fc00 	bl	800988c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	3324      	adds	r3, #36	@ 0x24
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fc45 	bl	800892c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080a2:	6978      	ldr	r0, [r7, #20]
 80080a4:	f7ff ff26 	bl	8007ef4 <prvUnlockQueue>
	}
 80080a8:	bf00      	nop
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08e      	sub	sp, #56	@ 0x38
 80080b4:	af04      	add	r7, sp, #16
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	623b      	str	r3, [r7, #32]
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	e7fd      	b.n	80080d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10b      	bne.n	80080fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	61fb      	str	r3, [r7, #28]
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	e7fd      	b.n	80080f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080fa:	235c      	movs	r3, #92	@ 0x5c
 80080fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b5c      	cmp	r3, #92	@ 0x5c
 8008102:	d00b      	beq.n	800811c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	61bb      	str	r3, [r7, #24]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800811c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01e      	beq.n	8008162 <xTaskCreateStatic+0xb2>
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01b      	beq.n	8008162 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800812a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008132:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	2202      	movs	r2, #2
 8008138:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	9302      	str	r3, [sp, #8]
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f850 	bl	80081fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800815a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800815c:	f000 f8de 	bl	800831c <prvAddNewTaskToReadyList>
 8008160:	e001      	b.n	8008166 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008166:	697b      	ldr	r3, [r7, #20]
	}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	@ 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	@ 0x30
 8008174:	af04      	add	r7, sp, #16
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fc71 	bl	8009a6c <pvPortMalloc>
 800818a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008192:	205c      	movs	r0, #92	@ 0x5c
 8008194:	f001 fc6a 	bl	8009a6c <pvPortMalloc>
 8008198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80081a6:	e005      	b.n	80081b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081a8:	6978      	ldr	r0, [r7, #20]
 80081aa:	f001 fd2d 	bl	8009c08 <vPortFree>
 80081ae:	e001      	b.n	80081b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d017      	beq.n	80081ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081c2:	88fa      	ldrh	r2, [r7, #6]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f80e 	bl	80081fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081de:	69f8      	ldr	r0, [r7, #28]
 80081e0:	f000 f89c 	bl	800831c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	e002      	b.n	80081f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081f0:	69bb      	ldr	r3, [r7, #24]
	}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	461a      	mov	r2, r3
 8008212:	21a5      	movs	r1, #165	@ 0xa5
 8008214:	f00e fefe 	bl	8017014 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008222:	3b01      	subs	r3, #1
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	617b      	str	r3, [r7, #20]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01f      	beq.n	800829a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	e012      	b.n	8008286 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4413      	add	r3, r2
 8008266:	7819      	ldrb	r1, [r3, #0]
 8008268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	3334      	adds	r3, #52	@ 0x34
 8008270:	460a      	mov	r2, r1
 8008272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	3301      	adds	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b0f      	cmp	r3, #15
 800828a:	d9e9      	bls.n	8008260 <prvInitialiseNewTask+0x66>
 800828c:	e000      	b.n	8008290 <prvInitialiseNewTask+0x96>
			{
				break;
 800828e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008298:	e003      	b.n	80082a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a4:	2b37      	cmp	r3, #55	@ 0x37
 80082a6:	d901      	bls.n	80082ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082a8:	2337      	movs	r3, #55	@ 0x37
 80082aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	2200      	movs	r2, #0
 80082bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c0:	3304      	adds	r3, #4
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff f966 	bl	8007594 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	3318      	adds	r3, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff f961 	bl	8007594 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ea:	2200      	movs	r2, #0
 80082ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	68f9      	ldr	r1, [r7, #12]
 80082fa:	69b8      	ldr	r0, [r7, #24]
 80082fc:	f001 f966 	bl	80095cc <pxPortInitialiseStack>
 8008300:	4602      	mov	r2, r0
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008312:	bf00      	nop
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008324:	f001 fa80 	bl	8009828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008328:	4b2d      	ldr	r3, [pc, #180]	@ (80083e0 <prvAddNewTaskToReadyList+0xc4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	4a2c      	ldr	r2, [pc, #176]	@ (80083e0 <prvAddNewTaskToReadyList+0xc4>)
 8008330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008332:	4b2c      	ldr	r3, [pc, #176]	@ (80083e4 <prvAddNewTaskToReadyList+0xc8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800833a:	4a2a      	ldr	r2, [pc, #168]	@ (80083e4 <prvAddNewTaskToReadyList+0xc8>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008340:	4b27      	ldr	r3, [pc, #156]	@ (80083e0 <prvAddNewTaskToReadyList+0xc4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d110      	bne.n	800836a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008348:	f000 fc46 	bl	8008bd8 <prvInitialiseTaskLists>
 800834c:	e00d      	b.n	800836a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800834e:	4b26      	ldr	r3, [pc, #152]	@ (80083e8 <prvAddNewTaskToReadyList+0xcc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008356:	4b23      	ldr	r3, [pc, #140]	@ (80083e4 <prvAddNewTaskToReadyList+0xc8>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008360:	429a      	cmp	r2, r3
 8008362:	d802      	bhi.n	800836a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008364:	4a1f      	ldr	r2, [pc, #124]	@ (80083e4 <prvAddNewTaskToReadyList+0xc8>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800836a:	4b20      	ldr	r3, [pc, #128]	@ (80083ec <prvAddNewTaskToReadyList+0xd0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3301      	adds	r3, #1
 8008370:	4a1e      	ldr	r2, [pc, #120]	@ (80083ec <prvAddNewTaskToReadyList+0xd0>)
 8008372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008374:	4b1d      	ldr	r3, [pc, #116]	@ (80083ec <prvAddNewTaskToReadyList+0xd0>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008380:	4b1b      	ldr	r3, [pc, #108]	@ (80083f0 <prvAddNewTaskToReadyList+0xd4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d903      	bls.n	8008390 <prvAddNewTaskToReadyList+0x74>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	4a18      	ldr	r2, [pc, #96]	@ (80083f0 <prvAddNewTaskToReadyList+0xd4>)
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4a15      	ldr	r2, [pc, #84]	@ (80083f4 <prvAddNewTaskToReadyList+0xd8>)
 800839e:	441a      	add	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	4619      	mov	r1, r3
 80083a6:	4610      	mov	r0, r2
 80083a8:	f7ff f901 	bl	80075ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083ac:	f001 fa6e 	bl	800988c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083b0:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <prvAddNewTaskToReadyList+0xcc>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00e      	beq.n	80083d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <prvAddNewTaskToReadyList+0xc8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d207      	bcs.n	80083d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083c6:	4b0c      	ldr	r3, [pc, #48]	@ (80083f8 <prvAddNewTaskToReadyList+0xdc>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	200054e8 	.word	0x200054e8
 80083e4:	20005014 	.word	0x20005014
 80083e8:	200054f4 	.word	0x200054f4
 80083ec:	20005504 	.word	0x20005504
 80083f0:	200054f0 	.word	0x200054f0
 80083f4:	20005018 	.word	0x20005018
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d018      	beq.n	8008440 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800840e:	4b14      	ldr	r3, [pc, #80]	@ (8008460 <vTaskDelay+0x64>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <vTaskDelay+0x32>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	60bb      	str	r3, [r7, #8]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800842e:	f000 f883 	bl	8008538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fd1b 	bl	8008e70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800843a:	f000 f88b 	bl	8008554 <xTaskResumeAll>
 800843e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d107      	bne.n	8008456 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008446:	4b07      	ldr	r3, [pc, #28]	@ (8008464 <vTaskDelay+0x68>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20005510 	.word	0x20005510
 8008464:	e000ed04 	.word	0xe000ed04

08008468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	@ 0x28
 800846c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008476:	463a      	mov	r2, r7
 8008478:	1d39      	adds	r1, r7, #4
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff f834 	bl	80074ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	9202      	str	r2, [sp, #8]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	460a      	mov	r2, r1
 8008496:	4922      	ldr	r1, [pc, #136]	@ (8008520 <vTaskStartScheduler+0xb8>)
 8008498:	4822      	ldr	r0, [pc, #136]	@ (8008524 <vTaskStartScheduler+0xbc>)
 800849a:	f7ff fe09 	bl	80080b0 <xTaskCreateStatic>
 800849e:	4603      	mov	r3, r0
 80084a0:	4a21      	ldr	r2, [pc, #132]	@ (8008528 <vTaskStartScheduler+0xc0>)
 80084a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084a4:	4b20      	ldr	r3, [pc, #128]	@ (8008528 <vTaskStartScheduler+0xc0>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	e001      	b.n	80084b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d102      	bne.n	80084c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084bc:	f000 fd2c 	bl	8008f18 <xTimerCreateTimerTask>
 80084c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d116      	bne.n	80084f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	613b      	str	r3, [r7, #16]
}
 80084da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <vTaskStartScheduler+0xc4>)
 80084de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084e4:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <vTaskStartScheduler+0xc8>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084ea:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <vTaskStartScheduler+0xcc>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084f0:	f001 f8f6 	bl	80096e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084f4:	e00f      	b.n	8008516 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084fc:	d10b      	bne.n	8008516 <vTaskStartScheduler+0xae>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <vTaskStartScheduler+0xaa>
}
 8008516:	bf00      	nop
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	08017fd4 	.word	0x08017fd4
 8008524:	08008ba9 	.word	0x08008ba9
 8008528:	2000550c 	.word	0x2000550c
 800852c:	20005508 	.word	0x20005508
 8008530:	200054f4 	.word	0x200054f4
 8008534:	200054ec 	.word	0x200054ec

08008538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800853c:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <vTaskSuspendAll+0x18>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a03      	ldr	r2, [pc, #12]	@ (8008550 <vTaskSuspendAll+0x18>)
 8008544:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008546:	bf00      	nop
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	20005510 	.word	0x20005510

08008554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008562:	4b42      	ldr	r3, [pc, #264]	@ (800866c <xTaskResumeAll+0x118>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <xTaskResumeAll+0x2e>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	603b      	str	r3, [r7, #0]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008582:	f001 f951 	bl	8009828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008586:	4b39      	ldr	r3, [pc, #228]	@ (800866c <xTaskResumeAll+0x118>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3b01      	subs	r3, #1
 800858c:	4a37      	ldr	r2, [pc, #220]	@ (800866c <xTaskResumeAll+0x118>)
 800858e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008590:	4b36      	ldr	r3, [pc, #216]	@ (800866c <xTaskResumeAll+0x118>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d162      	bne.n	800865e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008598:	4b35      	ldr	r3, [pc, #212]	@ (8008670 <xTaskResumeAll+0x11c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d05e      	beq.n	800865e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085a0:	e02f      	b.n	8008602 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a2:	4b34      	ldr	r3, [pc, #208]	@ (8008674 <xTaskResumeAll+0x120>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3318      	adds	r3, #24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff f85a 	bl	8007668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff f855 	bl	8007668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008678 <xTaskResumeAll+0x124>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d903      	bls.n	80085d2 <xTaskResumeAll+0x7e>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008678 <xTaskResumeAll+0x124>)
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4a27      	ldr	r2, [pc, #156]	@ (800867c <xTaskResumeAll+0x128>)
 80085e0:	441a      	add	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7fe ffe0 	bl	80075ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f2:	4b23      	ldr	r3, [pc, #140]	@ (8008680 <xTaskResumeAll+0x12c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80085fc:	4b21      	ldr	r3, [pc, #132]	@ (8008684 <xTaskResumeAll+0x130>)
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008602:	4b1c      	ldr	r3, [pc, #112]	@ (8008674 <xTaskResumeAll+0x120>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1cb      	bne.n	80085a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008610:	f000 fb80 	bl	8008d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008614:	4b1c      	ldr	r3, [pc, #112]	@ (8008688 <xTaskResumeAll+0x134>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008620:	f000 f846 	bl	80086b0 <xTaskIncrementTick>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800862a:	4b16      	ldr	r3, [pc, #88]	@ (8008684 <xTaskResumeAll+0x130>)
 800862c:	2201      	movs	r2, #1
 800862e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3b01      	subs	r3, #1
 8008634:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f1      	bne.n	8008620 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800863c:	4b12      	ldr	r3, [pc, #72]	@ (8008688 <xTaskResumeAll+0x134>)
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008642:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <xTaskResumeAll+0x130>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800864e:	4b0f      	ldr	r3, [pc, #60]	@ (800868c <xTaskResumeAll+0x138>)
 8008650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800865e:	f001 f915 	bl	800988c <vPortExitCritical>

	return xAlreadyYielded;
 8008662:	68bb      	ldr	r3, [r7, #8]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20005510 	.word	0x20005510
 8008670:	200054e8 	.word	0x200054e8
 8008674:	200054a8 	.word	0x200054a8
 8008678:	200054f0 	.word	0x200054f0
 800867c:	20005018 	.word	0x20005018
 8008680:	20005014 	.word	0x20005014
 8008684:	200054fc 	.word	0x200054fc
 8008688:	200054f8 	.word	0x200054f8
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008696:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <xTaskGetTickCount+0x1c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800869c:	687b      	ldr	r3, [r7, #4]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	200054ec 	.word	0x200054ec

080086b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ba:	4b4f      	ldr	r3, [pc, #316]	@ (80087f8 <xTaskIncrementTick+0x148>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 8090 	bne.w	80087e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086c4:	4b4d      	ldr	r3, [pc, #308]	@ (80087fc <xTaskIncrementTick+0x14c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086cc:	4a4b      	ldr	r2, [pc, #300]	@ (80087fc <xTaskIncrementTick+0x14c>)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d121      	bne.n	800871c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086d8:	4b49      	ldr	r3, [pc, #292]	@ (8008800 <xTaskIncrementTick+0x150>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	603b      	str	r3, [r7, #0]
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	e7fd      	b.n	80086f6 <xTaskIncrementTick+0x46>
 80086fa:	4b41      	ldr	r3, [pc, #260]	@ (8008800 <xTaskIncrementTick+0x150>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	4b40      	ldr	r3, [pc, #256]	@ (8008804 <xTaskIncrementTick+0x154>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a3e      	ldr	r2, [pc, #248]	@ (8008800 <xTaskIncrementTick+0x150>)
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	4a3e      	ldr	r2, [pc, #248]	@ (8008804 <xTaskIncrementTick+0x154>)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	4b3e      	ldr	r3, [pc, #248]	@ (8008808 <xTaskIncrementTick+0x158>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a3c      	ldr	r2, [pc, #240]	@ (8008808 <xTaskIncrementTick+0x158>)
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	f000 fafc 	bl	8008d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800871c:	4b3b      	ldr	r3, [pc, #236]	@ (800880c <xTaskIncrementTick+0x15c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	429a      	cmp	r2, r3
 8008724:	d349      	bcc.n	80087ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008726:	4b36      	ldr	r3, [pc, #216]	@ (8008800 <xTaskIncrementTick+0x150>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008730:	4b36      	ldr	r3, [pc, #216]	@ (800880c <xTaskIncrementTick+0x15c>)
 8008732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008736:	601a      	str	r2, [r3, #0]
					break;
 8008738:	e03f      	b.n	80087ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873a:	4b31      	ldr	r3, [pc, #196]	@ (8008800 <xTaskIncrementTick+0x150>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d203      	bcs.n	800875a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008752:	4a2e      	ldr	r2, [pc, #184]	@ (800880c <xTaskIncrementTick+0x15c>)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008758:	e02f      	b.n	80087ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	3304      	adds	r3, #4
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe ff82 	bl	8007668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	d004      	beq.n	8008776 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	3318      	adds	r3, #24
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe ff79 	bl	8007668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877a:	4b25      	ldr	r3, [pc, #148]	@ (8008810 <xTaskIncrementTick+0x160>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d903      	bls.n	800878a <xTaskIncrementTick+0xda>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	4a22      	ldr	r2, [pc, #136]	@ (8008810 <xTaskIncrementTick+0x160>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4a1f      	ldr	r2, [pc, #124]	@ (8008814 <xTaskIncrementTick+0x164>)
 8008798:	441a      	add	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7fe ff04 	bl	80075ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <xTaskIncrementTick+0x168>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d3b8      	bcc.n	8008726 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087b8:	e7b5      	b.n	8008726 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087ba:	4b17      	ldr	r3, [pc, #92]	@ (8008818 <xTaskIncrementTick+0x168>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c0:	4914      	ldr	r1, [pc, #80]	@ (8008814 <xTaskIncrementTick+0x164>)
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d901      	bls.n	80087d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80087d2:	2301      	movs	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087d6:	4b11      	ldr	r3, [pc, #68]	@ (800881c <xTaskIncrementTick+0x16c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80087de:	2301      	movs	r3, #1
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e004      	b.n	80087ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008820 <xTaskIncrementTick+0x170>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a0d      	ldr	r2, [pc, #52]	@ (8008820 <xTaskIncrementTick+0x170>)
 80087ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087ee:	697b      	ldr	r3, [r7, #20]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20005510 	.word	0x20005510
 80087fc:	200054ec 	.word	0x200054ec
 8008800:	200054a0 	.word	0x200054a0
 8008804:	200054a4 	.word	0x200054a4
 8008808:	20005500 	.word	0x20005500
 800880c:	20005508 	.word	0x20005508
 8008810:	200054f0 	.word	0x200054f0
 8008814:	20005018 	.word	0x20005018
 8008818:	20005014 	.word	0x20005014
 800881c:	200054fc 	.word	0x200054fc
 8008820:	200054f8 	.word	0x200054f8

08008824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800882a:	4b28      	ldr	r3, [pc, #160]	@ (80088cc <vTaskSwitchContext+0xa8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008832:	4b27      	ldr	r3, [pc, #156]	@ (80088d0 <vTaskSwitchContext+0xac>)
 8008834:	2201      	movs	r2, #1
 8008836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008838:	e042      	b.n	80088c0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800883a:	4b25      	ldr	r3, [pc, #148]	@ (80088d0 <vTaskSwitchContext+0xac>)
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008840:	4b24      	ldr	r3, [pc, #144]	@ (80088d4 <vTaskSwitchContext+0xb0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e011      	b.n	800886c <vTaskSwitchContext+0x48>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <vTaskSwitchContext+0x42>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <vTaskSwitchContext+0x3e>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3b01      	subs	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	491a      	ldr	r1, [pc, #104]	@ (80088d8 <vTaskSwitchContext+0xb4>)
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0e3      	beq.n	8008848 <vTaskSwitchContext+0x24>
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a13      	ldr	r2, [pc, #76]	@ (80088d8 <vTaskSwitchContext+0xb4>)
 800888c:	4413      	add	r3, r2
 800888e:	60bb      	str	r3, [r7, #8]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	605a      	str	r2, [r3, #4]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	3308      	adds	r3, #8
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d104      	bne.n	80088b0 <vTaskSwitchContext+0x8c>
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	4a09      	ldr	r2, [pc, #36]	@ (80088dc <vTaskSwitchContext+0xb8>)
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	4a06      	ldr	r2, [pc, #24]	@ (80088d4 <vTaskSwitchContext+0xb0>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6013      	str	r3, [r2, #0]
}
 80088c0:	bf00      	nop
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	20005510 	.word	0x20005510
 80088d0:	200054fc 	.word	0x200054fc
 80088d4:	200054f0 	.word	0x200054f0
 80088d8:	20005018 	.word	0x20005018
 80088dc:	20005014 	.word	0x20005014

080088e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008908:	4b07      	ldr	r3, [pc, #28]	@ (8008928 <vTaskPlaceOnEventList+0x48>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3318      	adds	r3, #24
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7fe fe70 	bl	80075f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008916:	2101      	movs	r1, #1
 8008918:	6838      	ldr	r0, [r7, #0]
 800891a:	f000 faa9 	bl	8008e70 <prvAddCurrentTaskToDelayedList>
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20005014 	.word	0x20005014

0800892c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	617b      	str	r3, [r7, #20]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008956:	4b0a      	ldr	r3, [pc, #40]	@ (8008980 <vTaskPlaceOnEventListRestricted+0x54>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3318      	adds	r3, #24
 800895c:	4619      	mov	r1, r3
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7fe fe25 	bl	80075ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800896a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800896e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	68b8      	ldr	r0, [r7, #8]
 8008974:	f000 fa7c 	bl	8008e70 <prvAddCurrentTaskToDelayedList>
	}
 8008978:	bf00      	nop
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20005014 	.word	0x20005014

08008984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10b      	bne.n	80089b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	60fb      	str	r3, [r7, #12]
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	e7fd      	b.n	80089ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3318      	adds	r3, #24
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fe56 	bl	8007668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a34 <xTaskRemoveFromEventList+0xb0>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d11d      	bne.n	8008a00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	3304      	adds	r3, #4
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fe4d 	bl	8007668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d2:	4b19      	ldr	r3, [pc, #100]	@ (8008a38 <xTaskRemoveFromEventList+0xb4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d903      	bls.n	80089e2 <xTaskRemoveFromEventList+0x5e>
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	4a16      	ldr	r2, [pc, #88]	@ (8008a38 <xTaskRemoveFromEventList+0xb4>)
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4a13      	ldr	r2, [pc, #76]	@ (8008a3c <xTaskRemoveFromEventList+0xb8>)
 80089f0:	441a      	add	r2, r3
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7fe fdd8 	bl	80075ae <vListInsertEnd>
 80089fe:	e005      	b.n	8008a0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	3318      	adds	r3, #24
 8008a04:	4619      	mov	r1, r3
 8008a06:	480e      	ldr	r0, [pc, #56]	@ (8008a40 <xTaskRemoveFromEventList+0xbc>)
 8008a08:	f7fe fdd1 	bl	80075ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a10:	4b0c      	ldr	r3, [pc, #48]	@ (8008a44 <xTaskRemoveFromEventList+0xc0>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d905      	bls.n	8008a26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a48 <xTaskRemoveFromEventList+0xc4>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	e001      	b.n	8008a2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a2a:	697b      	ldr	r3, [r7, #20]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20005510 	.word	0x20005510
 8008a38:	200054f0 	.word	0x200054f0
 8008a3c:	20005018 	.word	0x20005018
 8008a40:	200054a8 	.word	0x200054a8
 8008a44:	20005014 	.word	0x20005014
 8008a48:	200054fc 	.word	0x200054fc

08008a4c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	60fb      	str	r3, [r7, #12]
}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	e7fd      	b.n	8008a6e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008a72:	f000 fed9 	bl	8009828 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a76:	4b07      	ldr	r3, [pc, #28]	@ (8008a94 <vTaskSetTimeOutState+0x48>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008a7e:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <vTaskSetTimeOutState+0x4c>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008a86:	f000 ff01 	bl	800988c <vPortExitCritical>
}
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20005500 	.word	0x20005500
 8008a98:	200054ec 	.word	0x200054ec

08008a9c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aa4:	4b06      	ldr	r3, [pc, #24]	@ (8008ac0 <vTaskInternalSetTimeOutState+0x24>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aac:	4b05      	ldr	r3, [pc, #20]	@ (8008ac4 <vTaskInternalSetTimeOutState+0x28>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	605a      	str	r2, [r3, #4]
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	20005500 	.word	0x20005500
 8008ac4:	200054ec 	.word	0x200054ec

08008ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	613b      	str	r3, [r7, #16]
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10b      	bne.n	8008b0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60fb      	str	r3, [r7, #12]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b0e:	f000 fe8b 	bl	8009828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b12:	4b1d      	ldr	r3, [pc, #116]	@ (8008b88 <xTaskCheckForTimeOut+0xc0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b2a:	d102      	bne.n	8008b32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e023      	b.n	8008b7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b15      	ldr	r3, [pc, #84]	@ (8008b8c <xTaskCheckForTimeOut+0xc4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d007      	beq.n	8008b4e <xTaskCheckForTimeOut+0x86>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	e015      	b.n	8008b7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d20b      	bcs.n	8008b70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff99 	bl	8008a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	e004      	b.n	8008b7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f000 fe87 	bl	800988c <vPortExitCritical>

	return xReturn;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	200054ec 	.word	0x200054ec
 8008b8c:	20005500 	.word	0x20005500

08008b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b94:	4b03      	ldr	r3, [pc, #12]	@ (8008ba4 <vTaskMissedYield+0x14>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	200054fc 	.word	0x200054fc

08008ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bb0:	f000 f852 	bl	8008c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bb4:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <prvIdleTask+0x28>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d9f9      	bls.n	8008bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bbc:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <prvIdleTask+0x2c>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bcc:	e7f0      	b.n	8008bb0 <prvIdleTask+0x8>
 8008bce:	bf00      	nop
 8008bd0:	20005018 	.word	0x20005018
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	e00c      	b.n	8008bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a12      	ldr	r2, [pc, #72]	@ (8008c38 <prvInitialiseTaskLists+0x60>)
 8008bf0:	4413      	add	r3, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fcae 	bl	8007554 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b37      	cmp	r3, #55	@ 0x37
 8008c02:	d9ef      	bls.n	8008be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c04:	480d      	ldr	r0, [pc, #52]	@ (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c06:	f7fe fca5 	bl	8007554 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c0a:	480d      	ldr	r0, [pc, #52]	@ (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c0c:	f7fe fca2 	bl	8007554 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c10:	480c      	ldr	r0, [pc, #48]	@ (8008c44 <prvInitialiseTaskLists+0x6c>)
 8008c12:	f7fe fc9f 	bl	8007554 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c16:	480c      	ldr	r0, [pc, #48]	@ (8008c48 <prvInitialiseTaskLists+0x70>)
 8008c18:	f7fe fc9c 	bl	8007554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c1c:	480b      	ldr	r0, [pc, #44]	@ (8008c4c <prvInitialiseTaskLists+0x74>)
 8008c1e:	f7fe fc99 	bl	8007554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c22:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <prvInitialiseTaskLists+0x78>)
 8008c24:	4a05      	ldr	r2, [pc, #20]	@ (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	@ (8008c54 <prvInitialiseTaskLists+0x7c>)
 8008c2a:	4a05      	ldr	r2, [pc, #20]	@ (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20005018 	.word	0x20005018
 8008c3c:	20005478 	.word	0x20005478
 8008c40:	2000548c 	.word	0x2000548c
 8008c44:	200054a8 	.word	0x200054a8
 8008c48:	200054bc 	.word	0x200054bc
 8008c4c:	200054d4 	.word	0x200054d4
 8008c50:	200054a0 	.word	0x200054a0
 8008c54:	200054a4 	.word	0x200054a4

08008c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5e:	e019      	b.n	8008c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c60:	f000 fde2 	bl	8009828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x50>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fcf9 	bl	8007668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c8a:	f000 fdff 	bl	800988c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f810 	bl	8008cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c94:	4b06      	ldr	r3, [pc, #24]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e1      	bne.n	8008c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200054bc 	.word	0x200054bc
 8008cac:	200054e8 	.word	0x200054e8
 8008cb0:	200054d0 	.word	0x200054d0

08008cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d108      	bne.n	8008cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 ff9c 	bl	8009c08 <vPortFree>
				vPortFree( pxTCB );
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 ff99 	bl	8009c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cd6:	e019      	b.n	8008d0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d103      	bne.n	8008cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 ff90 	bl	8009c08 <vPortFree>
	}
 8008ce8:	e010      	b.n	8008d0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d00b      	beq.n	8008d0c <prvDeleteTCB+0x58>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	e7fd      	b.n	8008d08 <prvDeleteTCB+0x54>
	}
 8008d0c:	bf00      	nop
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <prvResetNextTaskUnblockTime+0x38>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d24:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <prvResetNextTaskUnblockTime+0x3c>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d2c:	e008      	b.n	8008d40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2e:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <prvResetNextTaskUnblockTime+0x38>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	@ (8008d50 <prvResetNextTaskUnblockTime+0x3c>)
 8008d3e:	6013      	str	r3, [r2, #0]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	200054a0 	.word	0x200054a0
 8008d50:	20005508 	.word	0x20005508

08008d54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d88 <xTaskGetSchedulerState+0x34>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d62:	2301      	movs	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	e008      	b.n	8008d7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d68:	4b08      	ldr	r3, [pc, #32]	@ (8008d8c <xTaskGetSchedulerState+0x38>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d70:	2302      	movs	r3, #2
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	e001      	b.n	8008d7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d7a:	687b      	ldr	r3, [r7, #4]
	}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	200054f4 	.word	0x200054f4
 8008d8c:	20005510 	.word	0x20005510

08008d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d058      	beq.n	8008e58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008da6:	4b2f      	ldr	r3, [pc, #188]	@ (8008e64 <xTaskPriorityDisinherit+0xd4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d00b      	beq.n	8008dc8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	60bb      	str	r3, [r7, #8]
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	e7fd      	b.n	8008de4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dec:	1e5a      	subs	r2, r3, #1
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d02c      	beq.n	8008e58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d128      	bne.n	8008e58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fc2c 	bl	8007668 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e28:	4b0f      	ldr	r3, [pc, #60]	@ (8008e68 <xTaskPriorityDisinherit+0xd8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d903      	bls.n	8008e38 <xTaskPriorityDisinherit+0xa8>
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	4a0c      	ldr	r2, [pc, #48]	@ (8008e68 <xTaskPriorityDisinherit+0xd8>)
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4a09      	ldr	r2, [pc, #36]	@ (8008e6c <xTaskPriorityDisinherit+0xdc>)
 8008e46:	441a      	add	r2, r3
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	f7fe fbad 	bl	80075ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e54:	2301      	movs	r3, #1
 8008e56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e58:	697b      	ldr	r3, [r7, #20]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20005014 	.word	0x20005014
 8008e68:	200054f0 	.word	0x200054f0
 8008e6c:	20005018 	.word	0x20005018

08008e70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e7a:	4b21      	ldr	r3, [pc, #132]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e80:	4b20      	ldr	r3, [pc, #128]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fbee 	bl	8007668 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e92:	d10a      	bne.n	8008eaa <prvAddCurrentTaskToDelayedList+0x3a>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4819      	ldr	r0, [pc, #100]	@ (8008f08 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ea4:	f7fe fb83 	bl	80075ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ea8:	e026      	b.n	8008ef8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4413      	add	r3, r2
 8008eb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eb2:	4b14      	ldr	r3, [pc, #80]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d209      	bcs.n	8008ed6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ec2:	4b12      	ldr	r3, [pc, #72]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fe fb91 	bl	80075f6 <vListInsert>
}
 8008ed4:	e010      	b.n	8008ef8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	4b0a      	ldr	r3, [pc, #40]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7fe fb87 	bl	80075f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d202      	bcs.n	8008ef8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ef2:	4a08      	ldr	r2, [pc, #32]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	6013      	str	r3, [r2, #0]
}
 8008ef8:	bf00      	nop
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	200054ec 	.word	0x200054ec
 8008f04:	20005014 	.word	0x20005014
 8008f08:	200054d4 	.word	0x200054d4
 8008f0c:	200054a4 	.word	0x200054a4
 8008f10:	200054a0 	.word	0x200054a0
 8008f14:	20005508 	.word	0x20005508

08008f18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	@ 0x28
 8008f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f22:	f000 fb13 	bl	800954c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f26:	4b1d      	ldr	r3, [pc, #116]	@ (8008f9c <xTimerCreateTimerTask+0x84>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d021      	beq.n	8008f72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f36:	1d3a      	adds	r2, r7, #4
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	f107 030c 	add.w	r3, r7, #12
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe faed 	bl	8007520 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	9202      	str	r2, [sp, #8]
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	2302      	movs	r3, #2
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	460a      	mov	r2, r1
 8008f58:	4911      	ldr	r1, [pc, #68]	@ (8008fa0 <xTimerCreateTimerTask+0x88>)
 8008f5a:	4812      	ldr	r0, [pc, #72]	@ (8008fa4 <xTimerCreateTimerTask+0x8c>)
 8008f5c:	f7ff f8a8 	bl	80080b0 <xTaskCreateStatic>
 8008f60:	4603      	mov	r3, r0
 8008f62:	4a11      	ldr	r2, [pc, #68]	@ (8008fa8 <xTimerCreateTimerTask+0x90>)
 8008f64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f66:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <xTimerCreateTimerTask+0x90>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10b      	bne.n	8008f90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	613b      	str	r3, [r7, #16]
}
 8008f8a:	bf00      	nop
 8008f8c:	bf00      	nop
 8008f8e:	e7fd      	b.n	8008f8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f90:	697b      	ldr	r3, [r7, #20]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20005544 	.word	0x20005544
 8008fa0:	08017fdc 	.word	0x08017fdc
 8008fa4:	080090e5 	.word	0x080090e5
 8008fa8:	20005548 	.word	0x20005548

08008fac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08a      	sub	sp, #40	@ 0x28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <xTimerGenericCommand+0x30>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	623b      	str	r3, [r7, #32]
}
 8008fd6:	bf00      	nop
 8008fd8:	bf00      	nop
 8008fda:	e7fd      	b.n	8008fd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fdc:	4b19      	ldr	r3, [pc, #100]	@ (8009044 <xTimerGenericCommand+0x98>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d02a      	beq.n	800903a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	dc18      	bgt.n	8009028 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ff6:	f7ff fead 	bl	8008d54 <xTaskGetSchedulerState>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d109      	bne.n	8009014 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009000:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <xTimerGenericCommand+0x98>)
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	f107 0110 	add.w	r1, r7, #16
 8009008:	2300      	movs	r3, #0
 800900a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800900c:	f7fe fc60 	bl	80078d0 <xQueueGenericSend>
 8009010:	6278      	str	r0, [r7, #36]	@ 0x24
 8009012:	e012      	b.n	800903a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009014:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <xTimerGenericCommand+0x98>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	f107 0110 	add.w	r1, r7, #16
 800901c:	2300      	movs	r3, #0
 800901e:	2200      	movs	r2, #0
 8009020:	f7fe fc56 	bl	80078d0 <xQueueGenericSend>
 8009024:	6278      	str	r0, [r7, #36]	@ 0x24
 8009026:	e008      	b.n	800903a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009028:	4b06      	ldr	r3, [pc, #24]	@ (8009044 <xTimerGenericCommand+0x98>)
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	f107 0110 	add.w	r1, r7, #16
 8009030:	2300      	movs	r3, #0
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	f7fe fd4e 	bl	8007ad4 <xQueueGenericSendFromISR>
 8009038:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	@ 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20005544 	.word	0x20005544

08009048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009052:	4b23      	ldr	r3, [pc, #140]	@ (80090e0 <prvProcessExpiredTimer+0x98>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3304      	adds	r3, #4
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe fb01 	bl	8007668 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d023      	beq.n	80090bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	18d1      	adds	r1, r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	6978      	ldr	r0, [r7, #20]
 8009082:	f000 f8d5 	bl	8009230 <prvInsertTimerInActiveList>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d020      	beq.n	80090ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800908c:	2300      	movs	r3, #0
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	2300      	movs	r3, #0
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	2100      	movs	r1, #0
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f7ff ff88 	bl	8008fac <xTimerGenericCommand>
 800909c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d114      	bne.n	80090ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	60fb      	str	r3, [r7, #12]
}
 80090b6:	bf00      	nop
 80090b8:	bf00      	nop
 80090ba:	e7fd      	b.n	80090b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	6978      	ldr	r0, [r7, #20]
 80090d4:	4798      	blx	r3
}
 80090d6:	bf00      	nop
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	2000553c 	.word	0x2000553c

080090e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090ec:	f107 0308 	add.w	r3, r7, #8
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 f859 	bl	80091a8 <prvGetNextExpireTime>
 80090f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4619      	mov	r1, r3
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f805 	bl	800910c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009102:	f000 f8d7 	bl	80092b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009106:	bf00      	nop
 8009108:	e7f0      	b.n	80090ec <prvTimerTask+0x8>
	...

0800910c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009116:	f7ff fa0f 	bl	8008538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f000 f866 	bl	80091f0 <prvSampleTimeNow>
 8009124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d130      	bne.n	800918e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <prvProcessTimerOrBlockTask+0x3c>
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	429a      	cmp	r2, r3
 8009138:	d806      	bhi.n	8009148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800913a:	f7ff fa0b 	bl	8008554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ff81 	bl	8009048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009146:	e024      	b.n	8009192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800914e:	4b13      	ldr	r3, [pc, #76]	@ (800919c <prvProcessTimerOrBlockTask+0x90>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <prvProcessTimerOrBlockTask+0x50>
 8009158:	2301      	movs	r3, #1
 800915a:	e000      	b.n	800915e <prvProcessTimerOrBlockTask+0x52>
 800915c:	2300      	movs	r3, #0
 800915e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009160:	4b0f      	ldr	r3, [pc, #60]	@ (80091a0 <prvProcessTimerOrBlockTask+0x94>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4619      	mov	r1, r3
 800916e:	f7fe ff6b 	bl	8008048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009172:	f7ff f9ef 	bl	8008554 <xTaskResumeAll>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800917c:	4b09      	ldr	r3, [pc, #36]	@ (80091a4 <prvProcessTimerOrBlockTask+0x98>)
 800917e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	f3bf 8f6f 	isb	sy
}
 800918c:	e001      	b.n	8009192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800918e:	f7ff f9e1 	bl	8008554 <xTaskResumeAll>
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20005540 	.word	0x20005540
 80091a0:	20005544 	.word	0x20005544
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091b0:	4b0e      	ldr	r3, [pc, #56]	@ (80091ec <prvGetNextExpireTime+0x44>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <prvGetNextExpireTime+0x16>
 80091ba:	2201      	movs	r2, #1
 80091bc:	e000      	b.n	80091c0 <prvGetNextExpireTime+0x18>
 80091be:	2200      	movs	r2, #0
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d105      	bne.n	80091d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091cc:	4b07      	ldr	r3, [pc, #28]	@ (80091ec <prvGetNextExpireTime+0x44>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e001      	b.n	80091dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091dc:	68fb      	ldr	r3, [r7, #12]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	2000553c 	.word	0x2000553c

080091f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091f8:	f7ff fa4a 	bl	8008690 <xTaskGetTickCount>
 80091fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091fe:	4b0b      	ldr	r3, [pc, #44]	@ (800922c <prvSampleTimeNow+0x3c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	429a      	cmp	r2, r3
 8009206:	d205      	bcs.n	8009214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009208:	f000 f93a 	bl	8009480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	e002      	b.n	800921a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800921a:	4a04      	ldr	r2, [pc, #16]	@ (800922c <prvSampleTimeNow+0x3c>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009220:	68fb      	ldr	r3, [r7, #12]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	2000554c 	.word	0x2000554c

08009230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d812      	bhi.n	800927c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	1ad2      	subs	r2, r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	429a      	cmp	r2, r3
 8009262:	d302      	bcc.n	800926a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e01b      	b.n	80092a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800926a:	4b10      	ldr	r3, [pc, #64]	@ (80092ac <prvInsertTimerInActiveList+0x7c>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fe f9be 	bl	80075f6 <vListInsert>
 800927a:	e012      	b.n	80092a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d206      	bcs.n	8009292 <prvInsertTimerInActiveList+0x62>
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e007      	b.n	80092a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009292:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <prvInsertTimerInActiveList+0x80>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7fe f9aa 	bl	80075f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092a2:	697b      	ldr	r3, [r7, #20]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20005540 	.word	0x20005540
 80092b0:	2000553c 	.word	0x2000553c

080092b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	@ 0x38
 80092b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ba:	e0ce      	b.n	800945a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	da19      	bge.n	80092f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	3304      	adds	r3, #4
 80092c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	61fb      	str	r3, [r7, #28]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ec:	6850      	ldr	r0, [r2, #4]
 80092ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f0:	6892      	ldr	r2, [r2, #8]
 80092f2:	4611      	mov	r1, r2
 80092f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f2c0 80ae 	blt.w	800945a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	3304      	adds	r3, #4
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe f9aa 	bl	8007668 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009314:	463b      	mov	r3, r7
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff ff6a 	bl	80091f0 <prvSampleTimeNow>
 800931c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b09      	cmp	r3, #9
 8009322:	f200 8097 	bhi.w	8009454 <prvProcessReceivedCommands+0x1a0>
 8009326:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <prvProcessReceivedCommands+0x78>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	08009355 	.word	0x08009355
 8009330:	08009355 	.word	0x08009355
 8009334:	08009355 	.word	0x08009355
 8009338:	080093cb 	.word	0x080093cb
 800933c:	080093df 	.word	0x080093df
 8009340:	0800942b 	.word	0x0800942b
 8009344:	08009355 	.word	0x08009355
 8009348:	08009355 	.word	0x08009355
 800934c:	080093cb 	.word	0x080093cb
 8009350:	080093df 	.word	0x080093df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	b2da      	uxtb	r2, r3
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	18d1      	adds	r1, r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009374:	f7ff ff5c 	bl	8009230 <prvInsertTimerInActiveList>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d06c      	beq.n	8009458 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800937e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d061      	beq.n	8009458 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	441a      	add	r2, r3
 800939c:	2300      	movs	r3, #0
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	2300      	movs	r3, #0
 80093a2:	2100      	movs	r1, #0
 80093a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093a6:	f7ff fe01 	bl	8008fac <xTimerGenericCommand>
 80093aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d152      	bne.n	8009458 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	61bb      	str	r3, [r7, #24]
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop
 80093c8:	e7fd      	b.n	80093c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093dc:	e03d      	b.n	800945a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093e4:	f043 0301 	orr.w	r3, r3, #1
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10b      	bne.n	8009416 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	617b      	str	r3, [r7, #20]
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	e7fd      	b.n	8009412 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	699a      	ldr	r2, [r3, #24]
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	18d1      	adds	r1, r2, r3
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009424:	f7ff ff04 	bl	8009230 <prvInsertTimerInActiveList>
					break;
 8009428:	e017      	b.n	800945a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d103      	bne.n	8009440 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800943a:	f000 fbe5 	bl	8009c08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800943e:	e00c      	b.n	800945a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009452:	e002      	b.n	800945a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009454:	bf00      	nop
 8009456:	e000      	b.n	800945a <prvProcessReceivedCommands+0x1a6>
					break;
 8009458:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800945a:	4b08      	ldr	r3, [pc, #32]	@ (800947c <prvProcessReceivedCommands+0x1c8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	1d39      	adds	r1, r7, #4
 8009460:	2200      	movs	r2, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fbd4 	bl	8007c10 <xQueueReceive>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	f47f af26 	bne.w	80092bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	3730      	adds	r7, #48	@ 0x30
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20005544 	.word	0x20005544

08009480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009486:	e049      	b.n	800951c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009488:	4b2e      	ldr	r3, [pc, #184]	@ (8009544 <prvSwitchTimerLists+0xc4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009492:	4b2c      	ldr	r3, [pc, #176]	@ (8009544 <prvSwitchTimerLists+0xc4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3304      	adds	r3, #4
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe f8e1 	bl	8007668 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d02f      	beq.n	800951c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	4413      	add	r3, r2
 80094c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d90e      	bls.n	80094ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094da:	4b1a      	ldr	r3, [pc, #104]	@ (8009544 <prvSwitchTimerLists+0xc4>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fe f886 	bl	80075f6 <vListInsert>
 80094ea:	e017      	b.n	800951c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094ec:	2300      	movs	r3, #0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2300      	movs	r3, #0
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	2100      	movs	r1, #0
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fd58 	bl	8008fac <xTimerGenericCommand>
 80094fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	603b      	str	r3, [r7, #0]
}
 8009516:	bf00      	nop
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800951c:	4b09      	ldr	r3, [pc, #36]	@ (8009544 <prvSwitchTimerLists+0xc4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1b0      	bne.n	8009488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009526:	4b07      	ldr	r3, [pc, #28]	@ (8009544 <prvSwitchTimerLists+0xc4>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800952c:	4b06      	ldr	r3, [pc, #24]	@ (8009548 <prvSwitchTimerLists+0xc8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a04      	ldr	r2, [pc, #16]	@ (8009544 <prvSwitchTimerLists+0xc4>)
 8009532:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009534:	4a04      	ldr	r2, [pc, #16]	@ (8009548 <prvSwitchTimerLists+0xc8>)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	6013      	str	r3, [r2, #0]
}
 800953a:	bf00      	nop
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	2000553c 	.word	0x2000553c
 8009548:	20005540 	.word	0x20005540

0800954c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009552:	f000 f969 	bl	8009828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009556:	4b15      	ldr	r3, [pc, #84]	@ (80095ac <prvCheckForValidListAndQueue+0x60>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d120      	bne.n	80095a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800955e:	4814      	ldr	r0, [pc, #80]	@ (80095b0 <prvCheckForValidListAndQueue+0x64>)
 8009560:	f7fd fff8 	bl	8007554 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009564:	4813      	ldr	r0, [pc, #76]	@ (80095b4 <prvCheckForValidListAndQueue+0x68>)
 8009566:	f7fd fff5 	bl	8007554 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800956a:	4b13      	ldr	r3, [pc, #76]	@ (80095b8 <prvCheckForValidListAndQueue+0x6c>)
 800956c:	4a10      	ldr	r2, [pc, #64]	@ (80095b0 <prvCheckForValidListAndQueue+0x64>)
 800956e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009570:	4b12      	ldr	r3, [pc, #72]	@ (80095bc <prvCheckForValidListAndQueue+0x70>)
 8009572:	4a10      	ldr	r2, [pc, #64]	@ (80095b4 <prvCheckForValidListAndQueue+0x68>)
 8009574:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009576:	2300      	movs	r3, #0
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	4b11      	ldr	r3, [pc, #68]	@ (80095c0 <prvCheckForValidListAndQueue+0x74>)
 800957c:	4a11      	ldr	r2, [pc, #68]	@ (80095c4 <prvCheckForValidListAndQueue+0x78>)
 800957e:	2110      	movs	r1, #16
 8009580:	200a      	movs	r0, #10
 8009582:	f7fe f905 	bl	8007790 <xQueueGenericCreateStatic>
 8009586:	4603      	mov	r3, r0
 8009588:	4a08      	ldr	r2, [pc, #32]	@ (80095ac <prvCheckForValidListAndQueue+0x60>)
 800958a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800958c:	4b07      	ldr	r3, [pc, #28]	@ (80095ac <prvCheckForValidListAndQueue+0x60>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009594:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <prvCheckForValidListAndQueue+0x60>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	490b      	ldr	r1, [pc, #44]	@ (80095c8 <prvCheckForValidListAndQueue+0x7c>)
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fd2a 	bl	8007ff4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a0:	f000 f974 	bl	800988c <vPortExitCritical>
}
 80095a4:	bf00      	nop
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20005544 	.word	0x20005544
 80095b0:	20005514 	.word	0x20005514
 80095b4:	20005528 	.word	0x20005528
 80095b8:	2000553c 	.word	0x2000553c
 80095bc:	20005540 	.word	0x20005540
 80095c0:	200055f0 	.word	0x200055f0
 80095c4:	20005550 	.word	0x20005550
 80095c8:	08017fe4 	.word	0x08017fe4

080095cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3b04      	subs	r3, #4
 80095dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3b04      	subs	r3, #4
 80095ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f023 0201 	bic.w	r2, r3, #1
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3b04      	subs	r3, #4
 80095fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009630 <pxPortInitialiseStack+0x64>)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3b14      	subs	r3, #20
 8009606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b04      	subs	r3, #4
 8009612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f06f 0202 	mvn.w	r2, #2
 800961a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3b20      	subs	r3, #32
 8009620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	08009635 	.word	0x08009635

08009634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800963e:	4b13      	ldr	r3, [pc, #76]	@ (800968c <prvTaskExitError+0x58>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009646:	d00b      	beq.n	8009660 <prvTaskExitError+0x2c>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	60fb      	str	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	bf00      	nop
 800965e:	e7fd      	b.n	800965c <prvTaskExitError+0x28>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60bb      	str	r3, [r7, #8]
}
 8009672:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009674:	bf00      	nop
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0fc      	beq.n	8009676 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000014 	.word	0x20000014

08009690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <pxCurrentTCBConst2>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	f380 8809 	msr	PSP, r0
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	4770      	bx	lr
 80096ac:	f3af 8000 	nop.w

080096b0 <pxCurrentTCBConst2>:
 80096b0:	20005014 	.word	0x20005014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096b8:	4808      	ldr	r0, [pc, #32]	@ (80096dc <prvPortStartFirstTask+0x24>)
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	6800      	ldr	r0, [r0, #0]
 80096be:	f380 8808 	msr	MSP, r0
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f380 8814 	msr	CONTROL, r0
 80096ca:	b662      	cpsie	i
 80096cc:	b661      	cpsie	f
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	df00      	svc	0
 80096d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096da:	bf00      	nop
 80096dc:	e000ed08 	.word	0xe000ed08

080096e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096e6:	4b47      	ldr	r3, [pc, #284]	@ (8009804 <xPortStartScheduler+0x124>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a47      	ldr	r2, [pc, #284]	@ (8009808 <xPortStartScheduler+0x128>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10b      	bne.n	8009708 <xPortStartScheduler+0x28>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009708:	4b3e      	ldr	r3, [pc, #248]	@ (8009804 <xPortStartScheduler+0x124>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a3f      	ldr	r2, [pc, #252]	@ (800980c <xPortStartScheduler+0x12c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d10b      	bne.n	800972a <xPortStartScheduler+0x4a>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	613b      	str	r3, [r7, #16]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800972a:	4b39      	ldr	r3, [pc, #228]	@ (8009810 <xPortStartScheduler+0x130>)
 800972c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	22ff      	movs	r2, #255	@ 0xff
 800973a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800974c:	b2da      	uxtb	r2, r3
 800974e:	4b31      	ldr	r3, [pc, #196]	@ (8009814 <xPortStartScheduler+0x134>)
 8009750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009752:	4b31      	ldr	r3, [pc, #196]	@ (8009818 <xPortStartScheduler+0x138>)
 8009754:	2207      	movs	r2, #7
 8009756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009758:	e009      	b.n	800976e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800975a:	4b2f      	ldr	r3, [pc, #188]	@ (8009818 <xPortStartScheduler+0x138>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3b01      	subs	r3, #1
 8009760:	4a2d      	ldr	r2, [pc, #180]	@ (8009818 <xPortStartScheduler+0x138>)
 8009762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	b2db      	uxtb	r3, r3
 800976c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009776:	2b80      	cmp	r3, #128	@ 0x80
 8009778:	d0ef      	beq.n	800975a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800977a:	4b27      	ldr	r3, [pc, #156]	@ (8009818 <xPortStartScheduler+0x138>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f1c3 0307 	rsb	r3, r3, #7
 8009782:	2b04      	cmp	r3, #4
 8009784:	d00b      	beq.n	800979e <xPortStartScheduler+0xbe>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60bb      	str	r3, [r7, #8]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800979e:	4b1e      	ldr	r3, [pc, #120]	@ (8009818 <xPortStartScheduler+0x138>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009818 <xPortStartScheduler+0x138>)
 80097a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <xPortStartScheduler+0x138>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097b0:	4a19      	ldr	r2, [pc, #100]	@ (8009818 <xPortStartScheduler+0x138>)
 80097b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097bc:	4b17      	ldr	r3, [pc, #92]	@ (800981c <xPortStartScheduler+0x13c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a16      	ldr	r2, [pc, #88]	@ (800981c <xPortStartScheduler+0x13c>)
 80097c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097c8:	4b14      	ldr	r3, [pc, #80]	@ (800981c <xPortStartScheduler+0x13c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a13      	ldr	r2, [pc, #76]	@ (800981c <xPortStartScheduler+0x13c>)
 80097ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097d4:	f000 f8da 	bl	800998c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097d8:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <xPortStartScheduler+0x140>)
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097de:	f000 f8f9 	bl	80099d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <xPortStartScheduler+0x144>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009824 <xPortStartScheduler+0x144>)
 80097e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097ee:	f7ff ff63 	bl	80096b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097f2:	f7ff f817 	bl	8008824 <vTaskSwitchContext>
	prvTaskExitError();
 80097f6:	f7ff ff1d 	bl	8009634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	e000ed00 	.word	0xe000ed00
 8009808:	410fc271 	.word	0x410fc271
 800980c:	410fc270 	.word	0x410fc270
 8009810:	e000e400 	.word	0xe000e400
 8009814:	20005640 	.word	0x20005640
 8009818:	20005644 	.word	0x20005644
 800981c:	e000ed20 	.word	0xe000ed20
 8009820:	20000014 	.word	0x20000014
 8009824:	e000ef34 	.word	0xe000ef34

08009828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
}
 8009840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009842:	4b10      	ldr	r3, [pc, #64]	@ (8009884 <vPortEnterCritical+0x5c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3301      	adds	r3, #1
 8009848:	4a0e      	ldr	r2, [pc, #56]	@ (8009884 <vPortEnterCritical+0x5c>)
 800984a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800984c:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <vPortEnterCritical+0x5c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d110      	bne.n	8009876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009854:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <vPortEnterCritical+0x60>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00b      	beq.n	8009876 <vPortEnterCritical+0x4e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	603b      	str	r3, [r7, #0]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <vPortEnterCritical+0x4a>
	}
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	20000014 	.word	0x20000014
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009892:	4b12      	ldr	r3, [pc, #72]	@ (80098dc <vPortExitCritical+0x50>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10b      	bne.n	80098b2 <vPortExitCritical+0x26>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	607b      	str	r3, [r7, #4]
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	e7fd      	b.n	80098ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098b2:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <vPortExitCritical+0x50>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	4a08      	ldr	r2, [pc, #32]	@ (80098dc <vPortExitCritical+0x50>)
 80098ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <vPortExitCritical+0x50>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <vPortExitCritical+0x44>
 80098c4:	2300      	movs	r3, #0
 80098c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f383 8811 	msr	BASEPRI, r3
}
 80098ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	20000014 	.word	0x20000014

080098e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098e0:	f3ef 8009 	mrs	r0, PSP
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4b15      	ldr	r3, [pc, #84]	@ (8009940 <pxCurrentTCBConst>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	f01e 0f10 	tst.w	lr, #16
 80098f0:	bf08      	it	eq
 80098f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	6010      	str	r0, [r2, #0]
 80098fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009904:	f380 8811 	msr	BASEPRI, r0
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f7fe ff88 	bl	8008824 <vTaskSwitchContext>
 8009914:	f04f 0000 	mov.w	r0, #0
 8009918:	f380 8811 	msr	BASEPRI, r0
 800991c:	bc09      	pop	{r0, r3}
 800991e:	6819      	ldr	r1, [r3, #0]
 8009920:	6808      	ldr	r0, [r1, #0]
 8009922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009926:	f01e 0f10 	tst.w	lr, #16
 800992a:	bf08      	it	eq
 800992c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009930:	f380 8809 	msr	PSP, r0
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w

08009940 <pxCurrentTCBConst>:
 8009940:	20005014 	.word	0x20005014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
}
 8009960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009962:	f7fe fea5 	bl	80086b0 <xTaskIncrementTick>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <xPortSysTickHandler+0x40>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f383 8811 	msr	BASEPRI, r3
}
 800997e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	e000ed04 	.word	0xe000ed04

0800998c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009990:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <vPortSetupTimerInterrupt+0x34>)
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009996:	4b0b      	ldr	r3, [pc, #44]	@ (80099c4 <vPortSetupTimerInterrupt+0x38>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800999c:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <vPortSetupTimerInterrupt+0x3c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	@ (80099cc <vPortSetupTimerInterrupt+0x40>)
 80099a2:	fba2 2303 	umull	r2, r3, r2, r3
 80099a6:	099b      	lsrs	r3, r3, #6
 80099a8:	4a09      	ldr	r2, [pc, #36]	@ (80099d0 <vPortSetupTimerInterrupt+0x44>)
 80099aa:	3b01      	subs	r3, #1
 80099ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ae:	4b04      	ldr	r3, [pc, #16]	@ (80099c0 <vPortSetupTimerInterrupt+0x34>)
 80099b0:	2207      	movs	r2, #7
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	e000e010 	.word	0xe000e010
 80099c4:	e000e018 	.word	0xe000e018
 80099c8:	20000008 	.word	0x20000008
 80099cc:	10624dd3 	.word	0x10624dd3
 80099d0:	e000e014 	.word	0xe000e014

080099d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099e4 <vPortEnableVFP+0x10>
 80099d8:	6801      	ldr	r1, [r0, #0]
 80099da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099de:	6001      	str	r1, [r0, #0]
 80099e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099e2:	bf00      	nop
 80099e4:	e000ed88 	.word	0xe000ed88

080099e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ee:	f3ef 8305 	mrs	r3, IPSR
 80099f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	d915      	bls.n	8009a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099fa:	4a18      	ldr	r2, [pc, #96]	@ (8009a5c <vPortValidateInterruptPriority+0x74>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a04:	4b16      	ldr	r3, [pc, #88]	@ (8009a60 <vPortValidateInterruptPriority+0x78>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	7afa      	ldrb	r2, [r7, #11]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d20b      	bcs.n	8009a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	607b      	str	r3, [r7, #4]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a26:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <vPortValidateInterruptPriority+0x7c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a68 <vPortValidateInterruptPriority+0x80>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d90b      	bls.n	8009a4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	603b      	str	r3, [r7, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <vPortValidateInterruptPriority+0x62>
	}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	e000e3f0 	.word	0xe000e3f0
 8009a60:	20005640 	.word	0x20005640
 8009a64:	e000ed0c 	.word	0xe000ed0c
 8009a68:	20005644 	.word	0x20005644

08009a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a78:	f7fe fd5e 	bl	8008538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009bf0 <pvPortMalloc+0x184>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a84:	f000 f924 	bl	8009cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a88:	4b5a      	ldr	r3, [pc, #360]	@ (8009bf4 <pvPortMalloc+0x188>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 8095 	bne.w	8009bc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01e      	beq.n	8009ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a9c:	2208      	movs	r2, #8
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d015      	beq.n	8009ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f023 0307 	bic.w	r3, r3, #7
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00b      	beq.n	8009ada <pvPortMalloc+0x6e>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	617b      	str	r3, [r7, #20]
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop
 8009ad8:	e7fd      	b.n	8009ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d06f      	beq.n	8009bc0 <pvPortMalloc+0x154>
 8009ae0:	4b45      	ldr	r3, [pc, #276]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d86a      	bhi.n	8009bc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aea:	4b44      	ldr	r3, [pc, #272]	@ (8009bfc <pvPortMalloc+0x190>)
 8009aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aee:	4b43      	ldr	r3, [pc, #268]	@ (8009bfc <pvPortMalloc+0x190>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009af4:	e004      	b.n	8009b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d903      	bls.n	8009b12 <pvPortMalloc+0xa6>
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f1      	bne.n	8009af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b12:	4b37      	ldr	r3, [pc, #220]	@ (8009bf0 <pvPortMalloc+0x184>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d051      	beq.n	8009bc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2208      	movs	r2, #8
 8009b22:	4413      	add	r3, r2
 8009b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	1ad2      	subs	r2, r2, r3
 8009b36:	2308      	movs	r3, #8
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d920      	bls.n	8009b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4413      	add	r3, r2
 8009b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <pvPortMalloc+0xfc>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	613b      	str	r3, [r7, #16]
}
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	e7fd      	b.n	8009b64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b7a:	69b8      	ldr	r0, [r7, #24]
 8009b7c:	f000 f90a 	bl	8009d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b80:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4b1b      	ldr	r3, [pc, #108]	@ (8009c00 <pvPortMalloc+0x194>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d203      	bcs.n	8009ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b9a:	4b17      	ldr	r3, [pc, #92]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a18      	ldr	r2, [pc, #96]	@ (8009c00 <pvPortMalloc+0x194>)
 8009ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	4b13      	ldr	r3, [pc, #76]	@ (8009bf4 <pvPortMalloc+0x188>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bb6:	4b13      	ldr	r3, [pc, #76]	@ (8009c04 <pvPortMalloc+0x198>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <pvPortMalloc+0x198>)
 8009bbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bc0:	f7fe fcc8 	bl	8008554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <pvPortMalloc+0x17a>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	60fb      	str	r3, [r7, #12]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <pvPortMalloc+0x176>
	return pvReturn;
 8009be6:	69fb      	ldr	r3, [r7, #28]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3728      	adds	r7, #40	@ 0x28
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20006250 	.word	0x20006250
 8009bf4:	20006264 	.word	0x20006264
 8009bf8:	20006254 	.word	0x20006254
 8009bfc:	20006248 	.word	0x20006248
 8009c00:	20006258 	.word	0x20006258
 8009c04:	2000625c 	.word	0x2000625c

08009c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d04f      	beq.n	8009cba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c1a:	2308      	movs	r3, #8
 8009c1c:	425b      	negs	r3, r3
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4413      	add	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	4b25      	ldr	r3, [pc, #148]	@ (8009cc4 <vPortFree+0xbc>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4013      	ands	r3, r2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <vPortFree+0x46>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	60fb      	str	r3, [r7, #12]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <vPortFree+0x66>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	60bb      	str	r3, [r7, #8]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	4b14      	ldr	r3, [pc, #80]	@ (8009cc4 <vPortFree+0xbc>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4013      	ands	r3, r2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01e      	beq.n	8009cba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d11a      	bne.n	8009cba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc4 <vPortFree+0xbc>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	43db      	mvns	r3, r3
 8009c8e:	401a      	ands	r2, r3
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c94:	f7fe fc50 	bl	8008538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <vPortFree+0xc0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4a09      	ldr	r2, [pc, #36]	@ (8009cc8 <vPortFree+0xc0>)
 8009ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f000 f874 	bl	8009d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cac:	4b07      	ldr	r3, [pc, #28]	@ (8009ccc <vPortFree+0xc4>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	4a06      	ldr	r2, [pc, #24]	@ (8009ccc <vPortFree+0xc4>)
 8009cb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cb6:	f7fe fc4d 	bl	8008554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cba:	bf00      	nop
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20006264 	.word	0x20006264
 8009cc8:	20006254 	.word	0x20006254
 8009ccc:	20006260 	.word	0x20006260

08009cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cdc:	4b27      	ldr	r3, [pc, #156]	@ (8009d7c <prvHeapInit+0xac>)
 8009cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00c      	beq.n	8009d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3307      	adds	r3, #7
 8009cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8009d7c <prvHeapInit+0xac>)
 8009d00:	4413      	add	r3, r2
 8009d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d08:	4a1d      	ldr	r2, [pc, #116]	@ (8009d80 <prvHeapInit+0xb0>)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009d80 <prvHeapInit+0xb0>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4a15      	ldr	r2, [pc, #84]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d32:	4b14      	ldr	r3, [pc, #80]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d3a:	4b12      	ldr	r3, [pc, #72]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	1ad2      	subs	r2, r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d50:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d88 <prvHeapInit+0xb8>)
 8009d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	4a09      	ldr	r2, [pc, #36]	@ (8009d8c <prvHeapInit+0xbc>)
 8009d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d68:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <prvHeapInit+0xc0>)
 8009d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d6e:	601a      	str	r2, [r3, #0]
}
 8009d70:	bf00      	nop
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20005648 	.word	0x20005648
 8009d80:	20006248 	.word	0x20006248
 8009d84:	20006250 	.word	0x20006250
 8009d88:	20006258 	.word	0x20006258
 8009d8c:	20006254 	.word	0x20006254
 8009d90:	20006264 	.word	0x20006264

08009d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d9c:	4b28      	ldr	r3, [pc, #160]	@ (8009e40 <prvInsertBlockIntoFreeList+0xac>)
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e002      	b.n	8009da8 <prvInsertBlockIntoFreeList+0x14>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d8f7      	bhi.n	8009da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d108      	bne.n	8009dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	441a      	add	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	441a      	add	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d118      	bne.n	8009e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b15      	ldr	r3, [pc, #84]	@ (8009e44 <prvInsertBlockIntoFreeList+0xb0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d00d      	beq.n	8009e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	441a      	add	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e008      	b.n	8009e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e12:	4b0c      	ldr	r3, [pc, #48]	@ (8009e44 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	e003      	b.n	8009e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d002      	beq.n	8009e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20006248 	.word	0x20006248
 8009e44:	20006250 	.word	0x20006250

08009e48 <rcl_get_zero_initialized_init_options>:
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4770      	bx	lr

08009e4c <rcl_init_options_init>:
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e50:	b097      	sub	sp, #92	@ 0x5c
 8009e52:	ae1d      	add	r6, sp, #116	@ 0x74
 8009e54:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d058      	beq.n	8009f0e <rcl_init_options_init+0xc2>
 8009e5c:	6803      	ldr	r3, [r0, #0]
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b133      	cbz	r3, 8009e70 <rcl_init_options_init+0x24>
 8009e62:	2464      	movs	r4, #100	@ 0x64
 8009e64:	4620      	mov	r0, r4
 8009e66:	b017      	add	sp, #92	@ 0x5c
 8009e68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009e6c:	b004      	add	sp, #16
 8009e6e:	4770      	bx	lr
 8009e70:	4630      	mov	r0, r6
 8009e72:	f001 f997 	bl	800b1a4 <rcutils_allocator_is_valid>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d049      	beq.n	8009f0e <rcl_init_options_init+0xc2>
 8009e7a:	46b4      	mov	ip, r6
 8009e7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e80:	ac11      	add	r4, sp, #68	@ 0x44
 8009e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e84:	f8dc 3000 	ldr.w	r3, [ip]
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8009e8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e8e:	2050      	movs	r0, #80	@ 0x50
 8009e90:	4798      	blx	r3
 8009e92:	4604      	mov	r4, r0
 8009e94:	6028      	str	r0, [r5, #0]
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d03b      	beq.n	8009f12 <rcl_init_options_init+0xc6>
 8009e9a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009e9e:	4686      	mov	lr, r0
 8009ea0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ea4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009ea8:	f8dc 3000 	ldr.w	r3, [ip]
 8009eac:	f8ce 3000 	str.w	r3, [lr]
 8009eb0:	a802      	add	r0, sp, #8
 8009eb2:	f001 fa09 	bl	800b2c8 <rmw_get_zero_initialized_init_options>
 8009eb6:	f10d 0e08 	add.w	lr, sp, #8
 8009eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ebe:	f104 0c18 	add.w	ip, r4, #24
 8009ec2:	682f      	ldr	r7, [r5, #0]
 8009ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ec8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ecc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ed0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ed4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ed8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009edc:	ac20      	add	r4, sp, #128	@ 0x80
 8009ede:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ee6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009eea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009eee:	f107 0018 	add.w	r0, r7, #24
 8009ef2:	f001 fa17 	bl	800b324 <rmw_init_options_init>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d0b3      	beq.n	8009e64 <rcl_init_options_init+0x18>
 8009efc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8009efe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009f00:	6828      	ldr	r0, [r5, #0]
 8009f02:	4798      	blx	r3
 8009f04:	4620      	mov	r0, r4
 8009f06:	f007 faa9 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	e7aa      	b.n	8009e64 <rcl_init_options_init+0x18>
 8009f0e:	240b      	movs	r4, #11
 8009f10:	e7a8      	b.n	8009e64 <rcl_init_options_init+0x18>
 8009f12:	240a      	movs	r4, #10
 8009f14:	e7a6      	b.n	8009e64 <rcl_init_options_init+0x18>
 8009f16:	bf00      	nop

08009f18 <rcl_init_options_fini>:
 8009f18:	b530      	push	{r4, r5, lr}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	b1f0      	cbz	r0, 8009f5c <rcl_init_options_fini+0x44>
 8009f1e:	6803      	ldr	r3, [r0, #0]
 8009f20:	4604      	mov	r4, r0
 8009f22:	b1db      	cbz	r3, 8009f5c <rcl_init_options_fini+0x44>
 8009f24:	469c      	mov	ip, r3
 8009f26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f2a:	f10d 0e04 	add.w	lr, sp, #4
 8009f2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f32:	f8dc 3000 	ldr.w	r3, [ip]
 8009f36:	f8ce 3000 	str.w	r3, [lr]
 8009f3a:	a801      	add	r0, sp, #4
 8009f3c:	f001 f932 	bl	800b1a4 <rcutils_allocator_is_valid>
 8009f40:	b160      	cbz	r0, 8009f5c <rcl_init_options_fini+0x44>
 8009f42:	6820      	ldr	r0, [r4, #0]
 8009f44:	3018      	adds	r0, #24
 8009f46:	f001 fac3 	bl	800b4d0 <rmw_init_options_fini>
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	b950      	cbnz	r0, 8009f64 <rcl_init_options_fini+0x4c>
 8009f4e:	6820      	ldr	r0, [r4, #0]
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	9905      	ldr	r1, [sp, #20]
 8009f54:	4798      	blx	r3
 8009f56:	4628      	mov	r0, r5
 8009f58:	b007      	add	sp, #28
 8009f5a:	bd30      	pop	{r4, r5, pc}
 8009f5c:	250b      	movs	r5, #11
 8009f5e:	4628      	mov	r0, r5
 8009f60:	b007      	add	sp, #28
 8009f62:	bd30      	pop	{r4, r5, pc}
 8009f64:	f007 fa7a 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8009f68:	4605      	mov	r5, r0
 8009f6a:	e7f8      	b.n	8009f5e <rcl_init_options_fini+0x46>

08009f6c <rcl_init_options_copy>:
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	b094      	sub	sp, #80	@ 0x50
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d058      	beq.n	800a028 <rcl_init_options_copy+0xbc>
 8009f76:	4604      	mov	r4, r0
 8009f78:	6800      	ldr	r0, [r0, #0]
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d054      	beq.n	800a028 <rcl_init_options_copy+0xbc>
 8009f7e:	460e      	mov	r6, r1
 8009f80:	f001 f910 	bl	800b1a4 <rcutils_allocator_is_valid>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d04f      	beq.n	800a028 <rcl_init_options_copy+0xbc>
 8009f88:	2e00      	cmp	r6, #0
 8009f8a:	d04d      	beq.n	800a028 <rcl_init_options_copy+0xbc>
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	b123      	cbz	r3, 8009f9a <rcl_init_options_copy+0x2e>
 8009f90:	2464      	movs	r4, #100	@ 0x64
 8009f92:	4620      	mov	r0, r4
 8009f94:	b014      	add	sp, #80	@ 0x50
 8009f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9a:	6827      	ldr	r7, [r4, #0]
 8009f9c:	46bc      	mov	ip, r7
 8009f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009fa2:	ad0f      	add	r5, sp, #60	@ 0x3c
 8009fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8009faa:	f8d7 8000 	ldr.w	r8, [r7]
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	2050      	movs	r0, #80	@ 0x50
 8009fb4:	47c0      	blx	r8
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	6030      	str	r0, [r6, #0]
 8009fba:	b3d0      	cbz	r0, 800a032 <rcl_init_options_copy+0xc6>
 8009fbc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8009fc0:	4686      	mov	lr, r0
 8009fc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009fc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009fca:	f8dc 3000 	ldr.w	r3, [ip]
 8009fce:	f8ce 3000 	str.w	r3, [lr]
 8009fd2:	4668      	mov	r0, sp
 8009fd4:	f001 f978 	bl	800b2c8 <rmw_get_zero_initialized_init_options>
 8009fd8:	46ee      	mov	lr, sp
 8009fda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009fde:	f105 0c18 	add.w	ip, r5, #24
 8009fe2:	6824      	ldr	r4, [r4, #0]
 8009fe4:	6835      	ldr	r5, [r6, #0]
 8009fe6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009fea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009fee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ff2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ff6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ffa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009ffe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a002:	f104 0018 	add.w	r0, r4, #24
 800a006:	f105 0118 	add.w	r1, r5, #24
 800a00a:	f001 f9ed 	bl	800b3e8 <rmw_init_options_copy>
 800a00e:	4604      	mov	r4, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	d0be      	beq.n	8009f92 <rcl_init_options_copy+0x26>
 800a014:	f001 f8d4 	bl	800b1c0 <rcutils_get_error_string>
 800a018:	f001 f8ea 	bl	800b1f0 <rcutils_reset_error>
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7ff ff7b 	bl	8009f18 <rcl_init_options_fini>
 800a022:	b140      	cbz	r0, 800a036 <rcl_init_options_copy+0xca>
 800a024:	4604      	mov	r4, r0
 800a026:	e7b4      	b.n	8009f92 <rcl_init_options_copy+0x26>
 800a028:	240b      	movs	r4, #11
 800a02a:	4620      	mov	r0, r4
 800a02c:	b014      	add	sp, #80	@ 0x50
 800a02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a032:	240a      	movs	r4, #10
 800a034:	e7ad      	b.n	8009f92 <rcl_init_options_copy+0x26>
 800a036:	4620      	mov	r0, r4
 800a038:	b014      	add	sp, #80	@ 0x50
 800a03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a03e:	f007 ba0d 	b.w	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 800a042:	bf00      	nop

0800a044 <rcl_init_options_set_domain_id>:
 800a044:	b120      	cbz	r0, 800a050 <rcl_init_options_set_domain_id+0xc>
 800a046:	6803      	ldr	r3, [r0, #0]
 800a048:	b113      	cbz	r3, 800a050 <rcl_init_options_set_domain_id+0xc>
 800a04a:	6259      	str	r1, [r3, #36]	@ 0x24
 800a04c:	2000      	movs	r0, #0
 800a04e:	4770      	bx	lr
 800a050:	200b      	movs	r0, #11
 800a052:	4770      	bx	lr

0800a054 <rcl_get_zero_initialized_publisher>:
 800a054:	4b01      	ldr	r3, [pc, #4]	@ (800a05c <rcl_get_zero_initialized_publisher+0x8>)
 800a056:	6818      	ldr	r0, [r3, #0]
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	0801806c 	.word	0x0801806c

0800a060 <rcl_publisher_init>:
 800a060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a064:	b088      	sub	sp, #32
 800a066:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a068:	2d00      	cmp	r5, #0
 800a06a:	d069      	beq.n	800a140 <rcl_publisher_init+0xe0>
 800a06c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a070:	4604      	mov	r4, r0
 800a072:	4648      	mov	r0, r9
 800a074:	460e      	mov	r6, r1
 800a076:	4690      	mov	r8, r2
 800a078:	461f      	mov	r7, r3
 800a07a:	f001 f893 	bl	800b1a4 <rcutils_allocator_is_valid>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d05e      	beq.n	800a140 <rcl_publisher_init+0xe0>
 800a082:	2c00      	cmp	r4, #0
 800a084:	d05c      	beq.n	800a140 <rcl_publisher_init+0xe0>
 800a086:	f8d4 a000 	ldr.w	sl, [r4]
 800a08a:	f1ba 0f00 	cmp.w	sl, #0
 800a08e:	d004      	beq.n	800a09a <rcl_publisher_init+0x3a>
 800a090:	2764      	movs	r7, #100	@ 0x64
 800a092:	4638      	mov	r0, r7
 800a094:	b008      	add	sp, #32
 800a096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09a:	4630      	mov	r0, r6
 800a09c:	f007 fcc2 	bl	8011a24 <rcl_node_is_valid>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d052      	beq.n	800a14a <rcl_publisher_init+0xea>
 800a0a4:	f1b8 0f00 	cmp.w	r8, #0
 800a0a8:	d04a      	beq.n	800a140 <rcl_publisher_init+0xe0>
 800a0aa:	2f00      	cmp	r7, #0
 800a0ac:	d048      	beq.n	800a140 <rcl_publisher_init+0xe0>
 800a0ae:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a0b2:	aa07      	add	r2, sp, #28
 800a0b4:	9205      	str	r2, [sp, #20]
 800a0b6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a0ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a0c2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f007 fcfd 	bl	8011acc <rcl_node_resolve_name>
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d14f      	bne.n	800a178 <rcl_publisher_init+0x118>
 800a0d8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a0da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a0dc:	20c8      	movs	r0, #200	@ 0xc8
 800a0de:	4798      	blx	r3
 800a0e0:	6020      	str	r0, [r4, #0]
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d04e      	beq.n	800a184 <rcl_publisher_init+0x124>
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f007 fcbe 	bl	8011a68 <rcl_node_get_rmw_handle>
 800a0ec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	9a07      	ldr	r2, [sp, #28]
 800a0f4:	6827      	ldr	r7, [r4, #0]
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	f001 fd15 	bl	800bb28 <rmw_create_publisher>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a104:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a108:	b370      	cbz	r0, 800a168 <rcl_publisher_init+0x108>
 800a10a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a10e:	f001 fde9 	bl	800bce4 <rmw_publisher_get_actual_qos>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	4607      	mov	r7, r0
 800a116:	b9d0      	cbnz	r0, 800a14e <rcl_publisher_init+0xee>
 800a118:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a11c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a120:	4629      	mov	r1, r5
 800a122:	2270      	movs	r2, #112	@ 0x70
 800a124:	4618      	mov	r0, r3
 800a126:	f00d f83e 	bl	80171a6 <memcpy>
 800a12a:	6832      	ldr	r2, [r6, #0]
 800a12c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a130:	9807      	ldr	r0, [sp, #28]
 800a132:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a134:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a136:	4798      	blx	r3
 800a138:	4638      	mov	r0, r7
 800a13a:	b008      	add	sp, #32
 800a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a140:	270b      	movs	r7, #11
 800a142:	4638      	mov	r0, r7
 800a144:	b008      	add	sp, #32
 800a146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14a:	27c8      	movs	r7, #200	@ 0xc8
 800a14c:	e7a1      	b.n	800a092 <rcl_publisher_init+0x32>
 800a14e:	b18b      	cbz	r3, 800a174 <rcl_publisher_init+0x114>
 800a150:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a154:	b142      	cbz	r2, 800a168 <rcl_publisher_init+0x108>
 800a156:	4630      	mov	r0, r6
 800a158:	f007 fc86 	bl	8011a68 <rcl_node_get_rmw_handle>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a162:	f001 fdcf 	bl	800bd04 <rmw_destroy_publisher>
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a16a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a16c:	4618      	mov	r0, r3
 800a16e:	4790      	blx	r2
 800a170:	2300      	movs	r3, #0
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	2701      	movs	r7, #1
 800a176:	e7db      	b.n	800a130 <rcl_publisher_init+0xd0>
 800a178:	2867      	cmp	r0, #103	@ 0x67
 800a17a:	d0d9      	beq.n	800a130 <rcl_publisher_init+0xd0>
 800a17c:	2869      	cmp	r0, #105	@ 0x69
 800a17e:	d003      	beq.n	800a188 <rcl_publisher_init+0x128>
 800a180:	280a      	cmp	r0, #10
 800a182:	d1f7      	bne.n	800a174 <rcl_publisher_init+0x114>
 800a184:	270a      	movs	r7, #10
 800a186:	e7d3      	b.n	800a130 <rcl_publisher_init+0xd0>
 800a188:	2767      	movs	r7, #103	@ 0x67
 800a18a:	e7d1      	b.n	800a130 <rcl_publisher_init+0xd0>

0800a18c <rcl_publisher_get_default_options>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4d14      	ldr	r5, [pc, #80]	@ (800a1e0 <rcl_publisher_get_default_options+0x54>)
 800a190:	4914      	ldr	r1, [pc, #80]	@ (800a1e4 <rcl_publisher_get_default_options+0x58>)
 800a192:	b088      	sub	sp, #32
 800a194:	4604      	mov	r4, r0
 800a196:	2250      	movs	r2, #80	@ 0x50
 800a198:	4628      	mov	r0, r5
 800a19a:	f00d f804 	bl	80171a6 <memcpy>
 800a19e:	a802      	add	r0, sp, #8
 800a1a0:	f000 fff2 	bl	800b188 <rcutils_get_default_allocator>
 800a1a4:	f10d 0c08 	add.w	ip, sp, #8
 800a1a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a1ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a1b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a1b4:	466e      	mov	r6, sp
 800a1b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a1ba:	f8ce 3000 	str.w	r3, [lr]
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f001 f892 	bl	800b2e8 <rmw_get_default_publisher_options>
 800a1c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a1c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a1cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1d0:	2270      	movs	r2, #112	@ 0x70
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f00c ffe6 	bl	80171a6 <memcpy>
 800a1da:	4620      	mov	r0, r4
 800a1dc:	b008      	add	sp, #32
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	20006268 	.word	0x20006268
 800a1e4:	08018070 	.word	0x08018070

0800a1e8 <rcl_publish>:
 800a1e8:	b1f8      	cbz	r0, 800a22a <rcl_publish+0x42>
 800a1ea:	6803      	ldr	r3, [r0, #0]
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	b1b3      	cbz	r3, 800a220 <rcl_publish+0x38>
 800a1f2:	4616      	mov	r6, r2
 800a1f4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a1f8:	b192      	cbz	r2, 800a220 <rcl_publish+0x38>
 800a1fa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a1fe:	460d      	mov	r5, r1
 800a200:	f007 f94a 	bl	8011498 <rcl_context_is_valid>
 800a204:	b160      	cbz	r0, 800a220 <rcl_publish+0x38>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a20c:	b140      	cbz	r0, 800a220 <rcl_publish+0x38>
 800a20e:	b155      	cbz	r5, 800a226 <rcl_publish+0x3e>
 800a210:	4632      	mov	r2, r6
 800a212:	4629      	mov	r1, r5
 800a214:	f001 fc28 	bl	800ba68 <rmw_publish>
 800a218:	3800      	subs	r0, #0
 800a21a:	bf18      	it	ne
 800a21c:	2001      	movne	r0, #1
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
 800a220:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	200b      	movs	r0, #11
 800a228:	bd70      	pop	{r4, r5, r6, pc}
 800a22a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a22e:	4770      	bx	lr

0800a230 <rcl_publisher_is_valid>:
 800a230:	b1a0      	cbz	r0, 800a25c <rcl_publisher_is_valid+0x2c>
 800a232:	6803      	ldr	r3, [r0, #0]
 800a234:	b510      	push	{r4, lr}
 800a236:	4604      	mov	r4, r0
 800a238:	b173      	cbz	r3, 800a258 <rcl_publisher_is_valid+0x28>
 800a23a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a23e:	b15a      	cbz	r2, 800a258 <rcl_publisher_is_valid+0x28>
 800a240:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a244:	f007 f928 	bl	8011498 <rcl_context_is_valid>
 800a248:	b130      	cbz	r0, 800a258 <rcl_publisher_is_valid+0x28>
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a250:	3800      	subs	r0, #0
 800a252:	bf18      	it	ne
 800a254:	2001      	movne	r0, #1
 800a256:	bd10      	pop	{r4, pc}
 800a258:	2000      	movs	r0, #0
 800a25a:	bd10      	pop	{r4, pc}
 800a25c:	2000      	movs	r0, #0
 800a25e:	4770      	bx	lr

0800a260 <rcl_publisher_is_valid_except_context>:
 800a260:	b130      	cbz	r0, 800a270 <rcl_publisher_is_valid_except_context+0x10>
 800a262:	6800      	ldr	r0, [r0, #0]
 800a264:	b120      	cbz	r0, 800a270 <rcl_publisher_is_valid_except_context+0x10>
 800a266:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a26a:	3800      	subs	r0, #0
 800a26c:	bf18      	it	ne
 800a26e:	2001      	movne	r0, #1
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop

0800a274 <_rclc_check_for_new_data>:
 800a274:	2800      	cmp	r0, #0
 800a276:	d046      	beq.n	800a306 <_rclc_check_for_new_data+0x92>
 800a278:	b510      	push	{r4, lr}
 800a27a:	7802      	ldrb	r2, [r0, #0]
 800a27c:	b084      	sub	sp, #16
 800a27e:	4603      	mov	r3, r0
 800a280:	2a0a      	cmp	r2, #10
 800a282:	d842      	bhi.n	800a30a <_rclc_check_for_new_data+0x96>
 800a284:	e8df f002 	tbb	[pc, r2]
 800a288:	14181212 	.word	0x14181212
 800a28c:	06060614 	.word	0x06060614
 800a290:	2e1a      	.short	0x2e1a
 800a292:	16          	.byte	0x16
 800a293:	00          	.byte	0x00
 800a294:	6a0a      	ldr	r2, [r1, #32]
 800a296:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a298:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a29c:	2000      	movs	r0, #0
 800a29e:	1a12      	subs	r2, r2, r0
 800a2a0:	bf18      	it	ne
 800a2a2:	2201      	movne	r2, #1
 800a2a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a2a8:	b004      	add	sp, #16
 800a2aa:	bd10      	pop	{r4, pc}
 800a2ac:	680a      	ldr	r2, [r1, #0]
 800a2ae:	e7f2      	b.n	800a296 <_rclc_check_for_new_data+0x22>
 800a2b0:	698a      	ldr	r2, [r1, #24]
 800a2b2:	e7f0      	b.n	800a296 <_rclc_check_for_new_data+0x22>
 800a2b4:	688a      	ldr	r2, [r1, #8]
 800a2b6:	e7ee      	b.n	800a296 <_rclc_check_for_new_data+0x22>
 800a2b8:	690a      	ldr	r2, [r1, #16]
 800a2ba:	e7ec      	b.n	800a296 <_rclc_check_for_new_data+0x22>
 800a2bc:	685c      	ldr	r4, [r3, #4]
 800a2be:	4608      	mov	r0, r1
 800a2c0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a2c4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a2c8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a2cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a2d6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a2da:	f104 0110 	add.w	r1, r4, #16
 800a2de:	f009 f967 	bl	80135b0 <rcl_action_client_wait_set_get_entities_ready>
 800a2e2:	e7e1      	b.n	800a2a8 <_rclc_check_for_new_data+0x34>
 800a2e4:	685c      	ldr	r4, [r3, #4]
 800a2e6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a2ea:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a2ee:	e9cd 3200 	strd	r3, r2, [sp]
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a2f8:	f104 0220 	add.w	r2, r4, #32
 800a2fc:	f104 0110 	add.w	r1, r4, #16
 800a300:	f009 fb6e 	bl	80139e0 <rcl_action_server_wait_set_get_entities_ready>
 800a304:	e7d0      	b.n	800a2a8 <_rclc_check_for_new_data+0x34>
 800a306:	200b      	movs	r0, #11
 800a308:	4770      	bx	lr
 800a30a:	2001      	movs	r0, #1
 800a30c:	e7cc      	b.n	800a2a8 <_rclc_check_for_new_data+0x34>
 800a30e:	bf00      	nop

0800a310 <_rclc_take_new_data>:
 800a310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a312:	b09b      	sub	sp, #108	@ 0x6c
 800a314:	2800      	cmp	r0, #0
 800a316:	f000 8088 	beq.w	800a42a <_rclc_take_new_data+0x11a>
 800a31a:	7803      	ldrb	r3, [r0, #0]
 800a31c:	4604      	mov	r4, r0
 800a31e:	2b0a      	cmp	r3, #10
 800a320:	f200 8167 	bhi.w	800a5f2 <_rclc_take_new_data+0x2e2>
 800a324:	e8df f003 	tbb	[pc, r3]
 800a328:	44152d2d 	.word	0x44152d2d
 800a32c:	19191944 	.word	0x19191944
 800a330:	065a      	.short	0x065a
 800a332:	15          	.byte	0x15
 800a333:	00          	.byte	0x00
 800a334:	6840      	ldr	r0, [r0, #4]
 800a336:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 80b2 	bne.w	800a4a4 <_rclc_take_new_data+0x194>
 800a340:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a344:	2b00      	cmp	r3, #0
 800a346:	f040 80e4 	bne.w	800a512 <_rclc_take_new_data+0x202>
 800a34a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d16f      	bne.n	800a432 <_rclc_take_new_data+0x122>
 800a352:	2500      	movs	r5, #0
 800a354:	4628      	mov	r0, r5
 800a356:	b01b      	add	sp, #108	@ 0x6c
 800a358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a35a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a35c:	6a0b      	ldr	r3, [r1, #32]
 800a35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0f5      	beq.n	800a352 <_rclc_take_new_data+0x42>
 800a366:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a36a:	f104 0110 	add.w	r1, r4, #16
 800a36e:	f007 fc5b 	bl	8011c28 <rcl_take_request>
 800a372:	4605      	mov	r5, r0
 800a374:	2800      	cmp	r0, #0
 800a376:	d0ec      	beq.n	800a352 <_rclc_take_new_data+0x42>
 800a378:	f240 2359 	movw	r3, #601	@ 0x259
 800a37c:	4298      	cmp	r0, r3
 800a37e:	d013      	beq.n	800a3a8 <_rclc_take_new_data+0x98>
 800a380:	e029      	b.n	800a3d6 <_rclc_take_new_data+0xc6>
 800a382:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a384:	680b      	ldr	r3, [r1, #0]
 800a386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0e1      	beq.n	800a352 <_rclc_take_new_data+0x42>
 800a38e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a392:	2300      	movs	r3, #0
 800a394:	aa0a      	add	r2, sp, #40	@ 0x28
 800a396:	f007 fd85 	bl	8011ea4 <rcl_take>
 800a39a:	4605      	mov	r5, r0
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0d9      	beq.n	800a354 <_rclc_take_new_data+0x44>
 800a3a0:	f240 1391 	movw	r3, #401	@ 0x191
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	d116      	bne.n	800a3d6 <_rclc_take_new_data+0xc6>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a3ae:	e7d1      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a3b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a3b2:	698b      	ldr	r3, [r1, #24]
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0ca      	beq.n	800a352 <_rclc_take_new_data+0x42>
 800a3bc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a3c0:	f104 0110 	add.w	r1, r4, #16
 800a3c4:	f006 fff8 	bl	80113b8 <rcl_take_response>
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0c1      	beq.n	800a352 <_rclc_take_new_data+0x42>
 800a3ce:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a3d2:	4298      	cmp	r0, r3
 800a3d4:	d0be      	beq.n	800a354 <_rclc_take_new_data+0x44>
 800a3d6:	f000 ff0b 	bl	800b1f0 <rcutils_reset_error>
 800a3da:	e7bb      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a3dc:	6840      	ldr	r0, [r0, #4]
 800a3de:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d17d      	bne.n	800a4e2 <_rclc_take_new_data+0x1d2>
 800a3e6:	69c3      	ldr	r3, [r0, #28]
 800a3e8:	b11b      	cbz	r3, 800a3f2 <_rclc_take_new_data+0xe2>
 800a3ea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d144      	bne.n	800a47c <_rclc_take_new_data+0x16c>
 800a3f2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f040 80ac 	bne.w	800a554 <_rclc_take_new_data+0x244>
 800a3fc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0a6      	beq.n	800a352 <_rclc_take_new_data+0x42>
 800a404:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a406:	a90a      	add	r1, sp, #40	@ 0x28
 800a408:	3010      	adds	r0, #16
 800a40a:	f008 ffa9 	bl	8013360 <rcl_action_take_result_response>
 800a40e:	4605      	mov	r5, r0
 800a410:	2800      	cmp	r0, #0
 800a412:	d1e0      	bne.n	800a3d6 <_rclc_take_new_data+0xc6>
 800a414:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a418:	6860      	ldr	r0, [r4, #4]
 800a41a:	f009 fc05 	bl	8013c28 <rclc_action_find_handle_by_result_request_sequence_number>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d098      	beq.n	800a354 <_rclc_take_new_data+0x44>
 800a422:	2301      	movs	r3, #1
 800a424:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a428:	e794      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a42a:	250b      	movs	r5, #11
 800a42c:	4628      	mov	r0, r5
 800a42e:	b01b      	add	sp, #108	@ 0x6c
 800a430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a432:	ae04      	add	r6, sp, #16
 800a434:	aa0a      	add	r2, sp, #40	@ 0x28
 800a436:	3010      	adds	r0, #16
 800a438:	4631      	mov	r1, r6
 800a43a:	f009 fa05 	bl	8013848 <rcl_action_take_cancel_request>
 800a43e:	4605      	mov	r5, r0
 800a440:	2800      	cmp	r0, #0
 800a442:	d1c8      	bne.n	800a3d6 <_rclc_take_new_data+0xc6>
 800a444:	6860      	ldr	r0, [r4, #4]
 800a446:	a90a      	add	r1, sp, #40	@ 0x28
 800a448:	f009 fbac 	bl	8013ba4 <rclc_action_find_goal_handle_by_uuid>
 800a44c:	4607      	mov	r7, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	f000 80bb 	beq.w	800a5ca <_rclc_take_new_data+0x2ba>
 800a454:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a458:	2101      	movs	r1, #1
 800a45a:	f009 fb2d 	bl	8013ab8 <rcl_action_transition_goal_state>
 800a45e:	2803      	cmp	r0, #3
 800a460:	4684      	mov	ip, r0
 800a462:	f040 80a7 	bne.w	800a5b4 <_rclc_take_new_data+0x2a4>
 800a466:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a468:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a46c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a46e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a472:	e884 0003 	stmia.w	r4, {r0, r1}
 800a476:	f887 c008 	strb.w	ip, [r7, #8]
 800a47a:	e76b      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a47c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a47e:	3010      	adds	r0, #16
 800a480:	f008 ffee 	bl	8013460 <rcl_action_take_feedback>
 800a484:	4605      	mov	r5, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d1a5      	bne.n	800a3d6 <_rclc_take_new_data+0xc6>
 800a48a:	6860      	ldr	r0, [r4, #4]
 800a48c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a48e:	f009 fb89 	bl	8013ba4 <rclc_action_find_goal_handle_by_uuid>
 800a492:	4603      	mov	r3, r0
 800a494:	2800      	cmp	r0, #0
 800a496:	f000 80a3 	beq.w	800a5e0 <_rclc_take_new_data+0x2d0>
 800a49a:	2201      	movs	r2, #1
 800a49c:	6860      	ldr	r0, [r4, #4]
 800a49e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a4a2:	e7a6      	b.n	800a3f2 <_rclc_take_new_data+0xe2>
 800a4a4:	f009 fb58 	bl	8013b58 <rclc_action_take_goal_handle>
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	6860      	ldr	r0, [r4, #4]
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	f43f af47 	beq.w	800a340 <_rclc_take_new_data+0x30>
 800a4b2:	6070      	str	r0, [r6, #4]
 800a4b4:	69f2      	ldr	r2, [r6, #28]
 800a4b6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a4ba:	3010      	adds	r0, #16
 800a4bc:	f009 f90c 	bl	80136d8 <rcl_action_take_goal_request>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	f040 808e 	bne.w	800a5e4 <_rclc_take_new_data+0x2d4>
 800a4c8:	69f7      	ldr	r7, [r6, #28]
 800a4ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a4cc:	7235      	strb	r5, [r6, #8]
 800a4ce:	f8c6 0009 	str.w	r0, [r6, #9]
 800a4d2:	f8c6 100d 	str.w	r1, [r6, #13]
 800a4d6:	6860      	ldr	r0, [r4, #4]
 800a4d8:	f8c6 2011 	str.w	r2, [r6, #17]
 800a4dc:	f8c6 3015 	str.w	r3, [r6, #21]
 800a4e0:	e72e      	b.n	800a340 <_rclc_take_new_data+0x30>
 800a4e2:	aa04      	add	r2, sp, #16
 800a4e4:	a90a      	add	r1, sp, #40	@ 0x28
 800a4e6:	3010      	adds	r0, #16
 800a4e8:	f008 fec2 	bl	8013270 <rcl_action_take_goal_response>
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f47f af71 	bne.w	800a3d6 <_rclc_take_new_data+0xc6>
 800a4f4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4f8:	6860      	ldr	r0, [r4, #4]
 800a4fa:	f009 fb83 	bl	8013c04 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a4fe:	b130      	cbz	r0, 800a50e <_rclc_take_new_data+0x1fe>
 800a500:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a504:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a508:	2201      	movs	r2, #1
 800a50a:	f880 2020 	strb.w	r2, [r0, #32]
 800a50e:	6860      	ldr	r0, [r4, #4]
 800a510:	e769      	b.n	800a3e6 <_rclc_take_new_data+0xd6>
 800a512:	aa04      	add	r2, sp, #16
 800a514:	3010      	adds	r0, #16
 800a516:	a90a      	add	r1, sp, #40	@ 0x28
 800a518:	f009 f956 	bl	80137c8 <rcl_action_take_result_request>
 800a51c:	4605      	mov	r5, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	f47f af59 	bne.w	800a3d6 <_rclc_take_new_data+0xc6>
 800a524:	6860      	ldr	r0, [r4, #4]
 800a526:	a904      	add	r1, sp, #16
 800a528:	f009 fb3c 	bl	8013ba4 <rclc_action_find_goal_handle_by_uuid>
 800a52c:	4607      	mov	r7, r0
 800a52e:	b160      	cbz	r0, 800a54a <_rclc_take_new_data+0x23a>
 800a530:	ad0a      	add	r5, sp, #40	@ 0x28
 800a532:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a538:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a53a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a53e:	f04f 0c02 	mov.w	ip, #2
 800a542:	e886 0003 	stmia.w	r6, {r0, r1}
 800a546:	f887 c008 	strb.w	ip, [r7, #8]
 800a54a:	6860      	ldr	r0, [r4, #4]
 800a54c:	2300      	movs	r3, #0
 800a54e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a552:	e6fa      	b.n	800a34a <_rclc_take_new_data+0x3a>
 800a554:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a558:	a90a      	add	r1, sp, #40	@ 0x28
 800a55a:	3010      	adds	r0, #16
 800a55c:	f008 ff40 	bl	80133e0 <rcl_action_take_cancel_response>
 800a560:	4605      	mov	r5, r0
 800a562:	2800      	cmp	r0, #0
 800a564:	f47f af37 	bne.w	800a3d6 <_rclc_take_new_data+0xc6>
 800a568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a56c:	6860      	ldr	r0, [r4, #4]
 800a56e:	f009 fb6d 	bl	8013c4c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a572:	4606      	mov	r6, r0
 800a574:	6860      	ldr	r0, [r4, #4]
 800a576:	2e00      	cmp	r6, #0
 800a578:	f43f af40 	beq.w	800a3fc <_rclc_take_new_data+0xec>
 800a57c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a57e:	2701      	movs	r7, #1
 800a580:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a582:	2b00      	cmp	r3, #0
 800a584:	f43f af3a 	beq.w	800a3fc <_rclc_take_new_data+0xec>
 800a588:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a58a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a58e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a592:	f009 fb07 	bl	8013ba4 <rclc_action_find_goal_handle_by_uuid>
 800a596:	b138      	cbz	r0, 800a5a8 <_rclc_take_new_data+0x298>
 800a598:	6860      	ldr	r0, [r4, #4]
 800a59a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a59c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	42ab      	cmp	r3, r5
 800a5a4:	d8f0      	bhi.n	800a588 <_rclc_take_new_data+0x278>
 800a5a6:	e729      	b.n	800a3fc <_rclc_take_new_data+0xec>
 800a5a8:	6860      	ldr	r0, [r4, #4]
 800a5aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	42ab      	cmp	r3, r5
 800a5b0:	d8ea      	bhi.n	800a588 <_rclc_take_new_data+0x278>
 800a5b2:	e723      	b.n	800a3fc <_rclc_take_new_data+0xec>
 800a5b4:	ab06      	add	r3, sp, #24
 800a5b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a5bc:	2103      	movs	r1, #3
 800a5be:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a5c2:	6860      	ldr	r0, [r4, #4]
 800a5c4:	f009 fbb8 	bl	8013d38 <rclc_action_server_goal_cancel_reject>
 800a5c8:	e6c4      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a5ca:	ab06      	add	r3, sp, #24
 800a5cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a5d2:	2102      	movs	r1, #2
 800a5d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a5d8:	6860      	ldr	r0, [r4, #4]
 800a5da:	f009 fbad 	bl	8013d38 <rclc_action_server_goal_cancel_reject>
 800a5de:	e6b9      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a5e0:	6860      	ldr	r0, [r4, #4]
 800a5e2:	e706      	b.n	800a3f2 <_rclc_take_new_data+0xe2>
 800a5e4:	6860      	ldr	r0, [r4, #4]
 800a5e6:	4631      	mov	r1, r6
 800a5e8:	f009 fac6 	bl	8013b78 <rclc_action_remove_used_goal_handle>
 800a5ec:	f000 fe00 	bl	800b1f0 <rcutils_reset_error>
 800a5f0:	e6b0      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a5f2:	2501      	movs	r5, #1
 800a5f4:	e6ae      	b.n	800a354 <_rclc_take_new_data+0x44>
 800a5f6:	bf00      	nop

0800a5f8 <_rclc_execute.part.0>:
 800a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fa:	7803      	ldrb	r3, [r0, #0]
 800a5fc:	b087      	sub	sp, #28
 800a5fe:	4604      	mov	r4, r0
 800a600:	2b0a      	cmp	r3, #10
 800a602:	f200 8136 	bhi.w	800a872 <_rclc_execute.part.0+0x27a>
 800a606:	e8df f003 	tbb	[pc, r3]
 800a60a:	435e      	.short	0x435e
 800a60c:	06a1664f 	.word	0x06a1664f
 800a610:	6c1e0606 	.word	0x6c1e0606
 800a614:	59          	.byte	0x59
 800a615:	00          	.byte	0x00
 800a616:	2b06      	cmp	r3, #6
 800a618:	f000 8122 	beq.w	800a860 <_rclc_execute.part.0+0x268>
 800a61c:	2b07      	cmp	r3, #7
 800a61e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a620:	f040 8118 	bne.w	800a854 <_rclc_execute.part.0+0x25c>
 800a624:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a628:	6880      	ldr	r0, [r0, #8]
 800a62a:	4798      	blx	r3
 800a62c:	f104 0110 	add.w	r1, r4, #16
 800a630:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a632:	6860      	ldr	r0, [r4, #4]
 800a634:	f007 fb38 	bl	8011ca8 <rcl_send_response>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d033      	beq.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a63c:	9005      	str	r0, [sp, #20]
 800a63e:	f000 fdd7 	bl	800b1f0 <rcutils_reset_error>
 800a642:	9805      	ldr	r0, [sp, #20]
 800a644:	e02e      	b.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a646:	6840      	ldr	r0, [r0, #4]
 800a648:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8086 	beq.w	800a75e <_rclc_execute.part.0+0x166>
 800a652:	2600      	movs	r6, #0
 800a654:	2701      	movs	r7, #1
 800a656:	e004      	b.n	800a662 <_rclc_execute.part.0+0x6a>
 800a658:	f009 fa58 	bl	8013b0c <rclc_action_send_result_request>
 800a65c:	b998      	cbnz	r0, 800a686 <_rclc_execute.part.0+0x8e>
 800a65e:	722f      	strb	r7, [r5, #8]
 800a660:	6860      	ldr	r0, [r4, #4]
 800a662:	f009 fb05 	bl	8013c70 <rclc_action_find_first_handle_with_goal_response>
 800a666:	4605      	mov	r5, r0
 800a668:	2800      	cmp	r0, #0
 800a66a:	d077      	beq.n	800a75c <_rclc_execute.part.0+0x164>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a676:	f885 6020 	strb.w	r6, [r5, #32]
 800a67a:	4798      	blx	r3
 800a67c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a680:	4628      	mov	r0, r5
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e8      	bne.n	800a658 <_rclc_execute.part.0+0x60>
 800a686:	6860      	ldr	r0, [r4, #4]
 800a688:	4629      	mov	r1, r5
 800a68a:	f009 fa75 	bl	8013b78 <rclc_action_remove_used_goal_handle>
 800a68e:	e7e7      	b.n	800a660 <_rclc_execute.part.0+0x68>
 800a690:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a694:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800a698:	2d00      	cmp	r5, #0
 800a69a:	f000 80c9 	beq.w	800a830 <_rclc_execute.part.0+0x238>
 800a69e:	6880      	ldr	r0, [r0, #8]
 800a6a0:	4798      	blx	r3
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	b007      	add	sp, #28
 800a6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a8:	6840      	ldr	r0, [r0, #4]
 800a6aa:	f007 ff0b 	bl	80124c4 <rcl_timer_call>
 800a6ae:	f240 3321 	movw	r3, #801	@ 0x321
 800a6b2:	4298      	cmp	r0, r3
 800a6b4:	d004      	beq.n	800a6c0 <_rclc_execute.part.0+0xc8>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d0f4      	beq.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a6ba:	e7bf      	b.n	800a63c <_rclc_execute.part.0+0x44>
 800a6bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a6be:	4798      	blx	r3
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	b007      	add	sp, #28
 800a6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a6ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a6cc:	b925      	cbnz	r5, 800a6d8 <_rclc_execute.part.0+0xe0>
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	4798      	blx	r3
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	e7e6      	b.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a6d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a6d8:	68a0      	ldr	r0, [r4, #8]
 800a6da:	4798      	blx	r3
 800a6dc:	2000      	movs	r0, #0
 800a6de:	b007      	add	sp, #28
 800a6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6e2:	6840      	ldr	r0, [r0, #4]
 800a6e4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a6e8:	bb3b      	cbnz	r3, 800a73a <_rclc_execute.part.0+0x142>
 800a6ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d07b      	beq.n	800a7ea <_rclc_execute.part.0+0x1f2>
 800a6f2:	f640 0634 	movw	r6, #2100	@ 0x834
 800a6f6:	2701      	movs	r7, #1
 800a6f8:	e007      	b.n	800a70a <_rclc_execute.part.0+0x112>
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f009 fad0 	bl	8013ca0 <rclc_action_server_response_goal_request>
 800a700:	6860      	ldr	r0, [r4, #4]
 800a702:	4629      	mov	r1, r5
 800a704:	f009 fa38 	bl	8013b78 <rclc_action_remove_used_goal_handle>
 800a708:	6860      	ldr	r0, [r4, #4]
 800a70a:	2100      	movs	r1, #0
 800a70c:	f009 fa62 	bl	8013bd4 <rclc_action_find_first_handle_by_status>
 800a710:	4605      	mov	r5, r0
 800a712:	2800      	cmp	r0, #0
 800a714:	d066      	beq.n	800a7e4 <_rclc_execute.part.0+0x1ec>
 800a716:	6863      	ldr	r3, [r4, #4]
 800a718:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	4798      	blx	r3
 800a71e:	42b0      	cmp	r0, r6
 800a720:	f04f 0100 	mov.w	r1, #0
 800a724:	d1e9      	bne.n	800a6fa <_rclc_execute.part.0+0x102>
 800a726:	2101      	movs	r1, #1
 800a728:	4628      	mov	r0, r5
 800a72a:	f009 fab9 	bl	8013ca0 <rclc_action_server_response_goal_request>
 800a72e:	722f      	strb	r7, [r5, #8]
 800a730:	e7ea      	b.n	800a708 <_rclc_execute.part.0+0x110>
 800a732:	6848      	ldr	r0, [r1, #4]
 800a734:	f009 fa20 	bl	8013b78 <rclc_action_remove_used_goal_handle>
 800a738:	6860      	ldr	r0, [r4, #4]
 800a73a:	f009 fa57 	bl	8013bec <rclc_action_find_first_terminated_handle>
 800a73e:	4601      	mov	r1, r0
 800a740:	2800      	cmp	r0, #0
 800a742:	d1f6      	bne.n	800a732 <_rclc_execute.part.0+0x13a>
 800a744:	6860      	ldr	r0, [r4, #4]
 800a746:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800a74a:	e7ce      	b.n	800a6ea <_rclc_execute.part.0+0xf2>
 800a74c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a74e:	6880      	ldr	r0, [r0, #8]
 800a750:	f104 0110 	add.w	r1, r4, #16
 800a754:	4798      	blx	r3
 800a756:	2000      	movs	r0, #0
 800a758:	b007      	add	sp, #28
 800a75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a75c:	6860      	ldr	r0, [r4, #4]
 800a75e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a762:	b18b      	cbz	r3, 800a788 <_rclc_execute.part.0+0x190>
 800a764:	68c5      	ldr	r5, [r0, #12]
 800a766:	b32d      	cbz	r5, 800a7b4 <_rclc_execute.part.0+0x1bc>
 800a768:	2600      	movs	r6, #0
 800a76a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a76e:	b143      	cbz	r3, 800a782 <_rclc_execute.part.0+0x18a>
 800a770:	69c3      	ldr	r3, [r0, #28]
 800a772:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a776:	b123      	cbz	r3, 800a782 <_rclc_execute.part.0+0x18a>
 800a778:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a77a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a77c:	4628      	mov	r0, r5
 800a77e:	4798      	blx	r3
 800a780:	6860      	ldr	r0, [r4, #4]
 800a782:	682d      	ldr	r5, [r5, #0]
 800a784:	2d00      	cmp	r5, #0
 800a786:	d1f0      	bne.n	800a76a <_rclc_execute.part.0+0x172>
 800a788:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a78c:	b193      	cbz	r3, 800a7b4 <_rclc_execute.part.0+0x1bc>
 800a78e:	68c5      	ldr	r5, [r0, #12]
 800a790:	b185      	cbz	r5, 800a7b4 <_rclc_execute.part.0+0x1bc>
 800a792:	2600      	movs	r6, #0
 800a794:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a798:	b14b      	cbz	r3, 800a7ae <_rclc_execute.part.0+0x1b6>
 800a79a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a79c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a7a0:	b12b      	cbz	r3, 800a7ae <_rclc_execute.part.0+0x1b6>
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a7a8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a7aa:	4798      	blx	r3
 800a7ac:	6860      	ldr	r0, [r4, #4]
 800a7ae:	682d      	ldr	r5, [r5, #0]
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	d1ef      	bne.n	800a794 <_rclc_execute.part.0+0x19c>
 800a7b4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d081      	beq.n	800a6c0 <_rclc_execute.part.0+0xc8>
 800a7bc:	2700      	movs	r7, #0
 800a7be:	e00b      	b.n	800a7d8 <_rclc_execute.part.0+0x1e0>
 800a7c0:	6863      	ldr	r3, [r4, #4]
 800a7c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a7c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a7c6:	6a1e      	ldr	r6, [r3, #32]
 800a7c8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a7cc:	47b0      	blx	r6
 800a7ce:	6860      	ldr	r0, [r4, #4]
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f009 f9d1 	bl	8013b78 <rclc_action_remove_used_goal_handle>
 800a7d6:	6860      	ldr	r0, [r4, #4]
 800a7d8:	f009 fa56 	bl	8013c88 <rclc_action_find_first_handle_with_result_response>
 800a7dc:	4605      	mov	r5, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d1ee      	bne.n	800a7c0 <_rclc_execute.part.0+0x1c8>
 800a7e2:	e76d      	b.n	800a6c0 <_rclc_execute.part.0+0xc8>
 800a7e4:	6860      	ldr	r0, [r4, #4]
 800a7e6:	f880 5020 	strb.w	r5, [r0, #32]
 800a7ea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f43f af66 	beq.w	800a6c0 <_rclc_execute.part.0+0xc8>
 800a7f4:	68c5      	ldr	r5, [r0, #12]
 800a7f6:	b1b5      	cbz	r5, 800a826 <_rclc_execute.part.0+0x22e>
 800a7f8:	2602      	movs	r6, #2
 800a7fa:	e001      	b.n	800a800 <_rclc_execute.part.0+0x208>
 800a7fc:	682d      	ldr	r5, [r5, #0]
 800a7fe:	b195      	cbz	r5, 800a826 <_rclc_execute.part.0+0x22e>
 800a800:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a804:	2b03      	cmp	r3, #3
 800a806:	d1f9      	bne.n	800a7fc <_rclc_execute.part.0+0x204>
 800a808:	69c3      	ldr	r3, [r0, #28]
 800a80a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a80c:	4628      	mov	r0, r5
 800a80e:	4798      	blx	r3
 800a810:	4603      	mov	r3, r0
 800a812:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a816:	4628      	mov	r0, r5
 800a818:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a81c:	b163      	cbz	r3, 800a838 <_rclc_execute.part.0+0x240>
 800a81e:	f009 fa5f 	bl	8013ce0 <rclc_action_server_goal_cancel_accept>
 800a822:	6860      	ldr	r0, [r4, #4]
 800a824:	e7ea      	b.n	800a7fc <_rclc_execute.part.0+0x204>
 800a826:	2300      	movs	r3, #0
 800a828:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a82c:	4618      	mov	r0, r3
 800a82e:	e739      	b.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a830:	4628      	mov	r0, r5
 800a832:	4798      	blx	r3
 800a834:	4628      	mov	r0, r5
 800a836:	e735      	b.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a838:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a83a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a83e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a842:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a846:	6860      	ldr	r0, [r4, #4]
 800a848:	2101      	movs	r1, #1
 800a84a:	f009 fa75 	bl	8013d38 <rclc_action_server_goal_cancel_reject>
 800a84e:	722e      	strb	r6, [r5, #8]
 800a850:	6860      	ldr	r0, [r4, #4]
 800a852:	e7d3      	b.n	800a7fc <_rclc_execute.part.0+0x204>
 800a854:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a856:	6880      	ldr	r0, [r0, #8]
 800a858:	4798      	blx	r3
 800a85a:	f104 0110 	add.w	r1, r4, #16
 800a85e:	e6e7      	b.n	800a630 <_rclc_execute.part.0+0x38>
 800a860:	f100 0110 	add.w	r1, r0, #16
 800a864:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a866:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800a868:	6880      	ldr	r0, [r0, #8]
 800a86a:	9105      	str	r1, [sp, #20]
 800a86c:	4798      	blx	r3
 800a86e:	9905      	ldr	r1, [sp, #20]
 800a870:	e6de      	b.n	800a630 <_rclc_execute.part.0+0x38>
 800a872:	2001      	movs	r0, #1
 800a874:	e716      	b.n	800a6a4 <_rclc_execute.part.0+0xac>
 800a876:	bf00      	nop

0800a878 <rclc_executor_trigger_any>:
 800a878:	2800      	cmp	r0, #0
 800a87a:	d03f      	beq.n	800a8fc <rclc_executor_trigger_any+0x84>
 800a87c:	2900      	cmp	r1, #0
 800a87e:	d03e      	beq.n	800a8fe <rclc_executor_trigger_any+0x86>
 800a880:	4603      	mov	r3, r0
 800a882:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a886:	2200      	movs	r2, #0
 800a888:	2800      	cmp	r0, #0
 800a88a:	d037      	beq.n	800a8fc <rclc_executor_trigger_any+0x84>
 800a88c:	b430      	push	{r4, r5}
 800a88e:	f893 c000 	ldrb.w	ip, [r3]
 800a892:	f1bc 0f08 	cmp.w	ip, #8
 800a896:	d11e      	bne.n	800a8d6 <rclc_executor_trigger_any+0x5e>
 800a898:	685c      	ldr	r4, [r3, #4]
 800a89a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a89c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a8a0:	d105      	bne.n	800a8ae <rclc_executor_trigger_any+0x36>
 800a8a2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a8a6:	b910      	cbnz	r0, 800a8ae <rclc_executor_trigger_any+0x36>
 800a8a8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a8ac:	b128      	cbz	r0, 800a8ba <rclc_executor_trigger_any+0x42>
 800a8ae:	bc30      	pop	{r4, r5}
 800a8b0:	4770      	bx	lr
 800a8b2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d1f9      	bne.n	800a8ae <rclc_executor_trigger_any+0x36>
 800a8ba:	3201      	adds	r2, #1
 800a8bc:	4291      	cmp	r1, r2
 800a8be:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a8c2:	d018      	beq.n	800a8f6 <rclc_executor_trigger_any+0x7e>
 800a8c4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d0f0      	beq.n	800a8ae <rclc_executor_trigger_any+0x36>
 800a8cc:	f893 c000 	ldrb.w	ip, [r3]
 800a8d0:	f1bc 0f08 	cmp.w	ip, #8
 800a8d4:	d0e0      	beq.n	800a898 <rclc_executor_trigger_any+0x20>
 800a8d6:	f1bc 0f09 	cmp.w	ip, #9
 800a8da:	d1ea      	bne.n	800a8b2 <rclc_executor_trigger_any+0x3a>
 800a8dc:	685c      	ldr	r4, [r3, #4]
 800a8de:	6a25      	ldr	r5, [r4, #32]
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	d1e4      	bne.n	800a8ae <rclc_executor_trigger_any+0x36>
 800a8e4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d1e0      	bne.n	800a8ae <rclc_executor_trigger_any+0x36>
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	4291      	cmp	r1, r2
 800a8f0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a8f4:	d1e6      	bne.n	800a8c4 <rclc_executor_trigger_any+0x4c>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	bc30      	pop	{r4, r5}
 800a8fa:	4770      	bx	lr
 800a8fc:	4770      	bx	lr
 800a8fe:	4608      	mov	r0, r1
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop

0800a904 <rclc_executor_get_zero_initialized_executor>:
 800a904:	b510      	push	{r4, lr}
 800a906:	4903      	ldr	r1, [pc, #12]	@ (800a914 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a908:	4604      	mov	r4, r0
 800a90a:	2288      	movs	r2, #136	@ 0x88
 800a90c:	f00c fc4b 	bl	80171a6 <memcpy>
 800a910:	4620      	mov	r0, r4
 800a912:	bd10      	pop	{r4, pc}
 800a914:	080180c0 	.word	0x080180c0

0800a918 <rclc_executor_init>:
 800a918:	2800      	cmp	r0, #0
 800a91a:	d05f      	beq.n	800a9dc <rclc_executor_init+0xc4>
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	b0b0      	sub	sp, #192	@ 0xc0
 800a924:	2900      	cmp	r1, #0
 800a926:	d051      	beq.n	800a9cc <rclc_executor_init+0xb4>
 800a928:	4605      	mov	r5, r0
 800a92a:	4618      	mov	r0, r3
 800a92c:	4616      	mov	r6, r2
 800a92e:	461f      	mov	r7, r3
 800a930:	f000 fc38 	bl	800b1a4 <rcutils_allocator_is_valid>
 800a934:	2800      	cmp	r0, #0
 800a936:	d049      	beq.n	800a9cc <rclc_executor_init+0xb4>
 800a938:	2e00      	cmp	r6, #0
 800a93a:	d047      	beq.n	800a9cc <rclc_executor_init+0xb4>
 800a93c:	492c      	ldr	r1, [pc, #176]	@ (800a9f0 <rclc_executor_init+0xd8>)
 800a93e:	2288      	movs	r2, #136	@ 0x88
 800a940:	a80e      	add	r0, sp, #56	@ 0x38
 800a942:	f00c fc30 	bl	80171a6 <memcpy>
 800a946:	a90e      	add	r1, sp, #56	@ 0x38
 800a948:	2288      	movs	r2, #136	@ 0x88
 800a94a:	4628      	mov	r0, r5
 800a94c:	f00c fc2b 	bl	80171a6 <memcpy>
 800a950:	602c      	str	r4, [r5, #0]
 800a952:	4668      	mov	r0, sp
 800a954:	60ae      	str	r6, [r5, #8]
 800a956:	466c      	mov	r4, sp
 800a958:	f007 febc 	bl	80126d4 <rcl_get_zero_initialized_wait_set>
 800a95c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a95e:	f105 0c14 	add.w	ip, r5, #20
 800a962:	f8d7 8000 	ldr.w	r8, [r7]
 800a966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a96a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a96c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a976:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a9e8 <rclc_executor_init+0xd0>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	f8cc 3000 	str.w	r3, [ip]
 800a980:	6939      	ldr	r1, [r7, #16]
 800a982:	612f      	str	r7, [r5, #16]
 800a984:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800a988:	01b0      	lsls	r0, r6, #6
 800a98a:	47c0      	blx	r8
 800a98c:	6068      	str	r0, [r5, #4]
 800a98e:	b338      	cbz	r0, 800a9e0 <rclc_executor_init+0xc8>
 800a990:	2400      	movs	r4, #0
 800a992:	e000      	b.n	800a996 <rclc_executor_init+0x7e>
 800a994:	6868      	ldr	r0, [r5, #4]
 800a996:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a99a:	4631      	mov	r1, r6
 800a99c:	3401      	adds	r4, #1
 800a99e:	f000 fa9f 	bl	800aee0 <rclc_executor_handle_init>
 800a9a2:	42a6      	cmp	r6, r4
 800a9a4:	d1f6      	bne.n	800a994 <rclc_executor_init+0x7c>
 800a9a6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800a9aa:	f000 fa8d 	bl	800aec8 <rclc_executor_handle_counters_zero_init>
 800a9ae:	4a11      	ldr	r2, [pc, #68]	@ (800a9f4 <rclc_executor_init+0xdc>)
 800a9b0:	686b      	ldr	r3, [r5, #4]
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800a9b8:	b163      	cbz	r3, 800a9d4 <rclc_executor_init+0xbc>
 800a9ba:	692b      	ldr	r3, [r5, #16]
 800a9bc:	b153      	cbz	r3, 800a9d4 <rclc_executor_init+0xbc>
 800a9be:	68ab      	ldr	r3, [r5, #8]
 800a9c0:	b143      	cbz	r3, 800a9d4 <rclc_executor_init+0xbc>
 800a9c2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800a9c6:	b030      	add	sp, #192	@ 0xc0
 800a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9cc:	200b      	movs	r0, #11
 800a9ce:	b030      	add	sp, #192	@ 0xc0
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	b030      	add	sp, #192	@ 0xc0
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	200b      	movs	r0, #11
 800a9de:	4770      	bx	lr
 800a9e0:	200a      	movs	r0, #10
 800a9e2:	e7f4      	b.n	800a9ce <rclc_executor_init+0xb6>
 800a9e4:	f3af 8000 	nop.w
 800a9e8:	3b9aca00 	.word	0x3b9aca00
 800a9ec:	00000000 	.word	0x00000000
 800a9f0:	080180c0 	.word	0x080180c0
 800a9f4:	0800a879 	.word	0x0800a879

0800a9f8 <rclc_executor_add_subscription>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a9fe:	b338      	cbz	r0, 800aa50 <rclc_executor_add_subscription+0x58>
 800aa00:	b331      	cbz	r1, 800aa50 <rclc_executor_add_subscription+0x58>
 800aa02:	b32a      	cbz	r2, 800aa50 <rclc_executor_add_subscription+0x58>
 800aa04:	b323      	cbz	r3, 800aa50 <rclc_executor_add_subscription+0x58>
 800aa06:	4604      	mov	r4, r0
 800aa08:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800aa0c:	42a8      	cmp	r0, r5
 800aa0e:	d301      	bcc.n	800aa14 <rclc_executor_add_subscription+0x1c>
 800aa10:	2001      	movs	r0, #1
 800aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa14:	6866      	ldr	r6, [r4, #4]
 800aa16:	0187      	lsls	r7, r0, #6
 800aa18:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800aa1c:	2500      	movs	r5, #0
 800aa1e:	55f5      	strb	r5, [r6, r7]
 800aa20:	3001      	adds	r0, #1
 800aa22:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800aa26:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f104 0514 	add.w	r5, r4, #20
 800aa30:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800aa34:	f88c e001 	strb.w	lr, [ip, #1]
 800aa38:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800aa3c:	60e0      	str	r0, [r4, #12]
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f007 fe5c 	bl	80126fc <rcl_wait_set_is_valid>
 800aa44:	b930      	cbnz	r0, 800aa54 <rclc_executor_add_subscription+0x5c>
 800aa46:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800aa48:	3301      	adds	r3, #1
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa50:	200b      	movs	r0, #11
 800aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa54:	4628      	mov	r0, r5
 800aa56:	f007 fe57 	bl	8012708 <rcl_wait_set_fini>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0f3      	beq.n	800aa46 <rclc_executor_add_subscription+0x4e>
 800aa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa60 <rclc_executor_add_timer>:
 800aa60:	b300      	cbz	r0, 800aaa4 <rclc_executor_add_timer+0x44>
 800aa62:	b1f9      	cbz	r1, 800aaa4 <rclc_executor_add_timer+0x44>
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	d301      	bcc.n	800aa74 <rclc_executor_add_timer+0x14>
 800aa70:	2001      	movs	r0, #1
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	6840      	ldr	r0, [r0, #4]
 800aa76:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800aa7a:	019d      	lsls	r5, r3, #6
 800aa7c:	6051      	str	r1, [r2, #4]
 800aa7e:	2102      	movs	r1, #2
 800aa80:	5341      	strh	r1, [r0, r5]
 800aa82:	3301      	adds	r3, #1
 800aa84:	2000      	movs	r0, #0
 800aa86:	2101      	movs	r1, #1
 800aa88:	f104 0514 	add.w	r5, r4, #20
 800aa8c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800aa8e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800aa90:	4628      	mov	r0, r5
 800aa92:	60e3      	str	r3, [r4, #12]
 800aa94:	f007 fe32 	bl	80126fc <rcl_wait_set_is_valid>
 800aa98:	b930      	cbnz	r0, 800aaa8 <rclc_executor_add_timer+0x48>
 800aa9a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	200b      	movs	r0, #11
 800aaa6:	4770      	bx	lr
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f007 fe2d 	bl	8012708 <rcl_wait_set_fini>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d0f3      	beq.n	800aa9a <rclc_executor_add_timer+0x3a>
 800aab2:	bd38      	pop	{r3, r4, r5, pc}

0800aab4 <rclc_executor_prepare>:
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d044      	beq.n	800ab42 <rclc_executor_prepare+0x8e>
 800aab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaba:	f100 0514 	add.w	r5, r0, #20
 800aabe:	b09b      	sub	sp, #108	@ 0x6c
 800aac0:	4604      	mov	r4, r0
 800aac2:	4628      	mov	r0, r5
 800aac4:	f007 fe1a 	bl	80126fc <rcl_wait_set_is_valid>
 800aac8:	b110      	cbz	r0, 800aad0 <rclc_executor_prepare+0x1c>
 800aaca:	2000      	movs	r0, #0
 800aacc:	b01b      	add	sp, #108	@ 0x6c
 800aace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad0:	4628      	mov	r0, r5
 800aad2:	f007 fe19 	bl	8012708 <rcl_wait_set_fini>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d130      	bne.n	800ab3c <rclc_executor_prepare+0x88>
 800aada:	a80c      	add	r0, sp, #48	@ 0x30
 800aadc:	f007 fdfa 	bl	80126d4 <rcl_get_zero_initialized_wait_set>
 800aae0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800aae4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aae8:	46ae      	mov	lr, r5
 800aaea:	6927      	ldr	r7, [r4, #16]
 800aaec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aaf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaf4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aaf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aafc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ab00:	f8dc 3000 	ldr.w	r3, [ip]
 800ab04:	f8ce 3000 	str.w	r3, [lr]
 800ab08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab0a:	ae04      	add	r6, sp, #16
 800ab0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	6822      	ldr	r2, [r4, #0]
 800ab12:	6033      	str	r3, [r6, #0]
 800ab14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab16:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ab18:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ab1c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ab20:	e9cd 2100 	strd	r2, r1, [sp]
 800ab24:	4628      	mov	r0, r5
 800ab26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ab28:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ab2a:	f008 f8eb 	bl	8012d04 <rcl_wait_set_init>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d0cc      	beq.n	800aacc <rclc_executor_prepare+0x18>
 800ab32:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ab34:	f000 fb5c 	bl	800b1f0 <rcutils_reset_error>
 800ab38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ab3a:	e7c7      	b.n	800aacc <rclc_executor_prepare+0x18>
 800ab3c:	f000 fb58 	bl	800b1f0 <rcutils_reset_error>
 800ab40:	e7cb      	b.n	800aada <rclc_executor_prepare+0x26>
 800ab42:	200b      	movs	r0, #11
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop

0800ab48 <rclc_executor_spin_some.part.0>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	f100 0614 	add.w	r6, r0, #20
 800ab50:	b083      	sub	sp, #12
 800ab52:	4691      	mov	r9, r2
 800ab54:	4698      	mov	r8, r3
 800ab56:	4605      	mov	r5, r0
 800ab58:	f7ff ffac 	bl	800aab4 <rclc_executor_prepare>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f007 fe9f 	bl	80128a0 <rcl_wait_set_clear>
 800ab62:	4607      	mov	r7, r0
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f040 80ed 	bne.w	800ad44 <rclc_executor_spin_some.part.0+0x1fc>
 800ab6a:	68ab      	ldr	r3, [r5, #8]
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	b303      	cbz	r3, 800abb2 <rclc_executor_spin_some.part.0+0x6a>
 800ab70:	6869      	ldr	r1, [r5, #4]
 800ab72:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ab76:	01a2      	lsls	r2, r4, #6
 800ab78:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ab7c:	b1cb      	cbz	r3, 800abb2 <rclc_executor_spin_some.part.0+0x6a>
 800ab7e:	5c8b      	ldrb	r3, [r1, r2]
 800ab80:	2b0a      	cmp	r3, #10
 800ab82:	f200 80d8 	bhi.w	800ad36 <rclc_executor_spin_some.part.0+0x1ee>
 800ab86:	e8df f003 	tbb	[pc, r3]
 800ab8a:	9c9c      	.short	0x9c9c
 800ab8c:	068c8ca7 	.word	0x068c8ca7
 800ab90:	bdc90606 	.word	0xbdc90606
 800ab94:	b2          	.byte	0xb2
 800ab95:	00          	.byte	0x00
 800ab96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f008 f9c6 	bl	8012f30 <rcl_wait_set_add_service>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f040 8086 	bne.w	800acb6 <rclc_executor_spin_some.part.0+0x16e>
 800abaa:	68ab      	ldr	r3, [r5, #8]
 800abac:	3401      	adds	r4, #1
 800abae:	429c      	cmp	r4, r3
 800abb0:	d3de      	bcc.n	800ab70 <rclc_executor_spin_some.part.0+0x28>
 800abb2:	4643      	mov	r3, r8
 800abb4:	464a      	mov	r2, r9
 800abb6:	4630      	mov	r0, r6
 800abb8:	f008 f9e6 	bl	8012f88 <rcl_wait>
 800abbc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 80c7 	beq.w	800ad54 <rclc_executor_spin_some.part.0+0x20c>
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	f040 80b5 	bne.w	800ad36 <rclc_executor_spin_some.part.0+0x1ee>
 800abcc:	68ab      	ldr	r3, [r5, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 8159 	beq.w	800ae86 <rclc_executor_spin_some.part.0+0x33e>
 800abd4:	2400      	movs	r4, #0
 800abd6:	46a0      	mov	r8, r4
 800abd8:	f240 1991 	movw	r9, #401	@ 0x191
 800abdc:	e00a      	b.n	800abf4 <rclc_executor_spin_some.part.0+0xac>
 800abde:	f7ff fb49 	bl	800a274 <_rclc_check_for_new_data>
 800abe2:	4604      	mov	r4, r0
 800abe4:	b110      	cbz	r0, 800abec <rclc_executor_spin_some.part.0+0xa4>
 800abe6:	4548      	cmp	r0, r9
 800abe8:	f040 80b2 	bne.w	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800abec:	68ab      	ldr	r3, [r5, #8]
 800abee:	4598      	cmp	r8, r3
 800abf0:	f080 8126 	bcs.w	800ae40 <rclc_executor_spin_some.part.0+0x2f8>
 800abf4:	686a      	ldr	r2, [r5, #4]
 800abf6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800abfa:	4631      	mov	r1, r6
 800abfc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ac00:	f108 0801 	add.w	r8, r8, #1
 800ac04:	f1bc 0f00 	cmp.w	ip, #0
 800ac08:	d1e9      	bne.n	800abde <rclc_executor_spin_some.part.0+0x96>
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ac12:	4798      	blx	r3
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f000 809b 	beq.w	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ac1a:	68ab      	ldr	r3, [r5, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8097 	beq.w	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ac22:	f04f 0800 	mov.w	r8, #0
 800ac26:	f240 1991 	movw	r9, #401	@ 0x191
 800ac2a:	e009      	b.n	800ac40 <rclc_executor_spin_some.part.0+0xf8>
 800ac2c:	f7ff fb70 	bl	800a310 <_rclc_take_new_data>
 800ac30:	4604      	mov	r4, r0
 800ac32:	b110      	cbz	r0, 800ac3a <rclc_executor_spin_some.part.0+0xf2>
 800ac34:	4548      	cmp	r0, r9
 800ac36:	f040 808b 	bne.w	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ac3a:	68ab      	ldr	r3, [r5, #8]
 800ac3c:	4598      	cmp	r8, r3
 800ac3e:	d209      	bcs.n	800ac54 <rclc_executor_spin_some.part.0+0x10c>
 800ac40:	6868      	ldr	r0, [r5, #4]
 800ac42:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ac46:	4631      	mov	r1, r6
 800ac48:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ac4c:	f108 0801 	add.w	r8, r8, #1
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d1eb      	bne.n	800ac2c <rclc_executor_spin_some.part.0+0xe4>
 800ac54:	2600      	movs	r6, #0
 800ac56:	b97b      	cbnz	r3, 800ac78 <rclc_executor_spin_some.part.0+0x130>
 800ac58:	e07a      	b.n	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ac5a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ac5e:	2a08      	cmp	r2, #8
 800ac60:	f000 80fd 	beq.w	800ae5e <rclc_executor_spin_some.part.0+0x316>
 800ac64:	2a09      	cmp	r2, #9
 800ac66:	f000 80ef 	beq.w	800ae48 <rclc_executor_spin_some.part.0+0x300>
 800ac6a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ac6e:	b98a      	cbnz	r2, 800ac94 <rclc_executor_spin_some.part.0+0x14c>
 800ac70:	3601      	adds	r6, #1
 800ac72:	429e      	cmp	r6, r3
 800ac74:	d262      	bcs.n	800ad3c <rclc_executor_spin_some.part.0+0x1f4>
 800ac76:	2400      	movs	r4, #0
 800ac78:	686a      	ldr	r2, [r5, #4]
 800ac7a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ac7e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ac82:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ac86:	2900      	cmp	r1, #0
 800ac88:	d062      	beq.n	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ac8a:	7841      	ldrb	r1, [r0, #1]
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d0e4      	beq.n	800ac5a <rclc_executor_spin_some.part.0+0x112>
 800ac90:	2901      	cmp	r1, #1
 800ac92:	d1ed      	bne.n	800ac70 <rclc_executor_spin_some.part.0+0x128>
 800ac94:	f7ff fcb0 	bl	800a5f8 <_rclc_execute.part.0>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	f040 80b6 	bne.w	800ae0a <rclc_executor_spin_some.part.0+0x2c2>
 800ac9e:	68ab      	ldr	r3, [r5, #8]
 800aca0:	e7e6      	b.n	800ac70 <rclc_executor_spin_some.part.0+0x128>
 800aca2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800aca6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800acaa:	4630      	mov	r0, r6
 800acac:	f008 f914 	bl	8012ed8 <rcl_wait_set_add_client>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f43f af7a 	beq.w	800abaa <rclc_executor_spin_some.part.0+0x62>
 800acb6:	9001      	str	r0, [sp, #4]
 800acb8:	f000 fa9a 	bl	800b1f0 <rcutils_reset_error>
 800acbc:	9801      	ldr	r0, [sp, #4]
 800acbe:	4607      	mov	r7, r0
 800acc0:	e03c      	b.n	800ad3c <rclc_executor_spin_some.part.0+0x1f4>
 800acc2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acc6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800acca:	4630      	mov	r0, r6
 800accc:	f007 fdbc 	bl	8012848 <rcl_wait_set_add_subscription>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f43f af6a 	beq.w	800abaa <rclc_executor_spin_some.part.0+0x62>
 800acd6:	e7ee      	b.n	800acb6 <rclc_executor_spin_some.part.0+0x16e>
 800acd8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acdc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ace0:	4630      	mov	r0, r6
 800ace2:	f008 f8c9 	bl	8012e78 <rcl_wait_set_add_timer>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f af5f 	beq.w	800abaa <rclc_executor_spin_some.part.0+0x62>
 800acec:	e7e3      	b.n	800acb6 <rclc_executor_spin_some.part.0+0x16e>
 800acee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acf2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800acf6:	4630      	mov	r0, r6
 800acf8:	f008 f892 	bl	8012e20 <rcl_wait_set_add_guard_condition>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f43f af54 	beq.w	800abaa <rclc_executor_spin_some.part.0+0x62>
 800ad02:	e7d8      	b.n	800acb6 <rclc_executor_spin_some.part.0+0x16e>
 800ad04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ad08:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ad0c:	3110      	adds	r1, #16
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f008 fe12 	bl	8013938 <rcl_action_wait_set_add_action_server>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f af48 	beq.w	800abaa <rclc_executor_spin_some.part.0+0x62>
 800ad1a:	e7cc      	b.n	800acb6 <rclc_executor_spin_some.part.0+0x16e>
 800ad1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ad20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ad24:	3110      	adds	r1, #16
 800ad26:	2300      	movs	r3, #0
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f008 fbdd 	bl	80134e8 <rcl_action_wait_set_add_action_client>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	f43f af3b 	beq.w	800abaa <rclc_executor_spin_some.part.0+0x62>
 800ad34:	e7bf      	b.n	800acb6 <rclc_executor_spin_some.part.0+0x16e>
 800ad36:	f000 fa5b 	bl	800b1f0 <rcutils_reset_error>
 800ad3a:	2701      	movs	r7, #1
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	b003      	add	sp, #12
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	f000 fa54 	bl	800b1f0 <rcutils_reset_error>
 800ad48:	4638      	mov	r0, r7
 800ad4a:	b003      	add	sp, #12
 800ad4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad50:	4627      	mov	r7, r4
 800ad52:	e7f3      	b.n	800ad3c <rclc_executor_spin_some.part.0+0x1f4>
 800ad54:	68ab      	ldr	r3, [r5, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 8092 	beq.w	800ae80 <rclc_executor_spin_some.part.0+0x338>
 800ad5c:	2400      	movs	r4, #0
 800ad5e:	46a0      	mov	r8, r4
 800ad60:	f240 1991 	movw	r9, #401	@ 0x191
 800ad64:	e008      	b.n	800ad78 <rclc_executor_spin_some.part.0+0x230>
 800ad66:	f7ff fa85 	bl	800a274 <_rclc_check_for_new_data>
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	b108      	cbz	r0, 800ad72 <rclc_executor_spin_some.part.0+0x22a>
 800ad6e:	4548      	cmp	r0, r9
 800ad70:	d1ee      	bne.n	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ad72:	68ab      	ldr	r3, [r5, #8]
 800ad74:	4598      	cmp	r8, r3
 800ad76:	d265      	bcs.n	800ae44 <rclc_executor_spin_some.part.0+0x2fc>
 800ad78:	686a      	ldr	r2, [r5, #4]
 800ad7a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ad7e:	4631      	mov	r1, r6
 800ad80:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ad84:	f108 0801 	add.w	r8, r8, #1
 800ad88:	f1bc 0f00 	cmp.w	ip, #0
 800ad8c:	d1eb      	bne.n	800ad66 <rclc_executor_spin_some.part.0+0x21e>
 800ad8e:	4619      	mov	r1, r3
 800ad90:	4610      	mov	r0, r2
 800ad92:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ad96:	4798      	blx	r3
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d0d9      	beq.n	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ad9c:	68ab      	ldr	r3, [r5, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0d6      	beq.n	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ada2:	f04f 0800 	mov.w	r8, #0
 800ada6:	f240 1991 	movw	r9, #401	@ 0x191
 800adaa:	f240 2a59 	movw	sl, #601	@ 0x259
 800adae:	e00e      	b.n	800adce <rclc_executor_spin_some.part.0+0x286>
 800adb0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	d033      	beq.n	800ae20 <rclc_executor_spin_some.part.0+0x2d8>
 800adb8:	2b09      	cmp	r3, #9
 800adba:	d028      	beq.n	800ae0e <rclc_executor_spin_some.part.0+0x2c6>
 800adbc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800adc0:	b9fb      	cbnz	r3, 800ae02 <rclc_executor_spin_some.part.0+0x2ba>
 800adc2:	68ab      	ldr	r3, [r5, #8]
 800adc4:	f108 0801 	add.w	r8, r8, #1
 800adc8:	4598      	cmp	r8, r3
 800adca:	d2b7      	bcs.n	800ad3c <rclc_executor_spin_some.part.0+0x1f4>
 800adcc:	2400      	movs	r4, #0
 800adce:	6868      	ldr	r0, [r5, #4]
 800add0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800add4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800add8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800addc:	2b00      	cmp	r3, #0
 800adde:	d0b7      	beq.n	800ad50 <rclc_executor_spin_some.part.0+0x208>
 800ade0:	4631      	mov	r1, r6
 800ade2:	f7ff fa95 	bl	800a310 <_rclc_take_new_data>
 800ade6:	b118      	cbz	r0, 800adf0 <rclc_executor_spin_some.part.0+0x2a8>
 800ade8:	4548      	cmp	r0, r9
 800adea:	d001      	beq.n	800adf0 <rclc_executor_spin_some.part.0+0x2a8>
 800adec:	4550      	cmp	r0, sl
 800adee:	d10c      	bne.n	800ae0a <rclc_executor_spin_some.part.0+0x2c2>
 800adf0:	686b      	ldr	r3, [r5, #4]
 800adf2:	eb13 000b 	adds.w	r0, r3, fp
 800adf6:	d021      	beq.n	800ae3c <rclc_executor_spin_some.part.0+0x2f4>
 800adf8:	7842      	ldrb	r2, [r0, #1]
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d0d8      	beq.n	800adb0 <rclc_executor_spin_some.part.0+0x268>
 800adfe:	2a01      	cmp	r2, #1
 800ae00:	d1df      	bne.n	800adc2 <rclc_executor_spin_some.part.0+0x27a>
 800ae02:	f7ff fbf9 	bl	800a5f8 <_rclc_execute.part.0>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d0db      	beq.n	800adc2 <rclc_executor_spin_some.part.0+0x27a>
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	e796      	b.n	800ad3c <rclc_executor_spin_some.part.0+0x1f4>
 800ae0e:	6843      	ldr	r3, [r0, #4]
 800ae10:	6a1a      	ldr	r2, [r3, #32]
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	d1f5      	bne.n	800ae02 <rclc_executor_spin_some.part.0+0x2ba>
 800ae16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0d1      	beq.n	800adc2 <rclc_executor_spin_some.part.0+0x27a>
 800ae1e:	e7f0      	b.n	800ae02 <rclc_executor_spin_some.part.0+0x2ba>
 800ae20:	6843      	ldr	r3, [r0, #4]
 800ae22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae24:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800ae28:	d1eb      	bne.n	800ae02 <rclc_executor_spin_some.part.0+0x2ba>
 800ae2a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	d1e7      	bne.n	800ae02 <rclc_executor_spin_some.part.0+0x2ba>
 800ae32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0c3      	beq.n	800adc2 <rclc_executor_spin_some.part.0+0x27a>
 800ae3a:	e7e2      	b.n	800ae02 <rclc_executor_spin_some.part.0+0x2ba>
 800ae3c:	270b      	movs	r7, #11
 800ae3e:	e77d      	b.n	800ad3c <rclc_executor_spin_some.part.0+0x1f4>
 800ae40:	686a      	ldr	r2, [r5, #4]
 800ae42:	e6e2      	b.n	800ac0a <rclc_executor_spin_some.part.0+0xc2>
 800ae44:	686a      	ldr	r2, [r5, #4]
 800ae46:	e7a2      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x246>
 800ae48:	6842      	ldr	r2, [r0, #4]
 800ae4a:	6a11      	ldr	r1, [r2, #32]
 800ae4c:	2900      	cmp	r1, #0
 800ae4e:	f47f af21 	bne.w	800ac94 <rclc_executor_spin_some.part.0+0x14c>
 800ae52:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	f43f af0a 	beq.w	800ac70 <rclc_executor_spin_some.part.0+0x128>
 800ae5c:	e71a      	b.n	800ac94 <rclc_executor_spin_some.part.0+0x14c>
 800ae5e:	6842      	ldr	r2, [r0, #4]
 800ae60:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ae62:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ae66:	f47f af15 	bne.w	800ac94 <rclc_executor_spin_some.part.0+0x14c>
 800ae6a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	f47f af10 	bne.w	800ac94 <rclc_executor_spin_some.part.0+0x14c>
 800ae74:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	f43f aef9 	beq.w	800ac70 <rclc_executor_spin_some.part.0+0x128>
 800ae7e:	e709      	b.n	800ac94 <rclc_executor_spin_some.part.0+0x14c>
 800ae80:	686a      	ldr	r2, [r5, #4]
 800ae82:	461c      	mov	r4, r3
 800ae84:	e783      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x246>
 800ae86:	686a      	ldr	r2, [r5, #4]
 800ae88:	461c      	mov	r4, r3
 800ae8a:	e6be      	b.n	800ac0a <rclc_executor_spin_some.part.0+0xc2>

0800ae8c <rclc_executor_spin>:
 800ae8c:	b1d0      	cbz	r0, 800aec4 <rclc_executor_spin+0x38>
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	4604      	mov	r4, r0
 800ae92:	b082      	sub	sp, #8
 800ae94:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800ae98:	6820      	ldr	r0, [r4, #0]
 800ae9a:	e9cd 2300 	strd	r2, r3, [sp]
 800ae9e:	f006 fafb 	bl	8011498 <rcl_context_is_valid>
 800aea2:	4601      	mov	r1, r0
 800aea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea8:	4620      	mov	r0, r4
 800aeaa:	b131      	cbz	r1, 800aeba <rclc_executor_spin+0x2e>
 800aeac:	f7ff fe4c 	bl	800ab48 <rclc_executor_spin_some.part.0>
 800aeb0:	f030 0302 	bics.w	r3, r0, #2
 800aeb4:	d0ee      	beq.n	800ae94 <rclc_executor_spin+0x8>
 800aeb6:	b002      	add	sp, #8
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	f000 f999 	bl	800b1f0 <rcutils_reset_error>
 800aebe:	2001      	movs	r0, #1
 800aec0:	b002      	add	sp, #8
 800aec2:	bd10      	pop	{r4, pc}
 800aec4:	200b      	movs	r0, #11
 800aec6:	4770      	bx	lr

0800aec8 <rclc_executor_handle_counters_zero_init>:
 800aec8:	b130      	cbz	r0, 800aed8 <rclc_executor_handle_counters_zero_init+0x10>
 800aeca:	b508      	push	{r3, lr}
 800aecc:	2220      	movs	r2, #32
 800aece:	2100      	movs	r1, #0
 800aed0:	f00c f8a0 	bl	8017014 <memset>
 800aed4:	2000      	movs	r0, #0
 800aed6:	bd08      	pop	{r3, pc}
 800aed8:	200b      	movs	r0, #11
 800aeda:	4770      	bx	lr
 800aedc:	0000      	movs	r0, r0
	...

0800aee0 <rclc_executor_handle_init>:
 800aee0:	b168      	cbz	r0, 800aefe <rclc_executor_handle_init+0x1e>
 800aee2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800af08 <rclc_executor_handle_init+0x28>
 800aee6:	2300      	movs	r3, #0
 800aee8:	220b      	movs	r2, #11
 800aeea:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800aeee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800aef2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800aef6:	8002      	strh	r2, [r0, #0]
 800aef8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800aefa:	4618      	mov	r0, r3
 800aefc:	4770      	bx	lr
 800aefe:	200b      	movs	r0, #11
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	f3af 8000 	nop.w
	...

0800af10 <rclc_support_init_with_options>:
 800af10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af14:	b083      	sub	sp, #12
 800af16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800af18:	b340      	cbz	r0, 800af6c <rclc_support_init_with_options+0x5c>
 800af1a:	461d      	mov	r5, r3
 800af1c:	b333      	cbz	r3, 800af6c <rclc_support_init_with_options+0x5c>
 800af1e:	b32e      	cbz	r6, 800af6c <rclc_support_init_with_options+0x5c>
 800af20:	46e9      	mov	r9, sp
 800af22:	4604      	mov	r4, r0
 800af24:	4648      	mov	r0, r9
 800af26:	460f      	mov	r7, r1
 800af28:	4690      	mov	r8, r2
 800af2a:	f006 faab 	bl	8011484 <rcl_get_zero_initialized_context>
 800af2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800af32:	462a      	mov	r2, r5
 800af34:	e884 0003 	stmia.w	r4, {r0, r1}
 800af38:	4623      	mov	r3, r4
 800af3a:	4641      	mov	r1, r8
 800af3c:	4638      	mov	r0, r7
 800af3e:	f006 fb11 	bl	8011564 <rcl_init>
 800af42:	4605      	mov	r5, r0
 800af44:	b960      	cbnz	r0, 800af60 <rclc_support_init_with_options+0x50>
 800af46:	60a6      	str	r6, [r4, #8]
 800af48:	4632      	mov	r2, r6
 800af4a:	f104 010c 	add.w	r1, r4, #12
 800af4e:	2003      	movs	r0, #3
 800af50:	f007 f828 	bl	8011fa4 <rcl_clock_init>
 800af54:	4605      	mov	r5, r0
 800af56:	b918      	cbnz	r0, 800af60 <rclc_support_init_with_options+0x50>
 800af58:	4628      	mov	r0, r5
 800af5a:	b003      	add	sp, #12
 800af5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af60:	f000 f946 	bl	800b1f0 <rcutils_reset_error>
 800af64:	4628      	mov	r0, r5
 800af66:	b003      	add	sp, #12
 800af68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af6c:	250b      	movs	r5, #11
 800af6e:	4628      	mov	r0, r5
 800af70:	b003      	add	sp, #12
 800af72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af76:	bf00      	nop

0800af78 <rclc_node_init_default>:
 800af78:	b3b8      	cbz	r0, 800afea <rclc_node_init_default+0x72>
 800af7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af7e:	460d      	mov	r5, r1
 800af80:	b0a1      	sub	sp, #132	@ 0x84
 800af82:	b329      	cbz	r1, 800afd0 <rclc_node_init_default+0x58>
 800af84:	4616      	mov	r6, r2
 800af86:	b31a      	cbz	r2, 800afd0 <rclc_node_init_default+0x58>
 800af88:	461f      	mov	r7, r3
 800af8a:	b30b      	cbz	r3, 800afd0 <rclc_node_init_default+0x58>
 800af8c:	f10d 0810 	add.w	r8, sp, #16
 800af90:	4604      	mov	r4, r0
 800af92:	4640      	mov	r0, r8
 800af94:	f006 fbf6 	bl	8011784 <rcl_get_zero_initialized_node>
 800af98:	e898 0003 	ldmia.w	r8, {r0, r1}
 800af9c:	f10d 0918 	add.w	r9, sp, #24
 800afa0:	e884 0003 	stmia.w	r4, {r0, r1}
 800afa4:	4648      	mov	r0, r9
 800afa6:	f006 fd65 	bl	8011a74 <rcl_node_get_default_options>
 800afaa:	4640      	mov	r0, r8
 800afac:	f006 fbea 	bl	8011784 <rcl_get_zero_initialized_node>
 800afb0:	f8cd 9000 	str.w	r9, [sp]
 800afb4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800afb8:	463b      	mov	r3, r7
 800afba:	e884 0003 	stmia.w	r4, {r0, r1}
 800afbe:	4632      	mov	r2, r6
 800afc0:	4629      	mov	r1, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	f006 fbe8 	bl	8011798 <rcl_node_init>
 800afc8:	b930      	cbnz	r0, 800afd8 <rclc_node_init_default+0x60>
 800afca:	b021      	add	sp, #132	@ 0x84
 800afcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afd0:	200b      	movs	r0, #11
 800afd2:	b021      	add	sp, #132	@ 0x84
 800afd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afd8:	9003      	str	r0, [sp, #12]
 800afda:	f000 f909 	bl	800b1f0 <rcutils_reset_error>
 800afde:	f000 f907 	bl	800b1f0 <rcutils_reset_error>
 800afe2:	9803      	ldr	r0, [sp, #12]
 800afe4:	b021      	add	sp, #132	@ 0x84
 800afe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afea:	200b      	movs	r0, #11
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop

0800aff0 <rclc_publisher_init_default>:
 800aff0:	b368      	cbz	r0, 800b04e <rclc_publisher_init_default+0x5e>
 800aff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	460d      	mov	r5, r1
 800aff8:	b0a0      	sub	sp, #128	@ 0x80
 800affa:	b321      	cbz	r1, 800b046 <rclc_publisher_init_default+0x56>
 800affc:	4616      	mov	r6, r2
 800affe:	b312      	cbz	r2, 800b046 <rclc_publisher_init_default+0x56>
 800b000:	461f      	mov	r7, r3
 800b002:	b303      	cbz	r3, 800b046 <rclc_publisher_init_default+0x56>
 800b004:	4604      	mov	r4, r0
 800b006:	f7ff f825 	bl	800a054 <rcl_get_zero_initialized_publisher>
 800b00a:	f10d 0810 	add.w	r8, sp, #16
 800b00e:	6020      	str	r0, [r4, #0]
 800b010:	4640      	mov	r0, r8
 800b012:	f7ff f8bb 	bl	800a18c <rcl_publisher_get_default_options>
 800b016:	490f      	ldr	r1, [pc, #60]	@ (800b054 <rclc_publisher_init_default+0x64>)
 800b018:	2250      	movs	r2, #80	@ 0x50
 800b01a:	4640      	mov	r0, r8
 800b01c:	f00c f8c3 	bl	80171a6 <memcpy>
 800b020:	f8cd 8000 	str.w	r8, [sp]
 800b024:	463b      	mov	r3, r7
 800b026:	4632      	mov	r2, r6
 800b028:	4629      	mov	r1, r5
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7ff f818 	bl	800a060 <rcl_publisher_init>
 800b030:	b910      	cbnz	r0, 800b038 <rclc_publisher_init_default+0x48>
 800b032:	b020      	add	sp, #128	@ 0x80
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b038:	9003      	str	r0, [sp, #12]
 800b03a:	f000 f8d9 	bl	800b1f0 <rcutils_reset_error>
 800b03e:	9803      	ldr	r0, [sp, #12]
 800b040:	b020      	add	sp, #128	@ 0x80
 800b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b046:	200b      	movs	r0, #11
 800b048:	b020      	add	sp, #128	@ 0x80
 800b04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04e:	200b      	movs	r0, #11
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	08018148 	.word	0x08018148

0800b058 <rclc_subscription_init_default>:
 800b058:	b368      	cbz	r0, 800b0b6 <rclc_subscription_init_default+0x5e>
 800b05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05e:	460d      	mov	r5, r1
 800b060:	b0a0      	sub	sp, #128	@ 0x80
 800b062:	b321      	cbz	r1, 800b0ae <rclc_subscription_init_default+0x56>
 800b064:	4616      	mov	r6, r2
 800b066:	b312      	cbz	r2, 800b0ae <rclc_subscription_init_default+0x56>
 800b068:	461f      	mov	r7, r3
 800b06a:	b303      	cbz	r3, 800b0ae <rclc_subscription_init_default+0x56>
 800b06c:	4604      	mov	r4, r0
 800b06e:	f006 fe3d 	bl	8011cec <rcl_get_zero_initialized_subscription>
 800b072:	f10d 0810 	add.w	r8, sp, #16
 800b076:	6020      	str	r0, [r4, #0]
 800b078:	4640      	mov	r0, r8
 800b07a:	f006 fee5 	bl	8011e48 <rcl_subscription_get_default_options>
 800b07e:	490f      	ldr	r1, [pc, #60]	@ (800b0bc <rclc_subscription_init_default+0x64>)
 800b080:	2250      	movs	r2, #80	@ 0x50
 800b082:	4640      	mov	r0, r8
 800b084:	f00c f88f 	bl	80171a6 <memcpy>
 800b088:	f8cd 8000 	str.w	r8, [sp]
 800b08c:	463b      	mov	r3, r7
 800b08e:	4632      	mov	r2, r6
 800b090:	4629      	mov	r1, r5
 800b092:	4620      	mov	r0, r4
 800b094:	f006 fe30 	bl	8011cf8 <rcl_subscription_init>
 800b098:	b910      	cbnz	r0, 800b0a0 <rclc_subscription_init_default+0x48>
 800b09a:	b020      	add	sp, #128	@ 0x80
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	9003      	str	r0, [sp, #12]
 800b0a2:	f000 f8a5 	bl	800b1f0 <rcutils_reset_error>
 800b0a6:	9803      	ldr	r0, [sp, #12]
 800b0a8:	b020      	add	sp, #128	@ 0x80
 800b0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ae:	200b      	movs	r0, #11
 800b0b0:	b020      	add	sp, #128	@ 0x80
 800b0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b6:	200b      	movs	r0, #11
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	08018198 	.word	0x08018198

0800b0c0 <rclc_timer_init_default>:
 800b0c0:	b360      	cbz	r0, 800b11c <rclc_timer_init_default+0x5c>
 800b0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c6:	460e      	mov	r6, r1
 800b0c8:	b08a      	sub	sp, #40	@ 0x28
 800b0ca:	b319      	cbz	r1, 800b114 <rclc_timer_init_default+0x54>
 800b0cc:	4690      	mov	r8, r2
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	f007 f945 	bl	8012360 <rcl_get_zero_initialized_timer>
 800b0d6:	68b4      	ldr	r4, [r6, #8]
 800b0d8:	6028      	str	r0, [r5, #0]
 800b0da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0dc:	f10d 0c0c 	add.w	ip, sp, #12
 800b0e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	f8cc 3000 	str.w	r3, [ip]
 800b0ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	e9cd 8700 	strd	r8, r7, [sp]
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	f106 010c 	add.w	r1, r6, #12
 800b0fa:	f007 f939 	bl	8012370 <rcl_timer_init>
 800b0fe:	b910      	cbnz	r0, 800b106 <rclc_timer_init_default+0x46>
 800b100:	b00a      	add	sp, #40	@ 0x28
 800b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b106:	9009      	str	r0, [sp, #36]	@ 0x24
 800b108:	f000 f872 	bl	800b1f0 <rcutils_reset_error>
 800b10c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b10e:	b00a      	add	sp, #40	@ 0x28
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b114:	200b      	movs	r0, #11
 800b116:	b00a      	add	sp, #40	@ 0x28
 800b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11c:	200b      	movs	r0, #11
 800b11e:	4770      	bx	lr

0800b120 <__default_zero_allocate>:
 800b120:	f00b bb88 	b.w	8016834 <calloc>

0800b124 <__default_reallocate>:
 800b124:	f00b bd14 	b.w	8016b50 <realloc>

0800b128 <__default_deallocate>:
 800b128:	f00b bbf0 	b.w	801690c <free>

0800b12c <__default_allocate>:
 800b12c:	f00b bbe6 	b.w	80168fc <malloc>

0800b130 <rcutils_get_zero_initialized_allocator>:
 800b130:	b510      	push	{r4, lr}
 800b132:	4c05      	ldr	r4, [pc, #20]	@ (800b148 <rcutils_get_zero_initialized_allocator+0x18>)
 800b134:	4686      	mov	lr, r0
 800b136:	4684      	mov	ip, r0
 800b138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b13a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	f8cc 3000 	str.w	r3, [ip]
 800b144:	4670      	mov	r0, lr
 800b146:	bd10      	pop	{r4, pc}
 800b148:	080181e8 	.word	0x080181e8

0800b14c <rcutils_set_default_allocator>:
 800b14c:	b1a8      	cbz	r0, 800b17a <rcutils_set_default_allocator+0x2e>
 800b14e:	6802      	ldr	r2, [r0, #0]
 800b150:	b1a2      	cbz	r2, 800b17c <rcutils_set_default_allocator+0x30>
 800b152:	6841      	ldr	r1, [r0, #4]
 800b154:	b1a1      	cbz	r1, 800b180 <rcutils_set_default_allocator+0x34>
 800b156:	b410      	push	{r4}
 800b158:	68c4      	ldr	r4, [r0, #12]
 800b15a:	b164      	cbz	r4, 800b176 <rcutils_set_default_allocator+0x2a>
 800b15c:	6880      	ldr	r0, [r0, #8]
 800b15e:	b138      	cbz	r0, 800b170 <rcutils_set_default_allocator+0x24>
 800b160:	4b08      	ldr	r3, [pc, #32]	@ (800b184 <rcutils_set_default_allocator+0x38>)
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	2200      	movs	r2, #0
 800b166:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b16a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b16e:	2001      	movs	r0, #1
 800b170:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	4620      	mov	r0, r4
 800b178:	e7fa      	b.n	800b170 <rcutils_set_default_allocator+0x24>
 800b17a:	4770      	bx	lr
 800b17c:	4610      	mov	r0, r2
 800b17e:	4770      	bx	lr
 800b180:	4608      	mov	r0, r1
 800b182:	4770      	bx	lr
 800b184:	20000018 	.word	0x20000018

0800b188 <rcutils_get_default_allocator>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	4c05      	ldr	r4, [pc, #20]	@ (800b1a0 <rcutils_get_default_allocator+0x18>)
 800b18c:	4686      	mov	lr, r0
 800b18e:	4684      	mov	ip, r0
 800b190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	f8cc 3000 	str.w	r3, [ip]
 800b19c:	4670      	mov	r0, lr
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	20000018 	.word	0x20000018

0800b1a4 <rcutils_allocator_is_valid>:
 800b1a4:	b158      	cbz	r0, 800b1be <rcutils_allocator_is_valid+0x1a>
 800b1a6:	6803      	ldr	r3, [r0, #0]
 800b1a8:	b143      	cbz	r3, 800b1bc <rcutils_allocator_is_valid+0x18>
 800b1aa:	6843      	ldr	r3, [r0, #4]
 800b1ac:	b133      	cbz	r3, 800b1bc <rcutils_allocator_is_valid+0x18>
 800b1ae:	68c3      	ldr	r3, [r0, #12]
 800b1b0:	b123      	cbz	r3, 800b1bc <rcutils_allocator_is_valid+0x18>
 800b1b2:	6880      	ldr	r0, [r0, #8]
 800b1b4:	3800      	subs	r0, #0
 800b1b6:	bf18      	it	ne
 800b1b8:	2001      	movne	r0, #1
 800b1ba:	4770      	bx	lr
 800b1bc:	4618      	mov	r0, r3
 800b1be:	4770      	bx	lr

0800b1c0 <rcutils_get_error_string>:
 800b1c0:	4b06      	ldr	r3, [pc, #24]	@ (800b1dc <rcutils_get_error_string+0x1c>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	b13b      	cbz	r3, 800b1d6 <rcutils_get_error_string+0x16>
 800b1c6:	4b06      	ldr	r3, [pc, #24]	@ (800b1e0 <rcutils_get_error_string+0x20>)
 800b1c8:	781a      	ldrb	r2, [r3, #0]
 800b1ca:	b90a      	cbnz	r2, 800b1d0 <rcutils_get_error_string+0x10>
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	4b04      	ldr	r3, [pc, #16]	@ (800b1e4 <rcutils_get_error_string+0x24>)
 800b1d2:	7818      	ldrb	r0, [r3, #0]
 800b1d4:	4770      	bx	lr
 800b1d6:	4b04      	ldr	r3, [pc, #16]	@ (800b1e8 <rcutils_get_error_string+0x28>)
 800b1d8:	7818      	ldrb	r0, [r3, #0]
 800b1da:	4770      	bx	lr
 800b1dc:	200062d8 	.word	0x200062d8
 800b1e0:	200062f1 	.word	0x200062f1
 800b1e4:	200062f0 	.word	0x200062f0
 800b1e8:	080181fc 	.word	0x080181fc
 800b1ec:	00000000 	.word	0x00000000

0800b1f0 <rcutils_reset_error>:
 800b1f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b210 <rcutils_reset_error+0x20>
 800b1f4:	4a08      	ldr	r2, [pc, #32]	@ (800b218 <rcutils_reset_error+0x28>)
 800b1f6:	4809      	ldr	r0, [pc, #36]	@ (800b21c <rcutils_reset_error+0x2c>)
 800b1f8:	4909      	ldr	r1, [pc, #36]	@ (800b220 <rcutils_reset_error+0x30>)
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	8013      	strh	r3, [r2, #0]
 800b1fe:	ed82 7b02 	vstr	d7, [r2, #8]
 800b202:	4a08      	ldr	r2, [pc, #32]	@ (800b224 <rcutils_reset_error+0x34>)
 800b204:	7003      	strb	r3, [r0, #0]
 800b206:	700b      	strb	r3, [r1, #0]
 800b208:	7013      	strb	r3, [r2, #0]
 800b20a:	4770      	bx	lr
 800b20c:	f3af 8000 	nop.w
	...
 800b218:	200062e0 	.word	0x200062e0
 800b21c:	200062f1 	.word	0x200062f1
 800b220:	200062f0 	.word	0x200062f0
 800b224:	200062d8 	.word	0x200062d8

0800b228 <rcutils_system_time_now>:
 800b228:	b308      	cbz	r0, 800b26e <rcutils_system_time_now+0x46>
 800b22a:	b570      	push	{r4, r5, r6, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	4604      	mov	r4, r0
 800b230:	4669      	mov	r1, sp
 800b232:	2001      	movs	r0, #1
 800b234:	f7f6 f8c4 	bl	80013c0 <clock_gettime>
 800b238:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b23c:	2d00      	cmp	r5, #0
 800b23e:	db13      	blt.n	800b268 <rcutils_system_time_now+0x40>
 800b240:	9902      	ldr	r1, [sp, #8]
 800b242:	2900      	cmp	r1, #0
 800b244:	db0d      	blt.n	800b262 <rcutils_system_time_now+0x3a>
 800b246:	4e0b      	ldr	r6, [pc, #44]	@ (800b274 <rcutils_system_time_now+0x4c>)
 800b248:	fba3 3206 	umull	r3, r2, r3, r6
 800b24c:	185b      	adds	r3, r3, r1
 800b24e:	fb06 2205 	mla	r2, r6, r5, r2
 800b252:	f04f 0000 	mov.w	r0, #0
 800b256:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b25a:	e9c4 3200 	strd	r3, r2, [r4]
 800b25e:	b004      	add	sp, #16
 800b260:	bd70      	pop	{r4, r5, r6, pc}
 800b262:	ea53 0205 	orrs.w	r2, r3, r5
 800b266:	d1ee      	bne.n	800b246 <rcutils_system_time_now+0x1e>
 800b268:	2002      	movs	r0, #2
 800b26a:	b004      	add	sp, #16
 800b26c:	bd70      	pop	{r4, r5, r6, pc}
 800b26e:	200b      	movs	r0, #11
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	3b9aca00 	.word	0x3b9aca00

0800b278 <rcutils_steady_time_now>:
 800b278:	b308      	cbz	r0, 800b2be <rcutils_steady_time_now+0x46>
 800b27a:	b570      	push	{r4, r5, r6, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	4604      	mov	r4, r0
 800b280:	4669      	mov	r1, sp
 800b282:	2000      	movs	r0, #0
 800b284:	f7f6 f89c 	bl	80013c0 <clock_gettime>
 800b288:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b28c:	2d00      	cmp	r5, #0
 800b28e:	db13      	blt.n	800b2b8 <rcutils_steady_time_now+0x40>
 800b290:	9902      	ldr	r1, [sp, #8]
 800b292:	2900      	cmp	r1, #0
 800b294:	db0d      	blt.n	800b2b2 <rcutils_steady_time_now+0x3a>
 800b296:	4e0b      	ldr	r6, [pc, #44]	@ (800b2c4 <rcutils_steady_time_now+0x4c>)
 800b298:	fba3 3206 	umull	r3, r2, r3, r6
 800b29c:	185b      	adds	r3, r3, r1
 800b29e:	fb06 2205 	mla	r2, r6, r5, r2
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b2aa:	e9c4 3200 	strd	r3, r2, [r4]
 800b2ae:	b004      	add	sp, #16
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
 800b2b2:	ea53 0205 	orrs.w	r2, r3, r5
 800b2b6:	d1ee      	bne.n	800b296 <rcutils_steady_time_now+0x1e>
 800b2b8:	2002      	movs	r0, #2
 800b2ba:	b004      	add	sp, #16
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	200b      	movs	r0, #11
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	3b9aca00 	.word	0x3b9aca00

0800b2c8 <rmw_get_zero_initialized_init_options>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	2238      	movs	r2, #56	@ 0x38
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	f00b fea0 	bl	8017014 <memset>
 800b2d4:	f104 0010 	add.w	r0, r4, #16
 800b2d8:	f000 f80a 	bl	800b2f0 <rmw_get_default_security_options>
 800b2dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2e0:	60e3      	str	r3, [r4, #12]
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	bd10      	pop	{r4, pc}
 800b2e6:	bf00      	nop

0800b2e8 <rmw_get_default_publisher_options>:
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	6002      	str	r2, [r0, #0]
 800b2ec:	7102      	strb	r2, [r0, #4]
 800b2ee:	4770      	bx	lr

0800b2f0 <rmw_get_default_security_options>:
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	7002      	strb	r2, [r0, #0]
 800b2f4:	6042      	str	r2, [r0, #4]
 800b2f6:	4770      	bx	lr

0800b2f8 <rmw_uros_set_custom_transport>:
 800b2f8:	b470      	push	{r4, r5, r6}
 800b2fa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b2fe:	b162      	cbz	r2, 800b31a <rmw_uros_set_custom_transport+0x22>
 800b300:	b15b      	cbz	r3, 800b31a <rmw_uros_set_custom_transport+0x22>
 800b302:	b155      	cbz	r5, 800b31a <rmw_uros_set_custom_transport+0x22>
 800b304:	b14e      	cbz	r6, 800b31a <rmw_uros_set_custom_transport+0x22>
 800b306:	4c06      	ldr	r4, [pc, #24]	@ (800b320 <rmw_uros_set_custom_transport+0x28>)
 800b308:	7020      	strb	r0, [r4, #0]
 800b30a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b30e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b312:	6166      	str	r6, [r4, #20]
 800b314:	2000      	movs	r0, #0
 800b316:	bc70      	pop	{r4, r5, r6}
 800b318:	4770      	bx	lr
 800b31a:	200b      	movs	r0, #11
 800b31c:	bc70      	pop	{r4, r5, r6}
 800b31e:	4770      	bx	lr
 800b320:	200062f4 	.word	0x200062f4

0800b324 <rmw_init_options_init>:
 800b324:	b084      	sub	sp, #16
 800b326:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b328:	b083      	sub	sp, #12
 800b32a:	ad09      	add	r5, sp, #36	@ 0x24
 800b32c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b330:	b130      	cbz	r0, 800b340 <rmw_init_options_init+0x1c>
 800b332:	4604      	mov	r4, r0
 800b334:	4628      	mov	r0, r5
 800b336:	f7ff ff35 	bl	800b1a4 <rcutils_allocator_is_valid>
 800b33a:	b108      	cbz	r0, 800b340 <rmw_init_options_init+0x1c>
 800b33c:	68a6      	ldr	r6, [r4, #8]
 800b33e:	b12e      	cbz	r6, 800b34c <rmw_init_options_init+0x28>
 800b340:	200b      	movs	r0, #11
 800b342:	b003      	add	sp, #12
 800b344:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b348:	b004      	add	sp, #16
 800b34a:	4770      	bx	lr
 800b34c:	2200      	movs	r2, #0
 800b34e:	2300      	movs	r3, #0
 800b350:	e9c4 2300 	strd	r2, r3, [r4]
 800b354:	4b20      	ldr	r3, [pc, #128]	@ (800b3d8 <rmw_init_options_init+0xb4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60a3      	str	r3, [r4, #8]
 800b35a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b35c:	f104 0c20 	add.w	ip, r4, #32
 800b360:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b364:	466f      	mov	r7, sp
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	f8cc 3000 	str.w	r3, [ip]
 800b36c:	4638      	mov	r0, r7
 800b36e:	61e6      	str	r6, [r4, #28]
 800b370:	60e6      	str	r6, [r4, #12]
 800b372:	f7ff ffbd 	bl	800b2f0 <rmw_get_default_security_options>
 800b376:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b37a:	f104 0310 	add.w	r3, r4, #16
 800b37e:	e883 0003 	stmia.w	r3, {r0, r1}
 800b382:	2203      	movs	r2, #3
 800b384:	4815      	ldr	r0, [pc, #84]	@ (800b3dc <rmw_init_options_init+0xb8>)
 800b386:	4916      	ldr	r1, [pc, #88]	@ (800b3e0 <rmw_init_options_init+0xbc>)
 800b388:	7626      	strb	r6, [r4, #24]
 800b38a:	f000 ffbb 	bl	800c304 <rmw_uxrce_init_init_options_impl_memory>
 800b38e:	4813      	ldr	r0, [pc, #76]	@ (800b3dc <rmw_init_options_init+0xb8>)
 800b390:	f009 fb16 	bl	80149c0 <get_memory>
 800b394:	b1f0      	cbz	r0, 800b3d4 <rmw_init_options_init+0xb0>
 800b396:	4a13      	ldr	r2, [pc, #76]	@ (800b3e4 <rmw_init_options_init+0xc0>)
 800b398:	6883      	ldr	r3, [r0, #8]
 800b39a:	6851      	ldr	r1, [r2, #4]
 800b39c:	7810      	ldrb	r0, [r2, #0]
 800b39e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3a0:	7418      	strb	r0, [r3, #16]
 800b3a2:	6159      	str	r1, [r3, #20]
 800b3a4:	68d1      	ldr	r1, [r2, #12]
 800b3a6:	61d9      	str	r1, [r3, #28]
 800b3a8:	6911      	ldr	r1, [r2, #16]
 800b3aa:	6219      	str	r1, [r3, #32]
 800b3ac:	6951      	ldr	r1, [r2, #20]
 800b3ae:	6892      	ldr	r2, [r2, #8]
 800b3b0:	619a      	str	r2, [r3, #24]
 800b3b2:	6259      	str	r1, [r3, #36]	@ 0x24
 800b3b4:	f004 fd9a 	bl	800feec <uxr_nanos>
 800b3b8:	f00b fb5e 	bl	8016a78 <srand>
 800b3bc:	f00b fb8a 	bl	8016ad4 <rand>
 800b3c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3c2:	6298      	str	r0, [r3, #40]	@ 0x28
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d0f9      	beq.n	800b3bc <rmw_init_options_init+0x98>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	b003      	add	sp, #12
 800b3cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b3d0:	b004      	add	sp, #16
 800b3d2:	4770      	bx	lr
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	e7b4      	b.n	800b342 <rmw_init_options_init+0x1e>
 800b3d8:	08018ac4 	.word	0x08018ac4
 800b3dc:	2000ac0c 	.word	0x2000ac0c
 800b3e0:	200064a8 	.word	0x200064a8
 800b3e4:	200062f4 	.word	0x200062f4

0800b3e8 <rmw_init_options_copy>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	b160      	cbz	r0, 800b408 <rmw_init_options_copy+0x20>
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	b151      	cbz	r1, 800b408 <rmw_init_options_copy+0x20>
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	6880      	ldr	r0, [r0, #8]
 800b3f6:	b128      	cbz	r0, 800b404 <rmw_init_options_copy+0x1c>
 800b3f8:	4b33      	ldr	r3, [pc, #204]	@ (800b4c8 <rmw_init_options_copy+0xe0>)
 800b3fa:	6819      	ldr	r1, [r3, #0]
 800b3fc:	f7f4 ff10 	bl	8000220 <strcmp>
 800b400:	2800      	cmp	r0, #0
 800b402:	d154      	bne.n	800b4ae <rmw_init_options_copy+0xc6>
 800b404:	68ab      	ldr	r3, [r5, #8]
 800b406:	b11b      	cbz	r3, 800b410 <rmw_init_options_copy+0x28>
 800b408:	240b      	movs	r4, #11
 800b40a:	4620      	mov	r0, r4
 800b40c:	b008      	add	sp, #32
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	4623      	mov	r3, r4
 800b412:	462a      	mov	r2, r5
 800b414:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b418:	f8d3 c000 	ldr.w	ip, [r3]
 800b41c:	6858      	ldr	r0, [r3, #4]
 800b41e:	6899      	ldr	r1, [r3, #8]
 800b420:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b424:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b428:	3310      	adds	r3, #16
 800b42a:	42b3      	cmp	r3, r6
 800b42c:	f8c2 c000 	str.w	ip, [r2]
 800b430:	6050      	str	r0, [r2, #4]
 800b432:	6091      	str	r1, [r2, #8]
 800b434:	f102 0210 	add.w	r2, r2, #16
 800b438:	d1ee      	bne.n	800b418 <rmw_init_options_copy+0x30>
 800b43a:	6819      	ldr	r1, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	6053      	str	r3, [r2, #4]
 800b440:	6011      	str	r1, [r2, #0]
 800b442:	f104 0e20 	add.w	lr, r4, #32
 800b446:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b44a:	f10d 0c0c 	add.w	ip, sp, #12
 800b44e:	4666      	mov	r6, ip
 800b450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b454:	f8de 3000 	ldr.w	r3, [lr]
 800b458:	f8cc 3000 	str.w	r3, [ip]
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff fea1 	bl	800b1a4 <rcutils_allocator_is_valid>
 800b462:	2800      	cmp	r0, #0
 800b464:	d0d0      	beq.n	800b408 <rmw_init_options_copy+0x20>
 800b466:	ab08      	add	r3, sp, #32
 800b468:	e913 0003 	ldmdb	r3, {r0, r1}
 800b46c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b470:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800b474:	69e0      	ldr	r0, [r4, #28]
 800b476:	f008 fe55 	bl	8014124 <rcutils_strdup>
 800b47a:	61e8      	str	r0, [r5, #28]
 800b47c:	69e3      	ldr	r3, [r4, #28]
 800b47e:	b103      	cbz	r3, 800b482 <rmw_init_options_copy+0x9a>
 800b480:	b1f8      	cbz	r0, 800b4c2 <rmw_init_options_copy+0xda>
 800b482:	4812      	ldr	r0, [pc, #72]	@ (800b4cc <rmw_init_options_copy+0xe4>)
 800b484:	f009 fa9c 	bl	80149c0 <get_memory>
 800b488:	b1a8      	cbz	r0, 800b4b6 <rmw_init_options_copy+0xce>
 800b48a:	6883      	ldr	r3, [r0, #8]
 800b48c:	636b      	str	r3, [r5, #52]	@ 0x34
 800b48e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b490:	f102 0c10 	add.w	ip, r2, #16
 800b494:	f103 0510 	add.w	r5, r3, #16
 800b498:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b49c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b49e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b4a2:	2400      	movs	r4, #0
 800b4a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	b008      	add	sp, #32
 800b4ac:	bd70      	pop	{r4, r5, r6, pc}
 800b4ae:	240c      	movs	r4, #12
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	b008      	add	sp, #32
 800b4b4:	bd70      	pop	{r4, r5, r6, pc}
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	9907      	ldr	r1, [sp, #28]
 800b4ba:	69e8      	ldr	r0, [r5, #28]
 800b4bc:	4798      	blx	r3
 800b4be:	2401      	movs	r4, #1
 800b4c0:	e7a3      	b.n	800b40a <rmw_init_options_copy+0x22>
 800b4c2:	240a      	movs	r4, #10
 800b4c4:	e7a1      	b.n	800b40a <rmw_init_options_copy+0x22>
 800b4c6:	bf00      	nop
 800b4c8:	08018ac4 	.word	0x08018ac4
 800b4cc:	2000ac0c 	.word	0x2000ac0c

0800b4d0 <rmw_init_options_fini>:
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d041      	beq.n	800b558 <rmw_init_options_fini+0x88>
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	b08e      	sub	sp, #56	@ 0x38
 800b4da:	3020      	adds	r0, #32
 800b4dc:	f7ff fe62 	bl	800b1a4 <rcutils_allocator_is_valid>
 800b4e0:	b380      	cbz	r0, 800b544 <rmw_init_options_fini+0x74>
 800b4e2:	68a0      	ldr	r0, [r4, #8]
 800b4e4:	b120      	cbz	r0, 800b4f0 <rmw_init_options_fini+0x20>
 800b4e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b560 <rmw_init_options_fini+0x90>)
 800b4e8:	6819      	ldr	r1, [r3, #0]
 800b4ea:	f7f4 fe99 	bl	8000220 <strcmp>
 800b4ee:	bb88      	cbnz	r0, 800b554 <rmw_init_options_fini+0x84>
 800b4f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b564 <rmw_init_options_fini+0x94>)
 800b4f2:	6819      	ldr	r1, [r3, #0]
 800b4f4:	b351      	cbz	r1, 800b54c <rmw_init_options_fini+0x7c>
 800b4f6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b4f8:	e001      	b.n	800b4fe <rmw_init_options_fini+0x2e>
 800b4fa:	6849      	ldr	r1, [r1, #4]
 800b4fc:	b331      	cbz	r1, 800b54c <rmw_init_options_fini+0x7c>
 800b4fe:	688b      	ldr	r3, [r1, #8]
 800b500:	429a      	cmp	r2, r3
 800b502:	d1fa      	bne.n	800b4fa <rmw_init_options_fini+0x2a>
 800b504:	4817      	ldr	r0, [pc, #92]	@ (800b564 <rmw_init_options_fini+0x94>)
 800b506:	f009 fa6b 	bl	80149e0 <put_memory>
 800b50a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b50c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b50e:	69e0      	ldr	r0, [r4, #28]
 800b510:	4798      	blx	r3
 800b512:	4668      	mov	r0, sp
 800b514:	f7ff fed8 	bl	800b2c8 <rmw_get_zero_initialized_init_options>
 800b518:	46ee      	mov	lr, sp
 800b51a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b51e:	46a4      	mov	ip, r4
 800b520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b524:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b52c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b534:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b538:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b53c:	2300      	movs	r3, #0
 800b53e:	4618      	mov	r0, r3
 800b540:	b00e      	add	sp, #56	@ 0x38
 800b542:	bd10      	pop	{r4, pc}
 800b544:	230b      	movs	r3, #11
 800b546:	4618      	mov	r0, r3
 800b548:	b00e      	add	sp, #56	@ 0x38
 800b54a:	bd10      	pop	{r4, pc}
 800b54c:	2301      	movs	r3, #1
 800b54e:	4618      	mov	r0, r3
 800b550:	b00e      	add	sp, #56	@ 0x38
 800b552:	bd10      	pop	{r4, pc}
 800b554:	230c      	movs	r3, #12
 800b556:	e7f2      	b.n	800b53e <rmw_init_options_fini+0x6e>
 800b558:	230b      	movs	r3, #11
 800b55a:	4618      	mov	r0, r3
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	08018ac4 	.word	0x08018ac4
 800b564:	2000ac0c 	.word	0x2000ac0c

0800b568 <rmw_init>:
 800b568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b56c:	b083      	sub	sp, #12
 800b56e:	2800      	cmp	r0, #0
 800b570:	f000 80d3 	beq.w	800b71a <rmw_init+0x1b2>
 800b574:	460e      	mov	r6, r1
 800b576:	2900      	cmp	r1, #0
 800b578:	f000 80cf 	beq.w	800b71a <rmw_init+0x1b2>
 800b57c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b57e:	4605      	mov	r5, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 80ca 	beq.w	800b71a <rmw_init+0x1b2>
 800b586:	4b78      	ldr	r3, [pc, #480]	@ (800b768 <rmw_init+0x200>)
 800b588:	6880      	ldr	r0, [r0, #8]
 800b58a:	681f      	ldr	r7, [r3, #0]
 800b58c:	b128      	cbz	r0, 800b59a <rmw_init+0x32>
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f4 fe46 	bl	8000220 <strcmp>
 800b594:	2800      	cmp	r0, #0
 800b596:	f040 80ca 	bne.w	800b72e <rmw_init+0x1c6>
 800b59a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b59e:	4c73      	ldr	r4, [pc, #460]	@ (800b76c <rmw_init+0x204>)
 800b5a0:	4973      	ldr	r1, [pc, #460]	@ (800b770 <rmw_init+0x208>)
 800b5a2:	4874      	ldr	r0, [pc, #464]	@ (800b774 <rmw_init+0x20c>)
 800b5a4:	60b7      	str	r7, [r6, #8]
 800b5a6:	e9c6 2300 	strd	r2, r3, [r6]
 800b5aa:	68eb      	ldr	r3, [r5, #12]
 800b5ac:	64b3      	str	r3, [r6, #72]	@ 0x48
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f000 fe48 	bl	800c244 <rmw_uxrce_init_session_memory>
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4970      	ldr	r1, [pc, #448]	@ (800b778 <rmw_init+0x210>)
 800b5b8:	2204      	movs	r2, #4
 800b5ba:	f000 fe83 	bl	800c2c4 <rmw_uxrce_init_static_input_buffer_memory>
 800b5be:	f04f 0800 	mov.w	r8, #0
 800b5c2:	486c      	ldr	r0, [pc, #432]	@ (800b774 <rmw_init+0x20c>)
 800b5c4:	f884 800d 	strb.w	r8, [r4, #13]
 800b5c8:	f009 f9fa 	bl	80149c0 <get_memory>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f000 80a9 	beq.w	800b724 <rmw_init+0x1bc>
 800b5d2:	6884      	ldr	r4, [r0, #8]
 800b5d4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800b5d6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b5d8:	f890 c010 	ldrb.w	ip, [r0, #16]
 800b5dc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b5e0:	9101      	str	r1, [sp, #4]
 800b5e2:	6a00      	ldr	r0, [r0, #32]
 800b5e4:	9000      	str	r0, [sp, #0]
 800b5e6:	f104 0910 	add.w	r9, r4, #16
 800b5ea:	4661      	mov	r1, ip
 800b5ec:	4648      	mov	r0, r9
 800b5ee:	f002 fc1b 	bl	800de28 <uxr_set_custom_transport_callbacks>
 800b5f2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b5f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5fa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800b5fe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800b602:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800b606:	495d      	ldr	r1, [pc, #372]	@ (800b77c <rmw_init+0x214>)
 800b608:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800b60c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800b610:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800b614:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800b618:	4859      	ldr	r0, [pc, #356]	@ (800b780 <rmw_init+0x218>)
 800b61a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800b61e:	2201      	movs	r2, #1
 800b620:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800b622:	f000 fdef 	bl	800c204 <rmw_uxrce_init_node_memory>
 800b626:	4957      	ldr	r1, [pc, #348]	@ (800b784 <rmw_init+0x21c>)
 800b628:	4857      	ldr	r0, [pc, #348]	@ (800b788 <rmw_init+0x220>)
 800b62a:	2205      	movs	r2, #5
 800b62c:	f000 fdca 	bl	800c1c4 <rmw_uxrce_init_subscription_memory>
 800b630:	4956      	ldr	r1, [pc, #344]	@ (800b78c <rmw_init+0x224>)
 800b632:	4857      	ldr	r0, [pc, #348]	@ (800b790 <rmw_init+0x228>)
 800b634:	220a      	movs	r2, #10
 800b636:	f000 fda5 	bl	800c184 <rmw_uxrce_init_publisher_memory>
 800b63a:	4956      	ldr	r1, [pc, #344]	@ (800b794 <rmw_init+0x22c>)
 800b63c:	4856      	ldr	r0, [pc, #344]	@ (800b798 <rmw_init+0x230>)
 800b63e:	2201      	movs	r2, #1
 800b640:	f000 fd60 	bl	800c104 <rmw_uxrce_init_service_memory>
 800b644:	4955      	ldr	r1, [pc, #340]	@ (800b79c <rmw_init+0x234>)
 800b646:	4856      	ldr	r0, [pc, #344]	@ (800b7a0 <rmw_init+0x238>)
 800b648:	2201      	movs	r2, #1
 800b64a:	f000 fd7b 	bl	800c144 <rmw_uxrce_init_client_memory>
 800b64e:	4955      	ldr	r1, [pc, #340]	@ (800b7a4 <rmw_init+0x23c>)
 800b650:	4855      	ldr	r0, [pc, #340]	@ (800b7a8 <rmw_init+0x240>)
 800b652:	220f      	movs	r2, #15
 800b654:	f000 fe16 	bl	800c284 <rmw_uxrce_init_topic_memory>
 800b658:	4954      	ldr	r1, [pc, #336]	@ (800b7ac <rmw_init+0x244>)
 800b65a:	4855      	ldr	r0, [pc, #340]	@ (800b7b0 <rmw_init+0x248>)
 800b65c:	2203      	movs	r2, #3
 800b65e:	f000 fe51 	bl	800c304 <rmw_uxrce_init_init_options_impl_memory>
 800b662:	4954      	ldr	r1, [pc, #336]	@ (800b7b4 <rmw_init+0x24c>)
 800b664:	4854      	ldr	r0, [pc, #336]	@ (800b7b8 <rmw_init+0x250>)
 800b666:	2204      	movs	r2, #4
 800b668:	f000 fe6c 	bl	800c344 <rmw_uxrce_init_wait_set_memory>
 800b66c:	4953      	ldr	r1, [pc, #332]	@ (800b7bc <rmw_init+0x254>)
 800b66e:	4854      	ldr	r0, [pc, #336]	@ (800b7c0 <rmw_init+0x258>)
 800b670:	2204      	movs	r2, #4
 800b672:	f000 fe87 	bl	800c384 <rmw_uxrce_init_guard_condition_memory>
 800b676:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800b678:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800b67a:	4642      	mov	r2, r8
 800b67c:	f000 fd2a 	bl	800c0d4 <rmw_uxrce_transport_init>
 800b680:	4607      	mov	r7, r0
 800b682:	2800      	cmp	r0, #0
 800b684:	d158      	bne.n	800b738 <rmw_init+0x1d0>
 800b686:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b688:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800b68c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b68e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800b692:	4628      	mov	r0, r5
 800b694:	f002 fdfc 	bl	800e290 <uxr_init_session>
 800b698:	494a      	ldr	r1, [pc, #296]	@ (800b7c4 <rmw_init+0x25c>)
 800b69a:	4622      	mov	r2, r4
 800b69c:	4628      	mov	r0, r5
 800b69e:	f002 fe1b 	bl	800e2d8 <uxr_set_topic_callback>
 800b6a2:	4949      	ldr	r1, [pc, #292]	@ (800b7c8 <rmw_init+0x260>)
 800b6a4:	463a      	mov	r2, r7
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f002 fe12 	bl	800e2d0 <uxr_set_status_callback>
 800b6ac:	4947      	ldr	r1, [pc, #284]	@ (800b7cc <rmw_init+0x264>)
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f002 fe15 	bl	800e2e0 <uxr_set_request_callback>
 800b6b6:	4946      	ldr	r1, [pc, #280]	@ (800b7d0 <rmw_init+0x268>)
 800b6b8:	463a      	mov	r2, r7
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f002 fe14 	bl	800e2e8 <uxr_set_reply_callback>
 800b6c0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b6c4:	2304      	movs	r3, #4
 800b6c6:	0092      	lsls	r2, r2, #2
 800b6c8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f002 fe49 	bl	800e364 <uxr_create_input_reliable_stream>
 800b6d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b6d6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800b6da:	0092      	lsls	r2, r2, #2
 800b6dc:	2304      	movs	r3, #4
 800b6de:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f002 fe16 	bl	800e314 <uxr_create_output_reliable_stream>
 800b6e8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f002 fe33 	bl	800e358 <uxr_create_input_best_effort_stream>
 800b6f2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800b6f6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800b6fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b6fe:	3114      	adds	r1, #20
 800b700:	4628      	mov	r0, r5
 800b702:	f002 fdf5 	bl	800e2f0 <uxr_create_output_best_effort_stream>
 800b706:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800b70a:	4628      	mov	r0, r5
 800b70c:	f003 fb80 	bl	800ee10 <uxr_create_session>
 800b710:	b1f8      	cbz	r0, 800b752 <rmw_init+0x1ea>
 800b712:	4638      	mov	r0, r7
 800b714:	b003      	add	sp, #12
 800b716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b71a:	270b      	movs	r7, #11
 800b71c:	4638      	mov	r0, r7
 800b71e:	b003      	add	sp, #12
 800b720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b724:	2701      	movs	r7, #1
 800b726:	4638      	mov	r0, r7
 800b728:	b003      	add	sp, #12
 800b72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b72e:	270c      	movs	r7, #12
 800b730:	4638      	mov	r0, r7
 800b732:	b003      	add	sp, #12
 800b734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b738:	4648      	mov	r0, r9
 800b73a:	f002 fbb7 	bl	800deac <uxr_close_custom_transport>
 800b73e:	480d      	ldr	r0, [pc, #52]	@ (800b774 <rmw_init+0x20c>)
 800b740:	4621      	mov	r1, r4
 800b742:	f009 f94d 	bl	80149e0 <put_memory>
 800b746:	4638      	mov	r0, r7
 800b748:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800b74c:	b003      	add	sp, #12
 800b74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b752:	4648      	mov	r0, r9
 800b754:	f002 fbaa 	bl	800deac <uxr_close_custom_transport>
 800b758:	4806      	ldr	r0, [pc, #24]	@ (800b774 <rmw_init+0x20c>)
 800b75a:	4621      	mov	r1, r4
 800b75c:	f009 f940 	bl	80149e0 <put_memory>
 800b760:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800b762:	2701      	movs	r7, #1
 800b764:	e7d5      	b.n	800b712 <rmw_init+0x1aa>
 800b766:	bf00      	nop
 800b768:	08018ac4 	.word	0x08018ac4
 800b76c:	2000ac5c 	.word	0x2000ac5c
 800b770:	20006f08 	.word	0x20006f08
 800b774:	2000ac4c 	.word	0x2000ac4c
 800b778:	200084b0 	.word	0x200084b0
 800b77c:	2000652c 	.word	0x2000652c
 800b780:	2000ac1c 	.word	0x2000ac1c
 800b784:	2000a5b0 	.word	0x2000a5b0
 800b788:	2000ac6c 	.word	0x2000ac6c
 800b78c:	200065d0 	.word	0x200065d0
 800b790:	2000ac2c 	.word	0x2000ac2c
 800b794:	20006e40 	.word	0x20006e40
 800b798:	2000ac3c 	.word	0x2000ac3c
 800b79c:	20006360 	.word	0x20006360
 800b7a0:	2000634c 	.word	0x2000634c
 800b7a4:	2000a9e8 	.word	0x2000a9e8
 800b7a8:	2000ac7c 	.word	0x2000ac7c
 800b7ac:	200064a8 	.word	0x200064a8
 800b7b0:	2000ac0c 	.word	0x2000ac0c
 800b7b4:	2000ab8c 	.word	0x2000ab8c
 800b7b8:	2000ac8c 	.word	0x2000ac8c
 800b7bc:	20006428 	.word	0x20006428
 800b7c0:	2000abfc 	.word	0x2000abfc
 800b7c4:	080147f9 	.word	0x080147f9
 800b7c8:	080147f1 	.word	0x080147f1
 800b7cc:	08014891 	.word	0x08014891
 800b7d0:	0801492d 	.word	0x0801492d

0800b7d4 <rmw_context_fini>:
 800b7d4:	4b17      	ldr	r3, [pc, #92]	@ (800b834 <rmw_context_fini+0x60>)
 800b7d6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	681c      	ldr	r4, [r3, #0]
 800b7dc:	4605      	mov	r5, r0
 800b7de:	b334      	cbz	r4, 800b82e <rmw_context_fini+0x5a>
 800b7e0:	2600      	movs	r6, #0
 800b7e2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b7e6:	6902      	ldr	r2, [r0, #16]
 800b7e8:	428a      	cmp	r2, r1
 800b7ea:	d018      	beq.n	800b81e <rmw_context_fini+0x4a>
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d1f8      	bne.n	800b7e2 <rmw_context_fini+0xe>
 800b7f0:	b189      	cbz	r1, 800b816 <rmw_context_fini+0x42>
 800b7f2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800b7f6:	789b      	ldrb	r3, [r3, #2]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800b7fe:	bf14      	ite	ne
 800b800:	210a      	movne	r1, #10
 800b802:	2100      	moveq	r1, #0
 800b804:	f003 fadc 	bl	800edc0 <uxr_delete_session_retries>
 800b808:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b80a:	f000 fddb 	bl	800c3c4 <rmw_uxrce_fini_session_memory>
 800b80e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b810:	3010      	adds	r0, #16
 800b812:	f002 fb4b 	bl	800deac <uxr_close_custom_transport>
 800b816:	2300      	movs	r3, #0
 800b818:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800b81a:	4630      	mov	r0, r6
 800b81c:	bd70      	pop	{r4, r5, r6, pc}
 800b81e:	3018      	adds	r0, #24
 800b820:	f000 f89c 	bl	800b95c <rmw_destroy_node>
 800b824:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b826:	4606      	mov	r6, r0
 800b828:	2c00      	cmp	r4, #0
 800b82a:	d1da      	bne.n	800b7e2 <rmw_context_fini+0xe>
 800b82c:	e7e0      	b.n	800b7f0 <rmw_context_fini+0x1c>
 800b82e:	4626      	mov	r6, r4
 800b830:	e7de      	b.n	800b7f0 <rmw_context_fini+0x1c>
 800b832:	bf00      	nop
 800b834:	2000ac1c 	.word	0x2000ac1c

0800b838 <create_node>:
 800b838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b83c:	b083      	sub	sp, #12
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d05f      	beq.n	800b902 <create_node+0xca>
 800b842:	4606      	mov	r6, r0
 800b844:	4835      	ldr	r0, [pc, #212]	@ (800b91c <create_node+0xe4>)
 800b846:	460f      	mov	r7, r1
 800b848:	4690      	mov	r8, r2
 800b84a:	461d      	mov	r5, r3
 800b84c:	f009 f8b8 	bl	80149c0 <get_memory>
 800b850:	2800      	cmp	r0, #0
 800b852:	d056      	beq.n	800b902 <create_node+0xca>
 800b854:	6884      	ldr	r4, [r0, #8]
 800b856:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	f009 f919 	bl	8014a90 <rmw_get_implementation_identifier>
 800b85e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800b862:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b866:	f8c4 9020 	str.w	r9, [r4, #32]
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7f4 fce2 	bl	8000234 <strlen>
 800b870:	1c42      	adds	r2, r0, #1
 800b872:	2a3c      	cmp	r2, #60	@ 0x3c
 800b874:	f104 0518 	add.w	r5, r4, #24
 800b878:	d840      	bhi.n	800b8fc <create_node+0xc4>
 800b87a:	4648      	mov	r0, r9
 800b87c:	4631      	mov	r1, r6
 800b87e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800b882:	f00b fc90 	bl	80171a6 <memcpy>
 800b886:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800b88a:	4638      	mov	r0, r7
 800b88c:	f7f4 fcd2 	bl	8000234 <strlen>
 800b890:	1c42      	adds	r2, r0, #1
 800b892:	2a3c      	cmp	r2, #60	@ 0x3c
 800b894:	d832      	bhi.n	800b8fc <create_node+0xc4>
 800b896:	4639      	mov	r1, r7
 800b898:	4648      	mov	r0, r9
 800b89a:	f00b fc84 	bl	80171a6 <memcpy>
 800b89e:	6923      	ldr	r3, [r4, #16]
 800b8a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800b8aa:	1842      	adds	r2, r0, r1
 800b8ac:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800b8b0:	f002 fb00 	bl	800deb4 <uxr_object_id>
 800b8b4:	6160      	str	r0, [r4, #20]
 800b8b6:	783b      	ldrb	r3, [r7, #0]
 800b8b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8ba:	d127      	bne.n	800b90c <create_node+0xd4>
 800b8bc:	787b      	ldrb	r3, [r7, #1]
 800b8be:	bb2b      	cbnz	r3, 800b90c <create_node+0xd4>
 800b8c0:	4a17      	ldr	r2, [pc, #92]	@ (800b920 <create_node+0xe8>)
 800b8c2:	4818      	ldr	r0, [pc, #96]	@ (800b924 <create_node+0xec>)
 800b8c4:	4633      	mov	r3, r6
 800b8c6:	213c      	movs	r1, #60	@ 0x3c
 800b8c8:	f00b fac4 	bl	8016e54 <sniprintf>
 800b8cc:	6920      	ldr	r0, [r4, #16]
 800b8ce:	4915      	ldr	r1, [pc, #84]	@ (800b924 <create_node+0xec>)
 800b8d0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800b8d4:	9100      	str	r1, [sp, #0]
 800b8d6:	2106      	movs	r1, #6
 800b8d8:	9101      	str	r1, [sp, #4]
 800b8da:	6811      	ldr	r1, [r2, #0]
 800b8dc:	6962      	ldr	r2, [r4, #20]
 800b8de:	fa1f f388 	uxth.w	r3, r8
 800b8e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b8e6:	f002 f86d 	bl	800d9c4 <uxr_buffer_create_participant_bin>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	6920      	ldr	r0, [r4, #16]
 800b8ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b8f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b8f6:	f000 fedd 	bl	800c6b4 <run_xrce_session>
 800b8fa:	b918      	cbnz	r0, 800b904 <create_node+0xcc>
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f000 fd67 	bl	800c3d0 <rmw_uxrce_fini_node_memory>
 800b902:	2500      	movs	r5, #0
 800b904:	4628      	mov	r0, r5
 800b906:	b003      	add	sp, #12
 800b908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b90c:	4a06      	ldr	r2, [pc, #24]	@ (800b928 <create_node+0xf0>)
 800b90e:	9600      	str	r6, [sp, #0]
 800b910:	463b      	mov	r3, r7
 800b912:	213c      	movs	r1, #60	@ 0x3c
 800b914:	4803      	ldr	r0, [pc, #12]	@ (800b924 <create_node+0xec>)
 800b916:	f00b fa9d 	bl	8016e54 <sniprintf>
 800b91a:	e7d7      	b.n	800b8cc <create_node+0x94>
 800b91c:	2000ac1c 	.word	0x2000ac1c
 800b920:	0801823c 	.word	0x0801823c
 800b924:	20006310 	.word	0x20006310
 800b928:	08018200 	.word	0x08018200

0800b92c <rmw_create_node>:
 800b92c:	b199      	cbz	r1, 800b956 <rmw_create_node+0x2a>
 800b92e:	780b      	ldrb	r3, [r1, #0]
 800b930:	468c      	mov	ip, r1
 800b932:	b183      	cbz	r3, 800b956 <rmw_create_node+0x2a>
 800b934:	b410      	push	{r4}
 800b936:	4614      	mov	r4, r2
 800b938:	b14a      	cbz	r2, 800b94e <rmw_create_node+0x22>
 800b93a:	7813      	ldrb	r3, [r2, #0]
 800b93c:	b13b      	cbz	r3, 800b94e <rmw_create_node+0x22>
 800b93e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800b940:	4603      	mov	r3, r0
 800b942:	4621      	mov	r1, r4
 800b944:	4660      	mov	r0, ip
 800b946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b94a:	f7ff bf75 	b.w	800b838 <create_node>
 800b94e:	2000      	movs	r0, #0
 800b950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	2000      	movs	r0, #0
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop

0800b95c <rmw_destroy_node>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	b328      	cbz	r0, 800b9ac <rmw_destroy_node+0x50>
 800b960:	4607      	mov	r7, r0
 800b962:	6800      	ldr	r0, [r0, #0]
 800b964:	b120      	cbz	r0, 800b970 <rmw_destroy_node+0x14>
 800b966:	4b36      	ldr	r3, [pc, #216]	@ (800ba40 <rmw_destroy_node+0xe4>)
 800b968:	6819      	ldr	r1, [r3, #0]
 800b96a:	f7f4 fc59 	bl	8000220 <strcmp>
 800b96e:	b9e8      	cbnz	r0, 800b9ac <rmw_destroy_node+0x50>
 800b970:	687d      	ldr	r5, [r7, #4]
 800b972:	b1dd      	cbz	r5, 800b9ac <rmw_destroy_node+0x50>
 800b974:	4b33      	ldr	r3, [pc, #204]	@ (800ba44 <rmw_destroy_node+0xe8>)
 800b976:	681c      	ldr	r4, [r3, #0]
 800b978:	2c00      	cmp	r4, #0
 800b97a:	d05f      	beq.n	800ba3c <rmw_destroy_node+0xe0>
 800b97c:	2600      	movs	r6, #0
 800b97e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b982:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800b986:	429d      	cmp	r5, r3
 800b988:	d013      	beq.n	800b9b2 <rmw_destroy_node+0x56>
 800b98a:	2c00      	cmp	r4, #0
 800b98c:	d1f7      	bne.n	800b97e <rmw_destroy_node+0x22>
 800b98e:	4b2e      	ldr	r3, [pc, #184]	@ (800ba48 <rmw_destroy_node+0xec>)
 800b990:	681c      	ldr	r4, [r3, #0]
 800b992:	b1c4      	cbz	r4, 800b9c6 <rmw_destroy_node+0x6a>
 800b994:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b998:	6a0b      	ldr	r3, [r1, #32]
 800b99a:	429d      	cmp	r5, r3
 800b99c:	d1f9      	bne.n	800b992 <rmw_destroy_node+0x36>
 800b99e:	317c      	adds	r1, #124	@ 0x7c
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f000 fb37 	bl	800c014 <rmw_destroy_subscription>
 800b9a6:	2801      	cmp	r0, #1
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	d1f2      	bne.n	800b992 <rmw_destroy_node+0x36>
 800b9ac:	2601      	movs	r6, #1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b2:	3184      	adds	r1, #132	@ 0x84
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	f000 f9a5 	bl	800bd04 <rmw_destroy_publisher>
 800b9ba:	2801      	cmp	r0, #1
 800b9bc:	4606      	mov	r6, r0
 800b9be:	d0f5      	beq.n	800b9ac <rmw_destroy_node+0x50>
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	d1dc      	bne.n	800b97e <rmw_destroy_node+0x22>
 800b9c4:	e7e3      	b.n	800b98e <rmw_destroy_node+0x32>
 800b9c6:	4b21      	ldr	r3, [pc, #132]	@ (800ba4c <rmw_destroy_node+0xf0>)
 800b9c8:	681c      	ldr	r4, [r3, #0]
 800b9ca:	b16c      	cbz	r4, 800b9e8 <rmw_destroy_node+0x8c>
 800b9cc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b9d0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b9d2:	429d      	cmp	r5, r3
 800b9d4:	d1f9      	bne.n	800b9ca <rmw_destroy_node+0x6e>
 800b9d6:	317c      	adds	r1, #124	@ 0x7c
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f000 f9e5 	bl	800bda8 <rmw_destroy_service>
 800b9de:	2801      	cmp	r0, #1
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	d0e3      	beq.n	800b9ac <rmw_destroy_node+0x50>
 800b9e4:	2c00      	cmp	r4, #0
 800b9e6:	d1f1      	bne.n	800b9cc <rmw_destroy_node+0x70>
 800b9e8:	4b19      	ldr	r3, [pc, #100]	@ (800ba50 <rmw_destroy_node+0xf4>)
 800b9ea:	681c      	ldr	r4, [r3, #0]
 800b9ec:	b16c      	cbz	r4, 800ba0a <rmw_destroy_node+0xae>
 800b9ee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b9f2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b9f4:	429d      	cmp	r5, r3
 800b9f6:	d1f9      	bne.n	800b9ec <rmw_destroy_node+0x90>
 800b9f8:	317c      	adds	r1, #124	@ 0x7c
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	f009 f804 	bl	8014a08 <rmw_destroy_client>
 800ba00:	2801      	cmp	r0, #1
 800ba02:	4606      	mov	r6, r0
 800ba04:	d0d2      	beq.n	800b9ac <rmw_destroy_node+0x50>
 800ba06:	2c00      	cmp	r4, #0
 800ba08:	d1f1      	bne.n	800b9ee <rmw_destroy_node+0x92>
 800ba0a:	6928      	ldr	r0, [r5, #16]
 800ba0c:	696a      	ldr	r2, [r5, #20]
 800ba0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ba12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ba16:	6819      	ldr	r1, [r3, #0]
 800ba18:	f001 ff88 	bl	800d92c <uxr_buffer_delete_entity>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	6928      	ldr	r0, [r5, #16]
 800ba20:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ba24:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ba28:	f000 fe44 	bl	800c6b4 <run_xrce_session>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	bf08      	it	eq
 800ba30:	2602      	moveq	r6, #2
 800ba32:	4638      	mov	r0, r7
 800ba34:	f000 fccc 	bl	800c3d0 <rmw_uxrce_fini_node_memory>
 800ba38:	4630      	mov	r0, r6
 800ba3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba3c:	4626      	mov	r6, r4
 800ba3e:	e7a6      	b.n	800b98e <rmw_destroy_node+0x32>
 800ba40:	08018ac4 	.word	0x08018ac4
 800ba44:	2000ac2c 	.word	0x2000ac2c
 800ba48:	2000ac6c 	.word	0x2000ac6c
 800ba4c:	2000ac3c 	.word	0x2000ac3c
 800ba50:	2000634c 	.word	0x2000634c

0800ba54 <rmw_node_get_graph_guard_condition>:
 800ba54:	6843      	ldr	r3, [r0, #4]
 800ba56:	6918      	ldr	r0, [r3, #16]
 800ba58:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop

0800ba60 <flush_session>:
 800ba60:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ba62:	f003 b865 	b.w	800eb30 <uxr_run_session_until_confirm_delivery>
 800ba66:	bf00      	nop

0800ba68 <rmw_publish>:
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d053      	beq.n	800bb14 <rmw_publish+0xac>
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	460d      	mov	r5, r1
 800ba70:	b08e      	sub	sp, #56	@ 0x38
 800ba72:	2900      	cmp	r1, #0
 800ba74:	d04b      	beq.n	800bb0e <rmw_publish+0xa6>
 800ba76:	4604      	mov	r4, r0
 800ba78:	6800      	ldr	r0, [r0, #0]
 800ba7a:	f000 fe9b 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d045      	beq.n	800bb0e <rmw_publish+0xa6>
 800ba82:	6866      	ldr	r6, [r4, #4]
 800ba84:	2e00      	cmp	r6, #0
 800ba86:	d042      	beq.n	800bb0e <rmw_publish+0xa6>
 800ba88:	69b4      	ldr	r4, [r6, #24]
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	4798      	blx	r3
 800ba90:	69f3      	ldr	r3, [r6, #28]
 800ba92:	9005      	str	r0, [sp, #20]
 800ba94:	b113      	cbz	r3, 800ba9c <rmw_publish+0x34>
 800ba96:	a805      	add	r0, sp, #20
 800ba98:	4798      	blx	r3
 800ba9a:	9805      	ldr	r0, [sp, #20]
 800ba9c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	9000      	str	r0, [sp, #0]
 800baa4:	6972      	ldr	r2, [r6, #20]
 800baa6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800baa8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800baac:	ab06      	add	r3, sp, #24
 800baae:	f004 fabd 	bl	801002c <uxr_prepare_output_stream>
 800bab2:	b1d8      	cbz	r0, 800baec <rmw_publish+0x84>
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	a906      	add	r1, sp, #24
 800bab8:	4628      	mov	r0, r5
 800baba:	4798      	blx	r3
 800babc:	6a33      	ldr	r3, [r6, #32]
 800babe:	4604      	mov	r4, r0
 800bac0:	b10b      	cbz	r3, 800bac6 <rmw_publish+0x5e>
 800bac2:	a806      	add	r0, sp, #24
 800bac4:	4798      	blx	r3
 800bac6:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800baca:	2b01      	cmp	r3, #1
 800bacc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bad0:	d022      	beq.n	800bb18 <rmw_publish+0xb0>
 800bad2:	6918      	ldr	r0, [r3, #16]
 800bad4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800bad6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bada:	f003 f829 	bl	800eb30 <uxr_run_session_until_confirm_delivery>
 800bade:	4020      	ands	r0, r4
 800bae0:	b2c4      	uxtb	r4, r0
 800bae2:	f084 0001 	eor.w	r0, r4, #1
 800bae6:	b2c0      	uxtb	r0, r0
 800bae8:	b00e      	add	sp, #56	@ 0x38
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800baf0:	6918      	ldr	r0, [r3, #16]
 800baf2:	9b05      	ldr	r3, [sp, #20]
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <rmw_publish+0xbc>)
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	9602      	str	r6, [sp, #8]
 800bafc:	6972      	ldr	r2, [r6, #20]
 800bafe:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bb00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb04:	ab06      	add	r3, sp, #24
 800bb06:	f004 fac1 	bl	801008c <uxr_prepare_output_stream_fragmented>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d1d2      	bne.n	800bab4 <rmw_publish+0x4c>
 800bb0e:	2001      	movs	r0, #1
 800bb10:	b00e      	add	sp, #56	@ 0x38
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	2001      	movs	r0, #1
 800bb16:	4770      	bx	lr
 800bb18:	6918      	ldr	r0, [r3, #16]
 800bb1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb1e:	f002 fc47 	bl	800e3b0 <uxr_flash_output_streams>
 800bb22:	e7de      	b.n	800bae2 <rmw_publish+0x7a>
 800bb24:	0800ba61 	.word	0x0800ba61

0800bb28 <rmw_create_publisher>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	b087      	sub	sp, #28
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f000 80cc 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb34:	460e      	mov	r6, r1
 800bb36:	2900      	cmp	r1, #0
 800bb38:	f000 80c8 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	6800      	ldr	r0, [r0, #0]
 800bb40:	4615      	mov	r5, r2
 800bb42:	4698      	mov	r8, r3
 800bb44:	f000 fe36 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f000 80bf 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb4e:	2d00      	cmp	r5, #0
 800bb50:	f000 80bc 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb54:	782b      	ldrb	r3, [r5, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f000 80b8 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb5c:	f1b8 0f00 	cmp.w	r8, #0
 800bb60:	f000 80b4 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb64:	485c      	ldr	r0, [pc, #368]	@ (800bcd8 <rmw_create_publisher+0x1b0>)
 800bb66:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bb6a:	f008 ff29 	bl	80149c0 <get_memory>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f000 80ac 	beq.w	800bccc <rmw_create_publisher+0x1a4>
 800bb74:	6884      	ldr	r4, [r0, #8]
 800bb76:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800bb7a:	f008 ff89 	bl	8014a90 <rmw_get_implementation_identifier>
 800bb7e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800bb82:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bb86:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f7f4 fb52 	bl	8000234 <strlen>
 800bb90:	3001      	adds	r0, #1
 800bb92:	283c      	cmp	r0, #60	@ 0x3c
 800bb94:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800bb98:	f200 8091 	bhi.w	800bcbe <rmw_create_publisher+0x196>
 800bb9c:	4a4f      	ldr	r2, [pc, #316]	@ (800bcdc <rmw_create_publisher+0x1b4>)
 800bb9e:	462b      	mov	r3, r5
 800bba0:	213c      	movs	r1, #60	@ 0x3c
 800bba2:	4650      	mov	r0, sl
 800bba4:	f00b f956 	bl	8016e54 <sniprintf>
 800bba8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbac:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800bbae:	4641      	mov	r1, r8
 800bbb0:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800bbb4:	2250      	movs	r2, #80	@ 0x50
 800bbb6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bbba:	f00b faf4 	bl	80171a6 <memcpy>
 800bbbe:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bbc2:	4947      	ldr	r1, [pc, #284]	@ (800bce0 <rmw_create_publisher+0x1b8>)
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbca:	bf0c      	ite	eq
 800bbcc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800bbd0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bbd4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f000 fdf7 	bl	800c7d0 <get_message_typesupport_handle>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d06b      	beq.n	800bcbe <rmw_create_publisher+0x196>
 800bbe6:	6842      	ldr	r2, [r0, #4]
 800bbe8:	61a2      	str	r2, [r4, #24]
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	d067      	beq.n	800bcbe <rmw_create_publisher+0x196>
 800bbee:	4629      	mov	r1, r5
 800bbf0:	4643      	mov	r3, r8
 800bbf2:	4648      	mov	r0, r9
 800bbf4:	f008 ff52 	bl	8014a9c <create_topic>
 800bbf8:	6260      	str	r0, [r4, #36]	@ 0x24
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d063      	beq.n	800bcc6 <rmw_create_publisher+0x19e>
 800bbfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc06:	2103      	movs	r1, #3
 800bc08:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800bc0c:	1c42      	adds	r2, r0, #1
 800bc0e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800bc12:	f002 f94f 	bl	800deb4 <uxr_object_id>
 800bc16:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800bc1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc1e:	6120      	str	r0, [r4, #16]
 800bc20:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800bc24:	6910      	ldr	r0, [r2, #16]
 800bc26:	2506      	movs	r5, #6
 800bc28:	9500      	str	r5, [sp, #0]
 800bc2a:	6819      	ldr	r1, [r3, #0]
 800bc2c:	6922      	ldr	r2, [r4, #16]
 800bc2e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bc32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bc36:	f001 ff2d 	bl	800da94 <uxr_buffer_create_publisher_bin>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bc40:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bc44:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bc48:	f000 fd34 	bl	800c6b4 <run_xrce_session>
 800bc4c:	b3b8      	cbz	r0, 800bcbe <rmw_create_publisher+0x196>
 800bc4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc56:	2105      	movs	r1, #5
 800bc58:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800bc5c:	1c42      	adds	r2, r0, #1
 800bc5e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800bc62:	f002 f927 	bl	800deb4 <uxr_object_id>
 800bc66:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bc6a:	6160      	str	r0, [r4, #20]
 800bc6c:	691e      	ldr	r6, [r3, #16]
 800bc6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc72:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800bc76:	f10d 0a10 	add.w	sl, sp, #16
 800bc7a:	4641      	mov	r1, r8
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800bc82:	f000 fd33 	bl	800c6ec <convert_qos_profile>
 800bc86:	9503      	str	r5, [sp, #12]
 800bc88:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bc8c:	9001      	str	r0, [sp, #4]
 800bc8e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bc92:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800bc9c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bca0:	f8d8 1000 	ldr.w	r1, [r8]
 800bca4:	4630      	mov	r0, r6
 800bca6:	f001 ff55 	bl	800db54 <uxr_buffer_create_datawriter_bin>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bcb0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bcb4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bcb8:	f000 fcfc 	bl	800c6b4 <run_xrce_session>
 800bcbc:	b938      	cbnz	r0, 800bcce <rmw_create_publisher+0x1a6>
 800bcbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bcc0:	b108      	cbz	r0, 800bcc6 <rmw_create_publisher+0x19e>
 800bcc2:	f000 fbf5 	bl	800c4b0 <rmw_uxrce_fini_topic_memory>
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	f000 fb9a 	bl	800c400 <rmw_uxrce_fini_publisher_memory>
 800bccc:	2700      	movs	r7, #0
 800bcce:	4638      	mov	r0, r7
 800bcd0:	b007      	add	sp, #28
 800bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd6:	bf00      	nop
 800bcd8:	2000ac2c 	.word	0x2000ac2c
 800bcdc:	0801823c 	.word	0x0801823c
 800bce0:	08018208 	.word	0x08018208

0800bce4 <rmw_publisher_get_actual_qos>:
 800bce4:	b150      	cbz	r0, 800bcfc <rmw_publisher_get_actual_qos+0x18>
 800bce6:	b508      	push	{r3, lr}
 800bce8:	460b      	mov	r3, r1
 800bcea:	b149      	cbz	r1, 800bd00 <rmw_publisher_get_actual_qos+0x1c>
 800bcec:	6841      	ldr	r1, [r0, #4]
 800bcee:	2250      	movs	r2, #80	@ 0x50
 800bcf0:	3128      	adds	r1, #40	@ 0x28
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f00b fa57 	bl	80171a6 <memcpy>
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	bd08      	pop	{r3, pc}
 800bcfc:	200b      	movs	r0, #11
 800bcfe:	4770      	bx	lr
 800bd00:	200b      	movs	r0, #11
 800bd02:	bd08      	pop	{r3, pc}

0800bd04 <rmw_destroy_publisher>:
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	b128      	cbz	r0, 800bd14 <rmw_destroy_publisher+0x10>
 800bd08:	4604      	mov	r4, r0
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	f000 fd51 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800bd12:	b910      	cbnz	r0, 800bd1a <rmw_destroy_publisher+0x16>
 800bd14:	2401      	movs	r4, #1
 800bd16:	4620      	mov	r0, r4
 800bd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd1a:	6863      	ldr	r3, [r4, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d0f9      	beq.n	800bd14 <rmw_destroy_publisher+0x10>
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	d0f7      	beq.n	800bd14 <rmw_destroy_publisher+0x10>
 800bd24:	6828      	ldr	r0, [r5, #0]
 800bd26:	f000 fd45 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d0f2      	beq.n	800bd14 <rmw_destroy_publisher+0x10>
 800bd2e:	686c      	ldr	r4, [r5, #4]
 800bd30:	2c00      	cmp	r4, #0
 800bd32:	d0ef      	beq.n	800bd14 <rmw_destroy_publisher+0x10>
 800bd34:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bd36:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bd3a:	f008 feff 	bl	8014b3c <destroy_topic>
 800bd3e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd42:	6962      	ldr	r2, [r4, #20]
 800bd44:	6918      	ldr	r0, [r3, #16]
 800bd46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bd4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bd4e:	6819      	ldr	r1, [r3, #0]
 800bd50:	f001 fdec 	bl	800d92c <uxr_buffer_delete_entity>
 800bd54:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd58:	6922      	ldr	r2, [r4, #16]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bd60:	4604      	mov	r4, r0
 800bd62:	6809      	ldr	r1, [r1, #0]
 800bd64:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bd68:	f001 fde0 	bl	800d92c <uxr_buffer_delete_entity>
 800bd6c:	693e      	ldr	r6, [r7, #16]
 800bd6e:	4622      	mov	r2, r4
 800bd70:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bd74:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bd78:	4604      	mov	r4, r0
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 fc9a 	bl	800c6b4 <run_xrce_session>
 800bd80:	693e      	ldr	r6, [r7, #16]
 800bd82:	4622      	mov	r2, r4
 800bd84:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bd88:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f000 fc90 	bl	800c6b4 <run_xrce_session>
 800bd94:	b12c      	cbz	r4, 800bda2 <rmw_destroy_publisher+0x9e>
 800bd96:	b120      	cbz	r0, 800bda2 <rmw_destroy_publisher+0x9e>
 800bd98:	2400      	movs	r4, #0
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f000 fb30 	bl	800c400 <rmw_uxrce_fini_publisher_memory>
 800bda0:	e7b9      	b.n	800bd16 <rmw_destroy_publisher+0x12>
 800bda2:	2402      	movs	r4, #2
 800bda4:	e7f9      	b.n	800bd9a <rmw_destroy_publisher+0x96>
 800bda6:	bf00      	nop

0800bda8 <rmw_destroy_service>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	b128      	cbz	r0, 800bdb8 <rmw_destroy_service+0x10>
 800bdac:	4604      	mov	r4, r0
 800bdae:	6800      	ldr	r0, [r0, #0]
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	f000 fcff 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800bdb6:	b910      	cbnz	r0, 800bdbe <rmw_destroy_service+0x16>
 800bdb8:	2401      	movs	r4, #1
 800bdba:	4620      	mov	r0, r4
 800bdbc:	bd70      	pop	{r4, r5, r6, pc}
 800bdbe:	6863      	ldr	r3, [r4, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0f9      	beq.n	800bdb8 <rmw_destroy_service+0x10>
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	d0f7      	beq.n	800bdb8 <rmw_destroy_service+0x10>
 800bdc8:	6828      	ldr	r0, [r5, #0]
 800bdca:	f000 fcf3 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0f2      	beq.n	800bdb8 <rmw_destroy_service+0x10>
 800bdd2:	686e      	ldr	r6, [r5, #4]
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	d0ef      	beq.n	800bdb8 <rmw_destroy_service+0x10>
 800bdd8:	6864      	ldr	r4, [r4, #4]
 800bdda:	6932      	ldr	r2, [r6, #16]
 800bddc:	6920      	ldr	r0, [r4, #16]
 800bdde:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bde2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bde6:	6819      	ldr	r1, [r3, #0]
 800bde8:	f002 f8ce 	bl	800df88 <uxr_buffer_cancel_data>
 800bdec:	4602      	mov	r2, r0
 800bdee:	6920      	ldr	r0, [r4, #16]
 800bdf0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bdf4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bdf8:	f000 fc5c 	bl	800c6b4 <run_xrce_session>
 800bdfc:	6920      	ldr	r0, [r4, #16]
 800bdfe:	6932      	ldr	r2, [r6, #16]
 800be00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800be04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be08:	6819      	ldr	r1, [r3, #0]
 800be0a:	f001 fd8f 	bl	800d92c <uxr_buffer_delete_entity>
 800be0e:	4602      	mov	r2, r0
 800be10:	6920      	ldr	r0, [r4, #16]
 800be12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be1a:	f000 fc4b 	bl	800c6b4 <run_xrce_session>
 800be1e:	2800      	cmp	r0, #0
 800be20:	4628      	mov	r0, r5
 800be22:	bf14      	ite	ne
 800be24:	2400      	movne	r4, #0
 800be26:	2402      	moveq	r4, #2
 800be28:	f000 fb16 	bl	800c458 <rmw_uxrce_fini_service_memory>
 800be2c:	e7c5      	b.n	800bdba <rmw_destroy_service+0x12>
 800be2e:	bf00      	nop

0800be30 <rmw_create_subscription>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	b08d      	sub	sp, #52	@ 0x34
 800be36:	2800      	cmp	r0, #0
 800be38:	f000 80d1 	beq.w	800bfde <rmw_create_subscription+0x1ae>
 800be3c:	460e      	mov	r6, r1
 800be3e:	2900      	cmp	r1, #0
 800be40:	f000 80cd 	beq.w	800bfde <rmw_create_subscription+0x1ae>
 800be44:	4604      	mov	r4, r0
 800be46:	6800      	ldr	r0, [r0, #0]
 800be48:	4615      	mov	r5, r2
 800be4a:	4698      	mov	r8, r3
 800be4c:	f000 fcb2 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800be50:	2800      	cmp	r0, #0
 800be52:	f000 80c4 	beq.w	800bfde <rmw_create_subscription+0x1ae>
 800be56:	2d00      	cmp	r5, #0
 800be58:	f000 80c1 	beq.w	800bfde <rmw_create_subscription+0x1ae>
 800be5c:	782b      	ldrb	r3, [r5, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 80bd 	beq.w	800bfde <rmw_create_subscription+0x1ae>
 800be64:	f1b8 0f00 	cmp.w	r8, #0
 800be68:	f000 80b9 	beq.w	800bfde <rmw_create_subscription+0x1ae>
 800be6c:	485e      	ldr	r0, [pc, #376]	@ (800bfe8 <rmw_create_subscription+0x1b8>)
 800be6e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800be72:	f008 fda5 	bl	80149c0 <get_memory>
 800be76:	4604      	mov	r4, r0
 800be78:	2800      	cmp	r0, #0
 800be7a:	f000 80b1 	beq.w	800bfe0 <rmw_create_subscription+0x1b0>
 800be7e:	6887      	ldr	r7, [r0, #8]
 800be80:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800be84:	f008 fe04 	bl	8014a90 <rmw_get_implementation_identifier>
 800be88:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800be8c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800be8e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800be92:	4628      	mov	r0, r5
 800be94:	f7f4 f9ce 	bl	8000234 <strlen>
 800be98:	3001      	adds	r0, #1
 800be9a:	283c      	cmp	r0, #60	@ 0x3c
 800be9c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800bea0:	f200 8096 	bhi.w	800bfd0 <rmw_create_subscription+0x1a0>
 800bea4:	4a51      	ldr	r2, [pc, #324]	@ (800bfec <rmw_create_subscription+0x1bc>)
 800bea6:	462b      	mov	r3, r5
 800bea8:	213c      	movs	r1, #60	@ 0x3c
 800beaa:	4650      	mov	r0, sl
 800beac:	f00a ffd2 	bl	8016e54 <sniprintf>
 800beb0:	4641      	mov	r1, r8
 800beb2:	f8c7 9020 	str.w	r9, [r7, #32]
 800beb6:	2250      	movs	r2, #80	@ 0x50
 800beb8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800bebc:	f00b f973 	bl	80171a6 <memcpy>
 800bec0:	494b      	ldr	r1, [pc, #300]	@ (800bff0 <rmw_create_subscription+0x1c0>)
 800bec2:	4630      	mov	r0, r6
 800bec4:	f000 fc84 	bl	800c7d0 <get_message_typesupport_handle>
 800bec8:	2800      	cmp	r0, #0
 800beca:	f000 8081 	beq.w	800bfd0 <rmw_create_subscription+0x1a0>
 800bece:	6842      	ldr	r2, [r0, #4]
 800bed0:	61ba      	str	r2, [r7, #24]
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	d07c      	beq.n	800bfd0 <rmw_create_subscription+0x1a0>
 800bed6:	4629      	mov	r1, r5
 800bed8:	4643      	mov	r3, r8
 800beda:	4648      	mov	r0, r9
 800bedc:	f008 fdde 	bl	8014a9c <create_topic>
 800bee0:	61f8      	str	r0, [r7, #28]
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d078      	beq.n	800bfd8 <rmw_create_subscription+0x1a8>
 800bee6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800beea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800beee:	2104      	movs	r1, #4
 800bef0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800bef4:	1c42      	adds	r2, r0, #1
 800bef6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800befa:	f001 ffdb 	bl	800deb4 <uxr_object_id>
 800befe:	6138      	str	r0, [r7, #16]
 800bf00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bf04:	2506      	movs	r5, #6
 800bf06:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800bf0a:	9500      	str	r5, [sp, #0]
 800bf0c:	6819      	ldr	r1, [r3, #0]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bf14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf18:	f001 fdec 	bl	800daf4 <uxr_buffer_create_subscriber_bin>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bf22:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bf26:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bf2a:	f000 fbc3 	bl	800c6b4 <run_xrce_session>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d04e      	beq.n	800bfd0 <rmw_create_subscription+0x1a0>
 800bf32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800bf40:	1c42      	adds	r2, r0, #1
 800bf42:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800bf46:	f001 ffb5 	bl	800deb4 <uxr_object_id>
 800bf4a:	ae08      	add	r6, sp, #32
 800bf4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	6178      	str	r0, [r7, #20]
 800bf54:	4641      	mov	r1, r8
 800bf56:	4630      	mov	r0, r6
 800bf58:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	f000 fbc5 	bl	800c6ec <convert_qos_profile>
 800bf62:	9503      	str	r5, [sp, #12]
 800bf64:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bf68:	9b05      	ldr	r3, [sp, #20]
 800bf6a:	9001      	str	r0, [sp, #4]
 800bf6c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800bf78:	f8db 1000 	ldr.w	r1, [fp]
 800bf7c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800bf80:	f001 fe5e 	bl	800dc40 <uxr_buffer_create_datareader_bin>
 800bf84:	4602      	mov	r2, r0
 800bf86:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bf8a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bf8e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bf92:	f000 fb8f 	bl	800c6b4 <run_xrce_session>
 800bf96:	b1d8      	cbz	r0, 800bfd0 <rmw_create_subscription+0x1a0>
 800bf98:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bf9c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	bf0c      	ite	eq
 800bfa4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800bfa8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800bfac:	9307      	str	r3, [sp, #28]
 800bfae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800bfb8:	ab0a      	add	r3, sp, #40	@ 0x28
 800bfba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	9b07      	ldr	r3, [sp, #28]
 800bfc4:	6809      	ldr	r1, [r1, #0]
 800bfc6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfca:	f001 ffa3 	bl	800df14 <uxr_buffer_request_data>
 800bfce:	e007      	b.n	800bfe0 <rmw_create_subscription+0x1b0>
 800bfd0:	69f8      	ldr	r0, [r7, #28]
 800bfd2:	b108      	cbz	r0, 800bfd8 <rmw_create_subscription+0x1a8>
 800bfd4:	f000 fa6c 	bl	800c4b0 <rmw_uxrce_fini_topic_memory>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fa27 	bl	800c42c <rmw_uxrce_fini_subscription_memory>
 800bfde:	2400      	movs	r4, #0
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	b00d      	add	sp, #52	@ 0x34
 800bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe8:	2000ac6c 	.word	0x2000ac6c
 800bfec:	0801823c 	.word	0x0801823c
 800bff0:	08018208 	.word	0x08018208

0800bff4 <rmw_subscription_get_actual_qos>:
 800bff4:	b150      	cbz	r0, 800c00c <rmw_subscription_get_actual_qos+0x18>
 800bff6:	b508      	push	{r3, lr}
 800bff8:	460b      	mov	r3, r1
 800bffa:	b149      	cbz	r1, 800c010 <rmw_subscription_get_actual_qos+0x1c>
 800bffc:	6841      	ldr	r1, [r0, #4]
 800bffe:	2250      	movs	r2, #80	@ 0x50
 800c000:	3128      	adds	r1, #40	@ 0x28
 800c002:	4618      	mov	r0, r3
 800c004:	f00b f8cf 	bl	80171a6 <memcpy>
 800c008:	2000      	movs	r0, #0
 800c00a:	bd08      	pop	{r3, pc}
 800c00c:	200b      	movs	r0, #11
 800c00e:	4770      	bx	lr
 800c010:	200b      	movs	r0, #11
 800c012:	bd08      	pop	{r3, pc}

0800c014 <rmw_destroy_subscription>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	b128      	cbz	r0, 800c024 <rmw_destroy_subscription+0x10>
 800c018:	4604      	mov	r4, r0
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	460d      	mov	r5, r1
 800c01e:	f000 fbc9 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800c022:	b910      	cbnz	r0, 800c02a <rmw_destroy_subscription+0x16>
 800c024:	2401      	movs	r4, #1
 800c026:	4620      	mov	r0, r4
 800c028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c02a:	6863      	ldr	r3, [r4, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0f9      	beq.n	800c024 <rmw_destroy_subscription+0x10>
 800c030:	2d00      	cmp	r5, #0
 800c032:	d0f7      	beq.n	800c024 <rmw_destroy_subscription+0x10>
 800c034:	6828      	ldr	r0, [r5, #0]
 800c036:	f000 fbbd 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d0f2      	beq.n	800c024 <rmw_destroy_subscription+0x10>
 800c03e:	686c      	ldr	r4, [r5, #4]
 800c040:	2c00      	cmp	r4, #0
 800c042:	d0ef      	beq.n	800c024 <rmw_destroy_subscription+0x10>
 800c044:	6a26      	ldr	r6, [r4, #32]
 800c046:	6962      	ldr	r2, [r4, #20]
 800c048:	6930      	ldr	r0, [r6, #16]
 800c04a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c04e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	f001 ff98 	bl	800df88 <uxr_buffer_cancel_data>
 800c058:	4602      	mov	r2, r0
 800c05a:	6930      	ldr	r0, [r6, #16]
 800c05c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c060:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c064:	f000 fb26 	bl	800c6b4 <run_xrce_session>
 800c068:	69e0      	ldr	r0, [r4, #28]
 800c06a:	f008 fd67 	bl	8014b3c <destroy_topic>
 800c06e:	6a23      	ldr	r3, [r4, #32]
 800c070:	6962      	ldr	r2, [r4, #20]
 800c072:	6918      	ldr	r0, [r3, #16]
 800c074:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c078:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c07c:	6819      	ldr	r1, [r3, #0]
 800c07e:	f001 fc55 	bl	800d92c <uxr_buffer_delete_entity>
 800c082:	6a23      	ldr	r3, [r4, #32]
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c08c:	4604      	mov	r4, r0
 800c08e:	6809      	ldr	r1, [r1, #0]
 800c090:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c094:	f001 fc4a 	bl	800d92c <uxr_buffer_delete_entity>
 800c098:	6937      	ldr	r7, [r6, #16]
 800c09a:	4622      	mov	r2, r4
 800c09c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c0a0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	f000 fb04 	bl	800c6b4 <run_xrce_session>
 800c0ac:	6936      	ldr	r6, [r6, #16]
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c0b4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f000 fafa 	bl	800c6b4 <run_xrce_session>
 800c0c0:	b12c      	cbz	r4, 800c0ce <rmw_destroy_subscription+0xba>
 800c0c2:	b120      	cbz	r0, 800c0ce <rmw_destroy_subscription+0xba>
 800c0c4:	2400      	movs	r4, #0
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f000 f9b0 	bl	800c42c <rmw_uxrce_fini_subscription_memory>
 800c0cc:	e7ab      	b.n	800c026 <rmw_destroy_subscription+0x12>
 800c0ce:	2402      	movs	r4, #2
 800c0d0:	e7f9      	b.n	800c0c6 <rmw_destroy_subscription+0xb2>
 800c0d2:	bf00      	nop

0800c0d4 <rmw_uxrce_transport_init>:
 800c0d4:	b508      	push	{r3, lr}
 800c0d6:	b108      	cbz	r0, 800c0dc <rmw_uxrce_transport_init+0x8>
 800c0d8:	f100 0210 	add.w	r2, r0, #16
 800c0dc:	b139      	cbz	r1, 800c0ee <rmw_uxrce_transport_init+0x1a>
 800c0de:	6949      	ldr	r1, [r1, #20]
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	f001 feaf 	bl	800de44 <uxr_init_custom_transport>
 800c0e6:	f080 0001 	eor.w	r0, r0, #1
 800c0ea:	b2c0      	uxtb	r0, r0
 800c0ec:	bd08      	pop	{r3, pc}
 800c0ee:	4b04      	ldr	r3, [pc, #16]	@ (800c100 <rmw_uxrce_transport_init+0x2c>)
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	6859      	ldr	r1, [r3, #4]
 800c0f4:	f001 fea6 	bl	800de44 <uxr_init_custom_transport>
 800c0f8:	f080 0001 	eor.w	r0, r0, #1
 800c0fc:	b2c0      	uxtb	r0, r0
 800c0fe:	bd08      	pop	{r3, pc}
 800c100:	200062f4 	.word	0x200062f4

0800c104 <rmw_uxrce_init_service_memory>:
 800c104:	b1e2      	cbz	r2, 800c140 <rmw_uxrce_init_service_memory+0x3c>
 800c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	7b05      	ldrb	r5, [r0, #12]
 800c10c:	4606      	mov	r6, r0
 800c10e:	b9ad      	cbnz	r5, 800c13c <rmw_uxrce_init_service_memory+0x38>
 800c110:	23c8      	movs	r3, #200	@ 0xc8
 800c112:	e9c0 5500 	strd	r5, r5, [r0]
 800c116:	6083      	str	r3, [r0, #8]
 800c118:	f240 1301 	movw	r3, #257	@ 0x101
 800c11c:	4617      	mov	r7, r2
 800c11e:	8183      	strh	r3, [r0, #12]
 800c120:	460c      	mov	r4, r1
 800c122:	46a8      	mov	r8, r5
 800c124:	4621      	mov	r1, r4
 800c126:	4630      	mov	r0, r6
 800c128:	3501      	adds	r5, #1
 800c12a:	f008 fc59 	bl	80149e0 <put_memory>
 800c12e:	42af      	cmp	r7, r5
 800c130:	60a4      	str	r4, [r4, #8]
 800c132:	f884 800c 	strb.w	r8, [r4, #12]
 800c136:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c13a:	d1f3      	bne.n	800c124 <rmw_uxrce_init_service_memory+0x20>
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop

0800c144 <rmw_uxrce_init_client_memory>:
 800c144:	b1e2      	cbz	r2, 800c180 <rmw_uxrce_init_client_memory+0x3c>
 800c146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14a:	7b05      	ldrb	r5, [r0, #12]
 800c14c:	4606      	mov	r6, r0
 800c14e:	b9ad      	cbnz	r5, 800c17c <rmw_uxrce_init_client_memory+0x38>
 800c150:	23c8      	movs	r3, #200	@ 0xc8
 800c152:	e9c0 5500 	strd	r5, r5, [r0]
 800c156:	6083      	str	r3, [r0, #8]
 800c158:	f240 1301 	movw	r3, #257	@ 0x101
 800c15c:	4617      	mov	r7, r2
 800c15e:	8183      	strh	r3, [r0, #12]
 800c160:	460c      	mov	r4, r1
 800c162:	46a8      	mov	r8, r5
 800c164:	4621      	mov	r1, r4
 800c166:	4630      	mov	r0, r6
 800c168:	3501      	adds	r5, #1
 800c16a:	f008 fc39 	bl	80149e0 <put_memory>
 800c16e:	42af      	cmp	r7, r5
 800c170:	60a4      	str	r4, [r4, #8]
 800c172:	f884 800c 	strb.w	r8, [r4, #12]
 800c176:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c17a:	d1f3      	bne.n	800c164 <rmw_uxrce_init_client_memory+0x20>
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop

0800c184 <rmw_uxrce_init_publisher_memory>:
 800c184:	b1e2      	cbz	r2, 800c1c0 <rmw_uxrce_init_publisher_memory+0x3c>
 800c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	7b05      	ldrb	r5, [r0, #12]
 800c18c:	4606      	mov	r6, r0
 800c18e:	b9ad      	cbnz	r5, 800c1bc <rmw_uxrce_init_publisher_memory+0x38>
 800c190:	23d8      	movs	r3, #216	@ 0xd8
 800c192:	e9c0 5500 	strd	r5, r5, [r0]
 800c196:	6083      	str	r3, [r0, #8]
 800c198:	f240 1301 	movw	r3, #257	@ 0x101
 800c19c:	4617      	mov	r7, r2
 800c19e:	8183      	strh	r3, [r0, #12]
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	46a8      	mov	r8, r5
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	f008 fc19 	bl	80149e0 <put_memory>
 800c1ae:	42af      	cmp	r7, r5
 800c1b0:	60a4      	str	r4, [r4, #8]
 800c1b2:	f884 800c 	strb.w	r8, [r4, #12]
 800c1b6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c1ba:	d1f3      	bne.n	800c1a4 <rmw_uxrce_init_publisher_memory+0x20>
 800c1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop

0800c1c4 <rmw_uxrce_init_subscription_memory>:
 800c1c4:	b1e2      	cbz	r2, 800c200 <rmw_uxrce_init_subscription_memory+0x3c>
 800c1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ca:	7b05      	ldrb	r5, [r0, #12]
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	b9ad      	cbnz	r5, 800c1fc <rmw_uxrce_init_subscription_memory+0x38>
 800c1d0:	23d8      	movs	r3, #216	@ 0xd8
 800c1d2:	e9c0 5500 	strd	r5, r5, [r0]
 800c1d6:	6083      	str	r3, [r0, #8]
 800c1d8:	f240 1301 	movw	r3, #257	@ 0x101
 800c1dc:	4617      	mov	r7, r2
 800c1de:	8183      	strh	r3, [r0, #12]
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	46a8      	mov	r8, r5
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	3501      	adds	r5, #1
 800c1ea:	f008 fbf9 	bl	80149e0 <put_memory>
 800c1ee:	42af      	cmp	r7, r5
 800c1f0:	60a4      	str	r4, [r4, #8]
 800c1f2:	f884 800c 	strb.w	r8, [r4, #12]
 800c1f6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c1fa:	d1f3      	bne.n	800c1e4 <rmw_uxrce_init_subscription_memory+0x20>
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop

0800c204 <rmw_uxrce_init_node_memory>:
 800c204:	b1e2      	cbz	r2, 800c240 <rmw_uxrce_init_node_memory+0x3c>
 800c206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20a:	7b05      	ldrb	r5, [r0, #12]
 800c20c:	4606      	mov	r6, r0
 800c20e:	b9ad      	cbnz	r5, 800c23c <rmw_uxrce_init_node_memory+0x38>
 800c210:	23a4      	movs	r3, #164	@ 0xa4
 800c212:	e9c0 5500 	strd	r5, r5, [r0]
 800c216:	6083      	str	r3, [r0, #8]
 800c218:	f240 1301 	movw	r3, #257	@ 0x101
 800c21c:	4617      	mov	r7, r2
 800c21e:	8183      	strh	r3, [r0, #12]
 800c220:	460c      	mov	r4, r1
 800c222:	46a8      	mov	r8, r5
 800c224:	4621      	mov	r1, r4
 800c226:	4630      	mov	r0, r6
 800c228:	3501      	adds	r5, #1
 800c22a:	f008 fbd9 	bl	80149e0 <put_memory>
 800c22e:	42af      	cmp	r7, r5
 800c230:	60a4      	str	r4, [r4, #8]
 800c232:	f884 800c 	strb.w	r8, [r4, #12]
 800c236:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c23a:	d1f3      	bne.n	800c224 <rmw_uxrce_init_node_memory+0x20>
 800c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop

0800c244 <rmw_uxrce_init_session_memory>:
 800c244:	b1ea      	cbz	r2, 800c282 <rmw_uxrce_init_session_memory+0x3e>
 800c246:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24a:	7b05      	ldrb	r5, [r0, #12]
 800c24c:	4606      	mov	r6, r0
 800c24e:	b9b5      	cbnz	r5, 800c27e <rmw_uxrce_init_session_memory+0x3a>
 800c250:	e9c0 5500 	strd	r5, r5, [r0]
 800c254:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c258:	f240 1301 	movw	r3, #257	@ 0x101
 800c25c:	4617      	mov	r7, r2
 800c25e:	f8c0 8008 	str.w	r8, [r0, #8]
 800c262:	460c      	mov	r4, r1
 800c264:	8183      	strh	r3, [r0, #12]
 800c266:	46a9      	mov	r9, r5
 800c268:	4621      	mov	r1, r4
 800c26a:	4630      	mov	r0, r6
 800c26c:	3501      	adds	r5, #1
 800c26e:	f008 fbb7 	bl	80149e0 <put_memory>
 800c272:	42af      	cmp	r7, r5
 800c274:	60a4      	str	r4, [r4, #8]
 800c276:	f884 900c 	strb.w	r9, [r4, #12]
 800c27a:	4444      	add	r4, r8
 800c27c:	d1f4      	bne.n	800c268 <rmw_uxrce_init_session_memory+0x24>
 800c27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c282:	4770      	bx	lr

0800c284 <rmw_uxrce_init_topic_memory>:
 800c284:	b1e2      	cbz	r2, 800c2c0 <rmw_uxrce_init_topic_memory+0x3c>
 800c286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28a:	7b05      	ldrb	r5, [r0, #12]
 800c28c:	4606      	mov	r6, r0
 800c28e:	b9ad      	cbnz	r5, 800c2bc <rmw_uxrce_init_topic_memory+0x38>
 800c290:	231c      	movs	r3, #28
 800c292:	e9c0 5500 	strd	r5, r5, [r0]
 800c296:	6083      	str	r3, [r0, #8]
 800c298:	f240 1301 	movw	r3, #257	@ 0x101
 800c29c:	4617      	mov	r7, r2
 800c29e:	8183      	strh	r3, [r0, #12]
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	46a8      	mov	r8, r5
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	f008 fb99 	bl	80149e0 <put_memory>
 800c2ae:	42af      	cmp	r7, r5
 800c2b0:	60a4      	str	r4, [r4, #8]
 800c2b2:	f884 800c 	strb.w	r8, [r4, #12]
 800c2b6:	f104 041c 	add.w	r4, r4, #28
 800c2ba:	d1f3      	bne.n	800c2a4 <rmw_uxrce_init_topic_memory+0x20>
 800c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop

0800c2c4 <rmw_uxrce_init_static_input_buffer_memory>:
 800c2c4:	b1ea      	cbz	r2, 800c302 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ca:	7b05      	ldrb	r5, [r0, #12]
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	b9b5      	cbnz	r5, 800c2fe <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c2d0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c2d4:	e9c0 5500 	strd	r5, r5, [r0]
 800c2d8:	6083      	str	r3, [r0, #8]
 800c2da:	f240 1301 	movw	r3, #257	@ 0x101
 800c2de:	4617      	mov	r7, r2
 800c2e0:	8183      	strh	r3, [r0, #12]
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	46a8      	mov	r8, r5
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	3501      	adds	r5, #1
 800c2ec:	f008 fb78 	bl	80149e0 <put_memory>
 800c2f0:	42af      	cmp	r7, r5
 800c2f2:	60a4      	str	r4, [r4, #8]
 800c2f4:	f884 800c 	strb.w	r8, [r4, #12]
 800c2f8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c2fc:	d1f3      	bne.n	800c2e6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c302:	4770      	bx	lr

0800c304 <rmw_uxrce_init_init_options_impl_memory>:
 800c304:	b1e2      	cbz	r2, 800c340 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30a:	7b05      	ldrb	r5, [r0, #12]
 800c30c:	4606      	mov	r6, r0
 800c30e:	b9ad      	cbnz	r5, 800c33c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c310:	232c      	movs	r3, #44	@ 0x2c
 800c312:	e9c0 5500 	strd	r5, r5, [r0]
 800c316:	6083      	str	r3, [r0, #8]
 800c318:	f240 1301 	movw	r3, #257	@ 0x101
 800c31c:	4617      	mov	r7, r2
 800c31e:	8183      	strh	r3, [r0, #12]
 800c320:	460c      	mov	r4, r1
 800c322:	46a8      	mov	r8, r5
 800c324:	4621      	mov	r1, r4
 800c326:	4630      	mov	r0, r6
 800c328:	3501      	adds	r5, #1
 800c32a:	f008 fb59 	bl	80149e0 <put_memory>
 800c32e:	42af      	cmp	r7, r5
 800c330:	60a4      	str	r4, [r4, #8]
 800c332:	f884 800c 	strb.w	r8, [r4, #12]
 800c336:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c33a:	d1f3      	bne.n	800c324 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop

0800c344 <rmw_uxrce_init_wait_set_memory>:
 800c344:	b1e2      	cbz	r2, 800c380 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34a:	7b05      	ldrb	r5, [r0, #12]
 800c34c:	4606      	mov	r6, r0
 800c34e:	b9ad      	cbnz	r5, 800c37c <rmw_uxrce_init_wait_set_memory+0x38>
 800c350:	231c      	movs	r3, #28
 800c352:	e9c0 5500 	strd	r5, r5, [r0]
 800c356:	6083      	str	r3, [r0, #8]
 800c358:	f240 1301 	movw	r3, #257	@ 0x101
 800c35c:	4617      	mov	r7, r2
 800c35e:	8183      	strh	r3, [r0, #12]
 800c360:	460c      	mov	r4, r1
 800c362:	46a8      	mov	r8, r5
 800c364:	4621      	mov	r1, r4
 800c366:	4630      	mov	r0, r6
 800c368:	3501      	adds	r5, #1
 800c36a:	f008 fb39 	bl	80149e0 <put_memory>
 800c36e:	42af      	cmp	r7, r5
 800c370:	60a4      	str	r4, [r4, #8]
 800c372:	f884 800c 	strb.w	r8, [r4, #12]
 800c376:	f104 041c 	add.w	r4, r4, #28
 800c37a:	d1f3      	bne.n	800c364 <rmw_uxrce_init_wait_set_memory+0x20>
 800c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop

0800c384 <rmw_uxrce_init_guard_condition_memory>:
 800c384:	b1e2      	cbz	r2, 800c3c0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38a:	7b05      	ldrb	r5, [r0, #12]
 800c38c:	4606      	mov	r6, r0
 800c38e:	b9ad      	cbnz	r5, 800c3bc <rmw_uxrce_init_guard_condition_memory+0x38>
 800c390:	2320      	movs	r3, #32
 800c392:	e9c0 5500 	strd	r5, r5, [r0]
 800c396:	6083      	str	r3, [r0, #8]
 800c398:	f240 1301 	movw	r3, #257	@ 0x101
 800c39c:	4617      	mov	r7, r2
 800c39e:	8183      	strh	r3, [r0, #12]
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	46a8      	mov	r8, r5
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	f008 fb19 	bl	80149e0 <put_memory>
 800c3ae:	42af      	cmp	r7, r5
 800c3b0:	60a4      	str	r4, [r4, #8]
 800c3b2:	f884 800c 	strb.w	r8, [r4, #12]
 800c3b6:	f104 0420 	add.w	r4, r4, #32
 800c3ba:	d1f3      	bne.n	800c3a4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop

0800c3c4 <rmw_uxrce_fini_session_memory>:
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	4801      	ldr	r0, [pc, #4]	@ (800c3cc <rmw_uxrce_fini_session_memory+0x8>)
 800c3c8:	f008 bb0a 	b.w	80149e0 <put_memory>
 800c3cc:	2000ac4c 	.word	0x2000ac4c

0800c3d0 <rmw_uxrce_fini_node_memory>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	6800      	ldr	r0, [r0, #0]
 800c3d6:	b128      	cbz	r0, 800c3e4 <rmw_uxrce_fini_node_memory+0x14>
 800c3d8:	4b07      	ldr	r3, [pc, #28]	@ (800c3f8 <rmw_uxrce_fini_node_memory+0x28>)
 800c3da:	6819      	ldr	r1, [r3, #0]
 800c3dc:	f7f3 ff20 	bl	8000220 <strcmp>
 800c3e0:	b940      	cbnz	r0, 800c3f4 <rmw_uxrce_fini_node_memory+0x24>
 800c3e2:	6020      	str	r0, [r4, #0]
 800c3e4:	6861      	ldr	r1, [r4, #4]
 800c3e6:	b129      	cbz	r1, 800c3f4 <rmw_uxrce_fini_node_memory+0x24>
 800c3e8:	2500      	movs	r5, #0
 800c3ea:	4804      	ldr	r0, [pc, #16]	@ (800c3fc <rmw_uxrce_fini_node_memory+0x2c>)
 800c3ec:	610d      	str	r5, [r1, #16]
 800c3ee:	f008 faf7 	bl	80149e0 <put_memory>
 800c3f2:	6065      	str	r5, [r4, #4]
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
 800c3f6:	bf00      	nop
 800c3f8:	08018ac4 	.word	0x08018ac4
 800c3fc:	2000ac1c 	.word	0x2000ac1c

0800c400 <rmw_uxrce_fini_publisher_memory>:
 800c400:	b510      	push	{r4, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	6800      	ldr	r0, [r0, #0]
 800c406:	b128      	cbz	r0, 800c414 <rmw_uxrce_fini_publisher_memory+0x14>
 800c408:	4b06      	ldr	r3, [pc, #24]	@ (800c424 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c40a:	6819      	ldr	r1, [r3, #0]
 800c40c:	f7f3 ff08 	bl	8000220 <strcmp>
 800c410:	b938      	cbnz	r0, 800c422 <rmw_uxrce_fini_publisher_memory+0x22>
 800c412:	6020      	str	r0, [r4, #0]
 800c414:	6861      	ldr	r1, [r4, #4]
 800c416:	b121      	cbz	r1, 800c422 <rmw_uxrce_fini_publisher_memory+0x22>
 800c418:	4803      	ldr	r0, [pc, #12]	@ (800c428 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c41a:	f008 fae1 	bl	80149e0 <put_memory>
 800c41e:	2300      	movs	r3, #0
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	bd10      	pop	{r4, pc}
 800c424:	08018ac4 	.word	0x08018ac4
 800c428:	2000ac2c 	.word	0x2000ac2c

0800c42c <rmw_uxrce_fini_subscription_memory>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	4604      	mov	r4, r0
 800c430:	6800      	ldr	r0, [r0, #0]
 800c432:	b128      	cbz	r0, 800c440 <rmw_uxrce_fini_subscription_memory+0x14>
 800c434:	4b06      	ldr	r3, [pc, #24]	@ (800c450 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c436:	6819      	ldr	r1, [r3, #0]
 800c438:	f7f3 fef2 	bl	8000220 <strcmp>
 800c43c:	b938      	cbnz	r0, 800c44e <rmw_uxrce_fini_subscription_memory+0x22>
 800c43e:	6020      	str	r0, [r4, #0]
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	b121      	cbz	r1, 800c44e <rmw_uxrce_fini_subscription_memory+0x22>
 800c444:	4803      	ldr	r0, [pc, #12]	@ (800c454 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c446:	f008 facb 	bl	80149e0 <put_memory>
 800c44a:	2300      	movs	r3, #0
 800c44c:	6063      	str	r3, [r4, #4]
 800c44e:	bd10      	pop	{r4, pc}
 800c450:	08018ac4 	.word	0x08018ac4
 800c454:	2000ac6c 	.word	0x2000ac6c

0800c458 <rmw_uxrce_fini_service_memory>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	4604      	mov	r4, r0
 800c45c:	6800      	ldr	r0, [r0, #0]
 800c45e:	b128      	cbz	r0, 800c46c <rmw_uxrce_fini_service_memory+0x14>
 800c460:	4b06      	ldr	r3, [pc, #24]	@ (800c47c <rmw_uxrce_fini_service_memory+0x24>)
 800c462:	6819      	ldr	r1, [r3, #0]
 800c464:	f7f3 fedc 	bl	8000220 <strcmp>
 800c468:	b938      	cbnz	r0, 800c47a <rmw_uxrce_fini_service_memory+0x22>
 800c46a:	6020      	str	r0, [r4, #0]
 800c46c:	6861      	ldr	r1, [r4, #4]
 800c46e:	b121      	cbz	r1, 800c47a <rmw_uxrce_fini_service_memory+0x22>
 800c470:	4803      	ldr	r0, [pc, #12]	@ (800c480 <rmw_uxrce_fini_service_memory+0x28>)
 800c472:	f008 fab5 	bl	80149e0 <put_memory>
 800c476:	2300      	movs	r3, #0
 800c478:	6063      	str	r3, [r4, #4]
 800c47a:	bd10      	pop	{r4, pc}
 800c47c:	08018ac4 	.word	0x08018ac4
 800c480:	2000ac3c 	.word	0x2000ac3c

0800c484 <rmw_uxrce_fini_client_memory>:
 800c484:	b510      	push	{r4, lr}
 800c486:	4604      	mov	r4, r0
 800c488:	6800      	ldr	r0, [r0, #0]
 800c48a:	b128      	cbz	r0, 800c498 <rmw_uxrce_fini_client_memory+0x14>
 800c48c:	4b06      	ldr	r3, [pc, #24]	@ (800c4a8 <rmw_uxrce_fini_client_memory+0x24>)
 800c48e:	6819      	ldr	r1, [r3, #0]
 800c490:	f7f3 fec6 	bl	8000220 <strcmp>
 800c494:	b938      	cbnz	r0, 800c4a6 <rmw_uxrce_fini_client_memory+0x22>
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	6861      	ldr	r1, [r4, #4]
 800c49a:	b121      	cbz	r1, 800c4a6 <rmw_uxrce_fini_client_memory+0x22>
 800c49c:	4803      	ldr	r0, [pc, #12]	@ (800c4ac <rmw_uxrce_fini_client_memory+0x28>)
 800c49e:	f008 fa9f 	bl	80149e0 <put_memory>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	bd10      	pop	{r4, pc}
 800c4a8:	08018ac4 	.word	0x08018ac4
 800c4ac:	2000634c 	.word	0x2000634c

0800c4b0 <rmw_uxrce_fini_topic_memory>:
 800c4b0:	b510      	push	{r4, lr}
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4803      	ldr	r0, [pc, #12]	@ (800c4c4 <rmw_uxrce_fini_topic_memory+0x14>)
 800c4b8:	f008 fa92 	bl	80149e0 <put_memory>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	61a3      	str	r3, [r4, #24]
 800c4c0:	bd10      	pop	{r4, pc}
 800c4c2:	bf00      	nop
 800c4c4:	2000ac7c 	.word	0x2000ac7c

0800c4c8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	b530      	push	{r4, r5, lr}
 800c4cc:	4925      	ldr	r1, [pc, #148]	@ (800c564 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c4ce:	680d      	ldr	r5, [r1, #0]
 800c4d0:	ac03      	add	r4, sp, #12
 800c4d2:	e884 000c 	stmia.w	r4, {r2, r3}
 800c4d6:	461c      	mov	r4, r3
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	d041      	beq.n	800c560 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c4dc:	462b      	mov	r3, r5
 800c4de:	2100      	movs	r1, #0
 800c4e0:	689a      	ldr	r2, [r3, #8]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c4e8:	4290      	cmp	r0, r2
 800c4ea:	bf08      	it	eq
 800c4ec:	3101      	addeq	r1, #1
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1f6      	bne.n	800c4e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c4f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d029      	beq.n	800c54e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c4fa:	d907      	bls.n	800c50c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	d005      	beq.n	800c50c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c500:	2100      	movs	r1, #0
 800c502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c506:	4608      	mov	r0, r1
 800c508:	b002      	add	sp, #8
 800c50a:	4770      	bx	lr
 800c50c:	b314      	cbz	r4, 800c554 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c50e:	428c      	cmp	r4, r1
 800c510:	d820      	bhi.n	800c554 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c512:	2d00      	cmp	r5, #0
 800c514:	d0f4      	beq.n	800c500 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c516:	2100      	movs	r1, #0
 800c518:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c51c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c520:	e002      	b.n	800c528 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c522:	686d      	ldr	r5, [r5, #4]
 800c524:	2d00      	cmp	r5, #0
 800c526:	d0ec      	beq.n	800c502 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c528:	68ab      	ldr	r3, [r5, #8]
 800c52a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c52e:	4290      	cmp	r0, r2
 800c530:	d1f7      	bne.n	800c522 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c532:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c536:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c53a:	4562      	cmp	r2, ip
 800c53c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c540:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c544:	daed      	bge.n	800c522 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c546:	4694      	mov	ip, r2
 800c548:	461c      	mov	r4, r3
 800c54a:	4629      	mov	r1, r5
 800c54c:	e7e9      	b.n	800c522 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c54e:	b10c      	cbz	r4, 800c554 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c550:	428c      	cmp	r4, r1
 800c552:	d9d5      	bls.n	800c500 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c558:	4802      	ldr	r0, [pc, #8]	@ (800c564 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c55a:	b002      	add	sp, #8
 800c55c:	f008 ba30 	b.w	80149c0 <get_memory>
 800c560:	4629      	mov	r1, r5
 800c562:	e7c6      	b.n	800c4f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c564:	2000ac5c 	.word	0x2000ac5c

0800c568 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c568:	4b11      	ldr	r3, [pc, #68]	@ (800c5b0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	b530      	push	{r4, r5, lr}
 800c56e:	b1e3      	cbz	r3, 800c5aa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c570:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c574:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c578:	2400      	movs	r4, #0
 800c57a:	e001      	b.n	800c580 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	b193      	cbz	r3, 800c5a6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c580:	689a      	ldr	r2, [r3, #8]
 800c582:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c586:	4288      	cmp	r0, r1
 800c588:	d1f8      	bne.n	800c57c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c58a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c58e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c592:	4571      	cmp	r1, lr
 800c594:	eb72 050c 	sbcs.w	r5, r2, ip
 800c598:	daf0      	bge.n	800c57c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c59a:	461c      	mov	r4, r3
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	468e      	mov	lr, r1
 800c5a0:	4694      	mov	ip, r2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1ec      	bne.n	800c580 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	bd30      	pop	{r4, r5, pc}
 800c5aa:	461c      	mov	r4, r3
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	bd30      	pop	{r4, r5, pc}
 800c5b0:	2000ac5c 	.word	0x2000ac5c
 800c5b4:	00000000 	.word	0x00000000

0800c5b8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4b3c      	ldr	r3, [pc, #240]	@ (800c6b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c5be:	ed2d 8b06 	vpush	{d8-d10}
 800c5c2:	681f      	ldr	r7, [r3, #0]
 800c5c4:	b08d      	sub	sp, #52	@ 0x34
 800c5c6:	f008 fe17 	bl	80151f8 <rmw_uros_epoch_nanos>
 800c5ca:	2f00      	cmp	r7, #0
 800c5cc:	d05d      	beq.n	800c68a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c5ce:	46b8      	mov	r8, r7
 800c5d0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c698 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c5d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c5d8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c6a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c5e2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c6a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c5e6:	4681      	mov	r9, r0
 800c5e8:	468a      	mov	sl, r1
 800c5ea:	ac04      	add	r4, sp, #16
 800c5ec:	d03f      	beq.n	800c66e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c5ee:	2b05      	cmp	r3, #5
 800c5f0:	d044      	beq.n	800c67c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d03b      	beq.n	800c66e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c5f6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c5fa:	ed8d ab06 	vstr	d10, [sp, #24]
 800c5fe:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c602:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c606:	ab08      	add	r3, sp, #32
 800c608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c60a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c60e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c612:	f007 ff21 	bl	8014458 <rmw_time_equal>
 800c616:	b118      	cbz	r0, 800c620 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c618:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c61c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c620:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c624:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c628:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c62c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c630:	f007 ff66 	bl	8014500 <rmw_time_total_nsec>
 800c634:	1830      	adds	r0, r6, r0
 800c636:	eb47 0101 	adc.w	r1, r7, r1
 800c63a:	4548      	cmp	r0, r9
 800c63c:	eb71 030a 	sbcs.w	r3, r1, sl
 800c640:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c644:	db05      	blt.n	800c652 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c646:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c64a:	4591      	cmp	r9, r2
 800c64c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c650:	da03      	bge.n	800c65a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c652:	4817      	ldr	r0, [pc, #92]	@ (800c6b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c654:	4641      	mov	r1, r8
 800c656:	f008 f9c3 	bl	80149e0 <put_memory>
 800c65a:	f1bb 0f00 	cmp.w	fp, #0
 800c65e:	d014      	beq.n	800c68a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c660:	46d8      	mov	r8, fp
 800c662:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c666:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d1bf      	bne.n	800c5ee <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c66e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c672:	3340      	adds	r3, #64	@ 0x40
 800c674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c67a:	e7c0      	b.n	800c5fe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c67c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c680:	3348      	adds	r3, #72	@ 0x48
 800c682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c688:	e7b9      	b.n	800c5fe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c68a:	b00d      	add	sp, #52	@ 0x34
 800c68c:	ecbd 8b06 	vpop	{d8-d10}
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c694:	f3af 8000 	nop.w
	...
 800c6a0:	00000001 	.word	0x00000001
 800c6a4:	00000000 	.word	0x00000000
 800c6a8:	0000001e 	.word	0x0000001e
 800c6ac:	00000000 	.word	0x00000000
 800c6b0:	2000ac5c 	.word	0x2000ac5c

0800c6b4 <run_xrce_session>:
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	788c      	ldrb	r4, [r1, #2]
 800c6b8:	b086      	sub	sp, #24
 800c6ba:	2c01      	cmp	r4, #1
 800c6bc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c6c0:	d00c      	beq.n	800c6dc <run_xrce_session+0x28>
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	f10d 020e 	add.w	r2, sp, #14
 800c6cc:	f10d 0317 	add.w	r3, sp, #23
 800c6d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6d4:	f002 fa52 	bl	800eb7c <uxr_run_session_until_all_status>
 800c6d8:	b006      	add	sp, #24
 800c6da:	bd10      	pop	{r4, pc}
 800c6dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6e0:	f001 fe66 	bl	800e3b0 <uxr_flash_output_streams>
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	b006      	add	sp, #24
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	bf00      	nop

0800c6ec <convert_qos_profile>:
 800c6ec:	7a4a      	ldrb	r2, [r1, #9]
 800c6ee:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c6f2:	2a02      	cmp	r2, #2
 800c6f4:	bf18      	it	ne
 800c6f6:	2200      	movne	r2, #0
 800c6f8:	7002      	strb	r2, [r0, #0]
 800c6fa:	780a      	ldrb	r2, [r1, #0]
 800c6fc:	8889      	ldrh	r1, [r1, #4]
 800c6fe:	8081      	strh	r1, [r0, #4]
 800c700:	f1ac 0c02 	sub.w	ip, ip, #2
 800c704:	f1a2 0202 	sub.w	r2, r2, #2
 800c708:	fabc fc8c 	clz	ip, ip
 800c70c:	fab2 f282 	clz	r2, r2
 800c710:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c714:	0952      	lsrs	r2, r2, #5
 800c716:	f880 c001 	strb.w	ip, [r0, #1]
 800c71a:	7082      	strb	r2, [r0, #2]
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop

0800c720 <generate_type_name>:
 800c720:	b530      	push	{r4, r5, lr}
 800c722:	2300      	movs	r3, #0
 800c724:	700b      	strb	r3, [r1, #0]
 800c726:	6803      	ldr	r3, [r0, #0]
 800c728:	b087      	sub	sp, #28
 800c72a:	4614      	mov	r4, r2
 800c72c:	b1d3      	cbz	r3, 800c764 <generate_type_name+0x44>
 800c72e:	4a0f      	ldr	r2, [pc, #60]	@ (800c76c <generate_type_name+0x4c>)
 800c730:	4615      	mov	r5, r2
 800c732:	9203      	str	r2, [sp, #12]
 800c734:	9500      	str	r5, [sp, #0]
 800c736:	6842      	ldr	r2, [r0, #4]
 800c738:	480d      	ldr	r0, [pc, #52]	@ (800c770 <generate_type_name+0x50>)
 800c73a:	9001      	str	r0, [sp, #4]
 800c73c:	4608      	mov	r0, r1
 800c73e:	490d      	ldr	r1, [pc, #52]	@ (800c774 <generate_type_name+0x54>)
 800c740:	9204      	str	r2, [sp, #16]
 800c742:	9105      	str	r1, [sp, #20]
 800c744:	9102      	str	r1, [sp, #8]
 800c746:	4a0c      	ldr	r2, [pc, #48]	@ (800c778 <generate_type_name+0x58>)
 800c748:	4621      	mov	r1, r4
 800c74a:	f00a fb83 	bl	8016e54 <sniprintf>
 800c74e:	2800      	cmp	r0, #0
 800c750:	db05      	blt.n	800c75e <generate_type_name+0x3e>
 800c752:	4284      	cmp	r4, r0
 800c754:	bfd4      	ite	le
 800c756:	2000      	movle	r0, #0
 800c758:	2001      	movgt	r0, #1
 800c75a:	b007      	add	sp, #28
 800c75c:	bd30      	pop	{r4, r5, pc}
 800c75e:	2000      	movs	r0, #0
 800c760:	b007      	add	sp, #28
 800c762:	bd30      	pop	{r4, r5, pc}
 800c764:	4b05      	ldr	r3, [pc, #20]	@ (800c77c <generate_type_name+0x5c>)
 800c766:	4a01      	ldr	r2, [pc, #4]	@ (800c76c <generate_type_name+0x4c>)
 800c768:	461d      	mov	r5, r3
 800c76a:	e7e2      	b.n	800c732 <generate_type_name+0x12>
 800c76c:	0801822c 	.word	0x0801822c
 800c770:	08018244 	.word	0x08018244
 800c774:	08018240 	.word	0x08018240
 800c778:	08018230 	.word	0x08018230
 800c77c:	080184c0 	.word	0x080184c0

0800c780 <generate_topic_name>:
 800c780:	b510      	push	{r4, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	4614      	mov	r4, r2
 800c786:	9000      	str	r0, [sp, #0]
 800c788:	4b08      	ldr	r3, [pc, #32]	@ (800c7ac <generate_topic_name+0x2c>)
 800c78a:	4a09      	ldr	r2, [pc, #36]	@ (800c7b0 <generate_topic_name+0x30>)
 800c78c:	4608      	mov	r0, r1
 800c78e:	4621      	mov	r1, r4
 800c790:	f00a fb60 	bl	8016e54 <sniprintf>
 800c794:	2800      	cmp	r0, #0
 800c796:	db05      	blt.n	800c7a4 <generate_topic_name+0x24>
 800c798:	4284      	cmp	r4, r0
 800c79a:	bfd4      	ite	le
 800c79c:	2000      	movle	r0, #0
 800c79e:	2001      	movgt	r0, #1
 800c7a0:	b002      	add	sp, #8
 800c7a2:	bd10      	pop	{r4, pc}
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	b002      	add	sp, #8
 800c7a8:	bd10      	pop	{r4, pc}
 800c7aa:	bf00      	nop
 800c7ac:	08018700 	.word	0x08018700
 800c7b0:	08018248 	.word	0x08018248

0800c7b4 <is_uxrce_rmw_identifier_valid>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	b140      	cbz	r0, 800c7cc <is_uxrce_rmw_identifier_valid+0x18>
 800c7ba:	f008 f969 	bl	8014a90 <rmw_get_implementation_identifier>
 800c7be:	4601      	mov	r1, r0
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7f3 fd2d 	bl	8000220 <strcmp>
 800c7c6:	fab0 f080 	clz	r0, r0
 800c7ca:	0940      	lsrs	r0, r0, #5
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	bf00      	nop

0800c7d0 <get_message_typesupport_handle>:
 800c7d0:	6883      	ldr	r3, [r0, #8]
 800c7d2:	4718      	bx	r3

0800c7d4 <get_message_typesupport_handle_function>:
 800c7d4:	b510      	push	{r4, lr}
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	6800      	ldr	r0, [r0, #0]
 800c7da:	f7f3 fd21 	bl	8000220 <strcmp>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	bf0c      	ite	eq
 800c7e2:	4620      	moveq	r0, r4
 800c7e4:	2000      	movne	r0, #0
 800c7e6:	bd10      	pop	{r4, pc}

0800c7e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c7e8:	4b04      	ldr	r3, [pc, #16]	@ (800c7fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	b10a      	cbz	r2, 800c7f2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800c7ee:	4803      	ldr	r0, [pc, #12]	@ (800c7fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c7f0:	4770      	bx	lr
 800c7f2:	4a03      	ldr	r2, [pc, #12]	@ (800c800 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800c7f4:	4801      	ldr	r0, [pc, #4]	@ (800c7fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c7f6:	6812      	ldr	r2, [r2, #0]
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	4770      	bx	lr
 800c7fc:	20000034 	.word	0x20000034
 800c800:	200000b0 	.word	0x200000b0

0800c804 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c804:	4a02      	ldr	r2, [pc, #8]	@ (800c810 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800c806:	4b03      	ldr	r3, [pc, #12]	@ (800c814 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800c808:	6812      	ldr	r2, [r2, #0]
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	200000b0 	.word	0x200000b0
 800c814:	20000034 	.word	0x20000034

0800c818 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800c818:	f008 bd2a 	b.w	8015270 <std_msgs__msg__Int32__init>

0800c81c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800c81c:	f008 bd2c 	b.w	8015278 <std_msgs__msg__Int32__fini>

0800c820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c820:	4b04      	ldr	r3, [pc, #16]	@ (800c834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	b10a      	cbz	r2, 800c82a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800c826:	4803      	ldr	r0, [pc, #12]	@ (800c834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c828:	4770      	bx	lr
 800c82a:	4a03      	ldr	r2, [pc, #12]	@ (800c838 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800c82c:	4801      	ldr	r0, [pc, #4]	@ (800c834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	601a      	str	r2, [r3, #0]
 800c832:	4770      	bx	lr
 800c834:	2000007c 	.word	0x2000007c
 800c838:	200000b4 	.word	0x200000b4

0800c83c <_Int32__max_serialized_size>:
 800c83c:	b508      	push	{r3, lr}
 800c83e:	2104      	movs	r1, #4
 800c840:	2000      	movs	r0, #0
 800c842:	f001 f807 	bl	800d854 <ucdr_alignment>
 800c846:	3004      	adds	r0, #4
 800c848:	bd08      	pop	{r3, pc}
 800c84a:	bf00      	nop

0800c84c <_Int32__cdr_deserialize>:
 800c84c:	b109      	cbz	r1, 800c852 <_Int32__cdr_deserialize+0x6>
 800c84e:	f000 bf19 	b.w	800d684 <ucdr_deserialize_int32_t>
 800c852:	4608      	mov	r0, r1
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop

0800c858 <get_serialized_size_std_msgs__msg__Int32>:
 800c858:	b138      	cbz	r0, 800c86a <get_serialized_size_std_msgs__msg__Int32+0x12>
 800c85a:	b508      	push	{r3, lr}
 800c85c:	460b      	mov	r3, r1
 800c85e:	4618      	mov	r0, r3
 800c860:	2104      	movs	r1, #4
 800c862:	f000 fff7 	bl	800d854 <ucdr_alignment>
 800c866:	3004      	adds	r0, #4
 800c868:	bd08      	pop	{r3, pc}
 800c86a:	4770      	bx	lr

0800c86c <_Int32__cdr_serialize>:
 800c86c:	460a      	mov	r2, r1
 800c86e:	b118      	cbz	r0, 800c878 <_Int32__cdr_serialize+0xc>
 800c870:	6801      	ldr	r1, [r0, #0]
 800c872:	4610      	mov	r0, r2
 800c874:	f000 be6e 	b.w	800d554 <ucdr_serialize_int32_t>
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop

0800c87c <_Int32__get_serialized_size>:
 800c87c:	b130      	cbz	r0, 800c88c <_Int32__get_serialized_size+0x10>
 800c87e:	b508      	push	{r3, lr}
 800c880:	2104      	movs	r1, #4
 800c882:	2000      	movs	r0, #0
 800c884:	f000 ffe6 	bl	800d854 <ucdr_alignment>
 800c888:	3004      	adds	r0, #4
 800c88a:	bd08      	pop	{r3, pc}
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop

0800c890 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c890:	4800      	ldr	r0, [pc, #0]	@ (800c894 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800c892:	4770      	bx	lr
 800c894:	20000088 	.word	0x20000088

0800c898 <ucdr_serialize_bool>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	460d      	mov	r5, r1
 800c89c:	2101      	movs	r1, #1
 800c89e:	4604      	mov	r4, r0
 800c8a0:	f000 ff8c 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800c8a4:	b148      	cbz	r0, 800c8ba <ucdr_serialize_bool+0x22>
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	701d      	strb	r5, [r3, #0]
 800c8aa:	68a2      	ldr	r2, [r4, #8]
 800c8ac:	6923      	ldr	r3, [r4, #16]
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	440a      	add	r2, r1
 800c8b2:	440b      	add	r3, r1
 800c8b4:	60a2      	str	r2, [r4, #8]
 800c8b6:	6123      	str	r3, [r4, #16]
 800c8b8:	7561      	strb	r1, [r4, #21]
 800c8ba:	7da0      	ldrb	r0, [r4, #22]
 800c8bc:	f080 0001 	eor.w	r0, r0, #1
 800c8c0:	bd38      	pop	{r3, r4, r5, pc}
 800c8c2:	bf00      	nop

0800c8c4 <ucdr_deserialize_bool>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	f000 ff76 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800c8d0:	b160      	cbz	r0, 800c8ec <ucdr_deserialize_bool+0x28>
 800c8d2:	68a2      	ldr	r2, [r4, #8]
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c8da:	3900      	subs	r1, #0
 800c8dc:	bf18      	it	ne
 800c8de:	2101      	movne	r1, #1
 800c8e0:	7029      	strb	r1, [r5, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	60a2      	str	r2, [r4, #8]
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	7561      	strb	r1, [r4, #21]
 800c8ec:	7da0      	ldrb	r0, [r4, #22]
 800c8ee:	f080 0001 	eor.w	r0, r0, #1
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}

0800c8f4 <ucdr_serialize_uint8_t>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	460d      	mov	r5, r1
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	f000 ff5e 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800c900:	b148      	cbz	r0, 800c916 <ucdr_serialize_uint8_t+0x22>
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	701d      	strb	r5, [r3, #0]
 800c906:	68a2      	ldr	r2, [r4, #8]
 800c908:	6923      	ldr	r3, [r4, #16]
 800c90a:	2101      	movs	r1, #1
 800c90c:	440a      	add	r2, r1
 800c90e:	440b      	add	r3, r1
 800c910:	60a2      	str	r2, [r4, #8]
 800c912:	6123      	str	r3, [r4, #16]
 800c914:	7561      	strb	r1, [r4, #21]
 800c916:	7da0      	ldrb	r0, [r4, #22]
 800c918:	f080 0001 	eor.w	r0, r0, #1
 800c91c:	bd38      	pop	{r3, r4, r5, pc}
 800c91e:	bf00      	nop

0800c920 <ucdr_deserialize_uint8_t>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	460d      	mov	r5, r1
 800c924:	2101      	movs	r1, #1
 800c926:	4604      	mov	r4, r0
 800c928:	f000 ff48 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800c92c:	b150      	cbz	r0, 800c944 <ucdr_deserialize_uint8_t+0x24>
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	702b      	strb	r3, [r5, #0]
 800c934:	68a2      	ldr	r2, [r4, #8]
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	2101      	movs	r1, #1
 800c93a:	440a      	add	r2, r1
 800c93c:	440b      	add	r3, r1
 800c93e:	60a2      	str	r2, [r4, #8]
 800c940:	6123      	str	r3, [r4, #16]
 800c942:	7561      	strb	r1, [r4, #21]
 800c944:	7da0      	ldrb	r0, [r4, #22]
 800c946:	f080 0001 	eor.w	r0, r0, #1
 800c94a:	bd38      	pop	{r3, r4, r5, pc}

0800c94c <ucdr_serialize_uint16_t>:
 800c94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	460b      	mov	r3, r1
 800c954:	2102      	movs	r1, #2
 800c956:	4604      	mov	r4, r0
 800c958:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c95c:	f000 ff82 	bl	800d864 <ucdr_buffer_alignment>
 800c960:	4601      	mov	r1, r0
 800c962:	4620      	mov	r0, r4
 800c964:	7d67      	ldrb	r7, [r4, #21]
 800c966:	f000 ffc1 	bl	800d8ec <ucdr_advance_buffer>
 800c96a:	2102      	movs	r1, #2
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 ff19 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800c972:	bb78      	cbnz	r0, 800c9d4 <ucdr_serialize_uint16_t+0x88>
 800c974:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c978:	42ab      	cmp	r3, r5
 800c97a:	d926      	bls.n	800c9ca <ucdr_serialize_uint16_t+0x7e>
 800c97c:	1b5e      	subs	r6, r3, r5
 800c97e:	60a3      	str	r3, [r4, #8]
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	f1c6 0802 	rsb	r8, r6, #2
 800c986:	4433      	add	r3, r6
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	4641      	mov	r1, r8
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 ff15 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800c992:	2800      	cmp	r0, #0
 800c994:	d03b      	beq.n	800ca0e <ucdr_serialize_uint16_t+0xc2>
 800c996:	7d23      	ldrb	r3, [r4, #20]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d04a      	beq.n	800ca32 <ucdr_serialize_uint16_t+0xe6>
 800c99c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c9a0:	702b      	strb	r3, [r5, #0]
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	d040      	beq.n	800ca28 <ucdr_serialize_uint16_t+0xdc>
 800c9a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9aa:	706b      	strb	r3, [r5, #1]
 800c9ac:	6923      	ldr	r3, [r4, #16]
 800c9ae:	68a2      	ldr	r2, [r4, #8]
 800c9b0:	7da0      	ldrb	r0, [r4, #22]
 800c9b2:	3302      	adds	r3, #2
 800c9b4:	1b9e      	subs	r6, r3, r6
 800c9b6:	4442      	add	r2, r8
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	f080 0001 	eor.w	r0, r0, #1
 800c9be:	60a2      	str	r2, [r4, #8]
 800c9c0:	6126      	str	r6, [r4, #16]
 800c9c2:	7563      	strb	r3, [r4, #21]
 800c9c4:	b002      	add	sp, #8
 800c9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ca:	2102      	movs	r1, #2
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 fef5 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800c9d2:	b190      	cbz	r0, 800c9fa <ucdr_serialize_uint16_t+0xae>
 800c9d4:	7d23      	ldrb	r3, [r4, #20]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	68a3      	ldr	r3, [r4, #8]
 800c9da:	d014      	beq.n	800ca06 <ucdr_serialize_uint16_t+0xba>
 800c9dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9e8:	705a      	strb	r2, [r3, #1]
 800c9ea:	68a2      	ldr	r2, [r4, #8]
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	3202      	adds	r2, #2
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	2102      	movs	r1, #2
 800c9f4:	60a2      	str	r2, [r4, #8]
 800c9f6:	6123      	str	r3, [r4, #16]
 800c9f8:	7561      	strb	r1, [r4, #21]
 800c9fa:	7da0      	ldrb	r0, [r4, #22]
 800c9fc:	f080 0001 	eor.w	r0, r0, #1
 800ca00:	b002      	add	sp, #8
 800ca02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca0a:	801a      	strh	r2, [r3, #0]
 800ca0c:	e7ed      	b.n	800c9ea <ucdr_serialize_uint16_t+0x9e>
 800ca0e:	68a2      	ldr	r2, [r4, #8]
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	7da0      	ldrb	r0, [r4, #22]
 800ca14:	7567      	strb	r7, [r4, #21]
 800ca16:	1b92      	subs	r2, r2, r6
 800ca18:	1b9b      	subs	r3, r3, r6
 800ca1a:	f080 0001 	eor.w	r0, r0, #1
 800ca1e:	60a2      	str	r2, [r4, #8]
 800ca20:	6123      	str	r3, [r4, #16]
 800ca22:	b002      	add	sp, #8
 800ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca28:	68a3      	ldr	r3, [r4, #8]
 800ca2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	e7bc      	b.n	800c9ac <ucdr_serialize_uint16_t+0x60>
 800ca32:	4628      	mov	r0, r5
 800ca34:	f10d 0506 	add.w	r5, sp, #6
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	f00a fbb3 	bl	80171a6 <memcpy>
 800ca40:	68a0      	ldr	r0, [r4, #8]
 800ca42:	4642      	mov	r2, r8
 800ca44:	19a9      	adds	r1, r5, r6
 800ca46:	f00a fbae 	bl	80171a6 <memcpy>
 800ca4a:	e7af      	b.n	800c9ac <ucdr_serialize_uint16_t+0x60>

0800ca4c <ucdr_serialize_endian_uint16_t>:
 800ca4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca50:	b083      	sub	sp, #12
 800ca52:	460d      	mov	r5, r1
 800ca54:	2102      	movs	r1, #2
 800ca56:	4604      	mov	r4, r0
 800ca58:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ca5c:	f000 ff02 	bl	800d864 <ucdr_buffer_alignment>
 800ca60:	4601      	mov	r1, r0
 800ca62:	4620      	mov	r0, r4
 800ca64:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ca68:	f000 ff40 	bl	800d8ec <ucdr_advance_buffer>
 800ca6c:	2102      	movs	r1, #2
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f000 fe98 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800ca74:	bb70      	cbnz	r0, 800cad4 <ucdr_serialize_endian_uint16_t+0x88>
 800ca76:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ca7a:	42be      	cmp	r6, r7
 800ca7c:	d925      	bls.n	800caca <ucdr_serialize_endian_uint16_t+0x7e>
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	60a6      	str	r6, [r4, #8]
 800ca82:	1bf6      	subs	r6, r6, r7
 800ca84:	4433      	add	r3, r6
 800ca86:	f1c6 0902 	rsb	r9, r6, #2
 800ca8a:	6123      	str	r3, [r4, #16]
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fe94 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d039      	beq.n	800cb0c <ucdr_serialize_endian_uint16_t+0xc0>
 800ca98:	2d01      	cmp	r5, #1
 800ca9a:	d04a      	beq.n	800cb32 <ucdr_serialize_endian_uint16_t+0xe6>
 800ca9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800caa0:	703b      	strb	r3, [r7, #0]
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	d040      	beq.n	800cb28 <ucdr_serialize_endian_uint16_t+0xdc>
 800caa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800caaa:	707b      	strb	r3, [r7, #1]
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	68a2      	ldr	r2, [r4, #8]
 800cab0:	7da0      	ldrb	r0, [r4, #22]
 800cab2:	3302      	adds	r3, #2
 800cab4:	444a      	add	r2, r9
 800cab6:	1b9b      	subs	r3, r3, r6
 800cab8:	2102      	movs	r1, #2
 800caba:	f080 0001 	eor.w	r0, r0, #1
 800cabe:	60a2      	str	r2, [r4, #8]
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	7561      	strb	r1, [r4, #21]
 800cac4:	b003      	add	sp, #12
 800cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caca:	2102      	movs	r1, #2
 800cacc:	4620      	mov	r0, r4
 800cace:	f000 fe75 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cad2:	b188      	cbz	r0, 800caf8 <ucdr_serialize_endian_uint16_t+0xac>
 800cad4:	2d01      	cmp	r5, #1
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	d014      	beq.n	800cb04 <ucdr_serialize_endian_uint16_t+0xb8>
 800cada:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cae6:	705a      	strb	r2, [r3, #1]
 800cae8:	68a2      	ldr	r2, [r4, #8]
 800caea:	6923      	ldr	r3, [r4, #16]
 800caec:	3202      	adds	r2, #2
 800caee:	3302      	adds	r3, #2
 800caf0:	2102      	movs	r1, #2
 800caf2:	60a2      	str	r2, [r4, #8]
 800caf4:	6123      	str	r3, [r4, #16]
 800caf6:	7561      	strb	r1, [r4, #21]
 800caf8:	7da0      	ldrb	r0, [r4, #22]
 800cafa:	f080 0001 	eor.w	r0, r0, #1
 800cafe:	b003      	add	sp, #12
 800cb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb08:	801a      	strh	r2, [r3, #0]
 800cb0a:	e7ed      	b.n	800cae8 <ucdr_serialize_endian_uint16_t+0x9c>
 800cb0c:	68a2      	ldr	r2, [r4, #8]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	7da0      	ldrb	r0, [r4, #22]
 800cb12:	f884 8015 	strb.w	r8, [r4, #21]
 800cb16:	1b92      	subs	r2, r2, r6
 800cb18:	1b9b      	subs	r3, r3, r6
 800cb1a:	f080 0001 	eor.w	r0, r0, #1
 800cb1e:	60a2      	str	r2, [r4, #8]
 800cb20:	6123      	str	r3, [r4, #16]
 800cb22:	b003      	add	sp, #12
 800cb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb28:	68a3      	ldr	r3, [r4, #8]
 800cb2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	e7bc      	b.n	800caac <ucdr_serialize_endian_uint16_t+0x60>
 800cb32:	f10d 0506 	add.w	r5, sp, #6
 800cb36:	4629      	mov	r1, r5
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	f00a fb33 	bl	80171a6 <memcpy>
 800cb40:	68a0      	ldr	r0, [r4, #8]
 800cb42:	464a      	mov	r2, r9
 800cb44:	19a9      	adds	r1, r5, r6
 800cb46:	f00a fb2e 	bl	80171a6 <memcpy>
 800cb4a:	e7af      	b.n	800caac <ucdr_serialize_endian_uint16_t+0x60>

0800cb4c <ucdr_deserialize_uint16_t>:
 800cb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb50:	460d      	mov	r5, r1
 800cb52:	2102      	movs	r1, #2
 800cb54:	4604      	mov	r4, r0
 800cb56:	f000 fe85 	bl	800d864 <ucdr_buffer_alignment>
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb62:	f000 fec3 	bl	800d8ec <ucdr_advance_buffer>
 800cb66:	2102      	movs	r1, #2
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fe1b 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800cb6e:	bb60      	cbnz	r0, 800cbca <ucdr_deserialize_uint16_t+0x7e>
 800cb70:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb74:	42be      	cmp	r6, r7
 800cb76:	d923      	bls.n	800cbc0 <ucdr_deserialize_uint16_t+0x74>
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	60a6      	str	r6, [r4, #8]
 800cb7c:	1bf6      	subs	r6, r6, r7
 800cb7e:	4433      	add	r3, r6
 800cb80:	f1c6 0902 	rsb	r9, r6, #2
 800cb84:	6123      	str	r3, [r4, #16]
 800cb86:	4649      	mov	r1, r9
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fe17 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d034      	beq.n	800cbfc <ucdr_deserialize_uint16_t+0xb0>
 800cb92:	7d23      	ldrb	r3, [r4, #20]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d042      	beq.n	800cc1e <ucdr_deserialize_uint16_t+0xd2>
 800cb98:	787b      	ldrb	r3, [r7, #1]
 800cb9a:	702b      	strb	r3, [r5, #0]
 800cb9c:	2e00      	cmp	r6, #0
 800cb9e:	d03a      	beq.n	800cc16 <ucdr_deserialize_uint16_t+0xca>
 800cba0:	783b      	ldrb	r3, [r7, #0]
 800cba2:	706b      	strb	r3, [r5, #1]
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	68a2      	ldr	r2, [r4, #8]
 800cba8:	7da0      	ldrb	r0, [r4, #22]
 800cbaa:	2102      	movs	r1, #2
 800cbac:	3302      	adds	r3, #2
 800cbae:	444a      	add	r2, r9
 800cbb0:	1b9b      	subs	r3, r3, r6
 800cbb2:	7561      	strb	r1, [r4, #21]
 800cbb4:	60a2      	str	r2, [r4, #8]
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	f080 0001 	eor.w	r0, r0, #1
 800cbbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f000 fdfa 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cbc8:	b180      	cbz	r0, 800cbec <ucdr_deserialize_uint16_t+0xa0>
 800cbca:	7d23      	ldrb	r3, [r4, #20]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	d011      	beq.n	800cbf6 <ucdr_deserialize_uint16_t+0xaa>
 800cbd2:	785b      	ldrb	r3, [r3, #1]
 800cbd4:	702b      	strb	r3, [r5, #0]
 800cbd6:	68a3      	ldr	r3, [r4, #8]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	706b      	strb	r3, [r5, #1]
 800cbdc:	68a2      	ldr	r2, [r4, #8]
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	3202      	adds	r2, #2
 800cbe2:	3302      	adds	r3, #2
 800cbe4:	2102      	movs	r1, #2
 800cbe6:	60a2      	str	r2, [r4, #8]
 800cbe8:	6123      	str	r3, [r4, #16]
 800cbea:	7561      	strb	r1, [r4, #21]
 800cbec:	7da0      	ldrb	r0, [r4, #22]
 800cbee:	f080 0001 	eor.w	r0, r0, #1
 800cbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	802b      	strh	r3, [r5, #0]
 800cbfa:	e7ef      	b.n	800cbdc <ucdr_deserialize_uint16_t+0x90>
 800cbfc:	68a2      	ldr	r2, [r4, #8]
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	7da0      	ldrb	r0, [r4, #22]
 800cc02:	f884 8015 	strb.w	r8, [r4, #21]
 800cc06:	1b92      	subs	r2, r2, r6
 800cc08:	1b9b      	subs	r3, r3, r6
 800cc0a:	60a2      	str	r2, [r4, #8]
 800cc0c:	6123      	str	r3, [r4, #16]
 800cc0e:	f080 0001 	eor.w	r0, r0, #1
 800cc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	706b      	strb	r3, [r5, #1]
 800cc1c:	e7c2      	b.n	800cba4 <ucdr_deserialize_uint16_t+0x58>
 800cc1e:	4639      	mov	r1, r7
 800cc20:	4632      	mov	r2, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	f00a fabf 	bl	80171a6 <memcpy>
 800cc28:	68a1      	ldr	r1, [r4, #8]
 800cc2a:	464a      	mov	r2, r9
 800cc2c:	19a8      	adds	r0, r5, r6
 800cc2e:	f00a faba 	bl	80171a6 <memcpy>
 800cc32:	e7b7      	b.n	800cba4 <ucdr_deserialize_uint16_t+0x58>

0800cc34 <ucdr_deserialize_endian_uint16_t>:
 800cc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc38:	460e      	mov	r6, r1
 800cc3a:	2102      	movs	r1, #2
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	4615      	mov	r5, r2
 800cc40:	f000 fe10 	bl	800d864 <ucdr_buffer_alignment>
 800cc44:	4601      	mov	r1, r0
 800cc46:	4620      	mov	r0, r4
 800cc48:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cc4c:	f000 fe4e 	bl	800d8ec <ucdr_advance_buffer>
 800cc50:	2102      	movs	r1, #2
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 fda6 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800cc58:	bb70      	cbnz	r0, 800ccb8 <ucdr_deserialize_endian_uint16_t+0x84>
 800cc5a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800cc5e:	4547      	cmp	r7, r8
 800cc60:	d925      	bls.n	800ccae <ucdr_deserialize_endian_uint16_t+0x7a>
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	60a7      	str	r7, [r4, #8]
 800cc66:	eba7 0708 	sub.w	r7, r7, r8
 800cc6a:	443b      	add	r3, r7
 800cc6c:	f1c7 0a02 	rsb	sl, r7, #2
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	4651      	mov	r1, sl
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fda1 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d034      	beq.n	800cce8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cc7e:	2e01      	cmp	r6, #1
 800cc80:	d043      	beq.n	800cd0a <ucdr_deserialize_endian_uint16_t+0xd6>
 800cc82:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cc86:	702b      	strb	r3, [r5, #0]
 800cc88:	2f00      	cmp	r7, #0
 800cc8a:	d03a      	beq.n	800cd02 <ucdr_deserialize_endian_uint16_t+0xce>
 800cc8c:	f898 3000 	ldrb.w	r3, [r8]
 800cc90:	706b      	strb	r3, [r5, #1]
 800cc92:	6923      	ldr	r3, [r4, #16]
 800cc94:	68a2      	ldr	r2, [r4, #8]
 800cc96:	7da0      	ldrb	r0, [r4, #22]
 800cc98:	2102      	movs	r1, #2
 800cc9a:	3302      	adds	r3, #2
 800cc9c:	4452      	add	r2, sl
 800cc9e:	1bdb      	subs	r3, r3, r7
 800cca0:	7561      	strb	r1, [r4, #21]
 800cca2:	60a2      	str	r2, [r4, #8]
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	f080 0001 	eor.w	r0, r0, #1
 800ccaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccae:	2102      	movs	r1, #2
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f000 fd83 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800ccb6:	b178      	cbz	r0, 800ccd8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ccb8:	2e01      	cmp	r6, #1
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	d011      	beq.n	800cce2 <ucdr_deserialize_endian_uint16_t+0xae>
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	702b      	strb	r3, [r5, #0]
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	706b      	strb	r3, [r5, #1]
 800ccc8:	68a2      	ldr	r2, [r4, #8]
 800ccca:	6923      	ldr	r3, [r4, #16]
 800cccc:	3202      	adds	r2, #2
 800ccce:	3302      	adds	r3, #2
 800ccd0:	2102      	movs	r1, #2
 800ccd2:	60a2      	str	r2, [r4, #8]
 800ccd4:	6123      	str	r3, [r4, #16]
 800ccd6:	7561      	strb	r1, [r4, #21]
 800ccd8:	7da0      	ldrb	r0, [r4, #22]
 800ccda:	f080 0001 	eor.w	r0, r0, #1
 800ccde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	802b      	strh	r3, [r5, #0]
 800cce6:	e7ef      	b.n	800ccc8 <ucdr_deserialize_endian_uint16_t+0x94>
 800cce8:	68a2      	ldr	r2, [r4, #8]
 800ccea:	6923      	ldr	r3, [r4, #16]
 800ccec:	7da0      	ldrb	r0, [r4, #22]
 800ccee:	f884 9015 	strb.w	r9, [r4, #21]
 800ccf2:	1bd2      	subs	r2, r2, r7
 800ccf4:	1bdb      	subs	r3, r3, r7
 800ccf6:	60a2      	str	r2, [r4, #8]
 800ccf8:	6123      	str	r3, [r4, #16]
 800ccfa:	f080 0001 	eor.w	r0, r0, #1
 800ccfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd02:	68a3      	ldr	r3, [r4, #8]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	706b      	strb	r3, [r5, #1]
 800cd08:	e7c3      	b.n	800cc92 <ucdr_deserialize_endian_uint16_t+0x5e>
 800cd0a:	4641      	mov	r1, r8
 800cd0c:	463a      	mov	r2, r7
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f00a fa49 	bl	80171a6 <memcpy>
 800cd14:	68a1      	ldr	r1, [r4, #8]
 800cd16:	4652      	mov	r2, sl
 800cd18:	19e8      	adds	r0, r5, r7
 800cd1a:	f00a fa44 	bl	80171a6 <memcpy>
 800cd1e:	e7b8      	b.n	800cc92 <ucdr_deserialize_endian_uint16_t+0x5e>

0800cd20 <ucdr_serialize_uint32_t>:
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	4604      	mov	r4, r0
 800cd28:	9101      	str	r1, [sp, #4]
 800cd2a:	2104      	movs	r1, #4
 800cd2c:	f000 fd9a 	bl	800d864 <ucdr_buffer_alignment>
 800cd30:	4601      	mov	r1, r0
 800cd32:	4620      	mov	r0, r4
 800cd34:	7d67      	ldrb	r7, [r4, #21]
 800cd36:	f000 fdd9 	bl	800d8ec <ucdr_advance_buffer>
 800cd3a:	2104      	movs	r1, #4
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 fd31 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d139      	bne.n	800cdba <ucdr_serialize_uint32_t+0x9a>
 800cd46:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cd4a:	42ab      	cmp	r3, r5
 800cd4c:	d930      	bls.n	800cdb0 <ucdr_serialize_uint32_t+0x90>
 800cd4e:	1b5e      	subs	r6, r3, r5
 800cd50:	60a3      	str	r3, [r4, #8]
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	f1c6 0804 	rsb	r8, r6, #4
 800cd58:	4433      	add	r3, r6
 800cd5a:	6123      	str	r3, [r4, #16]
 800cd5c:	4641      	mov	r1, r8
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 fd2c 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d04c      	beq.n	800ce02 <ucdr_serialize_uint32_t+0xe2>
 800cd68:	7d23      	ldrb	r3, [r4, #20]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d063      	beq.n	800ce36 <ucdr_serialize_uint32_t+0x116>
 800cd6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd72:	702b      	strb	r3, [r5, #0]
 800cd74:	2e00      	cmp	r6, #0
 800cd76:	d051      	beq.n	800ce1c <ucdr_serialize_uint32_t+0xfc>
 800cd78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd7c:	706b      	strb	r3, [r5, #1]
 800cd7e:	2e01      	cmp	r6, #1
 800cd80:	d050      	beq.n	800ce24 <ucdr_serialize_uint32_t+0x104>
 800cd82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd86:	70ab      	strb	r3, [r5, #2]
 800cd88:	2e02      	cmp	r6, #2
 800cd8a:	d04f      	beq.n	800ce2c <ucdr_serialize_uint32_t+0x10c>
 800cd8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd90:	70eb      	strb	r3, [r5, #3]
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	68a2      	ldr	r2, [r4, #8]
 800cd96:	7da0      	ldrb	r0, [r4, #22]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	1b9e      	subs	r6, r3, r6
 800cd9c:	4442      	add	r2, r8
 800cd9e:	2304      	movs	r3, #4
 800cda0:	f080 0001 	eor.w	r0, r0, #1
 800cda4:	60a2      	str	r2, [r4, #8]
 800cda6:	6126      	str	r6, [r4, #16]
 800cda8:	7563      	strb	r3, [r4, #21]
 800cdaa:	b002      	add	sp, #8
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	2104      	movs	r1, #4
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 fd02 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cdb8:	b1d0      	cbz	r0, 800cdf0 <ucdr_serialize_uint32_t+0xd0>
 800cdba:	7d23      	ldrb	r3, [r4, #20]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	d01c      	beq.n	800cdfc <ucdr_serialize_uint32_t+0xdc>
 800cdc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	68a3      	ldr	r3, [r4, #8]
 800cdca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cdce:	705a      	strb	r2, [r3, #1]
 800cdd0:	68a3      	ldr	r3, [r4, #8]
 800cdd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cdd6:	709a      	strb	r2, [r3, #2]
 800cdd8:	68a3      	ldr	r3, [r4, #8]
 800cdda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cdde:	70da      	strb	r2, [r3, #3]
 800cde0:	68a2      	ldr	r2, [r4, #8]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	3204      	adds	r2, #4
 800cde6:	3304      	adds	r3, #4
 800cde8:	2104      	movs	r1, #4
 800cdea:	60a2      	str	r2, [r4, #8]
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	7561      	strb	r1, [r4, #21]
 800cdf0:	7da0      	ldrb	r0, [r4, #22]
 800cdf2:	f080 0001 	eor.w	r0, r0, #1
 800cdf6:	b002      	add	sp, #8
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	9a01      	ldr	r2, [sp, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
 800ce00:	e7ee      	b.n	800cde0 <ucdr_serialize_uint32_t+0xc0>
 800ce02:	68a2      	ldr	r2, [r4, #8]
 800ce04:	6923      	ldr	r3, [r4, #16]
 800ce06:	7da0      	ldrb	r0, [r4, #22]
 800ce08:	7567      	strb	r7, [r4, #21]
 800ce0a:	1b92      	subs	r2, r2, r6
 800ce0c:	1b9b      	subs	r3, r3, r6
 800ce0e:	f080 0001 	eor.w	r0, r0, #1
 800ce12:	60a2      	str	r2, [r4, #8]
 800ce14:	6123      	str	r3, [r4, #16]
 800ce16:	b002      	add	sp, #8
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	68a3      	ldr	r3, [r4, #8]
 800ce1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce22:	701a      	strb	r2, [r3, #0]
 800ce24:	68a3      	ldr	r3, [r4, #8]
 800ce26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	68a3      	ldr	r3, [r4, #8]
 800ce2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce32:	701a      	strb	r2, [r3, #0]
 800ce34:	e7ad      	b.n	800cd92 <ucdr_serialize_uint32_t+0x72>
 800ce36:	4628      	mov	r0, r5
 800ce38:	ad01      	add	r5, sp, #4
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	f00a f9b2 	bl	80171a6 <memcpy>
 800ce42:	68a0      	ldr	r0, [r4, #8]
 800ce44:	4642      	mov	r2, r8
 800ce46:	19a9      	adds	r1, r5, r6
 800ce48:	f00a f9ad 	bl	80171a6 <memcpy>
 800ce4c:	e7a1      	b.n	800cd92 <ucdr_serialize_uint32_t+0x72>
 800ce4e:	bf00      	nop

0800ce50 <ucdr_serialize_endian_uint32_t>:
 800ce50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce54:	b083      	sub	sp, #12
 800ce56:	460d      	mov	r5, r1
 800ce58:	2104      	movs	r1, #4
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	9201      	str	r2, [sp, #4]
 800ce5e:	f000 fd01 	bl	800d864 <ucdr_buffer_alignment>
 800ce62:	4601      	mov	r1, r0
 800ce64:	4620      	mov	r0, r4
 800ce66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ce6a:	f000 fd3f 	bl	800d8ec <ucdr_advance_buffer>
 800ce6e:	2104      	movs	r1, #4
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fc97 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d138      	bne.n	800ceec <ucdr_serialize_endian_uint32_t+0x9c>
 800ce7a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ce7e:	42b7      	cmp	r7, r6
 800ce80:	d92f      	bls.n	800cee2 <ucdr_serialize_endian_uint32_t+0x92>
 800ce82:	6923      	ldr	r3, [r4, #16]
 800ce84:	60a7      	str	r7, [r4, #8]
 800ce86:	1bbf      	subs	r7, r7, r6
 800ce88:	443b      	add	r3, r7
 800ce8a:	f1c7 0904 	rsb	r9, r7, #4
 800ce8e:	6123      	str	r3, [r4, #16]
 800ce90:	4649      	mov	r1, r9
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 fc92 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d04a      	beq.n	800cf32 <ucdr_serialize_endian_uint32_t+0xe2>
 800ce9c:	2d01      	cmp	r5, #1
 800ce9e:	d063      	beq.n	800cf68 <ucdr_serialize_endian_uint32_t+0x118>
 800cea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cea4:	7033      	strb	r3, [r6, #0]
 800cea6:	2f00      	cmp	r7, #0
 800cea8:	d051      	beq.n	800cf4e <ucdr_serialize_endian_uint32_t+0xfe>
 800ceaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ceae:	7073      	strb	r3, [r6, #1]
 800ceb0:	2f01      	cmp	r7, #1
 800ceb2:	d050      	beq.n	800cf56 <ucdr_serialize_endian_uint32_t+0x106>
 800ceb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ceb8:	70b3      	strb	r3, [r6, #2]
 800ceba:	2f02      	cmp	r7, #2
 800cebc:	d04f      	beq.n	800cf5e <ucdr_serialize_endian_uint32_t+0x10e>
 800cebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cec2:	70f3      	strb	r3, [r6, #3]
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	68a2      	ldr	r2, [r4, #8]
 800cec8:	7da0      	ldrb	r0, [r4, #22]
 800ceca:	3304      	adds	r3, #4
 800cecc:	444a      	add	r2, r9
 800cece:	1bdb      	subs	r3, r3, r7
 800ced0:	2104      	movs	r1, #4
 800ced2:	f080 0001 	eor.w	r0, r0, #1
 800ced6:	60a2      	str	r2, [r4, #8]
 800ced8:	6123      	str	r3, [r4, #16]
 800ceda:	7561      	strb	r1, [r4, #21]
 800cedc:	b003      	add	sp, #12
 800cede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cee2:	2104      	movs	r1, #4
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fc69 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800ceea:	b1c8      	cbz	r0, 800cf20 <ucdr_serialize_endian_uint32_t+0xd0>
 800ceec:	2d01      	cmp	r5, #1
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	d01c      	beq.n	800cf2c <ucdr_serialize_endian_uint32_t+0xdc>
 800cef2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	68a3      	ldr	r3, [r4, #8]
 800cefa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cefe:	705a      	strb	r2, [r3, #1]
 800cf00:	68a3      	ldr	r3, [r4, #8]
 800cf02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf06:	709a      	strb	r2, [r3, #2]
 800cf08:	68a3      	ldr	r3, [r4, #8]
 800cf0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf0e:	70da      	strb	r2, [r3, #3]
 800cf10:	68a2      	ldr	r2, [r4, #8]
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	3204      	adds	r2, #4
 800cf16:	3304      	adds	r3, #4
 800cf18:	2104      	movs	r1, #4
 800cf1a:	60a2      	str	r2, [r4, #8]
 800cf1c:	6123      	str	r3, [r4, #16]
 800cf1e:	7561      	strb	r1, [r4, #21]
 800cf20:	7da0      	ldrb	r0, [r4, #22]
 800cf22:	f080 0001 	eor.w	r0, r0, #1
 800cf26:	b003      	add	sp, #12
 800cf28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf2c:	9a01      	ldr	r2, [sp, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	e7ee      	b.n	800cf10 <ucdr_serialize_endian_uint32_t+0xc0>
 800cf32:	68a2      	ldr	r2, [r4, #8]
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	7da0      	ldrb	r0, [r4, #22]
 800cf38:	f884 8015 	strb.w	r8, [r4, #21]
 800cf3c:	1bd2      	subs	r2, r2, r7
 800cf3e:	1bdb      	subs	r3, r3, r7
 800cf40:	f080 0001 	eor.w	r0, r0, #1
 800cf44:	60a2      	str	r2, [r4, #8]
 800cf46:	6123      	str	r3, [r4, #16]
 800cf48:	b003      	add	sp, #12
 800cf4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf4e:	68a3      	ldr	r3, [r4, #8]
 800cf50:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf54:	701a      	strb	r2, [r3, #0]
 800cf56:	68a3      	ldr	r3, [r4, #8]
 800cf58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	68a3      	ldr	r3, [r4, #8]
 800cf60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf64:	701a      	strb	r2, [r3, #0]
 800cf66:	e7ad      	b.n	800cec4 <ucdr_serialize_endian_uint32_t+0x74>
 800cf68:	ad01      	add	r5, sp, #4
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	463a      	mov	r2, r7
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f00a f919 	bl	80171a6 <memcpy>
 800cf74:	68a0      	ldr	r0, [r4, #8]
 800cf76:	464a      	mov	r2, r9
 800cf78:	19e9      	adds	r1, r5, r7
 800cf7a:	f00a f914 	bl	80171a6 <memcpy>
 800cf7e:	e7a1      	b.n	800cec4 <ucdr_serialize_endian_uint32_t+0x74>

0800cf80 <ucdr_deserialize_uint32_t>:
 800cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf84:	460d      	mov	r5, r1
 800cf86:	2104      	movs	r1, #4
 800cf88:	4604      	mov	r4, r0
 800cf8a:	f000 fc6b 	bl	800d864 <ucdr_buffer_alignment>
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4620      	mov	r0, r4
 800cf92:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf96:	f000 fca9 	bl	800d8ec <ucdr_advance_buffer>
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fc01 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d138      	bne.n	800d018 <ucdr_deserialize_uint32_t+0x98>
 800cfa6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cfaa:	42b7      	cmp	r7, r6
 800cfac:	d92f      	bls.n	800d00e <ucdr_deserialize_uint32_t+0x8e>
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	60a7      	str	r7, [r4, #8]
 800cfb2:	1bbf      	subs	r7, r7, r6
 800cfb4:	443b      	add	r3, r7
 800cfb6:	f1c7 0904 	rsb	r9, r7, #4
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	4649      	mov	r1, r9
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 fbfc 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d046      	beq.n	800d056 <ucdr_deserialize_uint32_t+0xd6>
 800cfc8:	7d23      	ldrb	r3, [r4, #20]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d05c      	beq.n	800d088 <ucdr_deserialize_uint32_t+0x108>
 800cfce:	78f3      	ldrb	r3, [r6, #3]
 800cfd0:	702b      	strb	r3, [r5, #0]
 800cfd2:	2f00      	cmp	r7, #0
 800cfd4:	d04c      	beq.n	800d070 <ucdr_deserialize_uint32_t+0xf0>
 800cfd6:	78b3      	ldrb	r3, [r6, #2]
 800cfd8:	706b      	strb	r3, [r5, #1]
 800cfda:	2f01      	cmp	r7, #1
 800cfdc:	f105 0302 	add.w	r3, r5, #2
 800cfe0:	d04a      	beq.n	800d078 <ucdr_deserialize_uint32_t+0xf8>
 800cfe2:	7873      	ldrb	r3, [r6, #1]
 800cfe4:	70ab      	strb	r3, [r5, #2]
 800cfe6:	2f02      	cmp	r7, #2
 800cfe8:	f105 0303 	add.w	r3, r5, #3
 800cfec:	d048      	beq.n	800d080 <ucdr_deserialize_uint32_t+0x100>
 800cfee:	7833      	ldrb	r3, [r6, #0]
 800cff0:	70eb      	strb	r3, [r5, #3]
 800cff2:	6923      	ldr	r3, [r4, #16]
 800cff4:	68a2      	ldr	r2, [r4, #8]
 800cff6:	7da0      	ldrb	r0, [r4, #22]
 800cff8:	2104      	movs	r1, #4
 800cffa:	3304      	adds	r3, #4
 800cffc:	444a      	add	r2, r9
 800cffe:	1bdb      	subs	r3, r3, r7
 800d000:	7561      	strb	r1, [r4, #21]
 800d002:	60a2      	str	r2, [r4, #8]
 800d004:	6123      	str	r3, [r4, #16]
 800d006:	f080 0001 	eor.w	r0, r0, #1
 800d00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00e:	2104      	movs	r1, #4
 800d010:	4620      	mov	r0, r4
 800d012:	f000 fbd3 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d016:	b1b0      	cbz	r0, 800d046 <ucdr_deserialize_uint32_t+0xc6>
 800d018:	7d23      	ldrb	r3, [r4, #20]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	68a3      	ldr	r3, [r4, #8]
 800d01e:	d017      	beq.n	800d050 <ucdr_deserialize_uint32_t+0xd0>
 800d020:	78db      	ldrb	r3, [r3, #3]
 800d022:	702b      	strb	r3, [r5, #0]
 800d024:	68a3      	ldr	r3, [r4, #8]
 800d026:	789b      	ldrb	r3, [r3, #2]
 800d028:	706b      	strb	r3, [r5, #1]
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	785b      	ldrb	r3, [r3, #1]
 800d02e:	70ab      	strb	r3, [r5, #2]
 800d030:	68a3      	ldr	r3, [r4, #8]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	70eb      	strb	r3, [r5, #3]
 800d036:	68a2      	ldr	r2, [r4, #8]
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	3204      	adds	r2, #4
 800d03c:	3304      	adds	r3, #4
 800d03e:	2104      	movs	r1, #4
 800d040:	60a2      	str	r2, [r4, #8]
 800d042:	6123      	str	r3, [r4, #16]
 800d044:	7561      	strb	r1, [r4, #21]
 800d046:	7da0      	ldrb	r0, [r4, #22]
 800d048:	f080 0001 	eor.w	r0, r0, #1
 800d04c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	e7ef      	b.n	800d036 <ucdr_deserialize_uint32_t+0xb6>
 800d056:	68a2      	ldr	r2, [r4, #8]
 800d058:	6923      	ldr	r3, [r4, #16]
 800d05a:	7da0      	ldrb	r0, [r4, #22]
 800d05c:	f884 8015 	strb.w	r8, [r4, #21]
 800d060:	1bd2      	subs	r2, r2, r7
 800d062:	1bdb      	subs	r3, r3, r7
 800d064:	60a2      	str	r2, [r4, #8]
 800d066:	6123      	str	r3, [r4, #16]
 800d068:	f080 0001 	eor.w	r0, r0, #1
 800d06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d070:	68a3      	ldr	r3, [r4, #8]
 800d072:	789b      	ldrb	r3, [r3, #2]
 800d074:	706b      	strb	r3, [r5, #1]
 800d076:	1cab      	adds	r3, r5, #2
 800d078:	68a2      	ldr	r2, [r4, #8]
 800d07a:	7852      	ldrb	r2, [r2, #1]
 800d07c:	f803 2b01 	strb.w	r2, [r3], #1
 800d080:	68a2      	ldr	r2, [r4, #8]
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	e7b4      	b.n	800cff2 <ucdr_deserialize_uint32_t+0x72>
 800d088:	4631      	mov	r1, r6
 800d08a:	463a      	mov	r2, r7
 800d08c:	4628      	mov	r0, r5
 800d08e:	f00a f88a 	bl	80171a6 <memcpy>
 800d092:	68a1      	ldr	r1, [r4, #8]
 800d094:	464a      	mov	r2, r9
 800d096:	19e8      	adds	r0, r5, r7
 800d098:	f00a f885 	bl	80171a6 <memcpy>
 800d09c:	e7a9      	b.n	800cff2 <ucdr_deserialize_uint32_t+0x72>
 800d09e:	bf00      	nop

0800d0a0 <ucdr_deserialize_endian_uint32_t>:
 800d0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	2104      	movs	r1, #4
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	4615      	mov	r5, r2
 800d0ac:	f000 fbda 	bl	800d864 <ucdr_buffer_alignment>
 800d0b0:	4601      	mov	r1, r0
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d0b8:	f000 fc18 	bl	800d8ec <ucdr_advance_buffer>
 800d0bc:	2104      	movs	r1, #4
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 fb70 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d13c      	bne.n	800d142 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d0c8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d0cc:	42bb      	cmp	r3, r7
 800d0ce:	d933      	bls.n	800d138 <ucdr_deserialize_endian_uint32_t+0x98>
 800d0d0:	eba3 0807 	sub.w	r8, r3, r7
 800d0d4:	60a3      	str	r3, [r4, #8]
 800d0d6:	6923      	ldr	r3, [r4, #16]
 800d0d8:	f1c8 0a04 	rsb	sl, r8, #4
 800d0dc:	4443      	add	r3, r8
 800d0de:	6123      	str	r3, [r4, #16]
 800d0e0:	4651      	mov	r1, sl
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f000 fb6a 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d048      	beq.n	800d17e <ucdr_deserialize_endian_uint32_t+0xde>
 800d0ec:	2e01      	cmp	r6, #1
 800d0ee:	d061      	beq.n	800d1b4 <ucdr_deserialize_endian_uint32_t+0x114>
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	702b      	strb	r3, [r5, #0]
 800d0f4:	f1b8 0f00 	cmp.w	r8, #0
 800d0f8:	d050      	beq.n	800d19c <ucdr_deserialize_endian_uint32_t+0xfc>
 800d0fa:	78bb      	ldrb	r3, [r7, #2]
 800d0fc:	706b      	strb	r3, [r5, #1]
 800d0fe:	f1b8 0f01 	cmp.w	r8, #1
 800d102:	f105 0302 	add.w	r3, r5, #2
 800d106:	d04d      	beq.n	800d1a4 <ucdr_deserialize_endian_uint32_t+0x104>
 800d108:	787b      	ldrb	r3, [r7, #1]
 800d10a:	70ab      	strb	r3, [r5, #2]
 800d10c:	f1b8 0f02 	cmp.w	r8, #2
 800d110:	f105 0303 	add.w	r3, r5, #3
 800d114:	d04a      	beq.n	800d1ac <ucdr_deserialize_endian_uint32_t+0x10c>
 800d116:	783b      	ldrb	r3, [r7, #0]
 800d118:	70eb      	strb	r3, [r5, #3]
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	68a2      	ldr	r2, [r4, #8]
 800d11e:	7da0      	ldrb	r0, [r4, #22]
 800d120:	2104      	movs	r1, #4
 800d122:	3304      	adds	r3, #4
 800d124:	4452      	add	r2, sl
 800d126:	eba3 0308 	sub.w	r3, r3, r8
 800d12a:	7561      	strb	r1, [r4, #21]
 800d12c:	60a2      	str	r2, [r4, #8]
 800d12e:	6123      	str	r3, [r4, #16]
 800d130:	f080 0001 	eor.w	r0, r0, #1
 800d134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d138:	2104      	movs	r1, #4
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fb3e 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d140:	b1a8      	cbz	r0, 800d16e <ucdr_deserialize_endian_uint32_t+0xce>
 800d142:	2e01      	cmp	r6, #1
 800d144:	68a3      	ldr	r3, [r4, #8]
 800d146:	d017      	beq.n	800d178 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d148:	78db      	ldrb	r3, [r3, #3]
 800d14a:	702b      	strb	r3, [r5, #0]
 800d14c:	68a3      	ldr	r3, [r4, #8]
 800d14e:	789b      	ldrb	r3, [r3, #2]
 800d150:	706b      	strb	r3, [r5, #1]
 800d152:	68a3      	ldr	r3, [r4, #8]
 800d154:	785b      	ldrb	r3, [r3, #1]
 800d156:	70ab      	strb	r3, [r5, #2]
 800d158:	68a3      	ldr	r3, [r4, #8]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	70eb      	strb	r3, [r5, #3]
 800d15e:	68a2      	ldr	r2, [r4, #8]
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	3204      	adds	r2, #4
 800d164:	3304      	adds	r3, #4
 800d166:	2104      	movs	r1, #4
 800d168:	60a2      	str	r2, [r4, #8]
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	7561      	strb	r1, [r4, #21]
 800d16e:	7da0      	ldrb	r0, [r4, #22]
 800d170:	f080 0001 	eor.w	r0, r0, #1
 800d174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	602b      	str	r3, [r5, #0]
 800d17c:	e7ef      	b.n	800d15e <ucdr_deserialize_endian_uint32_t+0xbe>
 800d17e:	68a2      	ldr	r2, [r4, #8]
 800d180:	6923      	ldr	r3, [r4, #16]
 800d182:	7da0      	ldrb	r0, [r4, #22]
 800d184:	f884 9015 	strb.w	r9, [r4, #21]
 800d188:	eba2 0208 	sub.w	r2, r2, r8
 800d18c:	eba3 0308 	sub.w	r3, r3, r8
 800d190:	60a2      	str	r2, [r4, #8]
 800d192:	6123      	str	r3, [r4, #16]
 800d194:	f080 0001 	eor.w	r0, r0, #1
 800d198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19c:	68a3      	ldr	r3, [r4, #8]
 800d19e:	789b      	ldrb	r3, [r3, #2]
 800d1a0:	706b      	strb	r3, [r5, #1]
 800d1a2:	1cab      	adds	r3, r5, #2
 800d1a4:	68a2      	ldr	r2, [r4, #8]
 800d1a6:	7852      	ldrb	r2, [r2, #1]
 800d1a8:	f803 2b01 	strb.w	r2, [r3], #1
 800d1ac:	68a2      	ldr	r2, [r4, #8]
 800d1ae:	7812      	ldrb	r2, [r2, #0]
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	e7b2      	b.n	800d11a <ucdr_deserialize_endian_uint32_t+0x7a>
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f009 fff4 	bl	80171a6 <memcpy>
 800d1be:	68a1      	ldr	r1, [r4, #8]
 800d1c0:	4652      	mov	r2, sl
 800d1c2:	eb05 0008 	add.w	r0, r5, r8
 800d1c6:	f009 ffee 	bl	80171a6 <memcpy>
 800d1ca:	e7a6      	b.n	800d11a <ucdr_deserialize_endian_uint32_t+0x7a>

0800d1cc <ucdr_serialize_uint64_t>:
 800d1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d0:	2108      	movs	r1, #8
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	e9cd 2300 	strd	r2, r3, [sp]
 800d1da:	f000 fb43 	bl	800d864 <ucdr_buffer_alignment>
 800d1de:	4601      	mov	r1, r0
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	7d67      	ldrb	r7, [r4, #21]
 800d1e4:	f000 fb82 	bl	800d8ec <ucdr_advance_buffer>
 800d1e8:	2108      	movs	r1, #8
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fada 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d14e      	bne.n	800d292 <ucdr_serialize_uint64_t+0xc6>
 800d1f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d1f8:	42ab      	cmp	r3, r5
 800d1fa:	d945      	bls.n	800d288 <ucdr_serialize_uint64_t+0xbc>
 800d1fc:	1b5e      	subs	r6, r3, r5
 800d1fe:	60a3      	str	r3, [r4, #8]
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	f1c6 0808 	rsb	r8, r6, #8
 800d206:	4433      	add	r3, r6
 800d208:	6123      	str	r3, [r4, #16]
 800d20a:	4641      	mov	r1, r8
 800d20c:	4620      	mov	r0, r4
 800d20e:	f000 fad5 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d212:	2800      	cmp	r0, #0
 800d214:	d074      	beq.n	800d300 <ucdr_serialize_uint64_t+0x134>
 800d216:	7d23      	ldrb	r3, [r4, #20]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	f000 809b 	beq.w	800d354 <ucdr_serialize_uint64_t+0x188>
 800d21e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d222:	702b      	strb	r3, [r5, #0]
 800d224:	2e00      	cmp	r6, #0
 800d226:	d078      	beq.n	800d31a <ucdr_serialize_uint64_t+0x14e>
 800d228:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d22c:	706b      	strb	r3, [r5, #1]
 800d22e:	2e01      	cmp	r6, #1
 800d230:	d077      	beq.n	800d322 <ucdr_serialize_uint64_t+0x156>
 800d232:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d236:	70ab      	strb	r3, [r5, #2]
 800d238:	2e02      	cmp	r6, #2
 800d23a:	d076      	beq.n	800d32a <ucdr_serialize_uint64_t+0x15e>
 800d23c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d240:	70eb      	strb	r3, [r5, #3]
 800d242:	2e03      	cmp	r6, #3
 800d244:	d075      	beq.n	800d332 <ucdr_serialize_uint64_t+0x166>
 800d246:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d24a:	712b      	strb	r3, [r5, #4]
 800d24c:	2e04      	cmp	r6, #4
 800d24e:	d074      	beq.n	800d33a <ucdr_serialize_uint64_t+0x16e>
 800d250:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d254:	716b      	strb	r3, [r5, #5]
 800d256:	2e05      	cmp	r6, #5
 800d258:	d073      	beq.n	800d342 <ucdr_serialize_uint64_t+0x176>
 800d25a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d25e:	71ab      	strb	r3, [r5, #6]
 800d260:	2e06      	cmp	r6, #6
 800d262:	d072      	beq.n	800d34a <ucdr_serialize_uint64_t+0x17e>
 800d264:	f89d 3000 	ldrb.w	r3, [sp]
 800d268:	71eb      	strb	r3, [r5, #7]
 800d26a:	6923      	ldr	r3, [r4, #16]
 800d26c:	68a2      	ldr	r2, [r4, #8]
 800d26e:	7da0      	ldrb	r0, [r4, #22]
 800d270:	3308      	adds	r3, #8
 800d272:	1b9e      	subs	r6, r3, r6
 800d274:	4442      	add	r2, r8
 800d276:	2308      	movs	r3, #8
 800d278:	f080 0001 	eor.w	r0, r0, #1
 800d27c:	60a2      	str	r2, [r4, #8]
 800d27e:	6126      	str	r6, [r4, #16]
 800d280:	7563      	strb	r3, [r4, #21]
 800d282:	b002      	add	sp, #8
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	2108      	movs	r1, #8
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 fa96 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d290:	b350      	cbz	r0, 800d2e8 <ucdr_serialize_uint64_t+0x11c>
 800d292:	7d23      	ldrb	r3, [r4, #20]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d02d      	beq.n	800d2f4 <ucdr_serialize_uint64_t+0x128>
 800d298:	68a3      	ldr	r3, [r4, #8]
 800d29a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d29e:	701a      	strb	r2, [r3, #0]
 800d2a0:	68a3      	ldr	r3, [r4, #8]
 800d2a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2a6:	705a      	strb	r2, [r3, #1]
 800d2a8:	68a3      	ldr	r3, [r4, #8]
 800d2aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d2ae:	709a      	strb	r2, [r3, #2]
 800d2b0:	68a3      	ldr	r3, [r4, #8]
 800d2b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d2b6:	70da      	strb	r2, [r3, #3]
 800d2b8:	68a3      	ldr	r3, [r4, #8]
 800d2ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d2be:	711a      	strb	r2, [r3, #4]
 800d2c0:	68a3      	ldr	r3, [r4, #8]
 800d2c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d2c6:	715a      	strb	r2, [r3, #5]
 800d2c8:	68a3      	ldr	r3, [r4, #8]
 800d2ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d2ce:	719a      	strb	r2, [r3, #6]
 800d2d0:	68a3      	ldr	r3, [r4, #8]
 800d2d2:	f89d 2000 	ldrb.w	r2, [sp]
 800d2d6:	71da      	strb	r2, [r3, #7]
 800d2d8:	68a2      	ldr	r2, [r4, #8]
 800d2da:	6923      	ldr	r3, [r4, #16]
 800d2dc:	3208      	adds	r2, #8
 800d2de:	3308      	adds	r3, #8
 800d2e0:	2108      	movs	r1, #8
 800d2e2:	60a2      	str	r2, [r4, #8]
 800d2e4:	6123      	str	r3, [r4, #16]
 800d2e6:	7561      	strb	r1, [r4, #21]
 800d2e8:	7da0      	ldrb	r0, [r4, #22]
 800d2ea:	f080 0001 	eor.w	r0, r0, #1
 800d2ee:	b002      	add	sp, #8
 800d2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f4:	466b      	mov	r3, sp
 800d2f6:	cb03      	ldmia	r3!, {r0, r1}
 800d2f8:	68a3      	ldr	r3, [r4, #8]
 800d2fa:	6018      	str	r0, [r3, #0]
 800d2fc:	6059      	str	r1, [r3, #4]
 800d2fe:	e7eb      	b.n	800d2d8 <ucdr_serialize_uint64_t+0x10c>
 800d300:	68a2      	ldr	r2, [r4, #8]
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	7da0      	ldrb	r0, [r4, #22]
 800d306:	7567      	strb	r7, [r4, #21]
 800d308:	1b92      	subs	r2, r2, r6
 800d30a:	1b9b      	subs	r3, r3, r6
 800d30c:	f080 0001 	eor.w	r0, r0, #1
 800d310:	60a2      	str	r2, [r4, #8]
 800d312:	6123      	str	r3, [r4, #16]
 800d314:	b002      	add	sp, #8
 800d316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	68a3      	ldr	r3, [r4, #8]
 800d324:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	68a3      	ldr	r3, [r4, #8]
 800d32c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	68a3      	ldr	r3, [r4, #8]
 800d334:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d338:	701a      	strb	r2, [r3, #0]
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d340:	701a      	strb	r2, [r3, #0]
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	68a3      	ldr	r3, [r4, #8]
 800d34c:	f89d 2000 	ldrb.w	r2, [sp]
 800d350:	701a      	strb	r2, [r3, #0]
 800d352:	e78a      	b.n	800d26a <ucdr_serialize_uint64_t+0x9e>
 800d354:	4628      	mov	r0, r5
 800d356:	466d      	mov	r5, sp
 800d358:	4629      	mov	r1, r5
 800d35a:	4632      	mov	r2, r6
 800d35c:	f009 ff23 	bl	80171a6 <memcpy>
 800d360:	68a0      	ldr	r0, [r4, #8]
 800d362:	4642      	mov	r2, r8
 800d364:	19a9      	adds	r1, r5, r6
 800d366:	f009 ff1e 	bl	80171a6 <memcpy>
 800d36a:	e77e      	b.n	800d26a <ucdr_serialize_uint64_t+0x9e>

0800d36c <ucdr_serialize_int16_t>:
 800d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d370:	b082      	sub	sp, #8
 800d372:	460b      	mov	r3, r1
 800d374:	2102      	movs	r1, #2
 800d376:	4604      	mov	r4, r0
 800d378:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d37c:	f000 fa72 	bl	800d864 <ucdr_buffer_alignment>
 800d380:	4601      	mov	r1, r0
 800d382:	4620      	mov	r0, r4
 800d384:	7d67      	ldrb	r7, [r4, #21]
 800d386:	f000 fab1 	bl	800d8ec <ucdr_advance_buffer>
 800d38a:	2102      	movs	r1, #2
 800d38c:	4620      	mov	r0, r4
 800d38e:	f000 fa09 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d392:	bb78      	cbnz	r0, 800d3f4 <ucdr_serialize_int16_t+0x88>
 800d394:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d398:	42ab      	cmp	r3, r5
 800d39a:	d926      	bls.n	800d3ea <ucdr_serialize_int16_t+0x7e>
 800d39c:	1b5e      	subs	r6, r3, r5
 800d39e:	60a3      	str	r3, [r4, #8]
 800d3a0:	6923      	ldr	r3, [r4, #16]
 800d3a2:	f1c6 0802 	rsb	r8, r6, #2
 800d3a6:	4433      	add	r3, r6
 800d3a8:	6123      	str	r3, [r4, #16]
 800d3aa:	4641      	mov	r1, r8
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f000 fa05 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d03b      	beq.n	800d42e <ucdr_serialize_int16_t+0xc2>
 800d3b6:	7d23      	ldrb	r3, [r4, #20]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d04a      	beq.n	800d452 <ucdr_serialize_int16_t+0xe6>
 800d3bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d3c0:	702b      	strb	r3, [r5, #0]
 800d3c2:	2e00      	cmp	r6, #0
 800d3c4:	d040      	beq.n	800d448 <ucdr_serialize_int16_t+0xdc>
 800d3c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d3ca:	706b      	strb	r3, [r5, #1]
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	68a2      	ldr	r2, [r4, #8]
 800d3d0:	7da0      	ldrb	r0, [r4, #22]
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	1b9e      	subs	r6, r3, r6
 800d3d6:	4442      	add	r2, r8
 800d3d8:	2302      	movs	r3, #2
 800d3da:	f080 0001 	eor.w	r0, r0, #1
 800d3de:	60a2      	str	r2, [r4, #8]
 800d3e0:	6126      	str	r6, [r4, #16]
 800d3e2:	7563      	strb	r3, [r4, #21]
 800d3e4:	b002      	add	sp, #8
 800d3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 f9e5 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d3f2:	b190      	cbz	r0, 800d41a <ucdr_serialize_int16_t+0xae>
 800d3f4:	7d23      	ldrb	r3, [r4, #20]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	68a3      	ldr	r3, [r4, #8]
 800d3fa:	d014      	beq.n	800d426 <ucdr_serialize_int16_t+0xba>
 800d3fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d408:	705a      	strb	r2, [r3, #1]
 800d40a:	68a2      	ldr	r2, [r4, #8]
 800d40c:	6923      	ldr	r3, [r4, #16]
 800d40e:	3202      	adds	r2, #2
 800d410:	3302      	adds	r3, #2
 800d412:	2102      	movs	r1, #2
 800d414:	60a2      	str	r2, [r4, #8]
 800d416:	6123      	str	r3, [r4, #16]
 800d418:	7561      	strb	r1, [r4, #21]
 800d41a:	7da0      	ldrb	r0, [r4, #22]
 800d41c:	f080 0001 	eor.w	r0, r0, #1
 800d420:	b002      	add	sp, #8
 800d422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d426:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d42a:	801a      	strh	r2, [r3, #0]
 800d42c:	e7ed      	b.n	800d40a <ucdr_serialize_int16_t+0x9e>
 800d42e:	68a2      	ldr	r2, [r4, #8]
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	7da0      	ldrb	r0, [r4, #22]
 800d434:	7567      	strb	r7, [r4, #21]
 800d436:	1b92      	subs	r2, r2, r6
 800d438:	1b9b      	subs	r3, r3, r6
 800d43a:	f080 0001 	eor.w	r0, r0, #1
 800d43e:	60a2      	str	r2, [r4, #8]
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	b002      	add	sp, #8
 800d444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d448:	68a3      	ldr	r3, [r4, #8]
 800d44a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	e7bc      	b.n	800d3cc <ucdr_serialize_int16_t+0x60>
 800d452:	4628      	mov	r0, r5
 800d454:	f10d 0506 	add.w	r5, sp, #6
 800d458:	4629      	mov	r1, r5
 800d45a:	4632      	mov	r2, r6
 800d45c:	f009 fea3 	bl	80171a6 <memcpy>
 800d460:	68a0      	ldr	r0, [r4, #8]
 800d462:	4642      	mov	r2, r8
 800d464:	19a9      	adds	r1, r5, r6
 800d466:	f009 fe9e 	bl	80171a6 <memcpy>
 800d46a:	e7af      	b.n	800d3cc <ucdr_serialize_int16_t+0x60>

0800d46c <ucdr_deserialize_int16_t>:
 800d46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d470:	460d      	mov	r5, r1
 800d472:	2102      	movs	r1, #2
 800d474:	4604      	mov	r4, r0
 800d476:	f000 f9f5 	bl	800d864 <ucdr_buffer_alignment>
 800d47a:	4601      	mov	r1, r0
 800d47c:	4620      	mov	r0, r4
 800d47e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d482:	f000 fa33 	bl	800d8ec <ucdr_advance_buffer>
 800d486:	2102      	movs	r1, #2
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 f98b 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d48e:	bb60      	cbnz	r0, 800d4ea <ucdr_deserialize_int16_t+0x7e>
 800d490:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d494:	42be      	cmp	r6, r7
 800d496:	d923      	bls.n	800d4e0 <ucdr_deserialize_int16_t+0x74>
 800d498:	6923      	ldr	r3, [r4, #16]
 800d49a:	60a6      	str	r6, [r4, #8]
 800d49c:	1bf6      	subs	r6, r6, r7
 800d49e:	4433      	add	r3, r6
 800d4a0:	f1c6 0902 	rsb	r9, r6, #2
 800d4a4:	6123      	str	r3, [r4, #16]
 800d4a6:	4649      	mov	r1, r9
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 f987 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d034      	beq.n	800d51c <ucdr_deserialize_int16_t+0xb0>
 800d4b2:	7d23      	ldrb	r3, [r4, #20]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d042      	beq.n	800d53e <ucdr_deserialize_int16_t+0xd2>
 800d4b8:	787b      	ldrb	r3, [r7, #1]
 800d4ba:	702b      	strb	r3, [r5, #0]
 800d4bc:	2e00      	cmp	r6, #0
 800d4be:	d03a      	beq.n	800d536 <ucdr_deserialize_int16_t+0xca>
 800d4c0:	783b      	ldrb	r3, [r7, #0]
 800d4c2:	706b      	strb	r3, [r5, #1]
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	68a2      	ldr	r2, [r4, #8]
 800d4c8:	7da0      	ldrb	r0, [r4, #22]
 800d4ca:	2102      	movs	r1, #2
 800d4cc:	3302      	adds	r3, #2
 800d4ce:	444a      	add	r2, r9
 800d4d0:	1b9b      	subs	r3, r3, r6
 800d4d2:	7561      	strb	r1, [r4, #21]
 800d4d4:	60a2      	str	r2, [r4, #8]
 800d4d6:	6123      	str	r3, [r4, #16]
 800d4d8:	f080 0001 	eor.w	r0, r0, #1
 800d4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e0:	2102      	movs	r1, #2
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 f96a 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d4e8:	b180      	cbz	r0, 800d50c <ucdr_deserialize_int16_t+0xa0>
 800d4ea:	7d23      	ldrb	r3, [r4, #20]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	68a3      	ldr	r3, [r4, #8]
 800d4f0:	d011      	beq.n	800d516 <ucdr_deserialize_int16_t+0xaa>
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	702b      	strb	r3, [r5, #0]
 800d4f6:	68a3      	ldr	r3, [r4, #8]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	706b      	strb	r3, [r5, #1]
 800d4fc:	68a2      	ldr	r2, [r4, #8]
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	3202      	adds	r2, #2
 800d502:	3302      	adds	r3, #2
 800d504:	2102      	movs	r1, #2
 800d506:	60a2      	str	r2, [r4, #8]
 800d508:	6123      	str	r3, [r4, #16]
 800d50a:	7561      	strb	r1, [r4, #21]
 800d50c:	7da0      	ldrb	r0, [r4, #22]
 800d50e:	f080 0001 	eor.w	r0, r0, #1
 800d512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	802b      	strh	r3, [r5, #0]
 800d51a:	e7ef      	b.n	800d4fc <ucdr_deserialize_int16_t+0x90>
 800d51c:	68a2      	ldr	r2, [r4, #8]
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	7da0      	ldrb	r0, [r4, #22]
 800d522:	f884 8015 	strb.w	r8, [r4, #21]
 800d526:	1b92      	subs	r2, r2, r6
 800d528:	1b9b      	subs	r3, r3, r6
 800d52a:	60a2      	str	r2, [r4, #8]
 800d52c:	6123      	str	r3, [r4, #16]
 800d52e:	f080 0001 	eor.w	r0, r0, #1
 800d532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d536:	68a3      	ldr	r3, [r4, #8]
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	706b      	strb	r3, [r5, #1]
 800d53c:	e7c2      	b.n	800d4c4 <ucdr_deserialize_int16_t+0x58>
 800d53e:	4639      	mov	r1, r7
 800d540:	4632      	mov	r2, r6
 800d542:	4628      	mov	r0, r5
 800d544:	f009 fe2f 	bl	80171a6 <memcpy>
 800d548:	68a1      	ldr	r1, [r4, #8]
 800d54a:	464a      	mov	r2, r9
 800d54c:	19a8      	adds	r0, r5, r6
 800d54e:	f009 fe2a 	bl	80171a6 <memcpy>
 800d552:	e7b7      	b.n	800d4c4 <ucdr_deserialize_int16_t+0x58>

0800d554 <ucdr_serialize_int32_t>:
 800d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d558:	b082      	sub	sp, #8
 800d55a:	4604      	mov	r4, r0
 800d55c:	9101      	str	r1, [sp, #4]
 800d55e:	2104      	movs	r1, #4
 800d560:	f000 f980 	bl	800d864 <ucdr_buffer_alignment>
 800d564:	4601      	mov	r1, r0
 800d566:	4620      	mov	r0, r4
 800d568:	7d67      	ldrb	r7, [r4, #21]
 800d56a:	f000 f9bf 	bl	800d8ec <ucdr_advance_buffer>
 800d56e:	2104      	movs	r1, #4
 800d570:	4620      	mov	r0, r4
 800d572:	f000 f917 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d576:	2800      	cmp	r0, #0
 800d578:	d139      	bne.n	800d5ee <ucdr_serialize_int32_t+0x9a>
 800d57a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d57e:	42ab      	cmp	r3, r5
 800d580:	d930      	bls.n	800d5e4 <ucdr_serialize_int32_t+0x90>
 800d582:	1b5e      	subs	r6, r3, r5
 800d584:	60a3      	str	r3, [r4, #8]
 800d586:	6923      	ldr	r3, [r4, #16]
 800d588:	f1c6 0804 	rsb	r8, r6, #4
 800d58c:	4433      	add	r3, r6
 800d58e:	6123      	str	r3, [r4, #16]
 800d590:	4641      	mov	r1, r8
 800d592:	4620      	mov	r0, r4
 800d594:	f000 f912 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d598:	2800      	cmp	r0, #0
 800d59a:	d04c      	beq.n	800d636 <ucdr_serialize_int32_t+0xe2>
 800d59c:	7d23      	ldrb	r3, [r4, #20]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d063      	beq.n	800d66a <ucdr_serialize_int32_t+0x116>
 800d5a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5a6:	702b      	strb	r3, [r5, #0]
 800d5a8:	2e00      	cmp	r6, #0
 800d5aa:	d051      	beq.n	800d650 <ucdr_serialize_int32_t+0xfc>
 800d5ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5b0:	706b      	strb	r3, [r5, #1]
 800d5b2:	2e01      	cmp	r6, #1
 800d5b4:	d050      	beq.n	800d658 <ucdr_serialize_int32_t+0x104>
 800d5b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d5ba:	70ab      	strb	r3, [r5, #2]
 800d5bc:	2e02      	cmp	r6, #2
 800d5be:	d04f      	beq.n	800d660 <ucdr_serialize_int32_t+0x10c>
 800d5c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d5c4:	70eb      	strb	r3, [r5, #3]
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	68a2      	ldr	r2, [r4, #8]
 800d5ca:	7da0      	ldrb	r0, [r4, #22]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	1b9e      	subs	r6, r3, r6
 800d5d0:	4442      	add	r2, r8
 800d5d2:	2304      	movs	r3, #4
 800d5d4:	f080 0001 	eor.w	r0, r0, #1
 800d5d8:	60a2      	str	r2, [r4, #8]
 800d5da:	6126      	str	r6, [r4, #16]
 800d5dc:	7563      	strb	r3, [r4, #21]
 800d5de:	b002      	add	sp, #8
 800d5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e4:	2104      	movs	r1, #4
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 f8e8 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d5ec:	b1d0      	cbz	r0, 800d624 <ucdr_serialize_int32_t+0xd0>
 800d5ee:	7d23      	ldrb	r3, [r4, #20]
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	68a3      	ldr	r3, [r4, #8]
 800d5f4:	d01c      	beq.n	800d630 <ucdr_serialize_int32_t+0xdc>
 800d5f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d5fa:	701a      	strb	r2, [r3, #0]
 800d5fc:	68a3      	ldr	r3, [r4, #8]
 800d5fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d602:	705a      	strb	r2, [r3, #1]
 800d604:	68a3      	ldr	r3, [r4, #8]
 800d606:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d60a:	709a      	strb	r2, [r3, #2]
 800d60c:	68a3      	ldr	r3, [r4, #8]
 800d60e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d612:	70da      	strb	r2, [r3, #3]
 800d614:	68a2      	ldr	r2, [r4, #8]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	3204      	adds	r2, #4
 800d61a:	3304      	adds	r3, #4
 800d61c:	2104      	movs	r1, #4
 800d61e:	60a2      	str	r2, [r4, #8]
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	7561      	strb	r1, [r4, #21]
 800d624:	7da0      	ldrb	r0, [r4, #22]
 800d626:	f080 0001 	eor.w	r0, r0, #1
 800d62a:	b002      	add	sp, #8
 800d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d630:	9a01      	ldr	r2, [sp, #4]
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e7ee      	b.n	800d614 <ucdr_serialize_int32_t+0xc0>
 800d636:	68a2      	ldr	r2, [r4, #8]
 800d638:	6923      	ldr	r3, [r4, #16]
 800d63a:	7da0      	ldrb	r0, [r4, #22]
 800d63c:	7567      	strb	r7, [r4, #21]
 800d63e:	1b92      	subs	r2, r2, r6
 800d640:	1b9b      	subs	r3, r3, r6
 800d642:	f080 0001 	eor.w	r0, r0, #1
 800d646:	60a2      	str	r2, [r4, #8]
 800d648:	6123      	str	r3, [r4, #16]
 800d64a:	b002      	add	sp, #8
 800d64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d650:	68a3      	ldr	r3, [r4, #8]
 800d652:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	68a3      	ldr	r3, [r4, #8]
 800d65a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d65e:	701a      	strb	r2, [r3, #0]
 800d660:	68a3      	ldr	r3, [r4, #8]
 800d662:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d666:	701a      	strb	r2, [r3, #0]
 800d668:	e7ad      	b.n	800d5c6 <ucdr_serialize_int32_t+0x72>
 800d66a:	4628      	mov	r0, r5
 800d66c:	ad01      	add	r5, sp, #4
 800d66e:	4629      	mov	r1, r5
 800d670:	4632      	mov	r2, r6
 800d672:	f009 fd98 	bl	80171a6 <memcpy>
 800d676:	68a0      	ldr	r0, [r4, #8]
 800d678:	4642      	mov	r2, r8
 800d67a:	19a9      	adds	r1, r5, r6
 800d67c:	f009 fd93 	bl	80171a6 <memcpy>
 800d680:	e7a1      	b.n	800d5c6 <ucdr_serialize_int32_t+0x72>
 800d682:	bf00      	nop

0800d684 <ucdr_deserialize_int32_t>:
 800d684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d688:	460d      	mov	r5, r1
 800d68a:	2104      	movs	r1, #4
 800d68c:	4604      	mov	r4, r0
 800d68e:	f000 f8e9 	bl	800d864 <ucdr_buffer_alignment>
 800d692:	4601      	mov	r1, r0
 800d694:	4620      	mov	r0, r4
 800d696:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d69a:	f000 f927 	bl	800d8ec <ucdr_advance_buffer>
 800d69e:	2104      	movs	r1, #4
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 f87f 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d138      	bne.n	800d71c <ucdr_deserialize_int32_t+0x98>
 800d6aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d6ae:	42b7      	cmp	r7, r6
 800d6b0:	d92f      	bls.n	800d712 <ucdr_deserialize_int32_t+0x8e>
 800d6b2:	6923      	ldr	r3, [r4, #16]
 800d6b4:	60a7      	str	r7, [r4, #8]
 800d6b6:	1bbf      	subs	r7, r7, r6
 800d6b8:	443b      	add	r3, r7
 800d6ba:	f1c7 0904 	rsb	r9, r7, #4
 800d6be:	6123      	str	r3, [r4, #16]
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f000 f87a 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d046      	beq.n	800d75a <ucdr_deserialize_int32_t+0xd6>
 800d6cc:	7d23      	ldrb	r3, [r4, #20]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d05c      	beq.n	800d78c <ucdr_deserialize_int32_t+0x108>
 800d6d2:	78f3      	ldrb	r3, [r6, #3]
 800d6d4:	702b      	strb	r3, [r5, #0]
 800d6d6:	2f00      	cmp	r7, #0
 800d6d8:	d04c      	beq.n	800d774 <ucdr_deserialize_int32_t+0xf0>
 800d6da:	78b3      	ldrb	r3, [r6, #2]
 800d6dc:	706b      	strb	r3, [r5, #1]
 800d6de:	2f01      	cmp	r7, #1
 800d6e0:	f105 0302 	add.w	r3, r5, #2
 800d6e4:	d04a      	beq.n	800d77c <ucdr_deserialize_int32_t+0xf8>
 800d6e6:	7873      	ldrb	r3, [r6, #1]
 800d6e8:	70ab      	strb	r3, [r5, #2]
 800d6ea:	2f02      	cmp	r7, #2
 800d6ec:	f105 0303 	add.w	r3, r5, #3
 800d6f0:	d048      	beq.n	800d784 <ucdr_deserialize_int32_t+0x100>
 800d6f2:	7833      	ldrb	r3, [r6, #0]
 800d6f4:	70eb      	strb	r3, [r5, #3]
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	68a2      	ldr	r2, [r4, #8]
 800d6fa:	7da0      	ldrb	r0, [r4, #22]
 800d6fc:	2104      	movs	r1, #4
 800d6fe:	3304      	adds	r3, #4
 800d700:	444a      	add	r2, r9
 800d702:	1bdb      	subs	r3, r3, r7
 800d704:	7561      	strb	r1, [r4, #21]
 800d706:	60a2      	str	r2, [r4, #8]
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	f080 0001 	eor.w	r0, r0, #1
 800d70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d712:	2104      	movs	r1, #4
 800d714:	4620      	mov	r0, r4
 800d716:	f000 f851 	bl	800d7bc <ucdr_check_final_buffer_behavior>
 800d71a:	b1b0      	cbz	r0, 800d74a <ucdr_deserialize_int32_t+0xc6>
 800d71c:	7d23      	ldrb	r3, [r4, #20]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	68a3      	ldr	r3, [r4, #8]
 800d722:	d017      	beq.n	800d754 <ucdr_deserialize_int32_t+0xd0>
 800d724:	78db      	ldrb	r3, [r3, #3]
 800d726:	702b      	strb	r3, [r5, #0]
 800d728:	68a3      	ldr	r3, [r4, #8]
 800d72a:	789b      	ldrb	r3, [r3, #2]
 800d72c:	706b      	strb	r3, [r5, #1]
 800d72e:	68a3      	ldr	r3, [r4, #8]
 800d730:	785b      	ldrb	r3, [r3, #1]
 800d732:	70ab      	strb	r3, [r5, #2]
 800d734:	68a3      	ldr	r3, [r4, #8]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	70eb      	strb	r3, [r5, #3]
 800d73a:	68a2      	ldr	r2, [r4, #8]
 800d73c:	6923      	ldr	r3, [r4, #16]
 800d73e:	3204      	adds	r2, #4
 800d740:	3304      	adds	r3, #4
 800d742:	2104      	movs	r1, #4
 800d744:	60a2      	str	r2, [r4, #8]
 800d746:	6123      	str	r3, [r4, #16]
 800d748:	7561      	strb	r1, [r4, #21]
 800d74a:	7da0      	ldrb	r0, [r4, #22]
 800d74c:	f080 0001 	eor.w	r0, r0, #1
 800d750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	602b      	str	r3, [r5, #0]
 800d758:	e7ef      	b.n	800d73a <ucdr_deserialize_int32_t+0xb6>
 800d75a:	68a2      	ldr	r2, [r4, #8]
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	7da0      	ldrb	r0, [r4, #22]
 800d760:	f884 8015 	strb.w	r8, [r4, #21]
 800d764:	1bd2      	subs	r2, r2, r7
 800d766:	1bdb      	subs	r3, r3, r7
 800d768:	60a2      	str	r2, [r4, #8]
 800d76a:	6123      	str	r3, [r4, #16]
 800d76c:	f080 0001 	eor.w	r0, r0, #1
 800d770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d774:	68a3      	ldr	r3, [r4, #8]
 800d776:	789b      	ldrb	r3, [r3, #2]
 800d778:	706b      	strb	r3, [r5, #1]
 800d77a:	1cab      	adds	r3, r5, #2
 800d77c:	68a2      	ldr	r2, [r4, #8]
 800d77e:	7852      	ldrb	r2, [r2, #1]
 800d780:	f803 2b01 	strb.w	r2, [r3], #1
 800d784:	68a2      	ldr	r2, [r4, #8]
 800d786:	7812      	ldrb	r2, [r2, #0]
 800d788:	701a      	strb	r2, [r3, #0]
 800d78a:	e7b4      	b.n	800d6f6 <ucdr_deserialize_int32_t+0x72>
 800d78c:	4631      	mov	r1, r6
 800d78e:	463a      	mov	r2, r7
 800d790:	4628      	mov	r0, r5
 800d792:	f009 fd08 	bl	80171a6 <memcpy>
 800d796:	68a1      	ldr	r1, [r4, #8]
 800d798:	464a      	mov	r2, r9
 800d79a:	19e8      	adds	r0, r5, r7
 800d79c:	f009 fd03 	bl	80171a6 <memcpy>
 800d7a0:	e7a9      	b.n	800d6f6 <ucdr_deserialize_int32_t+0x72>
 800d7a2:	bf00      	nop

0800d7a4 <ucdr_check_buffer_available_for>:
 800d7a4:	7d83      	ldrb	r3, [r0, #22]
 800d7a6:	b93b      	cbnz	r3, 800d7b8 <ucdr_check_buffer_available_for+0x14>
 800d7a8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d7ac:	4419      	add	r1, r3
 800d7ae:	4288      	cmp	r0, r1
 800d7b0:	bf34      	ite	cc
 800d7b2:	2000      	movcc	r0, #0
 800d7b4:	2001      	movcs	r0, #1
 800d7b6:	4770      	bx	lr
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	4770      	bx	lr

0800d7bc <ucdr_check_final_buffer_behavior>:
 800d7bc:	7d83      	ldrb	r3, [r0, #22]
 800d7be:	b943      	cbnz	r3, 800d7d2 <ucdr_check_final_buffer_behavior+0x16>
 800d7c0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d7c4:	4291      	cmp	r1, r2
 800d7c6:	b510      	push	{r4, lr}
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	d205      	bcs.n	800d7d8 <ucdr_check_final_buffer_behavior+0x1c>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	bd10      	pop	{r4, pc}
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	4770      	bx	lr
 800d7d8:	6982      	ldr	r2, [r0, #24]
 800d7da:	b13a      	cbz	r2, 800d7ec <ucdr_check_final_buffer_behavior+0x30>
 800d7dc:	69c1      	ldr	r1, [r0, #28]
 800d7de:	4790      	blx	r2
 800d7e0:	f080 0301 	eor.w	r3, r0, #1
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	75a0      	strb	r0, [r4, #22]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	bd10      	pop	{r4, pc}
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	75a0      	strb	r0, [r4, #22]
 800d7f0:	e7fa      	b.n	800d7e8 <ucdr_check_final_buffer_behavior+0x2c>
 800d7f2:	bf00      	nop

0800d7f4 <ucdr_set_on_full_buffer_callback>:
 800d7f4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop

0800d7fc <ucdr_init_buffer_origin_offset_endian>:
 800d7fc:	b410      	push	{r4}
 800d7fe:	9c01      	ldr	r4, [sp, #4]
 800d800:	6001      	str	r1, [r0, #0]
 800d802:	440a      	add	r2, r1
 800d804:	6042      	str	r2, [r0, #4]
 800d806:	190a      	adds	r2, r1, r4
 800d808:	441c      	add	r4, r3
 800d80a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d80e:	6082      	str	r2, [r0, #8]
 800d810:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d814:	7503      	strb	r3, [r0, #20]
 800d816:	2200      	movs	r2, #0
 800d818:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d81c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d820:	7542      	strb	r2, [r0, #21]
 800d822:	7582      	strb	r2, [r0, #22]
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop

0800d828 <ucdr_init_buffer_origin_offset>:
 800d828:	b510      	push	{r4, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	9c04      	ldr	r4, [sp, #16]
 800d82e:	9400      	str	r4, [sp, #0]
 800d830:	2401      	movs	r4, #1
 800d832:	9401      	str	r4, [sp, #4]
 800d834:	f7ff ffe2 	bl	800d7fc <ucdr_init_buffer_origin_offset_endian>
 800d838:	b002      	add	sp, #8
 800d83a:	bd10      	pop	{r4, pc}

0800d83c <ucdr_init_buffer_origin>:
 800d83c:	b510      	push	{r4, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	2400      	movs	r4, #0
 800d842:	9400      	str	r4, [sp, #0]
 800d844:	f7ff fff0 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800d848:	b002      	add	sp, #8
 800d84a:	bd10      	pop	{r4, pc}

0800d84c <ucdr_init_buffer>:
 800d84c:	2300      	movs	r3, #0
 800d84e:	f7ff bff5 	b.w	800d83c <ucdr_init_buffer_origin>
 800d852:	bf00      	nop

0800d854 <ucdr_alignment>:
 800d854:	fbb0 f3f1 	udiv	r3, r0, r1
 800d858:	fb03 0011 	mls	r0, r3, r1, r0
 800d85c:	1a08      	subs	r0, r1, r0
 800d85e:	3901      	subs	r1, #1
 800d860:	4008      	ands	r0, r1
 800d862:	4770      	bx	lr

0800d864 <ucdr_buffer_alignment>:
 800d864:	7d43      	ldrb	r3, [r0, #21]
 800d866:	428b      	cmp	r3, r1
 800d868:	d208      	bcs.n	800d87c <ucdr_buffer_alignment+0x18>
 800d86a:	6900      	ldr	r0, [r0, #16]
 800d86c:	fbb0 f3f1 	udiv	r3, r0, r1
 800d870:	fb01 0013 	mls	r0, r1, r3, r0
 800d874:	1a08      	subs	r0, r1, r0
 800d876:	3901      	subs	r1, #1
 800d878:	4008      	ands	r0, r1
 800d87a:	4770      	bx	lr
 800d87c:	2000      	movs	r0, #0
 800d87e:	4770      	bx	lr

0800d880 <ucdr_align_to>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4604      	mov	r4, r0
 800d884:	460d      	mov	r5, r1
 800d886:	f7ff ffed 	bl	800d864 <ucdr_buffer_alignment>
 800d88a:	68a3      	ldr	r3, [r4, #8]
 800d88c:	6921      	ldr	r1, [r4, #16]
 800d88e:	7565      	strb	r5, [r4, #21]
 800d890:	181a      	adds	r2, r3, r0
 800d892:	6863      	ldr	r3, [r4, #4]
 800d894:	4293      	cmp	r3, r2
 800d896:	4408      	add	r0, r1
 800d898:	bf28      	it	cs
 800d89a:	4613      	movcs	r3, r2
 800d89c:	6120      	str	r0, [r4, #16]
 800d89e:	60a3      	str	r3, [r4, #8]
 800d8a0:	bd38      	pop	{r3, r4, r5, pc}
 800d8a2:	bf00      	nop

0800d8a4 <ucdr_buffer_length>:
 800d8a4:	6882      	ldr	r2, [r0, #8]
 800d8a6:	6800      	ldr	r0, [r0, #0]
 800d8a8:	1a10      	subs	r0, r2, r0
 800d8aa:	4770      	bx	lr

0800d8ac <ucdr_buffer_remaining>:
 800d8ac:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d8b0:	1a10      	subs	r0, r2, r0
 800d8b2:	4770      	bx	lr

0800d8b4 <ucdr_check_final_buffer_behavior_array>:
 800d8b4:	b538      	push	{r3, r4, r5, lr}
 800d8b6:	7d83      	ldrb	r3, [r0, #22]
 800d8b8:	b963      	cbnz	r3, 800d8d4 <ucdr_check_final_buffer_behavior_array+0x20>
 800d8ba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	d308      	bcc.n	800d8d8 <ucdr_check_final_buffer_behavior_array+0x24>
 800d8c6:	b139      	cbz	r1, 800d8d8 <ucdr_check_final_buffer_behavior_array+0x24>
 800d8c8:	6983      	ldr	r3, [r0, #24]
 800d8ca:	b163      	cbz	r3, 800d8e6 <ucdr_check_final_buffer_behavior_array+0x32>
 800d8cc:	69c1      	ldr	r1, [r0, #28]
 800d8ce:	4798      	blx	r3
 800d8d0:	75a0      	strb	r0, [r4, #22]
 800d8d2:	b108      	cbz	r0, 800d8d8 <ucdr_check_final_buffer_behavior_array+0x24>
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	bd38      	pop	{r3, r4, r5, pc}
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f7ff ffe7 	bl	800d8ac <ucdr_buffer_remaining>
 800d8de:	42a8      	cmp	r0, r5
 800d8e0:	bf28      	it	cs
 800d8e2:	4628      	movcs	r0, r5
 800d8e4:	bd38      	pop	{r3, r4, r5, pc}
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	7583      	strb	r3, [r0, #22]
 800d8ea:	e7f3      	b.n	800d8d4 <ucdr_check_final_buffer_behavior_array+0x20>

0800d8ec <ucdr_advance_buffer>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	f7ff ff57 	bl	800d7a4 <ucdr_check_buffer_available_for>
 800d8f6:	b178      	cbz	r0, 800d918 <ucdr_advance_buffer+0x2c>
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	68a2      	ldr	r2, [r4, #8]
 800d8fc:	442b      	add	r3, r5
 800d8fe:	6123      	str	r3, [r4, #16]
 800d900:	2301      	movs	r3, #1
 800d902:	442a      	add	r2, r5
 800d904:	7563      	strb	r3, [r4, #21]
 800d906:	60a2      	str	r2, [r4, #8]
 800d908:	bd38      	pop	{r3, r4, r5, pc}
 800d90a:	68a2      	ldr	r2, [r4, #8]
 800d90c:	6923      	ldr	r3, [r4, #16]
 800d90e:	4402      	add	r2, r0
 800d910:	4403      	add	r3, r0
 800d912:	1a2d      	subs	r5, r5, r0
 800d914:	60a2      	str	r2, [r4, #8]
 800d916:	6123      	str	r3, [r4, #16]
 800d918:	4629      	mov	r1, r5
 800d91a:	2201      	movs	r2, #1
 800d91c:	4620      	mov	r0, r4
 800d91e:	f7ff ffc9 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 800d922:	2800      	cmp	r0, #0
 800d924:	d1f1      	bne.n	800d90a <ucdr_advance_buffer+0x1e>
 800d926:	2301      	movs	r3, #1
 800d928:	7563      	strb	r3, [r4, #21]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}

0800d92c <uxr_buffer_delete_entity>:
 800d92c:	b510      	push	{r4, lr}
 800d92e:	2300      	movs	r3, #0
 800d930:	b08e      	sub	sp, #56	@ 0x38
 800d932:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d936:	2303      	movs	r3, #3
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	2204      	movs	r2, #4
 800d93c:	ab06      	add	r3, sp, #24
 800d93e:	4604      	mov	r4, r0
 800d940:	9103      	str	r1, [sp, #12]
 800d942:	f001 fb43 	bl	800efcc <uxr_prepare_stream_to_write_submessage>
 800d946:	b918      	cbnz	r0, 800d950 <uxr_buffer_delete_entity+0x24>
 800d948:	4604      	mov	r4, r0
 800d94a:	4620      	mov	r0, r4
 800d94c:	b00e      	add	sp, #56	@ 0x38
 800d94e:	bd10      	pop	{r4, pc}
 800d950:	9902      	ldr	r1, [sp, #8]
 800d952:	aa05      	add	r2, sp, #20
 800d954:	4620      	mov	r0, r4
 800d956:	f001 fc6f 	bl	800f238 <uxr_init_base_object_request>
 800d95a:	a905      	add	r1, sp, #20
 800d95c:	4604      	mov	r4, r0
 800d95e:	a806      	add	r0, sp, #24
 800d960:	f003 fb52 	bl	8011008 <uxr_serialize_DELETE_Payload>
 800d964:	4620      	mov	r0, r4
 800d966:	b00e      	add	sp, #56	@ 0x38
 800d968:	bd10      	pop	{r4, pc}
 800d96a:	bf00      	nop

0800d96c <uxr_common_create_entity>:
 800d96c:	b510      	push	{r4, lr}
 800d96e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d972:	b08c      	sub	sp, #48	@ 0x30
 800d974:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d978:	f1bc 0f01 	cmp.w	ip, #1
 800d97c:	bf0c      	ite	eq
 800d97e:	f003 0201 	andeq.w	r2, r3, #1
 800d982:	2200      	movne	r2, #0
 800d984:	330e      	adds	r3, #14
 800d986:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d98a:	9101      	str	r1, [sp, #4]
 800d98c:	441a      	add	r2, r3
 800d98e:	2301      	movs	r3, #1
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	9903      	ldr	r1, [sp, #12]
 800d994:	ab04      	add	r3, sp, #16
 800d996:	b292      	uxth	r2, r2
 800d998:	4604      	mov	r4, r0
 800d99a:	f001 fb17 	bl	800efcc <uxr_prepare_stream_to_write_submessage>
 800d99e:	b918      	cbnz	r0, 800d9a8 <uxr_common_create_entity+0x3c>
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	b00c      	add	sp, #48	@ 0x30
 800d9a6:	bd10      	pop	{r4, pc}
 800d9a8:	9902      	ldr	r1, [sp, #8]
 800d9aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f001 fc43 	bl	800f238 <uxr_init_base_object_request>
 800d9b2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	a804      	add	r0, sp, #16
 800d9b8:	f003 fa82 	bl	8010ec0 <uxr_serialize_CREATE_Payload>
 800d9bc:	4620      	mov	r0, r4
 800d9be:	b00c      	add	sp, #48	@ 0x30
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	bf00      	nop

0800d9c4 <uxr_buffer_create_participant_bin>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d9ca:	ac11      	add	r4, sp, #68	@ 0x44
 800d9cc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d9d6:	7223      	strb	r3, [r4, #8]
 800d9d8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d9da:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d9de:	2201      	movs	r2, #1
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	7122      	strb	r2, [r4, #4]
 800d9e6:	f88d 1014 	strb.w	r1, [sp, #20]
 800d9ea:	b1cb      	cbz	r3, 800da20 <uxr_buffer_create_participant_bin+0x5c>
 800d9ec:	f88d 201c 	strb.w	r2, [sp, #28]
 800d9f0:	9308      	str	r3, [sp, #32]
 800d9f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9f6:	a915      	add	r1, sp, #84	@ 0x54
 800d9f8:	a809      	add	r0, sp, #36	@ 0x24
 800d9fa:	f7ff ff27 	bl	800d84c <ucdr_init_buffer>
 800d9fe:	a905      	add	r1, sp, #20
 800da00:	a809      	add	r0, sp, #36	@ 0x24
 800da02:	f002 fe3f 	bl	8010684 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800da06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da08:	9600      	str	r6, [sp, #0]
 800da0a:	9401      	str	r4, [sp, #4]
 800da0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da10:	60e3      	str	r3, [r4, #12]
 800da12:	4628      	mov	r0, r5
 800da14:	b29b      	uxth	r3, r3
 800da16:	f7ff ffa9 	bl	800d96c <uxr_common_create_entity>
 800da1a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	f88d 301c 	strb.w	r3, [sp, #28]
 800da24:	e7e5      	b.n	800d9f2 <uxr_buffer_create_participant_bin+0x2e>
 800da26:	bf00      	nop

0800da28 <uxr_buffer_create_topic_bin>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800da2e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800da32:	9105      	str	r1, [sp, #20]
 800da34:	4605      	mov	r5, r0
 800da36:	a997      	add	r1, sp, #604	@ 0x25c
 800da38:	4618      	mov	r0, r3
 800da3a:	2302      	movs	r3, #2
 800da3c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800da40:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800da44:	f000 fa58 	bl	800def8 <uxr_object_id_to_raw>
 800da48:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800da4a:	9306      	str	r3, [sp, #24]
 800da4c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800da4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da50:	2303      	movs	r3, #3
 800da52:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800da56:	2301      	movs	r3, #1
 800da58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da5c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800da60:	a917      	add	r1, sp, #92	@ 0x5c
 800da62:	2300      	movs	r3, #0
 800da64:	a80b      	add	r0, sp, #44	@ 0x2c
 800da66:	f88d 301c 	strb.w	r3, [sp, #28]
 800da6a:	f7ff feef 	bl	800d84c <ucdr_init_buffer>
 800da6e:	a906      	add	r1, sp, #24
 800da70:	a80b      	add	r0, sp, #44	@ 0x2c
 800da72:	f002 fe29 	bl	80106c8 <uxr_serialize_OBJK_Topic_Binary>
 800da76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da78:	9316      	str	r3, [sp, #88]	@ 0x58
 800da7a:	ac13      	add	r4, sp, #76	@ 0x4c
 800da7c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800da80:	9600      	str	r6, [sp, #0]
 800da82:	9401      	str	r4, [sp, #4]
 800da84:	b29b      	uxth	r3, r3
 800da86:	4628      	mov	r0, r5
 800da88:	f7ff ff70 	bl	800d96c <uxr_common_create_entity>
 800da8c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800da90:	bd70      	pop	{r4, r5, r6, pc}
 800da92:	bf00      	nop

0800da94 <uxr_buffer_create_publisher_bin>:
 800da94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da96:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800da9a:	4605      	mov	r5, r0
 800da9c:	9105      	str	r1, [sp, #20]
 800da9e:	4618      	mov	r0, r3
 800daa0:	2603      	movs	r6, #3
 800daa2:	a992      	add	r1, sp, #584	@ 0x248
 800daa4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800daa8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800daac:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800dab0:	f000 fa22 	bl	800def8 <uxr_object_id_to_raw>
 800dab4:	2300      	movs	r3, #0
 800dab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daba:	a912      	add	r1, sp, #72	@ 0x48
 800dabc:	a806      	add	r0, sp, #24
 800dabe:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800dac2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800dac6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800daca:	f7ff febf 	bl	800d84c <ucdr_init_buffer>
 800dace:	a993      	add	r1, sp, #588	@ 0x24c
 800dad0:	a806      	add	r0, sp, #24
 800dad2:	f002 fead 	bl	8010830 <uxr_serialize_OBJK_Publisher_Binary>
 800dad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dad8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dada:	ac0e      	add	r4, sp, #56	@ 0x38
 800dadc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dae0:	9700      	str	r7, [sp, #0]
 800dae2:	9401      	str	r4, [sp, #4]
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	4628      	mov	r0, r5
 800dae8:	f7ff ff40 	bl	800d96c <uxr_common_create_entity>
 800daec:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800daf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daf2:	bf00      	nop

0800daf4 <uxr_buffer_create_subscriber_bin>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800dafa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dafe:	9105      	str	r1, [sp, #20]
 800db00:	4605      	mov	r5, r0
 800db02:	a992      	add	r1, sp, #584	@ 0x248
 800db04:	4618      	mov	r0, r3
 800db06:	2304      	movs	r3, #4
 800db08:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800db0c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800db10:	f000 f9f2 	bl	800def8 <uxr_object_id_to_raw>
 800db14:	2300      	movs	r3, #0
 800db16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db1a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800db1e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800db22:	a912      	add	r1, sp, #72	@ 0x48
 800db24:	2303      	movs	r3, #3
 800db26:	a806      	add	r0, sp, #24
 800db28:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800db2c:	f7ff fe8e 	bl	800d84c <ucdr_init_buffer>
 800db30:	a993      	add	r1, sp, #588	@ 0x24c
 800db32:	a806      	add	r0, sp, #24
 800db34:	f002 ff2c 	bl	8010990 <uxr_serialize_OBJK_Subscriber_Binary>
 800db38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db3a:	9311      	str	r3, [sp, #68]	@ 0x44
 800db3c:	ac0e      	add	r4, sp, #56	@ 0x38
 800db3e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800db42:	9600      	str	r6, [sp, #0]
 800db44:	9401      	str	r4, [sp, #4]
 800db46:	b29b      	uxth	r3, r3
 800db48:	4628      	mov	r0, r5
 800db4a:	f7ff ff0f 	bl	800d96c <uxr_common_create_entity>
 800db4e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800db52:	bd70      	pop	{r4, r5, r6, pc}

0800db54 <uxr_buffer_create_datawriter_bin>:
 800db54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db58:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800db5c:	ac1d      	add	r4, sp, #116	@ 0x74
 800db5e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800db62:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800db66:	9105      	str	r1, [sp, #20]
 800db68:	4606      	mov	r6, r0
 800db6a:	a9a1      	add	r1, sp, #644	@ 0x284
 800db6c:	4618      	mov	r0, r3
 800db6e:	2305      	movs	r3, #5
 800db70:	7123      	strb	r3, [r4, #4]
 800db72:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800db76:	2703      	movs	r7, #3
 800db78:	f000 f9be 	bl	800def8 <uxr_object_id_to_raw>
 800db7c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800db7e:	7227      	strb	r7, [r4, #8]
 800db80:	a90e      	add	r1, sp, #56	@ 0x38
 800db82:	f000 f9b9 	bl	800def8 <uxr_object_id_to_raw>
 800db86:	2300      	movs	r3, #0
 800db88:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800db8c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800db90:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800db94:	3d00      	subs	r5, #0
 800db96:	bf18      	it	ne
 800db98:	2501      	movne	r5, #1
 800db9a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800db9e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800dba2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800dba6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dbaa:	2301      	movs	r3, #1
 800dbac:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800dbb0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800dbb4:	bb8a      	cbnz	r2, 800dc1a <uxr_buffer_create_datawriter_bin+0xc6>
 800dbb6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dbba:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800dbbe:	f04f 0c13 	mov.w	ip, #19
 800dbc2:	250b      	movs	r5, #11
 800dbc4:	2221      	movs	r2, #33	@ 0x21
 800dbc6:	2111      	movs	r1, #17
 800dbc8:	2009      	movs	r0, #9
 800dbca:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800dbce:	b923      	cbnz	r3, 800dbda <uxr_buffer_create_datawriter_bin+0x86>
 800dbd0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800dbd4:	4672      	mov	r2, lr
 800dbd6:	4661      	mov	r1, ip
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d025      	beq.n	800dc2e <uxr_buffer_create_datawriter_bin+0xda>
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d029      	beq.n	800dc3a <uxr_buffer_create_datawriter_bin+0xe6>
 800dbe6:	b32b      	cbz	r3, 800dc34 <uxr_buffer_create_datawriter_bin+0xe0>
 800dbe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dbec:	a921      	add	r1, sp, #132	@ 0x84
 800dbee:	a806      	add	r0, sp, #24
 800dbf0:	f7ff fe2c 	bl	800d84c <ucdr_init_buffer>
 800dbf4:	a90e      	add	r1, sp, #56	@ 0x38
 800dbf6:	a806      	add	r0, sp, #24
 800dbf8:	f002 ff7c 	bl	8010af4 <uxr_serialize_OBJK_DataWriter_Binary>
 800dbfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbfe:	f8cd 8000 	str.w	r8, [sp]
 800dc02:	9401      	str	r4, [sp, #4]
 800dc04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dc08:	60e3      	str	r3, [r4, #12]
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	f7ff fead 	bl	800d96c <uxr_common_create_entity>
 800dc12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800dc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800dc1e:	f04f 0c12 	mov.w	ip, #18
 800dc22:	250a      	movs	r5, #10
 800dc24:	2220      	movs	r2, #32
 800dc26:	2110      	movs	r1, #16
 800dc28:	2008      	movs	r0, #8
 800dc2a:	2702      	movs	r7, #2
 800dc2c:	e7cd      	b.n	800dbca <uxr_buffer_create_datawriter_bin+0x76>
 800dc2e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800dc32:	e7d9      	b.n	800dbe8 <uxr_buffer_create_datawriter_bin+0x94>
 800dc34:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800dc38:	e7d6      	b.n	800dbe8 <uxr_buffer_create_datawriter_bin+0x94>
 800dc3a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800dc3e:	e7d3      	b.n	800dbe8 <uxr_buffer_create_datawriter_bin+0x94>

0800dc40 <uxr_buffer_create_datareader_bin>:
 800dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc44:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dc48:	ac1f      	add	r4, sp, #124	@ 0x7c
 800dc4a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dc4e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800dc52:	9105      	str	r1, [sp, #20]
 800dc54:	4606      	mov	r6, r0
 800dc56:	a9a3      	add	r1, sp, #652	@ 0x28c
 800dc58:	4618      	mov	r0, r3
 800dc5a:	2306      	movs	r3, #6
 800dc5c:	7123      	strb	r3, [r4, #4]
 800dc5e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800dc62:	2703      	movs	r7, #3
 800dc64:	f000 f948 	bl	800def8 <uxr_object_id_to_raw>
 800dc68:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800dc6a:	7227      	strb	r7, [r4, #8]
 800dc6c:	a90e      	add	r1, sp, #56	@ 0x38
 800dc6e:	f000 f943 	bl	800def8 <uxr_object_id_to_raw>
 800dc72:	2300      	movs	r3, #0
 800dc74:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800dc78:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800dc7c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800dc80:	3d00      	subs	r5, #0
 800dc82:	bf18      	it	ne
 800dc84:	2501      	movne	r5, #1
 800dc86:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800dc8a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800dc8e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800dc92:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800dc96:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800dca0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800dca4:	bb8a      	cbnz	r2, 800dd0a <uxr_buffer_create_datareader_bin+0xca>
 800dca6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dcaa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800dcae:	f04f 0c13 	mov.w	ip, #19
 800dcb2:	250b      	movs	r5, #11
 800dcb4:	2221      	movs	r2, #33	@ 0x21
 800dcb6:	2111      	movs	r1, #17
 800dcb8:	2009      	movs	r0, #9
 800dcba:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800dcbe:	b923      	cbnz	r3, 800dcca <uxr_buffer_create_datareader_bin+0x8a>
 800dcc0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800dcc4:	4672      	mov	r2, lr
 800dcc6:	4661      	mov	r1, ip
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d025      	beq.n	800dd1e <uxr_buffer_create_datareader_bin+0xde>
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d029      	beq.n	800dd2a <uxr_buffer_create_datareader_bin+0xea>
 800dcd6:	b32b      	cbz	r3, 800dd24 <uxr_buffer_create_datareader_bin+0xe4>
 800dcd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcdc:	a923      	add	r1, sp, #140	@ 0x8c
 800dcde:	a806      	add	r0, sp, #24
 800dce0:	f7ff fdb4 	bl	800d84c <ucdr_init_buffer>
 800dce4:	a90e      	add	r1, sp, #56	@ 0x38
 800dce6:	a806      	add	r0, sp, #24
 800dce8:	f002 fec8 	bl	8010a7c <uxr_serialize_OBJK_DataReader_Binary>
 800dcec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcee:	f8cd 8000 	str.w	r8, [sp]
 800dcf2:	9401      	str	r4, [sp, #4]
 800dcf4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dcf8:	60e3      	str	r3, [r4, #12]
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	f7ff fe35 	bl	800d96c <uxr_common_create_entity>
 800dd02:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800dd0e:	f04f 0c12 	mov.w	ip, #18
 800dd12:	250a      	movs	r5, #10
 800dd14:	2220      	movs	r2, #32
 800dd16:	2110      	movs	r1, #16
 800dd18:	2008      	movs	r0, #8
 800dd1a:	2702      	movs	r7, #2
 800dd1c:	e7cd      	b.n	800dcba <uxr_buffer_create_datareader_bin+0x7a>
 800dd1e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800dd22:	e7d9      	b.n	800dcd8 <uxr_buffer_create_datareader_bin+0x98>
 800dd24:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800dd28:	e7d6      	b.n	800dcd8 <uxr_buffer_create_datareader_bin+0x98>
 800dd2a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800dd2e:	e7d3      	b.n	800dcd8 <uxr_buffer_create_datareader_bin+0x98>

0800dd30 <get_custom_error>:
 800dd30:	4b01      	ldr	r3, [pc, #4]	@ (800dd38 <get_custom_error+0x8>)
 800dd32:	7818      	ldrb	r0, [r3, #0]
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	2000ac9c 	.word	0x2000ac9c

0800dd3c <recv_custom_msg>:
 800dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd40:	4693      	mov	fp, r2
 800dd42:	b089      	sub	sp, #36	@ 0x24
 800dd44:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800dd48:	9305      	str	r3, [sp, #20]
 800dd4a:	468a      	mov	sl, r1
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	f88d 101e 	strb.w	r1, [sp, #30]
 800dd54:	b322      	cbz	r2, 800dda0 <recv_custom_msg+0x64>
 800dd56:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800dd5a:	f10d 081f 	add.w	r8, sp, #31
 800dd5e:	af05      	add	r7, sp, #20
 800dd60:	f10d 061e 	add.w	r6, sp, #30
 800dd64:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800dd68:	e002      	b.n	800dd70 <recv_custom_msg+0x34>
 800dd6a:	9b05      	ldr	r3, [sp, #20]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	dd0f      	ble.n	800dd90 <recv_custom_msg+0x54>
 800dd70:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800dd74:	4623      	mov	r3, r4
 800dd76:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800dd7a:	e9cd 5600 	strd	r5, r6, [sp]
 800dd7e:	4622      	mov	r2, r4
 800dd80:	4648      	mov	r0, r9
 800dd82:	f001 fc87 	bl	800f694 <uxr_read_framed_msg>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d0ef      	beq.n	800dd6a <recv_custom_msg+0x2e>
 800dd8a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dd8e:	b1b3      	cbz	r3, 800ddbe <recv_custom_msg+0x82>
 800dd90:	4b0f      	ldr	r3, [pc, #60]	@ (800ddd0 <recv_custom_msg+0x94>)
 800dd92:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800dd96:	701a      	strb	r2, [r3, #0]
 800dd98:	2000      	movs	r0, #0
 800dd9a:	b009      	add	sp, #36	@ 0x24
 800dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda0:	f10d 021f 	add.w	r2, sp, #31
 800dda4:	9200      	str	r2, [sp, #0]
 800dda6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ddaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddae:	4601      	mov	r1, r0
 800ddb0:	47a8      	blx	r5
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d0ec      	beq.n	800dd90 <recv_custom_msg+0x54>
 800ddb6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1e8      	bne.n	800dd90 <recv_custom_msg+0x54>
 800ddbe:	f8cb 0000 	str.w	r0, [fp]
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	f8ca 4000 	str.w	r4, [sl]
 800ddc8:	b009      	add	sp, #36	@ 0x24
 800ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddce:	bf00      	nop
 800ddd0:	2000ac9c 	.word	0x2000ac9c

0800ddd4 <send_custom_msg>:
 800ddd4:	b530      	push	{r4, r5, lr}
 800ddd6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800ddda:	b087      	sub	sp, #28
 800dddc:	4615      	mov	r5, r2
 800ddde:	b974      	cbnz	r4, 800ddfe <send_custom_msg+0x2a>
 800dde0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800dde4:	f10d 0317 	add.w	r3, sp, #23
 800dde8:	47a0      	blx	r4
 800ddea:	b108      	cbz	r0, 800ddf0 <send_custom_msg+0x1c>
 800ddec:	42a8      	cmp	r0, r5
 800ddee:	d015      	beq.n	800de1c <send_custom_msg+0x48>
 800ddf0:	4b0c      	ldr	r3, [pc, #48]	@ (800de24 <send_custom_msg+0x50>)
 800ddf2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ddf6:	701a      	strb	r2, [r3, #0]
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	b007      	add	sp, #28
 800ddfc:	bd30      	pop	{r4, r5, pc}
 800ddfe:	460b      	mov	r3, r1
 800de00:	2200      	movs	r2, #0
 800de02:	f10d 0117 	add.w	r1, sp, #23
 800de06:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800de0a:	4602      	mov	r2, r0
 800de0c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800de10:	9500      	str	r5, [sp, #0]
 800de12:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800de16:	f001 fa45 	bl	800f2a4 <uxr_write_framed_msg>
 800de1a:	e7e6      	b.n	800ddea <send_custom_msg+0x16>
 800de1c:	2001      	movs	r0, #1
 800de1e:	b007      	add	sp, #28
 800de20:	bd30      	pop	{r4, r5, pc}
 800de22:	bf00      	nop
 800de24:	2000ac9c 	.word	0x2000ac9c

0800de28 <uxr_set_custom_transport_callbacks>:
 800de28:	b410      	push	{r4}
 800de2a:	9c01      	ldr	r4, [sp, #4]
 800de2c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800de30:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800de34:	9b02      	ldr	r3, [sp, #8]
 800de36:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800de3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de3e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800de42:	4770      	bx	lr

0800de44 <uxr_init_custom_transport>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800de4a:	b303      	cbz	r3, 800de8e <uxr_init_custom_transport+0x4a>
 800de4c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800de50:	4604      	mov	r4, r0
 800de52:	b1e2      	cbz	r2, 800de8e <uxr_init_custom_transport+0x4a>
 800de54:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800de58:	b1ca      	cbz	r2, 800de8e <uxr_init_custom_transport+0x4a>
 800de5a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800de5e:	b1b2      	cbz	r2, 800de8e <uxr_init_custom_transport+0x4a>
 800de60:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800de64:	4798      	blx	r3
 800de66:	4605      	mov	r5, r0
 800de68:	b188      	cbz	r0, 800de8e <uxr_init_custom_transport+0x4a>
 800de6a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800de6e:	b98b      	cbnz	r3, 800de94 <uxr_init_custom_transport+0x50>
 800de70:	490b      	ldr	r1, [pc, #44]	@ (800dea0 <uxr_init_custom_transport+0x5c>)
 800de72:	4b0c      	ldr	r3, [pc, #48]	@ (800dea4 <uxr_init_custom_transport+0x60>)
 800de74:	4a0c      	ldr	r2, [pc, #48]	@ (800dea8 <uxr_init_custom_transport+0x64>)
 800de76:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800de7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de7e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800de82:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800de86:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800de8a:	4628      	mov	r0, r5
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
 800de8e:	2500      	movs	r5, #0
 800de90:	4628      	mov	r0, r5
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	2100      	movs	r1, #0
 800de96:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800de9a:	f001 f9fd 	bl	800f298 <uxr_init_framing_io>
 800de9e:	e7e7      	b.n	800de70 <uxr_init_custom_transport+0x2c>
 800dea0:	0800ddd5 	.word	0x0800ddd5
 800dea4:	0800dd3d 	.word	0x0800dd3d
 800dea8:	0800dd31 	.word	0x0800dd31

0800deac <uxr_close_custom_transport>:
 800deac:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800deb0:	4718      	bx	r3
 800deb2:	bf00      	nop

0800deb4 <uxr_object_id>:
 800deb4:	b082      	sub	sp, #8
 800deb6:	2300      	movs	r3, #0
 800deb8:	f88d 1006 	strb.w	r1, [sp, #6]
 800debc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dec0:	f360 030f 	bfi	r3, r0, #0, #16
 800dec4:	f362 431f 	bfi	r3, r2, #16, #16
 800dec8:	4618      	mov	r0, r3
 800deca:	b002      	add	sp, #8
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop

0800ded0 <uxr_object_id_from_raw>:
 800ded0:	7843      	ldrb	r3, [r0, #1]
 800ded2:	7801      	ldrb	r1, [r0, #0]
 800ded4:	b082      	sub	sp, #8
 800ded6:	f003 020f 	and.w	r2, r3, #15
 800deda:	f88d 2006 	strb.w	r2, [sp, #6]
 800dede:	091b      	lsrs	r3, r3, #4
 800dee0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dee4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800dee8:	2000      	movs	r0, #0
 800deea:	f363 000f 	bfi	r0, r3, #0, #16
 800deee:	f362 401f 	bfi	r0, r2, #16, #16
 800def2:	b002      	add	sp, #8
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop

0800def8 <uxr_object_id_to_raw>:
 800def8:	4602      	mov	r2, r0
 800defa:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800defe:	b082      	sub	sp, #8
 800df00:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800df04:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800df08:	f881 c000 	strb.w	ip, [r1]
 800df0c:	7048      	strb	r0, [r1, #1]
 800df0e:	b002      	add	sp, #8
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop

0800df14 <uxr_buffer_request_data>:
 800df14:	b530      	push	{r4, r5, lr}
 800df16:	b095      	sub	sp, #84	@ 0x54
 800df18:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800df1c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800df1e:	9303      	str	r3, [sp, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	2d00      	cmp	r5, #0
 800df24:	bf14      	ite	ne
 800df26:	2101      	movne	r1, #1
 800df28:	4611      	moveq	r1, r2
 800df2a:	4604      	mov	r4, r0
 800df2c:	f88d 301c 	strb.w	r3, [sp, #28]
 800df30:	f88d 201d 	strb.w	r2, [sp, #29]
 800df34:	f88d 201e 	strb.w	r2, [sp, #30]
 800df38:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800df3c:	d021      	beq.n	800df82 <uxr_buffer_request_data+0x6e>
 800df3e:	682a      	ldr	r2, [r5, #0]
 800df40:	686b      	ldr	r3, [r5, #4]
 800df42:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800df46:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800df4a:	2210      	movs	r2, #16
 800df4c:	2308      	movs	r3, #8
 800df4e:	2100      	movs	r1, #0
 800df50:	e9cd 3100 	strd	r3, r1, [sp]
 800df54:	4620      	mov	r0, r4
 800df56:	9905      	ldr	r1, [sp, #20]
 800df58:	ab0c      	add	r3, sp, #48	@ 0x30
 800df5a:	f001 f837 	bl	800efcc <uxr_prepare_stream_to_write_submessage>
 800df5e:	b918      	cbnz	r0, 800df68 <uxr_buffer_request_data+0x54>
 800df60:	4604      	mov	r4, r0
 800df62:	4620      	mov	r0, r4
 800df64:	b015      	add	sp, #84	@ 0x54
 800df66:	bd30      	pop	{r4, r5, pc}
 800df68:	9904      	ldr	r1, [sp, #16]
 800df6a:	aa06      	add	r2, sp, #24
 800df6c:	4620      	mov	r0, r4
 800df6e:	f001 f963 	bl	800f238 <uxr_init_base_object_request>
 800df72:	a906      	add	r1, sp, #24
 800df74:	4604      	mov	r4, r0
 800df76:	a80c      	add	r0, sp, #48	@ 0x30
 800df78:	f003 f8f0 	bl	801115c <uxr_serialize_READ_DATA_Payload>
 800df7c:	4620      	mov	r0, r4
 800df7e:	b015      	add	sp, #84	@ 0x54
 800df80:	bd30      	pop	{r4, r5, pc}
 800df82:	2208      	movs	r2, #8
 800df84:	e7e2      	b.n	800df4c <uxr_buffer_request_data+0x38>
 800df86:	bf00      	nop

0800df88 <uxr_buffer_cancel_data>:
 800df88:	b510      	push	{r4, lr}
 800df8a:	b094      	sub	sp, #80	@ 0x50
 800df8c:	2300      	movs	r3, #0
 800df8e:	9202      	str	r2, [sp, #8]
 800df90:	9205      	str	r2, [sp, #20]
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	2201      	movs	r2, #1
 800df96:	f8ad 301c 	strh.w	r3, [sp, #28]
 800df9a:	f88d 301e 	strb.w	r3, [sp, #30]
 800df9e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800dfa2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800dfa6:	2308      	movs	r3, #8
 800dfa8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	2210      	movs	r2, #16
 800dfb0:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	9103      	str	r1, [sp, #12]
 800dfb6:	f001 f809 	bl	800efcc <uxr_prepare_stream_to_write_submessage>
 800dfba:	b918      	cbnz	r0, 800dfc4 <uxr_buffer_cancel_data+0x3c>
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	b014      	add	sp, #80	@ 0x50
 800dfc2:	bd10      	pop	{r4, pc}
 800dfc4:	9905      	ldr	r1, [sp, #20]
 800dfc6:	aa06      	add	r2, sp, #24
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f001 f935 	bl	800f238 <uxr_init_base_object_request>
 800dfce:	a906      	add	r1, sp, #24
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	a80c      	add	r0, sp, #48	@ 0x30
 800dfd4:	f003 f8c2 	bl	801115c <uxr_serialize_READ_DATA_Payload>
 800dfd8:	4620      	mov	r0, r4
 800dfda:	b014      	add	sp, #80	@ 0x50
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	bf00      	nop

0800dfe0 <read_submessage_format>:
 800dfe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe4:	b095      	sub	sp, #84	@ 0x54
 800dfe6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800dfea:	b113      	cbz	r3, 800dff2 <read_submessage_format+0x12>
 800dfec:	b015      	add	sp, #84	@ 0x54
 800dfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dff2:	460c      	mov	r4, r1
 800dff4:	4615      	mov	r5, r2
 800dff6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800dffa:	4607      	mov	r7, r0
 800dffc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800dffe:	9004      	str	r0, [sp, #16]
 800e000:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e002:	9005      	str	r0, [sp, #20]
 800e004:	1a52      	subs	r2, r2, r1
 800e006:	a80c      	add	r0, sp, #48	@ 0x30
 800e008:	4699      	mov	r9, r3
 800e00a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e00e:	f7ff fc1d 	bl	800d84c <ucdr_init_buffer>
 800e012:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e016:	a80c      	add	r0, sp, #48	@ 0x30
 800e018:	f7ff fbec 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 800e01c:	69e2      	ldr	r2, [r4, #28]
 800e01e:	b19a      	cbz	r2, 800e048 <read_submessage_format+0x68>
 800e020:	f1b8 0f07 	cmp.w	r8, #7
 800e024:	f882 9014 	strb.w	r9, [r2, #20]
 800e028:	d040      	beq.n	800e0ac <read_submessage_format+0xcc>
 800e02a:	f1b8 0f08 	cmp.w	r8, #8
 800e02e:	d02e      	beq.n	800e08e <read_submessage_format+0xae>
 800e030:	f1b8 0f06 	cmp.w	r8, #6
 800e034:	d011      	beq.n	800e05a <read_submessage_format+0x7a>
 800e036:	2301      	movs	r3, #1
 800e038:	7513      	strb	r3, [r2, #20]
 800e03a:	4629      	mov	r1, r5
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7ff fc55 	bl	800d8ec <ucdr_advance_buffer>
 800e042:	b015      	add	sp, #84	@ 0x54
 800e044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e048:	f1b8 0f07 	cmp.w	r8, #7
 800e04c:	d02e      	beq.n	800e0ac <read_submessage_format+0xcc>
 800e04e:	f1b8 0f08 	cmp.w	r8, #8
 800e052:	d01c      	beq.n	800e08e <read_submessage_format+0xae>
 800e054:	f1b8 0f06 	cmp.w	r8, #6
 800e058:	d1ef      	bne.n	800e03a <read_submessage_format+0x5a>
 800e05a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e05e:	f1b8 0f00 	cmp.w	r8, #0
 800e062:	d011      	beq.n	800e088 <read_submessage_format+0xa8>
 800e064:	ab0c      	add	r3, sp, #48	@ 0x30
 800e066:	e9cd 3500 	strd	r3, r5, [sp]
 800e06a:	2306      	movs	r3, #6
 800e06c:	f88d 3016 	strb.w	r3, [sp, #22]
 800e070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e074:	9302      	str	r3, [sp, #8]
 800e076:	4632      	mov	r2, r6
 800e078:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e07c:	4638      	mov	r0, r7
 800e07e:	47c0      	blx	r8
 800e080:	2301      	movs	r3, #1
 800e082:	69e2      	ldr	r2, [r4, #28]
 800e084:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e088:	2a00      	cmp	r2, #0
 800e08a:	d1d4      	bne.n	800e036 <read_submessage_format+0x56>
 800e08c:	e7d5      	b.n	800e03a <read_submessage_format+0x5a>
 800e08e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e092:	2b00      	cmp	r3, #0
 800e094:	d0f8      	beq.n	800e088 <read_submessage_format+0xa8>
 800e096:	a906      	add	r1, sp, #24
 800e098:	a80c      	add	r0, sp, #48	@ 0x30
 800e09a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e09e:	f003 f923 	bl	80112e8 <uxr_deserialize_SampleIdentity>
 800e0a2:	b9a0      	cbnz	r0, 800e0ce <read_submessage_format+0xee>
 800e0a4:	69e2      	ldr	r2, [r4, #28]
 800e0a6:	2a00      	cmp	r2, #0
 800e0a8:	d1c5      	bne.n	800e036 <read_submessage_format+0x56>
 800e0aa:	e7c6      	b.n	800e03a <read_submessage_format+0x5a>
 800e0ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0b0:	b13b      	cbz	r3, 800e0c2 <read_submessage_format+0xe2>
 800e0b2:	a906      	add	r1, sp, #24
 800e0b4:	a80c      	add	r0, sp, #48	@ 0x30
 800e0b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e0ba:	f002 fde9 	bl	8010c90 <uxr_deserialize_BaseObjectRequest>
 800e0be:	bb60      	cbnz	r0, 800e11a <read_submessage_format+0x13a>
 800e0c0:	69e2      	ldr	r2, [r4, #28]
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	442b      	add	r3, r5
 800e0c6:	60a3      	str	r3, [r4, #8]
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	d1b4      	bne.n	800e036 <read_submessage_format+0x56>
 800e0cc:	e7b5      	b.n	800e03a <read_submessage_format+0x5a>
 800e0ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e0d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0d4:	1a52      	subs	r2, r2, r1
 800e0d6:	eba8 0803 	sub.w	r8, r8, r3
 800e0da:	a80c      	add	r0, sp, #48	@ 0x30
 800e0dc:	f7ff fbb6 	bl	800d84c <ucdr_init_buffer>
 800e0e0:	44a8      	add	r8, r5
 800e0e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e0e6:	a80c      	add	r0, sp, #48	@ 0x30
 800e0e8:	f7ff fb84 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 800e0ec:	fa1f f888 	uxth.w	r8, r8
 800e0f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	f8cd 8004 	str.w	r8, [sp, #4]
 800e0f8:	2108      	movs	r1, #8
 800e0fa:	f88d 1016 	strb.w	r1, [sp, #22]
 800e0fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e102:	9102      	str	r1, [sp, #8]
 800e104:	ab06      	add	r3, sp, #24
 800e106:	4632      	mov	r2, r6
 800e108:	9905      	ldr	r1, [sp, #20]
 800e10a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e10e:	4638      	mov	r0, r7
 800e110:	47b0      	blx	r6
 800e112:	2301      	movs	r3, #1
 800e114:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e118:	e7c4      	b.n	800e0a4 <read_submessage_format+0xc4>
 800e11a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e11e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e120:	1a52      	subs	r2, r2, r1
 800e122:	a80c      	add	r0, sp, #48	@ 0x30
 800e124:	eba8 0803 	sub.w	r8, r8, r3
 800e128:	f7ff fb90 	bl	800d84c <ucdr_init_buffer>
 800e12c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e130:	a80c      	add	r0, sp, #48	@ 0x30
 800e132:	f7ff fb5f 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 800e136:	ab0c      	add	r3, sp, #48	@ 0x30
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e13e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e142:	44a8      	add	r8, r5
 800e144:	fa1f f888 	uxth.w	r8, r8
 800e148:	f8cd 8004 	str.w	r8, [sp, #4]
 800e14c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e150:	2107      	movs	r1, #7
 800e152:	f88d 1016 	strb.w	r1, [sp, #22]
 800e156:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e15a:	9102      	str	r1, [sp, #8]
 800e15c:	4632      	mov	r2, r6
 800e15e:	b29b      	uxth	r3, r3
 800e160:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e164:	9905      	ldr	r1, [sp, #20]
 800e166:	4638      	mov	r0, r7
 800e168:	47b0      	blx	r6
 800e16a:	2301      	movs	r3, #1
 800e16c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e170:	e7a6      	b.n	800e0c0 <read_submessage_format+0xe0>
 800e172:	bf00      	nop

0800e174 <on_get_fragmentation_info>:
 800e174:	b500      	push	{lr}
 800e176:	b08b      	sub	sp, #44	@ 0x2c
 800e178:	4601      	mov	r1, r0
 800e17a:	2204      	movs	r2, #4
 800e17c:	a802      	add	r0, sp, #8
 800e17e:	f7ff fb65 	bl	800d84c <ucdr_init_buffer>
 800e182:	f10d 0305 	add.w	r3, sp, #5
 800e186:	f10d 0206 	add.w	r2, sp, #6
 800e18a:	a901      	add	r1, sp, #4
 800e18c:	a802      	add	r0, sp, #8
 800e18e:	f001 fe67 	bl	800fe60 <uxr_read_submessage_header>
 800e192:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e196:	2b0d      	cmp	r3, #13
 800e198:	d003      	beq.n	800e1a2 <on_get_fragmentation_info+0x2e>
 800e19a:	2000      	movs	r0, #0
 800e19c:	b00b      	add	sp, #44	@ 0x2c
 800e19e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e1a6:	f013 0f02 	tst.w	r3, #2
 800e1aa:	bf14      	ite	ne
 800e1ac:	2002      	movne	r0, #2
 800e1ae:	2001      	moveq	r0, #1
 800e1b0:	b00b      	add	sp, #44	@ 0x2c
 800e1b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1b6:	bf00      	nop

0800e1b8 <read_submessage_get_info>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	2500      	movs	r5, #0
 800e1bc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e1c6:	460e      	mov	r6, r1
 800e1c8:	a810      	add	r0, sp, #64	@ 0x40
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e1d0:	f008 ff20 	bl	8017014 <memset>
 800e1d4:	a903      	add	r1, sp, #12
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f002 ff02 	bl	8010fe0 <uxr_deserialize_GET_INFO_Payload>
 800e1dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e1e0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f001 f81f 	bl	800f228 <uxr_session_header_offset>
 800e1ea:	462b      	mov	r3, r5
 800e1ec:	9000      	str	r0, [sp, #0]
 800e1ee:	220c      	movs	r2, #12
 800e1f0:	a905      	add	r1, sp, #20
 800e1f2:	a808      	add	r0, sp, #32
 800e1f4:	f7ff fb18 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800e1f8:	a910      	add	r1, sp, #64	@ 0x40
 800e1fa:	a808      	add	r0, sp, #32
 800e1fc:	f002 ff62 	bl	80110c4 <uxr_serialize_INFO_Payload>
 800e200:	9b08      	ldr	r3, [sp, #32]
 800e202:	462a      	mov	r2, r5
 800e204:	4629      	mov	r1, r5
 800e206:	4620      	mov	r0, r4
 800e208:	f000 ffb8 	bl	800f17c <uxr_stamp_session_header>
 800e20c:	a808      	add	r0, sp, #32
 800e20e:	f7ff fb49 	bl	800d8a4 <ucdr_buffer_length>
 800e212:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e214:	4602      	mov	r2, r0
 800e216:	a905      	add	r1, sp, #20
 800e218:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e21c:	47a0      	blx	r4
 800e21e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e222:	bd70      	pop	{r4, r5, r6, pc}

0800e224 <write_submessage_acknack.isra.0>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	b092      	sub	sp, #72	@ 0x48
 800e228:	4605      	mov	r5, r0
 800e22a:	460e      	mov	r6, r1
 800e22c:	4614      	mov	r4, r2
 800e22e:	f000 fffb 	bl	800f228 <uxr_session_header_offset>
 800e232:	a905      	add	r1, sp, #20
 800e234:	9000      	str	r0, [sp, #0]
 800e236:	2300      	movs	r3, #0
 800e238:	a80a      	add	r0, sp, #40	@ 0x28
 800e23a:	2211      	movs	r2, #17
 800e23c:	f7ff faf4 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800e240:	2218      	movs	r2, #24
 800e242:	fb02 5404 	mla	r4, r2, r4, r5
 800e246:	2300      	movs	r3, #0
 800e248:	2205      	movs	r2, #5
 800e24a:	3450      	adds	r4, #80	@ 0x50
 800e24c:	210a      	movs	r1, #10
 800e24e:	a80a      	add	r0, sp, #40	@ 0x28
 800e250:	f001 fdec 	bl	800fe2c <uxr_buffer_submessage_header>
 800e254:	a903      	add	r1, sp, #12
 800e256:	4620      	mov	r0, r4
 800e258:	f007 fb4e 	bl	80158f8 <uxr_compute_acknack>
 800e25c:	ba40      	rev16	r0, r0
 800e25e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e262:	a903      	add	r1, sp, #12
 800e264:	a80a      	add	r0, sp, #40	@ 0x28
 800e266:	f88d 6010 	strb.w	r6, [sp, #16]
 800e26a:	f002 ff9b 	bl	80111a4 <uxr_serialize_ACKNACK_Payload>
 800e26e:	2200      	movs	r2, #0
 800e270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e272:	4611      	mov	r1, r2
 800e274:	4628      	mov	r0, r5
 800e276:	f000 ff81 	bl	800f17c <uxr_stamp_session_header>
 800e27a:	a80a      	add	r0, sp, #40	@ 0x28
 800e27c:	f7ff fb12 	bl	800d8a4 <ucdr_buffer_length>
 800e280:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e282:	4602      	mov	r2, r0
 800e284:	a905      	add	r1, sp, #20
 800e286:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e28a:	47a0      	blx	r4
 800e28c:	b012      	add	sp, #72	@ 0x48
 800e28e:	bd70      	pop	{r4, r5, r6, pc}

0800e290 <uxr_init_session>:
 800e290:	b510      	push	{r4, lr}
 800e292:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e2c8 <uxr_init_session+0x38>
 800e296:	2300      	movs	r3, #0
 800e298:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e29c:	4604      	mov	r4, r0
 800e29e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e2a2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e2a6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e2aa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e2ae:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e2b2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e2b6:	2181      	movs	r1, #129	@ 0x81
 800e2b8:	f000 fecc 	bl	800f054 <uxr_init_session_info>
 800e2bc:	f104 0008 	add.w	r0, r4, #8
 800e2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c4:	f001 bcce 	b.w	800fc64 <uxr_init_stream_storage>
	...

0800e2d0 <uxr_set_status_callback>:
 800e2d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop

0800e2d8 <uxr_set_topic_callback>:
 800e2d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop

0800e2e0 <uxr_set_request_callback>:
 800e2e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop

0800e2e8 <uxr_set_reply_callback>:
 800e2e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop

0800e2f0 <uxr_create_output_best_effort_stream>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	e9cd 2100 	strd	r2, r1, [sp]
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	f000 ff95 	bl	800f228 <uxr_session_header_offset>
 800e2fe:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e302:	4603      	mov	r3, r0
 800e304:	f104 0008 	add.w	r0, r4, #8
 800e308:	b004      	add	sp, #16
 800e30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e30e:	f001 bcf3 	b.w	800fcf8 <uxr_add_output_best_effort_buffer>
 800e312:	bf00      	nop

0800e314 <uxr_create_output_reliable_stream>:
 800e314:	b510      	push	{r4, lr}
 800e316:	b088      	sub	sp, #32
 800e318:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e31c:	4604      	mov	r4, r0
 800e31e:	9303      	str	r3, [sp, #12]
 800e320:	f000 ff82 	bl	800f228 <uxr_session_header_offset>
 800e324:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e328:	9000      	str	r0, [sp, #0]
 800e32a:	9905      	ldr	r1, [sp, #20]
 800e32c:	f104 0008 	add.w	r0, r4, #8
 800e330:	f001 fcf6 	bl	800fd20 <uxr_add_output_reliable_buffer>
 800e334:	2200      	movs	r2, #0
 800e336:	b2c3      	uxtb	r3, r0
 800e338:	f363 0207 	bfi	r2, r3, #0, #8
 800e33c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e340:	f363 220f 	bfi	r2, r3, #8, #8
 800e344:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e348:	f363 4217 	bfi	r2, r3, #16, #8
 800e34c:	0e03      	lsrs	r3, r0, #24
 800e34e:	f363 621f 	bfi	r2, r3, #24, #8
 800e352:	4610      	mov	r0, r2
 800e354:	b008      	add	sp, #32
 800e356:	bd10      	pop	{r4, pc}

0800e358 <uxr_create_input_best_effort_stream>:
 800e358:	b082      	sub	sp, #8
 800e35a:	3008      	adds	r0, #8
 800e35c:	b002      	add	sp, #8
 800e35e:	f001 bcf9 	b.w	800fd54 <uxr_add_input_best_effort_buffer>
 800e362:	bf00      	nop

0800e364 <uxr_create_input_reliable_stream>:
 800e364:	b510      	push	{r4, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	4c0b      	ldr	r4, [pc, #44]	@ (800e398 <uxr_create_input_reliable_stream+0x34>)
 800e36a:	9400      	str	r4, [sp, #0]
 800e36c:	3008      	adds	r0, #8
 800e36e:	f001 fd07 	bl	800fd80 <uxr_add_input_reliable_buffer>
 800e372:	2200      	movs	r2, #0
 800e374:	b2c3      	uxtb	r3, r0
 800e376:	f363 0207 	bfi	r2, r3, #0, #8
 800e37a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e37e:	f363 220f 	bfi	r2, r3, #8, #8
 800e382:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e386:	f363 4217 	bfi	r2, r3, #16, #8
 800e38a:	0e03      	lsrs	r3, r0, #24
 800e38c:	f363 621f 	bfi	r2, r3, #24, #8
 800e390:	4610      	mov	r0, r2
 800e392:	b004      	add	sp, #16
 800e394:	bd10      	pop	{r4, pc}
 800e396:	bf00      	nop
 800e398:	0800e175 	.word	0x0800e175

0800e39c <uxr_epoch_nanos>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	4604      	mov	r4, r0
 800e3a0:	f001 fda4 	bl	800feec <uxr_nanos>
 800e3a4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e3a8:	1ac0      	subs	r0, r0, r3
 800e3aa:	eb61 0102 	sbc.w	r1, r1, r2
 800e3ae:	bd10      	pop	{r4, pc}

0800e3b0 <uxr_flash_output_streams>:
 800e3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	7e03      	ldrb	r3, [r0, #24]
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d035      	beq.n	800e42a <uxr_flash_output_streams+0x7a>
 800e3be:	f04f 0900 	mov.w	r9, #0
 800e3c2:	4648      	mov	r0, r9
 800e3c4:	f10d 0802 	add.w	r8, sp, #2
 800e3c8:	af03      	add	r7, sp, #12
 800e3ca:	ae02      	add	r6, sp, #8
 800e3cc:	e006      	b.n	800e3dc <uxr_flash_output_streams+0x2c>
 800e3ce:	7e23      	ldrb	r3, [r4, #24]
 800e3d0:	f109 0901 	add.w	r9, r9, #1
 800e3d4:	fa5f f089 	uxtb.w	r0, r9
 800e3d8:	4283      	cmp	r3, r0
 800e3da:	d926      	bls.n	800e42a <uxr_flash_output_streams+0x7a>
 800e3dc:	2201      	movs	r2, #1
 800e3de:	4611      	mov	r1, r2
 800e3e0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e3e4:	f001 fbea 	bl	800fbbc <uxr_stream_id>
 800e3e8:	3508      	adds	r5, #8
 800e3ea:	4684      	mov	ip, r0
 800e3ec:	4643      	mov	r3, r8
 800e3ee:	463a      	mov	r2, r7
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f8cd c004 	str.w	ip, [sp, #4]
 800e3f8:	f007 fb04 	bl	8015a04 <uxr_prepare_best_effort_buffer_to_send>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d0e6      	beq.n	800e3ce <uxr_flash_output_streams+0x1e>
 800e400:	9b02      	ldr	r3, [sp, #8]
 800e402:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e406:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 feb6 	bl	800f17c <uxr_stamp_session_header>
 800e410:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e412:	9a03      	ldr	r2, [sp, #12]
 800e414:	685d      	ldr	r5, [r3, #4]
 800e416:	6818      	ldr	r0, [r3, #0]
 800e418:	9902      	ldr	r1, [sp, #8]
 800e41a:	47a8      	blx	r5
 800e41c:	f109 0901 	add.w	r9, r9, #1
 800e420:	7e23      	ldrb	r3, [r4, #24]
 800e422:	fa5f f089 	uxtb.w	r0, r9
 800e426:	4283      	cmp	r3, r0
 800e428:	d8d8      	bhi.n	800e3dc <uxr_flash_output_streams+0x2c>
 800e42a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e42e:	b38b      	cbz	r3, 800e494 <uxr_flash_output_streams+0xe4>
 800e430:	f04f 0900 	mov.w	r9, #0
 800e434:	f10d 0802 	add.w	r8, sp, #2
 800e438:	af03      	add	r7, sp, #12
 800e43a:	ae02      	add	r6, sp, #8
 800e43c:	4648      	mov	r0, r9
 800e43e:	2201      	movs	r2, #1
 800e440:	2102      	movs	r1, #2
 800e442:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e446:	f001 fbb9 	bl	800fbbc <uxr_stream_id>
 800e44a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e44e:	3520      	adds	r5, #32
 800e450:	9001      	str	r0, [sp, #4]
 800e452:	e00d      	b.n	800e470 <uxr_flash_output_streams+0xc0>
 800e454:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e458:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e45c:	9b02      	ldr	r3, [sp, #8]
 800e45e:	f000 fe8d 	bl	800f17c <uxr_stamp_session_header>
 800e462:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e464:	9a03      	ldr	r2, [sp, #12]
 800e466:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e46a:	9902      	ldr	r1, [sp, #8]
 800e46c:	6818      	ldr	r0, [r3, #0]
 800e46e:	47d0      	blx	sl
 800e470:	4643      	mov	r3, r8
 800e472:	463a      	mov	r2, r7
 800e474:	4631      	mov	r1, r6
 800e476:	4628      	mov	r0, r5
 800e478:	f007 fce2 	bl	8015e40 <uxr_prepare_next_reliable_buffer_to_send>
 800e47c:	4603      	mov	r3, r0
 800e47e:	4620      	mov	r0, r4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1e7      	bne.n	800e454 <uxr_flash_output_streams+0xa4>
 800e484:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e488:	f109 0901 	add.w	r9, r9, #1
 800e48c:	fa5f f089 	uxtb.w	r0, r9
 800e490:	4283      	cmp	r3, r0
 800e492:	d8d4      	bhi.n	800e43e <uxr_flash_output_streams+0x8e>
 800e494:	b004      	add	sp, #16
 800e496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49a:	bf00      	nop

0800e49c <read_submessage_info>:
 800e49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e4a6:	4669      	mov	r1, sp
 800e4a8:	4607      	mov	r7, r0
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f002 fca6 	bl	8010dfc <uxr_deserialize_BaseObjectReply>
 800e4b0:	a902      	add	r1, sp, #8
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e4ba:	f7fe fa03 	bl	800c8c4 <ucdr_deserialize_bool>
 800e4be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e4c2:	4004      	ands	r4, r0
 800e4c4:	b2e4      	uxtb	r4, r4
 800e4c6:	b95b      	cbnz	r3, 800e4e0 <read_submessage_info+0x44>
 800e4c8:	a987      	add	r1, sp, #540	@ 0x21c
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f7fe f9fa 	bl	800c8c4 <ucdr_deserialize_bool>
 800e4d0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	b94b      	cbnz	r3, 800e4ec <read_submessage_info+0x50>
 800e4d8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e0:	a903      	add	r1, sp, #12
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f002 fb32 	bl	8010b4c <uxr_deserialize_ObjectVariant>
 800e4e8:	4004      	ands	r4, r0
 800e4ea:	e7ed      	b.n	800e4c8 <read_submessage_info+0x2c>
 800e4ec:	a988      	add	r1, sp, #544	@ 0x220
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	f7fe fa16 	bl	800c920 <ucdr_deserialize_uint8_t>
 800e4f4:	4234      	tst	r4, r6
 800e4f6:	d0ef      	beq.n	800e4d8 <read_submessage_info+0x3c>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d0ed      	beq.n	800e4d8 <read_submessage_info+0x3c>
 800e4fc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e500:	2b0d      	cmp	r3, #13
 800e502:	d1e9      	bne.n	800e4d8 <read_submessage_info+0x3c>
 800e504:	a98a      	add	r1, sp, #552	@ 0x228
 800e506:	4628      	mov	r0, r5
 800e508:	f7fe ffb0 	bl	800d46c <ucdr_deserialize_int16_t>
 800e50c:	b140      	cbz	r0, 800e520 <read_submessage_info+0x84>
 800e50e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e512:	2b00      	cmp	r3, #0
 800e514:	dd07      	ble.n	800e526 <read_submessage_info+0x8a>
 800e516:	f1b8 0f00 	cmp.w	r8, #0
 800e51a:	bf14      	ite	ne
 800e51c:	2001      	movne	r0, #1
 800e51e:	2002      	moveq	r0, #2
 800e520:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e524:	e7d8      	b.n	800e4d8 <read_submessage_info+0x3c>
 800e526:	2000      	movs	r0, #0
 800e528:	e7fa      	b.n	800e520 <read_submessage_info+0x84>
 800e52a:	bf00      	nop

0800e52c <read_submessage_list>:
 800e52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e530:	b097      	sub	sp, #92	@ 0x5c
 800e532:	4ec1      	ldr	r6, [pc, #772]	@ (800e838 <read_submessage_list+0x30c>)
 800e534:	9209      	str	r2, [sp, #36]	@ 0x24
 800e536:	4604      	mov	r4, r0
 800e538:	460d      	mov	r5, r1
 800e53a:	f04f 0801 	mov.w	r8, #1
 800e53e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e542:	aa0c      	add	r2, sp, #48	@ 0x30
 800e544:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e548:	4628      	mov	r0, r5
 800e54a:	f001 fc89 	bl	800fe60 <uxr_read_submessage_header>
 800e54e:	2800      	cmp	r0, #0
 800e550:	f000 813e 	beq.w	800e7d0 <read_submessage_list+0x2a4>
 800e554:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800e558:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800e55c:	3b02      	subs	r3, #2
 800e55e:	2b0d      	cmp	r3, #13
 800e560:	d8ed      	bhi.n	800e53e <read_submessage_list+0x12>
 800e562:	a101      	add	r1, pc, #4	@ (adr r1, 800e568 <read_submessage_list+0x3c>)
 800e564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e568:	0800e7c7 	.word	0x0800e7c7
 800e56c:	0800e53f 	.word	0x0800e53f
 800e570:	0800e7b7 	.word	0x0800e7b7
 800e574:	0800e755 	.word	0x0800e755
 800e578:	0800e74b 	.word	0x0800e74b
 800e57c:	0800e53f 	.word	0x0800e53f
 800e580:	0800e53f 	.word	0x0800e53f
 800e584:	0800e6ab 	.word	0x0800e6ab
 800e588:	0800e63b 	.word	0x0800e63b
 800e58c:	0800e5fb 	.word	0x0800e5fb
 800e590:	0800e53f 	.word	0x0800e53f
 800e594:	0800e53f 	.word	0x0800e53f
 800e598:	0800e53f 	.word	0x0800e53f
 800e59c:	0800e5a1 	.word	0x0800e5a1
 800e5a0:	a910      	add	r1, sp, #64	@ 0x40
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f002 fe4e 	bl	8011244 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e5a8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800e5ac:	f1b9 0f00 	cmp.w	r9, #0
 800e5b0:	f000 8116 	beq.w	800e7e0 <read_submessage_list+0x2b4>
 800e5b4:	f001 fc9a 	bl	800feec <uxr_nanos>
 800e5b8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	468c      	mov	ip, r1
 800e5c4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e5c8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e5cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e5ce:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e5d0:	468c      	mov	ip, r1
 800e5d2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e5d6:	46e2      	mov	sl, ip
 800e5d8:	46bc      	mov	ip, r7
 800e5da:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e5de:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e5e2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e5e6:	e9cd 7100 	strd	r7, r1, [sp]
 800e5ea:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e5ee:	9106      	str	r1, [sp, #24]
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	47c8      	blx	r9
 800e5f4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800e5f8:	e7a1      	b.n	800e53e <read_submessage_list+0x12>
 800e5fa:	a910      	add	r1, sp, #64	@ 0x40
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	f002 fe0f 	bl	8011220 <uxr_deserialize_HEARTBEAT_Payload>
 800e602:	2100      	movs	r1, #0
 800e604:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e608:	f001 fb02 	bl	800fc10 <uxr_stream_id_from_raw>
 800e60c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e610:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e612:	4639      	mov	r1, r7
 800e614:	f104 0008 	add.w	r0, r4, #8
 800e618:	f001 fbe8 	bl	800fdec <uxr_get_input_reliable_stream>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d08e      	beq.n	800e53e <read_submessage_list+0x12>
 800e620:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e624:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e628:	f007 f95a 	bl	80158e0 <uxr_process_heartbeat>
 800e62c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e630:	463a      	mov	r2, r7
 800e632:	4620      	mov	r0, r4
 800e634:	f7ff fdf6 	bl	800e224 <write_submessage_acknack.isra.0>
 800e638:	e781      	b.n	800e53e <read_submessage_list+0x12>
 800e63a:	a910      	add	r1, sp, #64	@ 0x40
 800e63c:	4628      	mov	r0, r5
 800e63e:	f002 fdc7 	bl	80111d0 <uxr_deserialize_ACKNACK_Payload>
 800e642:	2100      	movs	r1, #0
 800e644:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e648:	f001 fae2 	bl	800fc10 <uxr_stream_id_from_raw>
 800e64c:	900d      	str	r0, [sp, #52]	@ 0x34
 800e64e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e652:	f104 0008 	add.w	r0, r4, #8
 800e656:	f001 fbb5 	bl	800fdc4 <uxr_get_output_reliable_stream>
 800e65a:	4607      	mov	r7, r0
 800e65c:	2800      	cmp	r0, #0
 800e65e:	f43f af6e 	beq.w	800e53e <read_submessage_list+0x12>
 800e662:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e666:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e66a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e66e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e672:	b289      	uxth	r1, r1
 800e674:	f007 fc8e 	bl	8015f94 <uxr_process_acknack>
 800e678:	4638      	mov	r0, r7
 800e67a:	f007 fc4b 	bl	8015f14 <uxr_begin_output_nack_buffer_it>
 800e67e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e682:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e686:	e006      	b.n	800e696 <read_submessage_list+0x16a>
 800e688:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e68a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e68c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e690:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	47c8      	blx	r9
 800e696:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e69a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e69c:	4651      	mov	r1, sl
 800e69e:	4638      	mov	r0, r7
 800e6a0:	f007 fc3a 	bl	8015f18 <uxr_next_reliable_nack_buffer_to_send>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d1ef      	bne.n	800e688 <read_submessage_list+0x15c>
 800e6a8:	e749      	b.n	800e53e <read_submessage_list+0x12>
 800e6aa:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e6ae:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800e6b2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e6b6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e6ba:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800e6be:	4651      	mov	r1, sl
 800e6c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e6c4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800e6c8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800e6cc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e6d6:	f002 fadb 	bl	8010c90 <uxr_deserialize_BaseObjectRequest>
 800e6da:	4650      	mov	r0, sl
 800e6dc:	a90f      	add	r1, sp, #60	@ 0x3c
 800e6de:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e6e2:	f000 fdc7 	bl	800f274 <uxr_parse_base_object_request>
 800e6e6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800e6ea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e6ec:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800e6f0:	9110      	str	r1, [sp, #64]	@ 0x40
 800e6f2:	3f04      	subs	r7, #4
 800e6f4:	f009 090e 	and.w	r9, r9, #14
 800e6f8:	b2bf      	uxth	r7, r7
 800e6fa:	f1bb 0f00 	cmp.w	fp, #0
 800e6fe:	d006      	beq.n	800e70e <read_submessage_list+0x1e2>
 800e700:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	4652      	mov	r2, sl
 800e708:	2300      	movs	r3, #0
 800e70a:	4620      	mov	r0, r4
 800e70c:	47d8      	blx	fp
 800e70e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e710:	b16a      	cbz	r2, 800e72e <read_submessage_list+0x202>
 800e712:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e714:	2100      	movs	r1, #0
 800e716:	3802      	subs	r0, #2
 800e718:	e002      	b.n	800e720 <read_submessage_list+0x1f4>
 800e71a:	3101      	adds	r1, #1
 800e71c:	4291      	cmp	r1, r2
 800e71e:	d006      	beq.n	800e72e <read_submessage_list+0x202>
 800e720:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e724:	4553      	cmp	r3, sl
 800e726:	d1f8      	bne.n	800e71a <read_submessage_list+0x1ee>
 800e728:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e72a:	2200      	movs	r2, #0
 800e72c:	545a      	strb	r2, [r3, r1]
 800e72e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e732:	9102      	str	r1, [sp, #8]
 800e734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e736:	9101      	str	r1, [sp, #4]
 800e738:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e73a:	9100      	str	r1, [sp, #0]
 800e73c:	464b      	mov	r3, r9
 800e73e:	463a      	mov	r2, r7
 800e740:	4629      	mov	r1, r5
 800e742:	4620      	mov	r0, r4
 800e744:	f7ff fc4c 	bl	800dfe0 <read_submessage_format>
 800e748:	e6f9      	b.n	800e53e <read_submessage_list+0x12>
 800e74a:	4629      	mov	r1, r5
 800e74c:	4620      	mov	r0, r4
 800e74e:	f7ff fea5 	bl	800e49c <read_submessage_info>
 800e752:	e6f4      	b.n	800e53e <read_submessage_list+0x12>
 800e754:	2a00      	cmp	r2, #0
 800e756:	d03e      	beq.n	800e7d6 <read_submessage_list+0x2aa>
 800e758:	a910      	add	r1, sp, #64	@ 0x40
 800e75a:	4628      	mov	r0, r5
 800e75c:	f002 fc94 	bl	8011088 <uxr_deserialize_STATUS_Payload>
 800e760:	a90e      	add	r1, sp, #56	@ 0x38
 800e762:	aa0d      	add	r2, sp, #52	@ 0x34
 800e764:	a810      	add	r0, sp, #64	@ 0x40
 800e766:	f000 fd85 	bl	800f274 <uxr_parse_base_object_request>
 800e76a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e76e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e770:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e774:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e778:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e77a:	f1ba 0f00 	cmp.w	sl, #0
 800e77e:	d006      	beq.n	800e78e <read_submessage_list+0x262>
 800e780:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	463a      	mov	r2, r7
 800e788:	464b      	mov	r3, r9
 800e78a:	4620      	mov	r0, r4
 800e78c:	47d0      	blx	sl
 800e78e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e790:	2a00      	cmp	r2, #0
 800e792:	f43f aed4 	beq.w	800e53e <read_submessage_list+0x12>
 800e796:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e798:	2100      	movs	r1, #0
 800e79a:	3802      	subs	r0, #2
 800e79c:	e003      	b.n	800e7a6 <read_submessage_list+0x27a>
 800e79e:	3101      	adds	r1, #1
 800e7a0:	4291      	cmp	r1, r2
 800e7a2:	f43f aecc 	beq.w	800e53e <read_submessage_list+0x12>
 800e7a6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e7aa:	42bb      	cmp	r3, r7
 800e7ac:	d1f7      	bne.n	800e79e <read_submessage_list+0x272>
 800e7ae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e7b0:	f803 9001 	strb.w	r9, [r3, r1]
 800e7b4:	e6c3      	b.n	800e53e <read_submessage_list+0x12>
 800e7b6:	2a00      	cmp	r2, #0
 800e7b8:	f47f aec1 	bne.w	800e53e <read_submessage_list+0x12>
 800e7bc:	4629      	mov	r1, r5
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f000 fc9e 	bl	800f100 <uxr_read_create_session_status>
 800e7c4:	e6bb      	b.n	800e53e <read_submessage_list+0x12>
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	f7ff fcf5 	bl	800e1b8 <read_submessage_get_info>
 800e7ce:	e6b6      	b.n	800e53e <read_submessage_list+0x12>
 800e7d0:	b017      	add	sp, #92	@ 0x5c
 800e7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 fc9d 	bl	800f118 <uxr_read_delete_session_status>
 800e7de:	e6ae      	b.n	800e53e <read_submessage_list+0x12>
 800e7e0:	f001 fb84 	bl	800feec <uxr_nanos>
 800e7e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e7e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e7e8:	464f      	mov	r7, r9
 800e7ea:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e7ee:	1812      	adds	r2, r2, r0
 800e7f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7f2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e7f4:	eb47 0101 	adc.w	r1, r7, r1
 800e7f8:	464f      	mov	r7, r9
 800e7fa:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e7fe:	463b      	mov	r3, r7
 800e800:	4684      	mov	ip, r0
 800e802:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e806:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e80a:	eb1c 0c00 	adds.w	ip, ip, r0
 800e80e:	464f      	mov	r7, r9
 800e810:	eb43 0307 	adc.w	r3, r3, r7
 800e814:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e818:	eb61 0303 	sbc.w	r3, r1, r3
 800e81c:	0fda      	lsrs	r2, r3, #31
 800e81e:	eb12 020c 	adds.w	r2, r2, ip
 800e822:	f143 0300 	adc.w	r3, r3, #0
 800e826:	0852      	lsrs	r2, r2, #1
 800e828:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e82c:	105b      	asrs	r3, r3, #1
 800e82e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e832:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e836:	e6dd      	b.n	800e5f4 <read_submessage_list+0xc8>
 800e838:	3b9aca00 	.word	0x3b9aca00

0800e83c <listen_message_reliably>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	1e0b      	subs	r3, r1, #0
 800e842:	b09d      	sub	sp, #116	@ 0x74
 800e844:	bfb8      	it	lt
 800e846:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e84a:	4680      	mov	r8, r0
 800e84c:	9305      	str	r3, [sp, #20]
 800e84e:	f001 fb33 	bl	800feb8 <uxr_millis>
 800e852:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e856:	4681      	mov	r9, r0
 800e858:	2a00      	cmp	r2, #0
 800e85a:	f000 80a1 	beq.w	800e9a0 <listen_message_reliably+0x164>
 800e85e:	2600      	movs	r6, #0
 800e860:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e864:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e868:	9303      	str	r3, [sp, #12]
 800e86a:	4630      	mov	r0, r6
 800e86c:	460f      	mov	r7, r1
 800e86e:	e00f      	b.n	800e890 <listen_message_reliably+0x54>
 800e870:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e874:	9903      	ldr	r1, [sp, #12]
 800e876:	455a      	cmp	r2, fp
 800e878:	f106 0601 	add.w	r6, r6, #1
 800e87c:	eb73 0101 	sbcs.w	r1, r3, r1
 800e880:	b2f0      	uxtb	r0, r6
 800e882:	da01      	bge.n	800e888 <listen_message_reliably+0x4c>
 800e884:	4693      	mov	fp, r2
 800e886:	9303      	str	r3, [sp, #12]
 800e888:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e88c:	4283      	cmp	r3, r0
 800e88e:	d960      	bls.n	800e952 <listen_message_reliably+0x116>
 800e890:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e894:	2102      	movs	r1, #2
 800e896:	2201      	movs	r2, #1
 800e898:	f001 f990 	bl	800fbbc <uxr_stream_id>
 800e89c:	00e4      	lsls	r4, r4, #3
 800e89e:	f104 0520 	add.w	r5, r4, #32
 800e8a2:	4445      	add	r5, r8
 800e8a4:	4601      	mov	r1, r0
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	464a      	mov	r2, r9
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800e8ae:	f007 fb07 	bl	8015ec0 <uxr_update_output_stream_heartbeat_timestamp>
 800e8b2:	eb08 0304 	add.w	r3, r8, r4
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d0da      	beq.n	800e870 <listen_message_reliably+0x34>
 800e8ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e8be:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e8c2:	9304      	str	r3, [sp, #16]
 800e8c4:	4640      	mov	r0, r8
 800e8c6:	f000 fcaf 	bl	800f228 <uxr_session_header_offset>
 800e8ca:	3501      	adds	r5, #1
 800e8cc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e8d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e8d4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e8d8:	2300      	movs	r3, #0
 800e8da:	2211      	movs	r2, #17
 800e8dc:	9000      	str	r0, [sp, #0]
 800e8de:	a90c      	add	r1, sp, #48	@ 0x30
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	f7fe ffa1 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	2205      	movs	r2, #5
 800e8ea:	210b      	movs	r1, #11
 800e8ec:	4650      	mov	r0, sl
 800e8ee:	f001 fa9d 	bl	800fe2c <uxr_buffer_submessage_header>
 800e8f2:	8968      	ldrh	r0, [r5, #10]
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	f007 fba5 	bl	8016044 <uxr_seq_num_add>
 800e8fa:	892b      	ldrh	r3, [r5, #8]
 800e8fc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e900:	4602      	mov	r2, r0
 800e902:	9b04      	ldr	r3, [sp, #16]
 800e904:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e908:	a90a      	add	r1, sp, #40	@ 0x28
 800e90a:	4650      	mov	r0, sl
 800e90c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e910:	f002 fc72 	bl	80111f8 <uxr_serialize_HEARTBEAT_Payload>
 800e914:	2200      	movs	r2, #0
 800e916:	4611      	mov	r1, r2
 800e918:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e91a:	4640      	mov	r0, r8
 800e91c:	f000 fc2e 	bl	800f17c <uxr_stamp_session_header>
 800e920:	4650      	mov	r0, sl
 800e922:	f7fe ffbf 	bl	800d8a4 <ucdr_buffer_length>
 800e926:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e92a:	4602      	mov	r2, r0
 800e92c:	a90c      	add	r1, sp, #48	@ 0x30
 800e92e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e932:	4444      	add	r4, r8
 800e934:	47a8      	blx	r5
 800e936:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e93a:	9903      	ldr	r1, [sp, #12]
 800e93c:	455a      	cmp	r2, fp
 800e93e:	f106 0601 	add.w	r6, r6, #1
 800e942:	eb73 0101 	sbcs.w	r1, r3, r1
 800e946:	b2f0      	uxtb	r0, r6
 800e948:	db9c      	blt.n	800e884 <listen_message_reliably+0x48>
 800e94a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e94e:	4283      	cmp	r3, r0
 800e950:	d89e      	bhi.n	800e890 <listen_message_reliably+0x54>
 800e952:	9a03      	ldr	r2, [sp, #12]
 800e954:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e958:	429a      	cmp	r2, r3
 800e95a:	bf08      	it	eq
 800e95c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e960:	d01e      	beq.n	800e9a0 <listen_message_reliably+0x164>
 800e962:	ebab 0309 	sub.w	r3, fp, r9
 800e966:	9905      	ldr	r1, [sp, #20]
 800e968:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	bf08      	it	eq
 800e970:	2301      	moveq	r3, #1
 800e972:	4299      	cmp	r1, r3
 800e974:	bfa8      	it	ge
 800e976:	4619      	movge	r1, r3
 800e978:	6894      	ldr	r4, [r2, #8]
 800e97a:	6810      	ldr	r0, [r2, #0]
 800e97c:	4689      	mov	r9, r1
 800e97e:	460b      	mov	r3, r1
 800e980:	aa08      	add	r2, sp, #32
 800e982:	a907      	add	r1, sp, #28
 800e984:	47a0      	blx	r4
 800e986:	b968      	cbnz	r0, 800e9a4 <listen_message_reliably+0x168>
 800e988:	9b05      	ldr	r3, [sp, #20]
 800e98a:	eba3 0309 	sub.w	r3, r3, r9
 800e98e:	2b00      	cmp	r3, #0
 800e990:	9305      	str	r3, [sp, #20]
 800e992:	f73f af5c 	bgt.w	800e84e <listen_message_reliably+0x12>
 800e996:	4604      	mov	r4, r0
 800e998:	4620      	mov	r0, r4
 800e99a:	b01d      	add	sp, #116	@ 0x74
 800e99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a0:	9b05      	ldr	r3, [sp, #20]
 800e9a2:	e7e0      	b.n	800e966 <listen_message_reliably+0x12a>
 800e9a4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	a80c      	add	r0, sp, #48	@ 0x30
 800e9ac:	f7fe ff4e 	bl	800d84c <ucdr_init_buffer>
 800e9b0:	2500      	movs	r5, #0
 800e9b2:	f10d 031a 	add.w	r3, sp, #26
 800e9b6:	aa06      	add	r2, sp, #24
 800e9b8:	a90c      	add	r1, sp, #48	@ 0x30
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	f88d 5018 	strb.w	r5, [sp, #24]
 800e9c0:	f000 fbf0 	bl	800f1a4 <uxr_read_session_header>
 800e9c4:	b918      	cbnz	r0, 800e9ce <listen_message_reliably+0x192>
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	b01d      	add	sp, #116	@ 0x74
 800e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e9d4:	f001 f91c 	bl	800fc10 <uxr_stream_id_from_raw>
 800e9d8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e9dc:	2d01      	cmp	r5, #1
 800e9de:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e9e2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e9e6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e9ea:	d04b      	beq.n	800ea84 <listen_message_reliably+0x248>
 800e9ec:	2d02      	cmp	r5, #2
 800e9ee:	d00f      	beq.n	800ea10 <listen_message_reliably+0x1d4>
 800e9f0:	2d00      	cmp	r5, #0
 800e9f2:	d1e8      	bne.n	800e9c6 <listen_message_reliably+0x18a>
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f001 f90a 	bl	800fc10 <uxr_stream_id_from_raw>
 800e9fc:	a90c      	add	r1, sp, #48	@ 0x30
 800e9fe:	4602      	mov	r2, r0
 800ea00:	4640      	mov	r0, r8
 800ea02:	920a      	str	r2, [sp, #40]	@ 0x28
 800ea04:	f7ff fd92 	bl	800e52c <read_submessage_list>
 800ea08:	4620      	mov	r0, r4
 800ea0a:	b01d      	add	sp, #116	@ 0x74
 800ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea10:	4631      	mov	r1, r6
 800ea12:	f108 0008 	add.w	r0, r8, #8
 800ea16:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800ea1a:	f001 f9e7 	bl	800fdec <uxr_get_input_reliable_stream>
 800ea1e:	4607      	mov	r7, r0
 800ea20:	b338      	cbz	r0, 800ea72 <listen_message_reliably+0x236>
 800ea22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea24:	9203      	str	r2, [sp, #12]
 800ea26:	a80c      	add	r0, sp, #48	@ 0x30
 800ea28:	f7fe ff40 	bl	800d8ac <ucdr_buffer_remaining>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	f10d 0019 	add.w	r0, sp, #25
 800ea32:	9000      	str	r0, [sp, #0]
 800ea34:	9a03      	ldr	r2, [sp, #12]
 800ea36:	4651      	mov	r1, sl
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f006 fe57 	bl	80156ec <uxr_receive_reliable_message>
 800ea3e:	b1c0      	cbz	r0, 800ea72 <listen_message_reliably+0x236>
 800ea40:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ea44:	b393      	cbz	r3, 800eaac <listen_message_reliably+0x270>
 800ea46:	ad14      	add	r5, sp, #80	@ 0x50
 800ea48:	f04f 0a02 	mov.w	sl, #2
 800ea4c:	e00a      	b.n	800ea64 <listen_message_reliably+0x228>
 800ea4e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800ea52:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800ea56:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800ea5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4640      	mov	r0, r8
 800ea60:	f7ff fd64 	bl	800e52c <read_submessage_list>
 800ea64:	2204      	movs	r2, #4
 800ea66:	4629      	mov	r1, r5
 800ea68:	4638      	mov	r0, r7
 800ea6a:	f006 febf 	bl	80157ec <uxr_next_input_reliable_buffer_available>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d1ed      	bne.n	800ea4e <listen_message_reliably+0x212>
 800ea72:	4640      	mov	r0, r8
 800ea74:	4632      	mov	r2, r6
 800ea76:	4649      	mov	r1, r9
 800ea78:	f7ff fbd4 	bl	800e224 <write_submessage_acknack.isra.0>
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	b01d      	add	sp, #116	@ 0x74
 800ea80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea84:	4631      	mov	r1, r6
 800ea86:	f108 0008 	add.w	r0, r8, #8
 800ea8a:	f001 f9a5 	bl	800fdd8 <uxr_get_input_best_effort_stream>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d099      	beq.n	800e9c6 <listen_message_reliably+0x18a>
 800ea92:	4651      	mov	r1, sl
 800ea94:	f006 fd96 	bl	80155c4 <uxr_receive_best_effort_message>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d094      	beq.n	800e9c6 <listen_message_reliably+0x18a>
 800ea9c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800eaa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eaa2:	a90c      	add	r1, sp, #48	@ 0x30
 800eaa4:	4640      	mov	r0, r8
 800eaa6:	f7ff fd41 	bl	800e52c <read_submessage_list>
 800eaaa:	e78c      	b.n	800e9c6 <listen_message_reliably+0x18a>
 800eaac:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800eab0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eab2:	a90c      	add	r1, sp, #48	@ 0x30
 800eab4:	4640      	mov	r0, r8
 800eab6:	f7ff fd39 	bl	800e52c <read_submessage_list>
 800eaba:	e7c4      	b.n	800ea46 <listen_message_reliably+0x20a>

0800eabc <uxr_run_session_timeout>:
 800eabc:	b570      	push	{r4, r5, r6, lr}
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	f001 f9f9 	bl	800feb8 <uxr_millis>
 800eac6:	4606      	mov	r6, r0
 800eac8:	4620      	mov	r0, r4
 800eaca:	f7ff fc71 	bl	800e3b0 <uxr_flash_output_streams>
 800eace:	4629      	mov	r1, r5
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff feb3 	bl	800e83c <listen_message_reliably>
 800ead6:	f001 f9ef 	bl	800feb8 <uxr_millis>
 800eada:	1b83      	subs	r3, r0, r6
 800eadc:	1ae9      	subs	r1, r5, r3
 800eade:	2900      	cmp	r1, #0
 800eae0:	dcf6      	bgt.n	800ead0 <uxr_run_session_timeout+0x14>
 800eae2:	f104 0008 	add.w	r0, r4, #8
 800eae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eaea:	f001 b989 	b.w	800fe00 <uxr_output_streams_confirmed>
 800eaee:	bf00      	nop

0800eaf0 <uxr_run_session_until_data>:
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	f001 f9df 	bl	800feb8 <uxr_millis>
 800eafa:	4606      	mov	r6, r0
 800eafc:	4620      	mov	r0, r4
 800eafe:	f7ff fc57 	bl	800e3b0 <uxr_flash_output_streams>
 800eb02:	2300      	movs	r3, #0
 800eb04:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800eb08:	4629      	mov	r1, r5
 800eb0a:	e005      	b.n	800eb18 <uxr_run_session_until_data+0x28>
 800eb0c:	f001 f9d4 	bl	800feb8 <uxr_millis>
 800eb10:	1b83      	subs	r3, r0, r6
 800eb12:	1ae9      	subs	r1, r5, r3
 800eb14:	2900      	cmp	r1, #0
 800eb16:	dd07      	ble.n	800eb28 <uxr_run_session_until_data+0x38>
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f7ff fe8f 	bl	800e83c <listen_message_reliably>
 800eb1e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d0f2      	beq.n	800eb0c <uxr_run_session_until_data+0x1c>
 800eb26:	bd70      	pop	{r4, r5, r6, pc}
 800eb28:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}
 800eb2e:	bf00      	nop

0800eb30 <uxr_run_session_until_confirm_delivery>:
 800eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb34:	4606      	mov	r6, r0
 800eb36:	460d      	mov	r5, r1
 800eb38:	f001 f9be 	bl	800feb8 <uxr_millis>
 800eb3c:	4607      	mov	r7, r0
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f7ff fc36 	bl	800e3b0 <uxr_flash_output_streams>
 800eb44:	2d00      	cmp	r5, #0
 800eb46:	f106 0808 	add.w	r8, r6, #8
 800eb4a:	bfa8      	it	ge
 800eb4c:	462c      	movge	r4, r5
 800eb4e:	da07      	bge.n	800eb60 <uxr_run_session_until_confirm_delivery+0x30>
 800eb50:	e00e      	b.n	800eb70 <uxr_run_session_until_confirm_delivery+0x40>
 800eb52:	f7ff fe73 	bl	800e83c <listen_message_reliably>
 800eb56:	f001 f9af 	bl	800feb8 <uxr_millis>
 800eb5a:	1bc3      	subs	r3, r0, r7
 800eb5c:	1aec      	subs	r4, r5, r3
 800eb5e:	d407      	bmi.n	800eb70 <uxr_run_session_until_confirm_delivery+0x40>
 800eb60:	4640      	mov	r0, r8
 800eb62:	f001 f94d 	bl	800fe00 <uxr_output_streams_confirmed>
 800eb66:	4603      	mov	r3, r0
 800eb68:	4621      	mov	r1, r4
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d0f0      	beq.n	800eb52 <uxr_run_session_until_confirm_delivery+0x22>
 800eb70:	4640      	mov	r0, r8
 800eb72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb76:	f001 b943 	b.w	800fe00 <uxr_output_streams_confirmed>
 800eb7a:	bf00      	nop

0800eb7c <uxr_run_session_until_all_status>:
 800eb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb80:	9c08      	ldr	r4, [sp, #32]
 800eb82:	4606      	mov	r6, r0
 800eb84:	460f      	mov	r7, r1
 800eb86:	4691      	mov	r9, r2
 800eb88:	461d      	mov	r5, r3
 800eb8a:	f7ff fc11 	bl	800e3b0 <uxr_flash_output_streams>
 800eb8e:	b124      	cbz	r4, 800eb9a <uxr_run_session_until_all_status+0x1e>
 800eb90:	4622      	mov	r2, r4
 800eb92:	21ff      	movs	r1, #255	@ 0xff
 800eb94:	4628      	mov	r0, r5
 800eb96:	f008 fa3d 	bl	8017014 <memset>
 800eb9a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800eb9e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800eba0:	f001 f98a 	bl	800feb8 <uxr_millis>
 800eba4:	3d01      	subs	r5, #1
 800eba6:	f1a9 0902 	sub.w	r9, r9, #2
 800ebaa:	4680      	mov	r8, r0
 800ebac:	4639      	mov	r1, r7
 800ebae:	4630      	mov	r0, r6
 800ebb0:	f7ff fe44 	bl	800e83c <listen_message_reliably>
 800ebb4:	f001 f980 	bl	800feb8 <uxr_millis>
 800ebb8:	eba0 0008 	sub.w	r0, r0, r8
 800ebbc:	1a39      	subs	r1, r7, r0
 800ebbe:	b344      	cbz	r4, 800ec12 <uxr_run_session_until_all_status+0x96>
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	46ac      	mov	ip, r5
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e002      	b.n	800ebce <uxr_run_session_until_all_status+0x52>
 800ebc8:	42a3      	cmp	r3, r4
 800ebca:	d20d      	bcs.n	800ebe8 <uxr_run_session_until_all_status+0x6c>
 800ebcc:	3301      	adds	r3, #1
 800ebce:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ebd2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800ebd6:	d1f7      	bne.n	800ebc8 <uxr_run_session_until_all_status+0x4c>
 800ebd8:	42a3      	cmp	r3, r4
 800ebda:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ebde:	d213      	bcs.n	800ec08 <uxr_run_session_until_all_status+0x8c>
 800ebe0:	2a00      	cmp	r2, #0
 800ebe2:	d0f3      	beq.n	800ebcc <uxr_run_session_until_all_status+0x50>
 800ebe4:	2900      	cmp	r1, #0
 800ebe6:	dce2      	bgt.n	800ebae <uxr_run_session_until_all_status+0x32>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800ebec:	442c      	add	r4, r5
 800ebee:	e001      	b.n	800ebf4 <uxr_run_session_until_all_status+0x78>
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d812      	bhi.n	800ec1a <uxr_run_session_until_all_status+0x9e>
 800ebf4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ebf8:	4284      	cmp	r4, r0
 800ebfa:	d1f9      	bne.n	800ebf0 <uxr_run_session_until_all_status+0x74>
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	bf8c      	ite	hi
 800ec00:	2000      	movhi	r0, #0
 800ec02:	2001      	movls	r0, #1
 800ec04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	dded      	ble.n	800ebe8 <uxr_run_session_until_all_status+0x6c>
 800ec0c:	2a00      	cmp	r2, #0
 800ec0e:	d1ce      	bne.n	800ebae <uxr_run_session_until_all_status+0x32>
 800ec10:	e7ea      	b.n	800ebe8 <uxr_run_session_until_all_status+0x6c>
 800ec12:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ec14:	2001      	movs	r0, #1
 800ec16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ec20 <wait_session_status>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	4604      	mov	r4, r0
 800ec26:	b09d      	sub	sp, #116	@ 0x74
 800ec28:	20ff      	movs	r0, #255	@ 0xff
 800ec2a:	7160      	strb	r0, [r4, #5]
 800ec2c:	9303      	str	r3, [sp, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f000 80b6 	beq.w	800eda0 <wait_session_status+0x180>
 800ec34:	468a      	mov	sl, r1
 800ec36:	4691      	mov	r9, r2
 800ec38:	f04f 0b00 	mov.w	fp, #0
 800ec3c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec3e:	464a      	mov	r2, r9
 800ec40:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ec44:	4651      	mov	r1, sl
 800ec46:	47a8      	blx	r5
 800ec48:	f001 f936 	bl	800feb8 <uxr_millis>
 800ec4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ec50:	4605      	mov	r5, r0
 800ec52:	e009      	b.n	800ec68 <wait_session_status+0x48>
 800ec54:	f001 f930 	bl	800feb8 <uxr_millis>
 800ec58:	1b40      	subs	r0, r0, r5
 800ec5a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	dd40      	ble.n	800ece4 <wait_session_status+0xc4>
 800ec62:	7960      	ldrb	r0, [r4, #5]
 800ec64:	28ff      	cmp	r0, #255	@ 0xff
 800ec66:	d145      	bne.n	800ecf4 <wait_session_status+0xd4>
 800ec68:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ec6a:	a908      	add	r1, sp, #32
 800ec6c:	6896      	ldr	r6, [r2, #8]
 800ec6e:	6810      	ldr	r0, [r2, #0]
 800ec70:	aa09      	add	r2, sp, #36	@ 0x24
 800ec72:	47b0      	blx	r6
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d0ed      	beq.n	800ec54 <wait_session_status+0x34>
 800ec78:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ec7c:	a80c      	add	r0, sp, #48	@ 0x30
 800ec7e:	f7fe fde5 	bl	800d84c <ucdr_init_buffer>
 800ec82:	2600      	movs	r6, #0
 800ec84:	f10d 031e 	add.w	r3, sp, #30
 800ec88:	aa07      	add	r2, sp, #28
 800ec8a:	a90c      	add	r1, sp, #48	@ 0x30
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f88d 601c 	strb.w	r6, [sp, #28]
 800ec92:	f000 fa87 	bl	800f1a4 <uxr_read_session_header>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d0dc      	beq.n	800ec54 <wait_session_status+0x34>
 800ec9a:	4631      	mov	r1, r6
 800ec9c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800eca0:	f000 ffb6 	bl	800fc10 <uxr_stream_id_from_raw>
 800eca4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800eca8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ecac:	9302      	str	r3, [sp, #8]
 800ecae:	2f01      	cmp	r7, #1
 800ecb0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800ecb4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ecb8:	d05c      	beq.n	800ed74 <wait_session_status+0x154>
 800ecba:	2f02      	cmp	r7, #2
 800ecbc:	d020      	beq.n	800ed00 <wait_session_status+0xe0>
 800ecbe:	2f00      	cmp	r7, #0
 800ecc0:	d1c8      	bne.n	800ec54 <wait_session_status+0x34>
 800ecc2:	4639      	mov	r1, r7
 800ecc4:	4638      	mov	r0, r7
 800ecc6:	f000 ffa3 	bl	800fc10 <uxr_stream_id_from_raw>
 800ecca:	a90c      	add	r1, sp, #48	@ 0x30
 800eccc:	4602      	mov	r2, r0
 800ecce:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f7ff fc2b 	bl	800e52c <read_submessage_list>
 800ecd6:	f001 f8ef 	bl	800feb8 <uxr_millis>
 800ecda:	1b40      	subs	r0, r0, r5
 800ecdc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	dcbe      	bgt.n	800ec62 <wait_session_status+0x42>
 800ece4:	9b03      	ldr	r3, [sp, #12]
 800ece6:	7960      	ldrb	r0, [r4, #5]
 800ece8:	f10b 0b01 	add.w	fp, fp, #1
 800ecec:	455b      	cmp	r3, fp
 800ecee:	d001      	beq.n	800ecf4 <wait_session_status+0xd4>
 800ecf0:	28ff      	cmp	r0, #255	@ 0xff
 800ecf2:	d0a3      	beq.n	800ec3c <wait_session_status+0x1c>
 800ecf4:	38ff      	subs	r0, #255	@ 0xff
 800ecf6:	bf18      	it	ne
 800ecf8:	2001      	movne	r0, #1
 800ecfa:	b01d      	add	sp, #116	@ 0x74
 800ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed00:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800ed04:	9304      	str	r3, [sp, #16]
 800ed06:	4631      	mov	r1, r6
 800ed08:	f104 0008 	add.w	r0, r4, #8
 800ed0c:	f001 f86e 	bl	800fdec <uxr_get_input_reliable_stream>
 800ed10:	4680      	mov	r8, r0
 800ed12:	b348      	cbz	r0, 800ed68 <wait_session_status+0x148>
 800ed14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed16:	9205      	str	r2, [sp, #20]
 800ed18:	a80c      	add	r0, sp, #48	@ 0x30
 800ed1a:	f7fe fdc7 	bl	800d8ac <ucdr_buffer_remaining>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f10d 001d 	add.w	r0, sp, #29
 800ed24:	9000      	str	r0, [sp, #0]
 800ed26:	9a05      	ldr	r2, [sp, #20]
 800ed28:	9902      	ldr	r1, [sp, #8]
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f006 fcde 	bl	80156ec <uxr_receive_reliable_message>
 800ed30:	b1d0      	cbz	r0, 800ed68 <wait_session_status+0x148>
 800ed32:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d03a      	beq.n	800edb0 <wait_session_status+0x190>
 800ed3a:	9f04      	ldr	r7, [sp, #16]
 800ed3c:	e00a      	b.n	800ed54 <wait_session_status+0x134>
 800ed3e:	f04f 0302 	mov.w	r3, #2
 800ed42:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800ed46:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800ed4a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800ed4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed50:	f7ff fbec 	bl	800e52c <read_submessage_list>
 800ed54:	a914      	add	r1, sp, #80	@ 0x50
 800ed56:	2204      	movs	r2, #4
 800ed58:	4640      	mov	r0, r8
 800ed5a:	f006 fd47 	bl	80157ec <uxr_next_input_reliable_buffer_available>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	a914      	add	r1, sp, #80	@ 0x50
 800ed62:	4620      	mov	r0, r4
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1ea      	bne.n	800ed3e <wait_session_status+0x11e>
 800ed68:	9904      	ldr	r1, [sp, #16]
 800ed6a:	4632      	mov	r2, r6
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f7ff fa59 	bl	800e224 <write_submessage_acknack.isra.0>
 800ed72:	e76f      	b.n	800ec54 <wait_session_status+0x34>
 800ed74:	4631      	mov	r1, r6
 800ed76:	f104 0008 	add.w	r0, r4, #8
 800ed7a:	f001 f82d 	bl	800fdd8 <uxr_get_input_best_effort_stream>
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	f43f af68 	beq.w	800ec54 <wait_session_status+0x34>
 800ed84:	9902      	ldr	r1, [sp, #8]
 800ed86:	f006 fc1d 	bl	80155c4 <uxr_receive_best_effort_message>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	f43f af62 	beq.w	800ec54 <wait_session_status+0x34>
 800ed90:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800ed94:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed96:	a90c      	add	r1, sp, #48	@ 0x30
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f7ff fbc7 	bl	800e52c <read_submessage_list>
 800ed9e:	e759      	b.n	800ec54 <wait_session_status+0x34>
 800eda0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eda2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800eda6:	47a0      	blx	r4
 800eda8:	2001      	movs	r0, #1
 800edaa:	b01d      	add	sp, #116	@ 0x74
 800edac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800edb4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800edb6:	a90c      	add	r1, sp, #48	@ 0x30
 800edb8:	4620      	mov	r0, r4
 800edba:	f7ff fbb7 	bl	800e52c <read_submessage_list>
 800edbe:	e7bc      	b.n	800ed3a <wait_session_status+0x11a>

0800edc0 <uxr_delete_session_retries>:
 800edc0:	b530      	push	{r4, r5, lr}
 800edc2:	b08f      	sub	sp, #60	@ 0x3c
 800edc4:	4604      	mov	r4, r0
 800edc6:	460d      	mov	r5, r1
 800edc8:	f000 fa2e 	bl	800f228 <uxr_session_header_offset>
 800edcc:	2300      	movs	r3, #0
 800edce:	2210      	movs	r2, #16
 800edd0:	9000      	str	r0, [sp, #0]
 800edd2:	a902      	add	r1, sp, #8
 800edd4:	a806      	add	r0, sp, #24
 800edd6:	f7fe fd27 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800edda:	a906      	add	r1, sp, #24
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 f973 	bl	800f0c8 <uxr_buffer_delete_session>
 800ede2:	2200      	movs	r2, #0
 800ede4:	4611      	mov	r1, r2
 800ede6:	9b06      	ldr	r3, [sp, #24]
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 f9c7 	bl	800f17c <uxr_stamp_session_header>
 800edee:	a806      	add	r0, sp, #24
 800edf0:	f7fe fd58 	bl	800d8a4 <ucdr_buffer_length>
 800edf4:	462b      	mov	r3, r5
 800edf6:	4602      	mov	r2, r0
 800edf8:	a902      	add	r1, sp, #8
 800edfa:	4620      	mov	r0, r4
 800edfc:	f7ff ff10 	bl	800ec20 <wait_session_status>
 800ee00:	b118      	cbz	r0, 800ee0a <uxr_delete_session_retries+0x4a>
 800ee02:	7960      	ldrb	r0, [r4, #5]
 800ee04:	fab0 f080 	clz	r0, r0
 800ee08:	0940      	lsrs	r0, r0, #5
 800ee0a:	b00f      	add	sp, #60	@ 0x3c
 800ee0c:	bd30      	pop	{r4, r5, pc}
 800ee0e:	bf00      	nop

0800ee10 <uxr_create_session>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	f100 0b08 	add.w	fp, r0, #8
 800ee18:	b0ab      	sub	sp, #172	@ 0xac
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	4658      	mov	r0, fp
 800ee1e:	f000 ff2b 	bl	800fc78 <uxr_reset_stream_storage>
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 fa00 	bl	800f228 <uxr_session_header_offset>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	9000      	str	r0, [sp, #0]
 800ee2c:	221c      	movs	r2, #28
 800ee2e:	a90b      	add	r1, sp, #44	@ 0x2c
 800ee30:	a812      	add	r0, sp, #72	@ 0x48
 800ee32:	f7fe fcf9 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800ee36:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ee38:	8a1a      	ldrh	r2, [r3, #16]
 800ee3a:	3a04      	subs	r2, #4
 800ee3c:	b292      	uxth	r2, r2
 800ee3e:	a912      	add	r1, sp, #72	@ 0x48
 800ee40:	4620      	mov	r0, r4
 800ee42:	f000 f917 	bl	800f074 <uxr_buffer_create_session>
 800ee46:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 f983 	bl	800f154 <uxr_stamp_create_session_header>
 800ee4e:	a812      	add	r0, sp, #72	@ 0x48
 800ee50:	f7fe fd28 	bl	800d8a4 <ucdr_buffer_length>
 800ee54:	23ff      	movs	r3, #255	@ 0xff
 800ee56:	7163      	strb	r3, [r4, #5]
 800ee58:	230a      	movs	r3, #10
 800ee5a:	46da      	mov	sl, fp
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	4683      	mov	fp, r0
 800ee60:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ee62:	465a      	mov	r2, fp
 800ee64:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ee68:	a90b      	add	r1, sp, #44	@ 0x2c
 800ee6a:	47a8      	blx	r5
 800ee6c:	f001 f824 	bl	800feb8 <uxr_millis>
 800ee70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ee74:	4605      	mov	r5, r0
 800ee76:	e009      	b.n	800ee8c <uxr_create_session+0x7c>
 800ee78:	f001 f81e 	bl	800feb8 <uxr_millis>
 800ee7c:	1b40      	subs	r0, r0, r5
 800ee7e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	7962      	ldrb	r2, [r4, #5]
 800ee86:	dd38      	ble.n	800eefa <uxr_create_session+0xea>
 800ee88:	2aff      	cmp	r2, #255	@ 0xff
 800ee8a:	d13c      	bne.n	800ef06 <uxr_create_session+0xf6>
 800ee8c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ee8e:	a907      	add	r1, sp, #28
 800ee90:	6896      	ldr	r6, [r2, #8]
 800ee92:	6810      	ldr	r0, [r2, #0]
 800ee94:	aa08      	add	r2, sp, #32
 800ee96:	47b0      	blx	r6
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d0ed      	beq.n	800ee78 <uxr_create_session+0x68>
 800ee9c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800eea0:	a81a      	add	r0, sp, #104	@ 0x68
 800eea2:	f7fe fcd3 	bl	800d84c <ucdr_init_buffer>
 800eea6:	2600      	movs	r6, #0
 800eea8:	f10d 031a 	add.w	r3, sp, #26
 800eeac:	aa06      	add	r2, sp, #24
 800eeae:	a91a      	add	r1, sp, #104	@ 0x68
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f88d 6018 	strb.w	r6, [sp, #24]
 800eeb6:	f000 f975 	bl	800f1a4 <uxr_read_session_header>
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d0dc      	beq.n	800ee78 <uxr_create_session+0x68>
 800eebe:	4631      	mov	r1, r6
 800eec0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800eec4:	f000 fea4 	bl	800fc10 <uxr_stream_id_from_raw>
 800eec8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800eecc:	2e01      	cmp	r6, #1
 800eece:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800eed2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800eed6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800eeda:	d053      	beq.n	800ef84 <uxr_create_session+0x174>
 800eedc:	2e02      	cmp	r6, #2
 800eede:	d018      	beq.n	800ef12 <uxr_create_session+0x102>
 800eee0:	2e00      	cmp	r6, #0
 800eee2:	d1c9      	bne.n	800ee78 <uxr_create_session+0x68>
 800eee4:	4631      	mov	r1, r6
 800eee6:	4630      	mov	r0, r6
 800eee8:	f000 fe92 	bl	800fc10 <uxr_stream_id_from_raw>
 800eeec:	a91a      	add	r1, sp, #104	@ 0x68
 800eeee:	4602      	mov	r2, r0
 800eef0:	900a      	str	r0, [sp, #40]	@ 0x28
 800eef2:	4620      	mov	r0, r4
 800eef4:	f7ff fb1a 	bl	800e52c <read_submessage_list>
 800eef8:	e7be      	b.n	800ee78 <uxr_create_session+0x68>
 800eefa:	9b03      	ldr	r3, [sp, #12]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	9303      	str	r3, [sp, #12]
 800ef00:	d001      	beq.n	800ef06 <uxr_create_session+0xf6>
 800ef02:	2aff      	cmp	r2, #255	@ 0xff
 800ef04:	d0ac      	beq.n	800ee60 <uxr_create_session+0x50>
 800ef06:	2a00      	cmp	r2, #0
 800ef08:	d051      	beq.n	800efae <uxr_create_session+0x19e>
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	b02b      	add	sp, #172	@ 0xac
 800ef0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef12:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ef16:	9304      	str	r3, [sp, #16]
 800ef18:	4639      	mov	r1, r7
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	f000 ff66 	bl	800fdec <uxr_get_input_reliable_stream>
 800ef20:	4680      	mov	r8, r0
 800ef22:	b348      	cbz	r0, 800ef78 <uxr_create_session+0x168>
 800ef24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ef26:	9205      	str	r2, [sp, #20]
 800ef28:	a81a      	add	r0, sp, #104	@ 0x68
 800ef2a:	f7fe fcbf 	bl	800d8ac <ucdr_buffer_remaining>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	f10d 0019 	add.w	r0, sp, #25
 800ef34:	9000      	str	r0, [sp, #0]
 800ef36:	9a05      	ldr	r2, [sp, #20]
 800ef38:	4649      	mov	r1, r9
 800ef3a:	4640      	mov	r0, r8
 800ef3c:	f006 fbd6 	bl	80156ec <uxr_receive_reliable_message>
 800ef40:	b1d0      	cbz	r0, 800ef78 <uxr_create_session+0x168>
 800ef42:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d038      	beq.n	800efbc <uxr_create_session+0x1ac>
 800ef4a:	9e04      	ldr	r6, [sp, #16]
 800ef4c:	e00a      	b.n	800ef64 <uxr_create_session+0x154>
 800ef4e:	f04f 0302 	mov.w	r3, #2
 800ef52:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800ef56:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800ef5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef60:	f7ff fae4 	bl	800e52c <read_submessage_list>
 800ef64:	a922      	add	r1, sp, #136	@ 0x88
 800ef66:	2204      	movs	r2, #4
 800ef68:	4640      	mov	r0, r8
 800ef6a:	f006 fc3f 	bl	80157ec <uxr_next_input_reliable_buffer_available>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	a922      	add	r1, sp, #136	@ 0x88
 800ef72:	4620      	mov	r0, r4
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1ea      	bne.n	800ef4e <uxr_create_session+0x13e>
 800ef78:	9904      	ldr	r1, [sp, #16]
 800ef7a:	463a      	mov	r2, r7
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7ff f951 	bl	800e224 <write_submessage_acknack.isra.0>
 800ef82:	e779      	b.n	800ee78 <uxr_create_session+0x68>
 800ef84:	4639      	mov	r1, r7
 800ef86:	4650      	mov	r0, sl
 800ef88:	f000 ff26 	bl	800fdd8 <uxr_get_input_best_effort_stream>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	f43f af73 	beq.w	800ee78 <uxr_create_session+0x68>
 800ef92:	4649      	mov	r1, r9
 800ef94:	f006 fb16 	bl	80155c4 <uxr_receive_best_effort_message>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	f43f af6d 	beq.w	800ee78 <uxr_create_session+0x68>
 800ef9e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800efa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800efa4:	a91a      	add	r1, sp, #104	@ 0x68
 800efa6:	4620      	mov	r0, r4
 800efa8:	f7ff fac0 	bl	800e52c <read_submessage_list>
 800efac:	e764      	b.n	800ee78 <uxr_create_session+0x68>
 800efae:	4650      	mov	r0, sl
 800efb0:	f000 fe62 	bl	800fc78 <uxr_reset_stream_storage>
 800efb4:	2001      	movs	r0, #1
 800efb6:	b02b      	add	sp, #172	@ 0xac
 800efb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800efc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800efc2:	a91a      	add	r1, sp, #104	@ 0x68
 800efc4:	4620      	mov	r0, r4
 800efc6:	f7ff fab1 	bl	800e52c <read_submessage_list>
 800efca:	e7be      	b.n	800ef4a <uxr_create_session+0x13a>

0800efcc <uxr_prepare_stream_to_write_submessage>:
 800efcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	4682      	mov	sl, r0
 800efd4:	4610      	mov	r0, r2
 800efd6:	4615      	mov	r5, r2
 800efd8:	461e      	mov	r6, r3
 800efda:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800efde:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800efe2:	9101      	str	r1, [sp, #4]
 800efe4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800efe8:	f000 ff60 	bl	800feac <uxr_submessage_padding>
 800efec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eff0:	f105 0904 	add.w	r9, r5, #4
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	4481      	add	r9, r0
 800eff8:	d01d      	beq.n	800f036 <uxr_prepare_stream_to_write_submessage+0x6a>
 800effa:	2b02      	cmp	r3, #2
 800effc:	d116      	bne.n	800f02c <uxr_prepare_stream_to_write_submessage+0x60>
 800effe:	4621      	mov	r1, r4
 800f000:	f10a 0008 	add.w	r0, sl, #8
 800f004:	f000 fede 	bl	800fdc4 <uxr_get_output_reliable_stream>
 800f008:	4604      	mov	r4, r0
 800f00a:	b158      	cbz	r0, 800f024 <uxr_prepare_stream_to_write_submessage+0x58>
 800f00c:	4649      	mov	r1, r9
 800f00e:	4632      	mov	r2, r6
 800f010:	f006 fda8 	bl	8015b64 <uxr_prepare_reliable_buffer_to_write>
 800f014:	4604      	mov	r4, r0
 800f016:	b12c      	cbz	r4, 800f024 <uxr_prepare_stream_to_write_submessage+0x58>
 800f018:	4643      	mov	r3, r8
 800f01a:	b2aa      	uxth	r2, r5
 800f01c:	4639      	mov	r1, r7
 800f01e:	4630      	mov	r0, r6
 800f020:	f000 ff04 	bl	800fe2c <uxr_buffer_submessage_header>
 800f024:	4620      	mov	r0, r4
 800f026:	b002      	add	sp, #8
 800f028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02c:	2400      	movs	r4, #0
 800f02e:	4620      	mov	r0, r4
 800f030:	b002      	add	sp, #8
 800f032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f036:	4621      	mov	r1, r4
 800f038:	f10a 0008 	add.w	r0, sl, #8
 800f03c:	f000 feba 	bl	800fdb4 <uxr_get_output_best_effort_stream>
 800f040:	4604      	mov	r4, r0
 800f042:	2800      	cmp	r0, #0
 800f044:	d0ee      	beq.n	800f024 <uxr_prepare_stream_to_write_submessage+0x58>
 800f046:	4649      	mov	r1, r9
 800f048:	4632      	mov	r2, r6
 800f04a:	f006 fcbb 	bl	80159c4 <uxr_prepare_best_effort_buffer_to_write>
 800f04e:	4604      	mov	r4, r0
 800f050:	e7e1      	b.n	800f016 <uxr_prepare_stream_to_write_submessage+0x4a>
 800f052:	bf00      	nop

0800f054 <uxr_init_session_info>:
 800f054:	0e13      	lsrs	r3, r2, #24
 800f056:	7043      	strb	r3, [r0, #1]
 800f058:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f05c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f060:	7001      	strb	r1, [r0, #0]
 800f062:	70c3      	strb	r3, [r0, #3]
 800f064:	2109      	movs	r1, #9
 800f066:	23ff      	movs	r3, #255	@ 0xff
 800f068:	f880 c002 	strb.w	ip, [r0, #2]
 800f06c:	7102      	strb	r2, [r0, #4]
 800f06e:	80c1      	strh	r1, [r0, #6]
 800f070:	7143      	strb	r3, [r0, #5]
 800f072:	4770      	bx	lr

0800f074 <uxr_buffer_create_session>:
 800f074:	b530      	push	{r4, r5, lr}
 800f076:	b089      	sub	sp, #36	@ 0x24
 800f078:	2300      	movs	r3, #0
 800f07a:	4d12      	ldr	r5, [pc, #72]	@ (800f0c4 <uxr_buffer_create_session+0x50>)
 800f07c:	9307      	str	r3, [sp, #28]
 800f07e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f082:	2201      	movs	r2, #1
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	80c2      	strh	r2, [r0, #6]
 800f088:	f88d 2004 	strb.w	r2, [sp, #4]
 800f08c:	682a      	ldr	r2, [r5, #0]
 800f08e:	9200      	str	r2, [sp, #0]
 800f090:	88aa      	ldrh	r2, [r5, #4]
 800f092:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f096:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f09a:	9202      	str	r2, [sp, #8]
 800f09c:	460c      	mov	r4, r1
 800f09e:	7802      	ldrb	r2, [r0, #0]
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	f88d 200c 	strb.w	r2, [sp, #12]
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	2210      	movs	r2, #16
 800f0ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f0b0:	9306      	str	r3, [sp, #24]
 800f0b2:	f000 febb 	bl	800fe2c <uxr_buffer_submessage_header>
 800f0b6:	4669      	mov	r1, sp
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f001 feff 	bl	8010ebc <uxr_serialize_CREATE_CLIENT_Payload>
 800f0be:	b009      	add	sp, #36	@ 0x24
 800f0c0:	bd30      	pop	{r4, r5, pc}
 800f0c2:	bf00      	nop
 800f0c4:	08017fec 	.word	0x08017fec

0800f0c8 <uxr_buffer_delete_session>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f0fc <uxr_buffer_delete_session+0x34>)
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f0d2:	f8ad c006 	strh.w	ip, [sp, #6]
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	2202      	movs	r2, #2
 800f0da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0de:	80c2      	strh	r2, [r0, #6]
 800f0e0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f0e4:	2204      	movs	r2, #4
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	2103      	movs	r1, #3
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f000 fe9e 	bl	800fe2c <uxr_buffer_submessage_header>
 800f0f0:	a901      	add	r1, sp, #4
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f001 ff88 	bl	8011008 <uxr_serialize_DELETE_Payload>
 800f0f8:	b002      	add	sp, #8
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	08017fec 	.word	0x08017fec

0800f100 <uxr_read_create_session_status>:
 800f100:	b510      	push	{r4, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	4604      	mov	r4, r0
 800f106:	4608      	mov	r0, r1
 800f108:	a901      	add	r1, sp, #4
 800f10a:	f001 ff8d 	bl	8011028 <uxr_deserialize_STATUS_AGENT_Payload>
 800f10e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f112:	7163      	strb	r3, [r4, #5]
 800f114:	b008      	add	sp, #32
 800f116:	bd10      	pop	{r4, pc}

0800f118 <uxr_read_delete_session_status>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	4604      	mov	r4, r0
 800f11c:	b084      	sub	sp, #16
 800f11e:	4608      	mov	r0, r1
 800f120:	a902      	add	r1, sp, #8
 800f122:	f001 ffb1 	bl	8011088 <uxr_deserialize_STATUS_Payload>
 800f126:	88e3      	ldrh	r3, [r4, #6]
 800f128:	2b02      	cmp	r3, #2
 800f12a:	d001      	beq.n	800f130 <uxr_read_delete_session_status+0x18>
 800f12c:	b004      	add	sp, #16
 800f12e:	bd10      	pop	{r4, pc}
 800f130:	f10d 000a 	add.w	r0, sp, #10
 800f134:	f7fe fecc 	bl	800ded0 <uxr_object_id_from_raw>
 800f138:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f13c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f140:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f144:	b29b      	uxth	r3, r3
 800f146:	2b02      	cmp	r3, #2
 800f148:	bf04      	itt	eq
 800f14a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f14e:	7163      	strbeq	r3, [r4, #5]
 800f150:	b004      	add	sp, #16
 800f152:	bd10      	pop	{r4, pc}

0800f154 <uxr_stamp_create_session_header>:
 800f154:	b510      	push	{r4, lr}
 800f156:	2208      	movs	r2, #8
 800f158:	b08a      	sub	sp, #40	@ 0x28
 800f15a:	4604      	mov	r4, r0
 800f15c:	eb0d 0002 	add.w	r0, sp, r2
 800f160:	f7fe fb74 	bl	800d84c <ucdr_init_buffer>
 800f164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f168:	9400      	str	r4, [sp, #0]
 800f16a:	2300      	movs	r3, #0
 800f16c:	461a      	mov	r2, r3
 800f16e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f172:	a802      	add	r0, sp, #8
 800f174:	f001 f854 	bl	8010220 <uxr_serialize_message_header>
 800f178:	b00a      	add	sp, #40	@ 0x28
 800f17a:	bd10      	pop	{r4, pc}

0800f17c <uxr_stamp_session_header>:
 800f17c:	b530      	push	{r4, r5, lr}
 800f17e:	b08d      	sub	sp, #52	@ 0x34
 800f180:	4604      	mov	r4, r0
 800f182:	460d      	mov	r5, r1
 800f184:	9203      	str	r2, [sp, #12]
 800f186:	4619      	mov	r1, r3
 800f188:	a804      	add	r0, sp, #16
 800f18a:	2208      	movs	r2, #8
 800f18c:	f7fe fb5e 	bl	800d84c <ucdr_init_buffer>
 800f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f194:	9b03      	ldr	r3, [sp, #12]
 800f196:	9400      	str	r4, [sp, #0]
 800f198:	462a      	mov	r2, r5
 800f19a:	a804      	add	r0, sp, #16
 800f19c:	f001 f840 	bl	8010220 <uxr_serialize_message_header>
 800f1a0:	b00d      	add	sp, #52	@ 0x34
 800f1a2:	bd30      	pop	{r4, r5, pc}

0800f1a4 <uxr_read_session_header>:
 800f1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a8:	4607      	mov	r7, r0
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	4615      	mov	r5, r2
 800f1b2:	461e      	mov	r6, r3
 800f1b4:	f7fe fb7a 	bl	800d8ac <ucdr_buffer_remaining>
 800f1b8:	2808      	cmp	r0, #8
 800f1ba:	d803      	bhi.n	800f1c4 <uxr_read_session_header+0x20>
 800f1bc:	2000      	movs	r0, #0
 800f1be:	b004      	add	sp, #16
 800f1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c4:	f10d 080c 	add.w	r8, sp, #12
 800f1c8:	4633      	mov	r3, r6
 800f1ca:	462a      	mov	r2, r5
 800f1cc:	f8cd 8000 	str.w	r8, [sp]
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f10d 010b 	add.w	r1, sp, #11
 800f1d6:	f001 f841 	bl	801025c <uxr_deserialize_message_header>
 800f1da:	783a      	ldrb	r2, [r7, #0]
 800f1dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d1eb      	bne.n	800f1bc <uxr_read_session_header+0x18>
 800f1e4:	061b      	lsls	r3, r3, #24
 800f1e6:	d41c      	bmi.n	800f222 <uxr_read_session_header+0x7e>
 800f1e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f1ec:	787b      	ldrb	r3, [r7, #1]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d003      	beq.n	800f1fa <uxr_read_session_header+0x56>
 800f1f2:	2001      	movs	r0, #1
 800f1f4:	f080 0001 	eor.w	r0, r0, #1
 800f1f8:	e7e1      	b.n	800f1be <uxr_read_session_header+0x1a>
 800f1fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f1fe:	78bb      	ldrb	r3, [r7, #2]
 800f200:	429a      	cmp	r2, r3
 800f202:	f107 0102 	add.w	r1, r7, #2
 800f206:	d1f4      	bne.n	800f1f2 <uxr_read_session_header+0x4e>
 800f208:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f20c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f210:	429a      	cmp	r2, r3
 800f212:	d1ee      	bne.n	800f1f2 <uxr_read_session_header+0x4e>
 800f214:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f218:	784b      	ldrb	r3, [r1, #1]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d1e9      	bne.n	800f1f2 <uxr_read_session_header+0x4e>
 800f21e:	2000      	movs	r0, #0
 800f220:	e7e8      	b.n	800f1f4 <uxr_read_session_header+0x50>
 800f222:	2001      	movs	r0, #1
 800f224:	e7cb      	b.n	800f1be <uxr_read_session_header+0x1a>
 800f226:	bf00      	nop

0800f228 <uxr_session_header_offset>:
 800f228:	f990 3000 	ldrsb.w	r3, [r0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	bfac      	ite	ge
 800f230:	2008      	movge	r0, #8
 800f232:	2004      	movlt	r0, #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop

0800f238 <uxr_init_base_object_request>:
 800f238:	b510      	push	{r4, lr}
 800f23a:	88c3      	ldrh	r3, [r0, #6]
 800f23c:	b082      	sub	sp, #8
 800f23e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f242:	9101      	str	r1, [sp, #4]
 800f244:	f1a3 010a 	sub.w	r1, r3, #10
 800f248:	b289      	uxth	r1, r1
 800f24a:	42a1      	cmp	r1, r4
 800f24c:	d80e      	bhi.n	800f26c <uxr_init_base_object_request+0x34>
 800f24e:	3301      	adds	r3, #1
 800f250:	b29c      	uxth	r4, r3
 800f252:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f256:	b2db      	uxtb	r3, r3
 800f258:	80c4      	strh	r4, [r0, #6]
 800f25a:	9801      	ldr	r0, [sp, #4]
 800f25c:	7011      	strb	r1, [r2, #0]
 800f25e:	7053      	strb	r3, [r2, #1]
 800f260:	1c91      	adds	r1, r2, #2
 800f262:	f7fe fe49 	bl	800def8 <uxr_object_id_to_raw>
 800f266:	4620      	mov	r0, r4
 800f268:	b002      	add	sp, #8
 800f26a:	bd10      	pop	{r4, pc}
 800f26c:	230a      	movs	r3, #10
 800f26e:	2100      	movs	r1, #0
 800f270:	461c      	mov	r4, r3
 800f272:	e7f1      	b.n	800f258 <uxr_init_base_object_request+0x20>

0800f274 <uxr_parse_base_object_request>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	4604      	mov	r4, r0
 800f278:	3002      	adds	r0, #2
 800f27a:	460d      	mov	r5, r1
 800f27c:	4616      	mov	r6, r2
 800f27e:	f7fe fe27 	bl	800ded0 <uxr_object_id_from_raw>
 800f282:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f286:	8028      	strh	r0, [r5, #0]
 800f288:	806b      	strh	r3, [r5, #2]
 800f28a:	7822      	ldrb	r2, [r4, #0]
 800f28c:	7863      	ldrb	r3, [r4, #1]
 800f28e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f292:	8033      	strh	r3, [r6, #0]
 800f294:	bd70      	pop	{r4, r5, r6, pc}
 800f296:	bf00      	nop

0800f298 <uxr_init_framing_io>:
 800f298:	2300      	movs	r3, #0
 800f29a:	7041      	strb	r1, [r0, #1]
 800f29c:	7003      	strb	r3, [r0, #0]
 800f29e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop

0800f2a4 <uxr_write_framed_msg>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	4617      	mov	r7, r2
 800f2aa:	7842      	ldrb	r2, [r0, #1]
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	460e      	mov	r6, r1
 800f2b0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f2b4:	469a      	mov	sl, r3
 800f2b6:	2901      	cmp	r1, #1
 800f2b8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f2bc:	4604      	mov	r4, r0
 800f2be:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f2c2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f2c6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f2ca:	f240 8137 	bls.w	800f53c <uxr_write_framed_msg+0x298>
 800f2ce:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f2d2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f2d6:	2901      	cmp	r1, #1
 800f2d8:	f04f 0202 	mov.w	r2, #2
 800f2dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2e0:	f240 808f 	bls.w	800f402 <uxr_write_framed_msg+0x15e>
 800f2e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2e6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f2ea:	b2dd      	uxtb	r5, r3
 800f2ec:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f2f0:	2203      	movs	r2, #3
 800f2f2:	2901      	cmp	r1, #1
 800f2f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2f8:	f240 809a 	bls.w	800f430 <uxr_write_framed_msg+0x18c>
 800f2fc:	18a1      	adds	r1, r4, r2
 800f2fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f300:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f304:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f308:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f30c:	3201      	adds	r2, #1
 800f30e:	2801      	cmp	r0, #1
 800f310:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f314:	f240 80a0 	bls.w	800f458 <uxr_write_framed_msg+0x1b4>
 800f318:	18a0      	adds	r0, r4, r2
 800f31a:	3201      	adds	r2, #1
 800f31c:	b2d2      	uxtb	r2, r2
 800f31e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f322:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f326:	2b00      	cmp	r3, #0
 800f328:	f000 80a9 	beq.w	800f47e <uxr_write_framed_msg+0x1da>
 800f32c:	f04f 0900 	mov.w	r9, #0
 800f330:	46c8      	mov	r8, r9
 800f332:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f336:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f33a:	2901      	cmp	r1, #1
 800f33c:	f240 80c3 	bls.w	800f4c6 <uxr_write_framed_msg+0x222>
 800f340:	2a29      	cmp	r2, #41	@ 0x29
 800f342:	f200 809f 	bhi.w	800f484 <uxr_write_framed_msg+0x1e0>
 800f346:	18a1      	adds	r1, r4, r2
 800f348:	3201      	adds	r2, #1
 800f34a:	b2d2      	uxtb	r2, r2
 800f34c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f350:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f354:	ea89 0303 	eor.w	r3, r9, r3
 800f358:	498c      	ldr	r1, [pc, #560]	@ (800f58c <uxr_write_framed_msg+0x2e8>)
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	f108 0801 	add.w	r8, r8, #1
 800f360:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f364:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f36a:	4543      	cmp	r3, r8
 800f36c:	d8e1      	bhi.n	800f332 <uxr_write_framed_msg+0x8e>
 800f36e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f372:	fa5f f889 	uxtb.w	r8, r9
 800f376:	9301      	str	r3, [sp, #4]
 800f378:	f04f 0900 	mov.w	r9, #0
 800f37c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800f380:	fa5f f18a 	uxtb.w	r1, sl
 800f384:	2901      	cmp	r1, #1
 800f386:	d921      	bls.n	800f3cc <uxr_write_framed_msg+0x128>
 800f388:	2a29      	cmp	r2, #41	@ 0x29
 800f38a:	f240 80af 	bls.w	800f4ec <uxr_write_framed_msg+0x248>
 800f38e:	2500      	movs	r5, #0
 800f390:	e000      	b.n	800f394 <uxr_write_framed_msg+0xf0>
 800f392:	b160      	cbz	r0, 800f3ae <uxr_write_framed_msg+0x10a>
 800f394:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f398:	1b52      	subs	r2, r2, r5
 800f39a:	465b      	mov	r3, fp
 800f39c:	4421      	add	r1, r4
 800f39e:	4638      	mov	r0, r7
 800f3a0:	47b0      	blx	r6
 800f3a2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f3a6:	4405      	add	r5, r0
 800f3a8:	4295      	cmp	r5, r2
 800f3aa:	d3f2      	bcc.n	800f392 <uxr_write_framed_msg+0xee>
 800f3ac:	d003      	beq.n	800f3b6 <uxr_write_framed_msg+0x112>
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	b003      	add	sp, #12
 800f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b6:	fa5f f18a 	uxtb.w	r1, sl
 800f3ba:	f04f 0300 	mov.w	r3, #0
 800f3be:	2901      	cmp	r1, #1
 800f3c0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f3c4:	f04f 0200 	mov.w	r2, #0
 800f3c8:	f200 8090 	bhi.w	800f4ec <uxr_write_framed_msg+0x248>
 800f3cc:	1c51      	adds	r1, r2, #1
 800f3ce:	b2c9      	uxtb	r1, r1
 800f3d0:	2929      	cmp	r1, #41	@ 0x29
 800f3d2:	d8dc      	bhi.n	800f38e <uxr_write_framed_msg+0xea>
 800f3d4:	18a5      	adds	r5, r4, r2
 800f3d6:	4421      	add	r1, r4
 800f3d8:	3202      	adds	r2, #2
 800f3da:	f088 0820 	eor.w	r8, r8, #32
 800f3de:	4648      	mov	r0, r9
 800f3e0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800f3e4:	b2d2      	uxtb	r2, r2
 800f3e6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800f3ea:	f04f 0901 	mov.w	r9, #1
 800f3ee:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f3f2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f040 8085 	bne.w	800f506 <uxr_write_framed_msg+0x262>
 800f3fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f400:	e7bc      	b.n	800f37c <uxr_write_framed_msg+0xd8>
 800f402:	4611      	mov	r1, r2
 800f404:	f04f 0c03 	mov.w	ip, #3
 800f408:	2204      	movs	r2, #4
 800f40a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f40c:	4421      	add	r1, r4
 800f40e:	b2dd      	uxtb	r5, r3
 800f410:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800f414:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800f418:	44a4      	add	ip, r4
 800f41a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f41e:	f080 0020 	eor.w	r0, r0, #32
 800f422:	2901      	cmp	r1, #1
 800f424:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800f428:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f42c:	f63f af66 	bhi.w	800f2fc <uxr_write_framed_msg+0x58>
 800f430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f432:	18a0      	adds	r0, r4, r2
 800f434:	f085 0520 	eor.w	r5, r5, #32
 800f438:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f43c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f440:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f444:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800f448:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f44c:	3202      	adds	r2, #2
 800f44e:	2801      	cmp	r0, #1
 800f450:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f454:	f63f af60 	bhi.w	800f318 <uxr_write_framed_msg+0x74>
 800f458:	1c50      	adds	r0, r2, #1
 800f45a:	18a5      	adds	r5, r4, r2
 800f45c:	fa54 f080 	uxtab	r0, r4, r0
 800f460:	3202      	adds	r2, #2
 800f462:	f081 0120 	eor.w	r1, r1, #32
 800f466:	b2d2      	uxtb	r2, r2
 800f468:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f46c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800f470:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f474:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f47f af57 	bne.w	800f32c <uxr_write_framed_msg+0x88>
 800f47e:	9301      	str	r3, [sp, #4]
 800f480:	4698      	mov	r8, r3
 800f482:	e779      	b.n	800f378 <uxr_write_framed_msg+0xd4>
 800f484:	2500      	movs	r5, #0
 800f486:	e001      	b.n	800f48c <uxr_write_framed_msg+0x1e8>
 800f488:	2800      	cmp	r0, #0
 800f48a:	d090      	beq.n	800f3ae <uxr_write_framed_msg+0x10a>
 800f48c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f490:	1b52      	subs	r2, r2, r5
 800f492:	465b      	mov	r3, fp
 800f494:	4421      	add	r1, r4
 800f496:	4638      	mov	r0, r7
 800f498:	47b0      	blx	r6
 800f49a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f49e:	4405      	add	r5, r0
 800f4a0:	4295      	cmp	r5, r2
 800f4a2:	d3f1      	bcc.n	800f488 <uxr_write_framed_msg+0x1e4>
 800f4a4:	d183      	bne.n	800f3ae <uxr_write_framed_msg+0x10a>
 800f4a6:	f04f 0300 	mov.w	r3, #0
 800f4aa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4b0:	4543      	cmp	r3, r8
 800f4b2:	d964      	bls.n	800f57e <uxr_write_framed_msg+0x2da>
 800f4b4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f4b8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f4bc:	2901      	cmp	r1, #1
 800f4be:	f04f 0200 	mov.w	r2, #0
 800f4c2:	f63f af3d 	bhi.w	800f340 <uxr_write_framed_msg+0x9c>
 800f4c6:	1c51      	adds	r1, r2, #1
 800f4c8:	b2c9      	uxtb	r1, r1
 800f4ca:	2929      	cmp	r1, #41	@ 0x29
 800f4cc:	d8da      	bhi.n	800f484 <uxr_write_framed_msg+0x1e0>
 800f4ce:	18a0      	adds	r0, r4, r2
 800f4d0:	4421      	add	r1, r4
 800f4d2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800f4d6:	3202      	adds	r2, #2
 800f4d8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800f4dc:	b2d2      	uxtb	r2, r2
 800f4de:	f083 0020 	eor.w	r0, r3, #32
 800f4e2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f4e6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f4ea:	e733      	b.n	800f354 <uxr_write_framed_msg+0xb0>
 800f4ec:	18a1      	adds	r1, r4, r2
 800f4ee:	3201      	adds	r2, #1
 800f4f0:	4648      	mov	r0, r9
 800f4f2:	b2d2      	uxtb	r2, r2
 800f4f4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f4f8:	f04f 0901 	mov.w	r9, #1
 800f4fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f500:	2800      	cmp	r0, #0
 800f502:	f43f af7b 	beq.w	800f3fc <uxr_write_framed_msg+0x158>
 800f506:	2500      	movs	r5, #0
 800f508:	e002      	b.n	800f510 <uxr_write_framed_msg+0x26c>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	f43f af4f 	beq.w	800f3ae <uxr_write_framed_msg+0x10a>
 800f510:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f514:	1b52      	subs	r2, r2, r5
 800f516:	465b      	mov	r3, fp
 800f518:	4421      	add	r1, r4
 800f51a:	4638      	mov	r0, r7
 800f51c:	47b0      	blx	r6
 800f51e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f522:	4405      	add	r5, r0
 800f524:	4295      	cmp	r5, r2
 800f526:	d3f0      	bcc.n	800f50a <uxr_write_framed_msg+0x266>
 800f528:	f47f af41 	bne.w	800f3ae <uxr_write_framed_msg+0x10a>
 800f52c:	2300      	movs	r3, #0
 800f52e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f534:	b298      	uxth	r0, r3
 800f536:	b003      	add	sp, #12
 800f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53c:	217d      	movs	r1, #125	@ 0x7d
 800f53e:	f082 0220 	eor.w	r2, r2, #32
 800f542:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f546:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f54a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f54e:	2901      	cmp	r1, #1
 800f550:	f04f 0203 	mov.w	r2, #3
 800f554:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f558:	d804      	bhi.n	800f564 <uxr_write_framed_msg+0x2c0>
 800f55a:	4611      	mov	r1, r2
 800f55c:	f04f 0c04 	mov.w	ip, #4
 800f560:	2205      	movs	r2, #5
 800f562:	e752      	b.n	800f40a <uxr_write_framed_msg+0x166>
 800f564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f566:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f56a:	b2dd      	uxtb	r5, r3
 800f56c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f570:	2204      	movs	r2, #4
 800f572:	2901      	cmp	r1, #1
 800f574:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f578:	f63f aec0 	bhi.w	800f2fc <uxr_write_framed_msg+0x58>
 800f57c:	e758      	b.n	800f430 <uxr_write_framed_msg+0x18c>
 800f57e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f582:	fa5f f889 	uxtb.w	r8, r9
 800f586:	9301      	str	r3, [sp, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	e6f5      	b.n	800f378 <uxr_write_framed_msg+0xd4>
 800f58c:	08018744 	.word	0x08018744

0800f590 <uxr_framing_read_transport>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	4604      	mov	r4, r0
 800f596:	b083      	sub	sp, #12
 800f598:	461f      	mov	r7, r3
 800f59a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f59e:	4689      	mov	r9, r1
 800f5a0:	4692      	mov	sl, r2
 800f5a2:	f000 fc89 	bl	800feb8 <uxr_millis>
 800f5a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f5aa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f5ae:	42b3      	cmp	r3, r6
 800f5b0:	4680      	mov	r8, r0
 800f5b2:	d061      	beq.n	800f678 <uxr_framing_read_transport+0xe8>
 800f5b4:	d81c      	bhi.n	800f5f0 <uxr_framing_read_transport+0x60>
 800f5b6:	1e75      	subs	r5, r6, #1
 800f5b8:	1aed      	subs	r5, r5, r3
 800f5ba:	b2ed      	uxtb	r5, r5
 800f5bc:	2600      	movs	r6, #0
 800f5be:	455d      	cmp	r5, fp
 800f5c0:	d81f      	bhi.n	800f602 <uxr_framing_read_transport+0x72>
 800f5c2:	19ab      	adds	r3, r5, r6
 800f5c4:	455b      	cmp	r3, fp
 800f5c6:	bf84      	itt	hi
 800f5c8:	ebab 0605 	subhi.w	r6, fp, r5
 800f5cc:	b2f6      	uxtbhi	r6, r6
 800f5ce:	b9ed      	cbnz	r5, 800f60c <uxr_framing_read_transport+0x7c>
 800f5d0:	f04f 0b00 	mov.w	fp, #0
 800f5d4:	f000 fc70 	bl	800feb8 <uxr_millis>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	eba0 0808 	sub.w	r8, r0, r8
 800f5de:	eba3 0308 	sub.w	r3, r3, r8
 800f5e2:	4658      	mov	r0, fp
 800f5e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5e8:	603b      	str	r3, [r7, #0]
 800f5ea:	b003      	add	sp, #12
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f0:	2e00      	cmp	r6, #0
 800f5f2:	d049      	beq.n	800f688 <uxr_framing_read_transport+0xf8>
 800f5f4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f5f8:	b2ed      	uxtb	r5, r5
 800f5fa:	3e01      	subs	r6, #1
 800f5fc:	455d      	cmp	r5, fp
 800f5fe:	b2f6      	uxtb	r6, r6
 800f600:	d9df      	bls.n	800f5c2 <uxr_framing_read_transport+0x32>
 800f602:	fa5f f58b 	uxtb.w	r5, fp
 800f606:	2600      	movs	r6, #0
 800f608:	2d00      	cmp	r5, #0
 800f60a:	d0e1      	beq.n	800f5d0 <uxr_framing_read_transport+0x40>
 800f60c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f610:	3102      	adds	r1, #2
 800f612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	4421      	add	r1, r4
 800f61a:	462a      	mov	r2, r5
 800f61c:	4650      	mov	r0, sl
 800f61e:	47c8      	blx	r9
 800f620:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f624:	4a1a      	ldr	r2, [pc, #104]	@ (800f690 <uxr_framing_read_transport+0x100>)
 800f626:	4403      	add	r3, r0
 800f628:	0859      	lsrs	r1, r3, #1
 800f62a:	fba2 2101 	umull	r2, r1, r2, r1
 800f62e:	0889      	lsrs	r1, r1, #2
 800f630:	222a      	movs	r2, #42	@ 0x2a
 800f632:	fb02 3111 	mls	r1, r2, r1, r3
 800f636:	4683      	mov	fp, r0
 800f638:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d0c7      	beq.n	800f5d0 <uxr_framing_read_transport+0x40>
 800f640:	42a8      	cmp	r0, r5
 800f642:	d1c7      	bne.n	800f5d4 <uxr_framing_read_transport+0x44>
 800f644:	2e00      	cmp	r6, #0
 800f646:	d0c5      	beq.n	800f5d4 <uxr_framing_read_transport+0x44>
 800f648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	3102      	adds	r1, #2
 800f64e:	4632      	mov	r2, r6
 800f650:	4421      	add	r1, r4
 800f652:	2300      	movs	r3, #0
 800f654:	4650      	mov	r0, sl
 800f656:	47c8      	blx	r9
 800f658:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f65c:	4a0c      	ldr	r2, [pc, #48]	@ (800f690 <uxr_framing_read_transport+0x100>)
 800f65e:	180b      	adds	r3, r1, r0
 800f660:	0859      	lsrs	r1, r3, #1
 800f662:	fba2 1201 	umull	r1, r2, r2, r1
 800f666:	0892      	lsrs	r2, r2, #2
 800f668:	212a      	movs	r1, #42	@ 0x2a
 800f66a:	fb01 3312 	mls	r3, r1, r2, r3
 800f66e:	eb00 0b05 	add.w	fp, r0, r5
 800f672:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f676:	e7ad      	b.n	800f5d4 <uxr_framing_read_transport+0x44>
 800f678:	2600      	movs	r6, #0
 800f67a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f67e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f680:	d9bf      	bls.n	800f602 <uxr_framing_read_transport+0x72>
 800f682:	2102      	movs	r1, #2
 800f684:	2529      	movs	r5, #41	@ 0x29
 800f686:	e7c4      	b.n	800f612 <uxr_framing_read_transport+0x82>
 800f688:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f68c:	b2ed      	uxtb	r5, r5
 800f68e:	e796      	b.n	800f5be <uxr_framing_read_transport+0x2e>
 800f690:	30c30c31 	.word	0x30c30c31

0800f694 <uxr_read_framed_msg>:
 800f694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f698:	461e      	mov	r6, r3
 800f69a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800f69e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f6a2:	429d      	cmp	r5, r3
 800f6a4:	b083      	sub	sp, #12
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	4688      	mov	r8, r1
 800f6aa:	4691      	mov	r9, r2
 800f6ac:	f000 8188 	beq.w	800f9c0 <uxr_read_framed_msg+0x32c>
 800f6b0:	7823      	ldrb	r3, [r4, #0]
 800f6b2:	4dc1      	ldr	r5, [pc, #772]	@ (800f9b8 <uxr_read_framed_msg+0x324>)
 800f6b4:	4fc1      	ldr	r7, [pc, #772]	@ (800f9bc <uxr_read_framed_msg+0x328>)
 800f6b6:	2b07      	cmp	r3, #7
 800f6b8:	d8fd      	bhi.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f6ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f6be:	0115      	.short	0x0115
 800f6c0:	00d600f6 	.word	0x00d600f6
 800f6c4:	009000b9 	.word	0x009000b9
 800f6c8:	0030004d 	.word	0x0030004d
 800f6cc:	0008      	.short	0x0008
 800f6ce:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f6d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f6d6:	4299      	cmp	r1, r3
 800f6d8:	f000 814a 	beq.w	800f970 <uxr_read_framed_msg+0x2dc>
 800f6dc:	18e2      	adds	r2, r4, r3
 800f6de:	7892      	ldrb	r2, [r2, #2]
 800f6e0:	2a7d      	cmp	r2, #125	@ 0x7d
 800f6e2:	f000 8199 	beq.w	800fa18 <uxr_read_framed_msg+0x384>
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	0858      	lsrs	r0, r3, #1
 800f6ea:	fba5 1000 	umull	r1, r0, r5, r0
 800f6ee:	0880      	lsrs	r0, r0, #2
 800f6f0:	212a      	movs	r1, #42	@ 0x2a
 800f6f2:	fb01 3310 	mls	r3, r1, r0, r3
 800f6f6:	2a7e      	cmp	r2, #126	@ 0x7e
 800f6f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f6fc:	f000 8252 	beq.w	800fba4 <uxr_read_framed_msg+0x510>
 800f700:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f702:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800f704:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f708:	b29b      	uxth	r3, r3
 800f70a:	2200      	movs	r2, #0
 800f70c:	4299      	cmp	r1, r3
 800f70e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f710:	7022      	strb	r2, [r4, #0]
 800f712:	f000 8179 	beq.w	800fa08 <uxr_read_framed_msg+0x374>
 800f716:	2000      	movs	r0, #0
 800f718:	b003      	add	sp, #12
 800f71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f722:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f726:	4299      	cmp	r1, r3
 800f728:	f000 8131 	beq.w	800f98e <uxr_read_framed_msg+0x2fa>
 800f72c:	18e2      	adds	r2, r4, r3
 800f72e:	7890      	ldrb	r0, [r2, #2]
 800f730:	287d      	cmp	r0, #125	@ 0x7d
 800f732:	f000 8190 	beq.w	800fa56 <uxr_read_framed_msg+0x3c2>
 800f736:	3301      	adds	r3, #1
 800f738:	085a      	lsrs	r2, r3, #1
 800f73a:	fba5 1202 	umull	r1, r2, r5, r2
 800f73e:	0892      	lsrs	r2, r2, #2
 800f740:	212a      	movs	r1, #42	@ 0x2a
 800f742:	fb01 3312 	mls	r3, r1, r2, r3
 800f746:	287e      	cmp	r0, #126	@ 0x7e
 800f748:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f74c:	f000 821a 	beq.w	800fb84 <uxr_read_framed_msg+0x4f0>
 800f750:	2307      	movs	r3, #7
 800f752:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f754:	7023      	strb	r3, [r4, #0]
 800f756:	e7ae      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f758:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f75a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f75e:	459e      	cmp	lr, r3
 800f760:	d938      	bls.n	800f7d4 <uxr_read_framed_msg+0x140>
 800f762:	ee07 8a90 	vmov	s15, r8
 800f766:	212a      	movs	r1, #42	@ 0x2a
 800f768:	e020      	b.n	800f7ac <uxr_read_framed_msg+0x118>
 800f76a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f76e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f772:	f000 80d4 	beq.w	800f91e <uxr_read_framed_msg+0x28a>
 800f776:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f77a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f77e:	f000 8219 	beq.w	800fbb4 <uxr_read_framed_msg+0x520>
 800f782:	f806 c003 	strb.w	ip, [r6, r3]
 800f786:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800f78a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f78c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f790:	ea8a 000c 	eor.w	r0, sl, ip
 800f794:	b2c0      	uxtb	r0, r0
 800f796:	3301      	adds	r3, #1
 800f798:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f7a2:	4573      	cmp	r3, lr
 800f7a4:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f7a6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f7a8:	f080 8120 	bcs.w	800f9ec <uxr_read_framed_msg+0x358>
 800f7ac:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f7b0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f7b4:	f100 0c01 	add.w	ip, r0, #1
 800f7b8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f7bc:	fba5 8202 	umull	r8, r2, r5, r2
 800f7c0:	0892      	lsrs	r2, r2, #2
 800f7c2:	4582      	cmp	sl, r0
 800f7c4:	eb04 0b00 	add.w	fp, r4, r0
 800f7c8:	fb01 c212 	mls	r2, r1, r2, ip
 800f7cc:	d1cd      	bne.n	800f76a <uxr_read_framed_msg+0xd6>
 800f7ce:	ee17 8a90 	vmov	r8, s15
 800f7d2:	459e      	cmp	lr, r3
 800f7d4:	f040 8111 	bne.w	800f9fa <uxr_read_framed_msg+0x366>
 800f7d8:	2306      	movs	r3, #6
 800f7da:	7023      	strb	r3, [r4, #0]
 800f7dc:	e76b      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f7de:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f7e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f7e6:	4298      	cmp	r0, r3
 800f7e8:	f000 80c2 	beq.w	800f970 <uxr_read_framed_msg+0x2dc>
 800f7ec:	18e2      	adds	r2, r4, r3
 800f7ee:	7891      	ldrb	r1, [r2, #2]
 800f7f0:	297d      	cmp	r1, #125	@ 0x7d
 800f7f2:	f000 814c 	beq.w	800fa8e <uxr_read_framed_msg+0x3fa>
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	085a      	lsrs	r2, r3, #1
 800f7fa:	fba5 0202 	umull	r0, r2, r5, r2
 800f7fe:	0892      	lsrs	r2, r2, #2
 800f800:	202a      	movs	r0, #42	@ 0x2a
 800f802:	fb00 3312 	mls	r3, r0, r2, r3
 800f806:	297e      	cmp	r1, #126	@ 0x7e
 800f808:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f80c:	f000 81ca 	beq.w	800fba4 <uxr_read_framed_msg+0x510>
 800f810:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f812:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f816:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f818:	b29b      	uxth	r3, r3
 800f81a:	2000      	movs	r0, #0
 800f81c:	428b      	cmp	r3, r1
 800f81e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f820:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f822:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f824:	f240 80df 	bls.w	800f9e6 <uxr_read_framed_msg+0x352>
 800f828:	7020      	strb	r0, [r4, #0]
 800f82a:	b003      	add	sp, #12
 800f82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f830:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f834:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f838:	4299      	cmp	r1, r3
 800f83a:	f000 80a8 	beq.w	800f98e <uxr_read_framed_msg+0x2fa>
 800f83e:	18e2      	adds	r2, r4, r3
 800f840:	7890      	ldrb	r0, [r2, #2]
 800f842:	287d      	cmp	r0, #125	@ 0x7d
 800f844:	f000 8164 	beq.w	800fb10 <uxr_read_framed_msg+0x47c>
 800f848:	3301      	adds	r3, #1
 800f84a:	085a      	lsrs	r2, r3, #1
 800f84c:	fba5 1202 	umull	r1, r2, r5, r2
 800f850:	0892      	lsrs	r2, r2, #2
 800f852:	212a      	movs	r1, #42	@ 0x2a
 800f854:	fb01 3312 	mls	r3, r1, r2, r3
 800f858:	287e      	cmp	r0, #126	@ 0x7e
 800f85a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f85e:	f000 8191 	beq.w	800fb84 <uxr_read_framed_msg+0x4f0>
 800f862:	2304      	movs	r3, #4
 800f864:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f866:	7023      	strb	r3, [r4, #0]
 800f868:	e725      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f86a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f86e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f872:	4290      	cmp	r0, r2
 800f874:	f000 80b3 	beq.w	800f9de <uxr_read_framed_msg+0x34a>
 800f878:	18a3      	adds	r3, r4, r2
 800f87a:	7899      	ldrb	r1, [r3, #2]
 800f87c:	297d      	cmp	r1, #125	@ 0x7d
 800f87e:	f000 8164 	beq.w	800fb4a <uxr_read_framed_msg+0x4b6>
 800f882:	3201      	adds	r2, #1
 800f884:	0850      	lsrs	r0, r2, #1
 800f886:	fba5 3000 	umull	r3, r0, r5, r0
 800f88a:	0880      	lsrs	r0, r0, #2
 800f88c:	232a      	movs	r3, #42	@ 0x2a
 800f88e:	fb03 2210 	mls	r2, r3, r0, r2
 800f892:	297e      	cmp	r1, #126	@ 0x7e
 800f894:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f898:	f000 8188 	beq.w	800fbac <uxr_read_framed_msg+0x518>
 800f89c:	7863      	ldrb	r3, [r4, #1]
 800f89e:	428b      	cmp	r3, r1
 800f8a0:	bf0c      	ite	eq
 800f8a2:	2303      	moveq	r3, #3
 800f8a4:	2300      	movne	r3, #0
 800f8a6:	7023      	strb	r3, [r4, #0]
 800f8a8:	e705      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f8aa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f8ae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	4299      	cmp	r1, r3
 800f8b6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f8ba:	d06c      	beq.n	800f996 <uxr_read_framed_msg+0x302>
 800f8bc:	18e2      	adds	r2, r4, r3
 800f8be:	7890      	ldrb	r0, [r2, #2]
 800f8c0:	287d      	cmp	r0, #125	@ 0x7d
 800f8c2:	f000 8101 	beq.w	800fac8 <uxr_read_framed_msg+0x434>
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	085a      	lsrs	r2, r3, #1
 800f8ca:	fba5 1202 	umull	r1, r2, r5, r2
 800f8ce:	0892      	lsrs	r2, r2, #2
 800f8d0:	212a      	movs	r1, #42	@ 0x2a
 800f8d2:	fb01 3312 	mls	r3, r1, r2, r3
 800f8d6:	287e      	cmp	r0, #126	@ 0x7e
 800f8d8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f8dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f8e0:	d059      	beq.n	800f996 <uxr_read_framed_msg+0x302>
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	7023      	strb	r3, [r4, #0]
 800f8e6:	e6e6      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f8e8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f8ec:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f8f0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800f8f4:	1c51      	adds	r1, r2, #1
 800f8f6:	084b      	lsrs	r3, r1, #1
 800f8f8:	fba5 c303 	umull	ip, r3, r5, r3
 800f8fc:	089b      	lsrs	r3, r3, #2
 800f8fe:	fb0e 1313 	mls	r3, lr, r3, r1
 800f902:	4592      	cmp	sl, r2
 800f904:	eb04 0002 	add.w	r0, r4, r2
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	f43f af04 	beq.w	800f716 <uxr_read_framed_msg+0x82>
 800f90e:	7883      	ldrb	r3, [r0, #2]
 800f910:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f914:	2b7e      	cmp	r3, #126	@ 0x7e
 800f916:	d1ed      	bne.n	800f8f4 <uxr_read_framed_msg+0x260>
 800f918:	2301      	movs	r3, #1
 800f91a:	7023      	strb	r3, [r4, #0]
 800f91c:	e6cb      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f91e:	f100 0c01 	add.w	ip, r0, #1
 800f922:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f926:	fba5 8202 	umull	r8, r2, r5, r2
 800f92a:	0892      	lsrs	r2, r2, #2
 800f92c:	fb01 c212 	mls	r2, r1, r2, ip
 800f930:	eb04 0c02 	add.w	ip, r4, r2
 800f934:	b2d2      	uxtb	r2, r2
 800f936:	4592      	cmp	sl, r2
 800f938:	f100 0002 	add.w	r0, r0, #2
 800f93c:	f43f af47 	beq.w	800f7ce <uxr_read_framed_msg+0x13a>
 800f940:	0842      	lsrs	r2, r0, #1
 800f942:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f946:	fba5 8202 	umull	r8, r2, r5, r2
 800f94a:	0892      	lsrs	r2, r2, #2
 800f94c:	fb01 0012 	mls	r0, r1, r2, r0
 800f950:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800f954:	f08a 0c20 	eor.w	ip, sl, #32
 800f958:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f95c:	f47f af11 	bne.w	800f782 <uxr_read_framed_msg+0xee>
 800f960:	459e      	cmp	lr, r3
 800f962:	ee17 8a90 	vmov	r8, s15
 800f966:	f43f af37 	beq.w	800f7d8 <uxr_read_framed_msg+0x144>
 800f96a:	2301      	movs	r3, #1
 800f96c:	7023      	strb	r3, [r4, #0]
 800f96e:	e6a2      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f972:	9300      	str	r3, [sp, #0]
 800f974:	2301      	movs	r3, #1
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f97a:	464a      	mov	r2, r9
 800f97c:	4641      	mov	r1, r8
 800f97e:	4620      	mov	r0, r4
 800f980:	f7ff fe06 	bl	800f590 <uxr_framing_read_transport>
 800f984:	2800      	cmp	r0, #0
 800f986:	f43f aec6 	beq.w	800f716 <uxr_read_framed_msg+0x82>
 800f98a:	7823      	ldrb	r3, [r4, #0]
 800f98c:	e693      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f98e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	2302      	movs	r3, #2
 800f994:	e7ef      	b.n	800f976 <uxr_read_framed_msg+0x2e2>
 800f996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f998:	9300      	str	r3, [sp, #0]
 800f99a:	2304      	movs	r3, #4
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	464a      	mov	r2, r9
 800f9a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9a2:	4641      	mov	r1, r8
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f7ff fdf3 	bl	800f590 <uxr_framing_read_transport>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d1ed      	bne.n	800f98a <uxr_read_framed_msg+0x2f6>
 800f9ae:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f9b2:	2b7e      	cmp	r3, #126	@ 0x7e
 800f9b4:	d0e9      	beq.n	800f98a <uxr_read_framed_msg+0x2f6>
 800f9b6:	e6ae      	b.n	800f716 <uxr_read_framed_msg+0x82>
 800f9b8:	30c30c31 	.word	0x30c30c31
 800f9bc:	08018744 	.word	0x08018744
 800f9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	2305      	movs	r3, #5
 800f9c6:	9301      	str	r3, [sp, #4]
 800f9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9ca:	f7ff fde1 	bl	800f590 <uxr_framing_read_transport>
 800f9ce:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f9d2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	f43f ae9d 	beq.w	800f716 <uxr_read_framed_msg+0x82>
 800f9dc:	e668      	b.n	800f6b0 <uxr_read_framed_msg+0x1c>
 800f9de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	e7c7      	b.n	800f976 <uxr_read_framed_msg+0x2e2>
 800f9e6:	2305      	movs	r3, #5
 800f9e8:	7023      	strb	r3, [r4, #0]
 800f9ea:	e664      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800f9ec:	ee17 8a90 	vmov	r8, s15
 800f9f0:	f43f aef2 	beq.w	800f7d8 <uxr_read_framed_msg+0x144>
 800f9f4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f9f8:	d08e      	beq.n	800f918 <uxr_read_framed_msg+0x284>
 800f9fa:	ebae 0303 	sub.w	r3, lr, r3
 800f9fe:	3302      	adds	r3, #2
 800fa00:	9301      	str	r3, [sp, #4]
 800fa02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa04:	9300      	str	r3, [sp, #0]
 800fa06:	e7b7      	b.n	800f978 <uxr_read_framed_msg+0x2e4>
 800fa08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa0a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800fa0e:	7013      	strb	r3, [r2, #0]
 800fa10:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800fa12:	b003      	add	sp, #12
 800fa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa18:	f103 0c01 	add.w	ip, r3, #1
 800fa1c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fa20:	fba5 0202 	umull	r0, r2, r5, r2
 800fa24:	0892      	lsrs	r2, r2, #2
 800fa26:	202a      	movs	r0, #42	@ 0x2a
 800fa28:	fb00 c212 	mls	r2, r0, r2, ip
 800fa2c:	fa5f fc82 	uxtb.w	ip, r2
 800fa30:	4561      	cmp	r1, ip
 800fa32:	d09d      	beq.n	800f970 <uxr_read_framed_msg+0x2dc>
 800fa34:	3302      	adds	r3, #2
 800fa36:	4422      	add	r2, r4
 800fa38:	0859      	lsrs	r1, r3, #1
 800fa3a:	7892      	ldrb	r2, [r2, #2]
 800fa3c:	fba5 c101 	umull	ip, r1, r5, r1
 800fa40:	0889      	lsrs	r1, r1, #2
 800fa42:	fb00 3311 	mls	r3, r0, r1, r3
 800fa46:	2a7e      	cmp	r2, #126	@ 0x7e
 800fa48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fa4c:	f000 80aa 	beq.w	800fba4 <uxr_read_framed_msg+0x510>
 800fa50:	f082 0220 	eor.w	r2, r2, #32
 800fa54:	e654      	b.n	800f700 <uxr_read_framed_msg+0x6c>
 800fa56:	1c58      	adds	r0, r3, #1
 800fa58:	0842      	lsrs	r2, r0, #1
 800fa5a:	fba5 c202 	umull	ip, r2, r5, r2
 800fa5e:	0892      	lsrs	r2, r2, #2
 800fa60:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fa64:	fb0c 0212 	mls	r2, ip, r2, r0
 800fa68:	b2d0      	uxtb	r0, r2
 800fa6a:	4281      	cmp	r1, r0
 800fa6c:	d08f      	beq.n	800f98e <uxr_read_framed_msg+0x2fa>
 800fa6e:	4422      	add	r2, r4
 800fa70:	3302      	adds	r3, #2
 800fa72:	7890      	ldrb	r0, [r2, #2]
 800fa74:	085a      	lsrs	r2, r3, #1
 800fa76:	fba5 1202 	umull	r1, r2, r5, r2
 800fa7a:	0892      	lsrs	r2, r2, #2
 800fa7c:	fb0c 3312 	mls	r3, ip, r2, r3
 800fa80:	287e      	cmp	r0, #126	@ 0x7e
 800fa82:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fa86:	d07d      	beq.n	800fb84 <uxr_read_framed_msg+0x4f0>
 800fa88:	f080 0020 	eor.w	r0, r0, #32
 800fa8c:	e660      	b.n	800f750 <uxr_read_framed_msg+0xbc>
 800fa8e:	1c59      	adds	r1, r3, #1
 800fa90:	084a      	lsrs	r2, r1, #1
 800fa92:	fba5 c202 	umull	ip, r2, r5, r2
 800fa96:	0892      	lsrs	r2, r2, #2
 800fa98:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fa9c:	fb0c 1212 	mls	r2, ip, r2, r1
 800faa0:	b2d1      	uxtb	r1, r2
 800faa2:	4288      	cmp	r0, r1
 800faa4:	f43f af64 	beq.w	800f970 <uxr_read_framed_msg+0x2dc>
 800faa8:	4422      	add	r2, r4
 800faaa:	3302      	adds	r3, #2
 800faac:	7891      	ldrb	r1, [r2, #2]
 800faae:	085a      	lsrs	r2, r3, #1
 800fab0:	fba5 0202 	umull	r0, r2, r5, r2
 800fab4:	0892      	lsrs	r2, r2, #2
 800fab6:	fb0c 3312 	mls	r3, ip, r2, r3
 800faba:	297e      	cmp	r1, #126	@ 0x7e
 800fabc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fac0:	d070      	beq.n	800fba4 <uxr_read_framed_msg+0x510>
 800fac2:	f081 0120 	eor.w	r1, r1, #32
 800fac6:	e6a3      	b.n	800f810 <uxr_read_framed_msg+0x17c>
 800fac8:	f103 0c01 	add.w	ip, r3, #1
 800facc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fad0:	fba5 0202 	umull	r0, r2, r5, r2
 800fad4:	0892      	lsrs	r2, r2, #2
 800fad6:	202a      	movs	r0, #42	@ 0x2a
 800fad8:	fb00 c212 	mls	r2, r0, r2, ip
 800fadc:	fa5f fc82 	uxtb.w	ip, r2
 800fae0:	4561      	cmp	r1, ip
 800fae2:	f43f af58 	beq.w	800f996 <uxr_read_framed_msg+0x302>
 800fae6:	4422      	add	r2, r4
 800fae8:	3302      	adds	r3, #2
 800faea:	7891      	ldrb	r1, [r2, #2]
 800faec:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800faf0:	085a      	lsrs	r2, r3, #1
 800faf2:	fba5 c202 	umull	ip, r2, r5, r2
 800faf6:	0892      	lsrs	r2, r2, #2
 800faf8:	fb00 3312 	mls	r3, r0, r2, r3
 800fafc:	297e      	cmp	r1, #126	@ 0x7e
 800fafe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fb02:	f43f af48 	beq.w	800f996 <uxr_read_framed_msg+0x302>
 800fb06:	f081 0120 	eor.w	r1, r1, #32
 800fb0a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800fb0e:	e6e8      	b.n	800f8e2 <uxr_read_framed_msg+0x24e>
 800fb10:	1c58      	adds	r0, r3, #1
 800fb12:	0842      	lsrs	r2, r0, #1
 800fb14:	fba5 c202 	umull	ip, r2, r5, r2
 800fb18:	0892      	lsrs	r2, r2, #2
 800fb1a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fb1e:	fb0c 0212 	mls	r2, ip, r2, r0
 800fb22:	b2d0      	uxtb	r0, r2
 800fb24:	4281      	cmp	r1, r0
 800fb26:	f43f af32 	beq.w	800f98e <uxr_read_framed_msg+0x2fa>
 800fb2a:	4422      	add	r2, r4
 800fb2c:	3302      	adds	r3, #2
 800fb2e:	7890      	ldrb	r0, [r2, #2]
 800fb30:	085a      	lsrs	r2, r3, #1
 800fb32:	fba5 1202 	umull	r1, r2, r5, r2
 800fb36:	0892      	lsrs	r2, r2, #2
 800fb38:	fb0c 3312 	mls	r3, ip, r2, r3
 800fb3c:	287e      	cmp	r0, #126	@ 0x7e
 800fb3e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fb42:	d01f      	beq.n	800fb84 <uxr_read_framed_msg+0x4f0>
 800fb44:	f080 0020 	eor.w	r0, r0, #32
 800fb48:	e68b      	b.n	800f862 <uxr_read_framed_msg+0x1ce>
 800fb4a:	1c51      	adds	r1, r2, #1
 800fb4c:	084b      	lsrs	r3, r1, #1
 800fb4e:	fba5 c303 	umull	ip, r3, r5, r3
 800fb52:	089b      	lsrs	r3, r3, #2
 800fb54:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fb58:	fb0c 1313 	mls	r3, ip, r3, r1
 800fb5c:	b2d9      	uxtb	r1, r3
 800fb5e:	4288      	cmp	r0, r1
 800fb60:	f43f af3d 	beq.w	800f9de <uxr_read_framed_msg+0x34a>
 800fb64:	3202      	adds	r2, #2
 800fb66:	4423      	add	r3, r4
 800fb68:	0850      	lsrs	r0, r2, #1
 800fb6a:	789b      	ldrb	r3, [r3, #2]
 800fb6c:	fba5 1000 	umull	r1, r0, r5, r0
 800fb70:	0880      	lsrs	r0, r0, #2
 800fb72:	fb0c 2210 	mls	r2, ip, r0, r2
 800fb76:	2b7e      	cmp	r3, #126	@ 0x7e
 800fb78:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fb7c:	d016      	beq.n	800fbac <uxr_read_framed_msg+0x518>
 800fb7e:	f083 0120 	eor.w	r1, r3, #32
 800fb82:	e68b      	b.n	800f89c <uxr_read_framed_msg+0x208>
 800fb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	2302      	movs	r3, #2
 800fb8a:	9301      	str	r3, [sp, #4]
 800fb8c:	464a      	mov	r2, r9
 800fb8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb90:	4641      	mov	r1, r8
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7ff fcfc 	bl	800f590 <uxr_framing_read_transport>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	f47f aef6 	bne.w	800f98a <uxr_read_framed_msg+0x2f6>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	7023      	strb	r3, [r4, #0]
 800fba2:	e588      	b.n	800f6b6 <uxr_read_framed_msg+0x22>
 800fba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e7ee      	b.n	800fb8a <uxr_read_framed_msg+0x4f6>
 800fbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	2303      	movs	r3, #3
 800fbb2:	e7ea      	b.n	800fb8a <uxr_read_framed_msg+0x4f6>
 800fbb4:	ee17 8a90 	vmov	r8, s15
 800fbb8:	e6ae      	b.n	800f918 <uxr_read_framed_msg+0x284>
 800fbba:	bf00      	nop

0800fbbc <uxr_stream_id>:
 800fbbc:	2901      	cmp	r1, #1
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	d01d      	beq.n	800fbfe <uxr_stream_id+0x42>
 800fbc2:	2902      	cmp	r1, #2
 800fbc4:	f04f 0c00 	mov.w	ip, #0
 800fbc8:	d01e      	beq.n	800fc08 <uxr_stream_id+0x4c>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	f36c 0307 	bfi	r3, ip, #0, #8
 800fbd0:	f360 230f 	bfi	r3, r0, #8, #8
 800fbd4:	f361 4317 	bfi	r3, r1, #16, #8
 800fbd8:	f362 631f 	bfi	r3, r2, #24, #8
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	2000      	movs	r0, #0
 800fbe0:	f362 0007 	bfi	r0, r2, #0, #8
 800fbe4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fbe8:	f362 200f 	bfi	r0, r2, #8, #8
 800fbec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fbf0:	f362 4017 	bfi	r0, r2, #16, #8
 800fbf4:	0e1b      	lsrs	r3, r3, #24
 800fbf6:	f363 601f 	bfi	r0, r3, #24, #8
 800fbfa:	b002      	add	sp, #8
 800fbfc:	4770      	bx	lr
 800fbfe:	f100 0c01 	add.w	ip, r0, #1
 800fc02:	fa5f fc8c 	uxtb.w	ip, ip
 800fc06:	e7e0      	b.n	800fbca <uxr_stream_id+0xe>
 800fc08:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800fc0c:	e7dd      	b.n	800fbca <uxr_stream_id+0xe>
 800fc0e:	bf00      	nop

0800fc10 <uxr_stream_id_from_raw>:
 800fc10:	b082      	sub	sp, #8
 800fc12:	b130      	cbz	r0, 800fc22 <uxr_stream_id_from_raw+0x12>
 800fc14:	0603      	lsls	r3, r0, #24
 800fc16:	d420      	bmi.n	800fc5a <uxr_stream_id_from_raw+0x4a>
 800fc18:	1e42      	subs	r2, r0, #1
 800fc1a:	b2d2      	uxtb	r2, r2
 800fc1c:	f04f 0c01 	mov.w	ip, #1
 800fc20:	e001      	b.n	800fc26 <uxr_stream_id_from_raw+0x16>
 800fc22:	4684      	mov	ip, r0
 800fc24:	4602      	mov	r2, r0
 800fc26:	2300      	movs	r3, #0
 800fc28:	f360 0307 	bfi	r3, r0, #0, #8
 800fc2c:	f362 230f 	bfi	r3, r2, #8, #8
 800fc30:	f36c 4317 	bfi	r3, ip, #16, #8
 800fc34:	f361 631f 	bfi	r3, r1, #24, #8
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	f362 0007 	bfi	r0, r2, #0, #8
 800fc40:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fc44:	f362 200f 	bfi	r0, r2, #8, #8
 800fc48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fc4c:	f362 4017 	bfi	r0, r2, #16, #8
 800fc50:	0e1b      	lsrs	r3, r3, #24
 800fc52:	f363 601f 	bfi	r0, r3, #24, #8
 800fc56:	b002      	add	sp, #8
 800fc58:	4770      	bx	lr
 800fc5a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800fc5e:	f04f 0c02 	mov.w	ip, #2
 800fc62:	e7e0      	b.n	800fc26 <uxr_stream_id_from_raw+0x16>

0800fc64 <uxr_init_stream_storage>:
 800fc64:	2300      	movs	r3, #0
 800fc66:	7403      	strb	r3, [r0, #16]
 800fc68:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800fc6c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800fc70:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop

0800fc78 <uxr_reset_stream_storage>:
 800fc78:	b570      	push	{r4, r5, r6, lr}
 800fc7a:	7c03      	ldrb	r3, [r0, #16]
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	b153      	cbz	r3, 800fc96 <uxr_reset_stream_storage+0x1e>
 800fc80:	4606      	mov	r6, r0
 800fc82:	2500      	movs	r5, #0
 800fc84:	4630      	mov	r0, r6
 800fc86:	f005 fe97 	bl	80159b8 <uxr_reset_output_best_effort_stream>
 800fc8a:	7c23      	ldrb	r3, [r4, #16]
 800fc8c:	3501      	adds	r5, #1
 800fc8e:	42ab      	cmp	r3, r5
 800fc90:	f106 0610 	add.w	r6, r6, #16
 800fc94:	d8f6      	bhi.n	800fc84 <uxr_reset_stream_storage+0xc>
 800fc96:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fc9a:	b163      	cbz	r3, 800fcb6 <uxr_reset_stream_storage+0x3e>
 800fc9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fca0:	2500      	movs	r5, #0
 800fca2:	4630      	mov	r0, r6
 800fca4:	f005 fc8a 	bl	80155bc <uxr_reset_input_best_effort_stream>
 800fca8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fcac:	3501      	adds	r5, #1
 800fcae:	42ab      	cmp	r3, r5
 800fcb0:	f106 0602 	add.w	r6, r6, #2
 800fcb4:	d8f5      	bhi.n	800fca2 <uxr_reset_stream_storage+0x2a>
 800fcb6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fcba:	b163      	cbz	r3, 800fcd6 <uxr_reset_stream_storage+0x5e>
 800fcbc:	f104 0618 	add.w	r6, r4, #24
 800fcc0:	2500      	movs	r5, #0
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	f005 ff24 	bl	8015b10 <uxr_reset_output_reliable_stream>
 800fcc8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fccc:	3501      	adds	r5, #1
 800fcce:	42ab      	cmp	r3, r5
 800fcd0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800fcd4:	d8f5      	bhi.n	800fcc2 <uxr_reset_stream_storage+0x4a>
 800fcd6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fcda:	b163      	cbz	r3, 800fcf6 <uxr_reset_stream_storage+0x7e>
 800fcdc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800fce0:	2500      	movs	r5, #0
 800fce2:	4630      	mov	r0, r6
 800fce4:	f005 fcde 	bl	80156a4 <uxr_reset_input_reliable_stream>
 800fce8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fcec:	3501      	adds	r5, #1
 800fcee:	42ab      	cmp	r3, r5
 800fcf0:	f106 0618 	add.w	r6, r6, #24
 800fcf4:	d8f5      	bhi.n	800fce2 <uxr_reset_stream_storage+0x6a>
 800fcf6:	bd70      	pop	{r4, r5, r6, pc}

0800fcf8 <uxr_add_output_best_effort_buffer>:
 800fcf8:	b510      	push	{r4, lr}
 800fcfa:	7c04      	ldrb	r4, [r0, #16]
 800fcfc:	f104 0c01 	add.w	ip, r4, #1
 800fd00:	b082      	sub	sp, #8
 800fd02:	f880 c010 	strb.w	ip, [r0, #16]
 800fd06:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fd0a:	f005 fe4b 	bl	80159a4 <uxr_init_output_best_effort_stream>
 800fd0e:	2201      	movs	r2, #1
 800fd10:	4611      	mov	r1, r2
 800fd12:	4620      	mov	r0, r4
 800fd14:	b002      	add	sp, #8
 800fd16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd1a:	f7ff bf4f 	b.w	800fbbc <uxr_stream_id>
 800fd1e:	bf00      	nop

0800fd20 <uxr_add_output_reliable_buffer>:
 800fd20:	b510      	push	{r4, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	4684      	mov	ip, r0
 800fd26:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fd2a:	9000      	str	r0, [sp, #0]
 800fd2c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800fd30:	2028      	movs	r0, #40	@ 0x28
 800fd32:	fb00 c004 	mla	r0, r0, r4, ip
 800fd36:	f104 0e01 	add.w	lr, r4, #1
 800fd3a:	3018      	adds	r0, #24
 800fd3c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800fd40:	f005 feae 	bl	8015aa0 <uxr_init_output_reliable_stream>
 800fd44:	2201      	movs	r2, #1
 800fd46:	2102      	movs	r1, #2
 800fd48:	4620      	mov	r0, r4
 800fd4a:	b004      	add	sp, #16
 800fd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd50:	f7ff bf34 	b.w	800fbbc <uxr_stream_id>

0800fd54 <uxr_add_input_best_effort_buffer>:
 800fd54:	b510      	push	{r4, lr}
 800fd56:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	1c62      	adds	r2, r4, #1
 800fd5e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800fd62:	b082      	sub	sp, #8
 800fd64:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800fd68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd6c:	f005 fc22 	bl	80155b4 <uxr_init_input_best_effort_stream>
 800fd70:	2200      	movs	r2, #0
 800fd72:	2101      	movs	r1, #1
 800fd74:	4620      	mov	r0, r4
 800fd76:	b002      	add	sp, #8
 800fd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd7c:	f7ff bf1e 	b.w	800fbbc <uxr_stream_id>

0800fd80 <uxr_add_input_reliable_buffer>:
 800fd80:	b510      	push	{r4, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	4684      	mov	ip, r0
 800fd86:	9806      	ldr	r0, [sp, #24]
 800fd88:	9000      	str	r0, [sp, #0]
 800fd8a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800fd8e:	2018      	movs	r0, #24
 800fd90:	fb00 c004 	mla	r0, r0, r4, ip
 800fd94:	f104 0e01 	add.w	lr, r4, #1
 800fd98:	3048      	adds	r0, #72	@ 0x48
 800fd9a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800fd9e:	f005 fc55 	bl	801564c <uxr_init_input_reliable_stream>
 800fda2:	2200      	movs	r2, #0
 800fda4:	2102      	movs	r1, #2
 800fda6:	4620      	mov	r0, r4
 800fda8:	b004      	add	sp, #16
 800fdaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdae:	f7ff bf05 	b.w	800fbbc <uxr_stream_id>
 800fdb2:	bf00      	nop

0800fdb4 <uxr_get_output_best_effort_stream>:
 800fdb4:	7c03      	ldrb	r3, [r0, #16]
 800fdb6:	428b      	cmp	r3, r1
 800fdb8:	bf8c      	ite	hi
 800fdba:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fdbe:	2000      	movls	r0, #0
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop

0800fdc4 <uxr_get_output_reliable_stream>:
 800fdc4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fdc8:	428b      	cmp	r3, r1
 800fdca:	bf83      	ittte	hi
 800fdcc:	2328      	movhi	r3, #40	@ 0x28
 800fdce:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fdd2:	3018      	addhi	r0, #24
 800fdd4:	2000      	movls	r0, #0
 800fdd6:	4770      	bx	lr

0800fdd8 <uxr_get_input_best_effort_stream>:
 800fdd8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fddc:	428b      	cmp	r3, r1
 800fdde:	bf86      	itte	hi
 800fde0:	3121      	addhi	r1, #33	@ 0x21
 800fde2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800fde6:	2000      	movls	r0, #0
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop

0800fdec <uxr_get_input_reliable_stream>:
 800fdec:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800fdf0:	428b      	cmp	r3, r1
 800fdf2:	bf83      	ittte	hi
 800fdf4:	2318      	movhi	r3, #24
 800fdf6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fdfa:	3048      	addhi	r0, #72	@ 0x48
 800fdfc:	2000      	movls	r0, #0
 800fdfe:	4770      	bx	lr

0800fe00 <uxr_output_streams_confirmed>:
 800fe00:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fe04:	b183      	cbz	r3, 800fe28 <uxr_output_streams_confirmed+0x28>
 800fe06:	b570      	push	{r4, r5, r6, lr}
 800fe08:	4606      	mov	r6, r0
 800fe0a:	f100 0518 	add.w	r5, r0, #24
 800fe0e:	2400      	movs	r4, #0
 800fe10:	e001      	b.n	800fe16 <uxr_output_streams_confirmed+0x16>
 800fe12:	3528      	adds	r5, #40	@ 0x28
 800fe14:	b138      	cbz	r0, 800fe26 <uxr_output_streams_confirmed+0x26>
 800fe16:	4628      	mov	r0, r5
 800fe18:	f006 f8ea 	bl	8015ff0 <uxr_is_output_up_to_date>
 800fe1c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800fe20:	3401      	adds	r4, #1
 800fe22:	42a3      	cmp	r3, r4
 800fe24:	d8f5      	bhi.n	800fe12 <uxr_output_streams_confirmed+0x12>
 800fe26:	bd70      	pop	{r4, r5, r6, pc}
 800fe28:	2001      	movs	r0, #1
 800fe2a:	4770      	bx	lr

0800fe2c <uxr_buffer_submessage_header>:
 800fe2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe2e:	4604      	mov	r4, r0
 800fe30:	460e      	mov	r6, r1
 800fe32:	2104      	movs	r1, #4
 800fe34:	4615      	mov	r5, r2
 800fe36:	461f      	mov	r7, r3
 800fe38:	f7fd fd22 	bl	800d880 <ucdr_align_to>
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	ea47 0203 	orr.w	r2, r7, r3
 800fe42:	4631      	mov	r1, r6
 800fe44:	7523      	strb	r3, [r4, #20]
 800fe46:	4620      	mov	r0, r4
 800fe48:	462b      	mov	r3, r5
 800fe4a:	f000 fa27 	bl	801029c <uxr_serialize_submessage_header>
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f7fd fd2c 	bl	800d8ac <ucdr_buffer_remaining>
 800fe54:	42a8      	cmp	r0, r5
 800fe56:	bf34      	ite	cc
 800fe58:	2000      	movcc	r0, #0
 800fe5a:	2001      	movcs	r0, #1
 800fe5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe5e:	bf00      	nop

0800fe60 <uxr_read_submessage_header>:
 800fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe64:	4604      	mov	r4, r0
 800fe66:	460d      	mov	r5, r1
 800fe68:	2104      	movs	r1, #4
 800fe6a:	4616      	mov	r6, r2
 800fe6c:	4698      	mov	r8, r3
 800fe6e:	f7fd fd07 	bl	800d880 <ucdr_align_to>
 800fe72:	4620      	mov	r0, r4
 800fe74:	f7fd fd1a 	bl	800d8ac <ucdr_buffer_remaining>
 800fe78:	2803      	cmp	r0, #3
 800fe7a:	bf8c      	ite	hi
 800fe7c:	2701      	movhi	r7, #1
 800fe7e:	2700      	movls	r7, #0
 800fe80:	d802      	bhi.n	800fe88 <uxr_read_submessage_header+0x28>
 800fe82:	4638      	mov	r0, r7
 800fe84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe88:	4633      	mov	r3, r6
 800fe8a:	4642      	mov	r2, r8
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	4629      	mov	r1, r5
 800fe90:	f000 fa18 	bl	80102c4 <uxr_deserialize_submessage_header>
 800fe94:	f898 3000 	ldrb.w	r3, [r8]
 800fe98:	f003 0201 	and.w	r2, r3, #1
 800fe9c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fea0:	f888 3000 	strb.w	r3, [r8]
 800fea4:	7522      	strb	r2, [r4, #20]
 800fea6:	4638      	mov	r0, r7
 800fea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800feac <uxr_submessage_padding>:
 800feac:	f010 0003 	ands.w	r0, r0, #3
 800feb0:	bf18      	it	ne
 800feb2:	f1c0 0004 	rsbne	r0, r0, #4
 800feb6:	4770      	bx	lr

0800feb8 <uxr_millis>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	4669      	mov	r1, sp
 800febe:	2001      	movs	r0, #1
 800fec0:	f7f1 fa7e 	bl	80013c0 <clock_gettime>
 800fec4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800fec8:	4906      	ldr	r1, [pc, #24]	@ (800fee4 <uxr_millis+0x2c>)
 800feca:	fba0 0301 	umull	r0, r3, r0, r1
 800fece:	1900      	adds	r0, r0, r4
 800fed0:	fb01 3102 	mla	r1, r1, r2, r3
 800fed4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fed8:	4a03      	ldr	r2, [pc, #12]	@ (800fee8 <uxr_millis+0x30>)
 800feda:	2300      	movs	r3, #0
 800fedc:	f7f0 fa08 	bl	80002f0 <__aeabi_ldivmod>
 800fee0:	b004      	add	sp, #16
 800fee2:	bd10      	pop	{r4, pc}
 800fee4:	3b9aca00 	.word	0x3b9aca00
 800fee8:	000f4240 	.word	0x000f4240

0800feec <uxr_nanos>:
 800feec:	b510      	push	{r4, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	4669      	mov	r1, sp
 800fef2:	2001      	movs	r0, #1
 800fef4:	f7f1 fa64 	bl	80013c0 <clock_gettime>
 800fef8:	4a06      	ldr	r2, [pc, #24]	@ (800ff14 <uxr_nanos+0x28>)
 800fefa:	9800      	ldr	r0, [sp, #0]
 800fefc:	9902      	ldr	r1, [sp, #8]
 800fefe:	9c01      	ldr	r4, [sp, #4]
 800ff00:	fba0 0302 	umull	r0, r3, r0, r2
 800ff04:	1840      	adds	r0, r0, r1
 800ff06:	fb02 3304 	mla	r3, r2, r4, r3
 800ff0a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ff0e:	b004      	add	sp, #16
 800ff10:	bd10      	pop	{r4, pc}
 800ff12:	bf00      	nop
 800ff14:	3b9aca00 	.word	0x3b9aca00

0800ff18 <on_full_output_buffer_fragmented>:
 800ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	b08a      	sub	sp, #40	@ 0x28
 800ff20:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800ff24:	4606      	mov	r6, r0
 800ff26:	f104 0008 	add.w	r0, r4, #8
 800ff2a:	f7ff ff4b 	bl	800fdc4 <uxr_get_output_reliable_stream>
 800ff2e:	4605      	mov	r5, r0
 800ff30:	f006 f868 	bl	8016004 <get_available_free_slots>
 800ff34:	b968      	cbnz	r0, 800ff52 <on_full_output_buffer_fragmented+0x3a>
 800ff36:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	4798      	blx	r3
 800ff3e:	b918      	cbnz	r0, 800ff48 <on_full_output_buffer_fragmented+0x30>
 800ff40:	2001      	movs	r0, #1
 800ff42:	b00a      	add	sp, #40	@ 0x28
 800ff44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff48:	4628      	mov	r0, r5
 800ff4a:	f006 f85b 	bl	8016004 <get_available_free_slots>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d0f6      	beq.n	800ff40 <on_full_output_buffer_fragmented+0x28>
 800ff52:	8929      	ldrh	r1, [r5, #8]
 800ff54:	89eb      	ldrh	r3, [r5, #14]
 800ff56:	7b28      	ldrb	r0, [r5, #12]
 800ff58:	686a      	ldr	r2, [r5, #4]
 800ff5a:	fbb2 f8f1 	udiv	r8, r2, r1
 800ff5e:	fbb3 f2f1 	udiv	r2, r3, r1
 800ff62:	fb01 3112 	mls	r1, r1, r2, r3
 800ff66:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800ff6a:	b289      	uxth	r1, r1
 800ff6c:	fb08 f101 	mul.w	r1, r8, r1
 800ff70:	30fc      	adds	r0, #252	@ 0xfc
 800ff72:	f1a8 0804 	sub.w	r8, r8, #4
 800ff76:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800ff7a:	4440      	add	r0, r8
 800ff7c:	b287      	uxth	r7, r0
 800ff7e:	1bdb      	subs	r3, r3, r7
 800ff80:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800ff84:	682b      	ldr	r3, [r5, #0]
 800ff86:	3104      	adds	r1, #4
 800ff88:	4419      	add	r1, r3
 800ff8a:	4642      	mov	r2, r8
 800ff8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	a802      	add	r0, sp, #8
 800ff94:	2300      	movs	r3, #0
 800ff96:	f7fd fc47 	bl	800d828 <ucdr_init_buffer_origin_offset>
 800ff9a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ff9e:	f102 0308 	add.w	r3, r2, #8
 800ffa2:	4543      	cmp	r3, r8
 800ffa4:	d928      	bls.n	800fff8 <on_full_output_buffer_fragmented+0xe0>
 800ffa6:	463a      	mov	r2, r7
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	210d      	movs	r1, #13
 800ffac:	a802      	add	r0, sp, #8
 800ffae:	f7ff ff3d 	bl	800fe2c <uxr_buffer_submessage_header>
 800ffb2:	8929      	ldrh	r1, [r5, #8]
 800ffb4:	89eb      	ldrh	r3, [r5, #14]
 800ffb6:	fbb3 f2f1 	udiv	r2, r3, r1
 800ffba:	fb01 3312 	mls	r3, r1, r2, r3
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	686a      	ldr	r2, [r5, #4]
 800ffc2:	fbb2 f2f1 	udiv	r2, r2, r1
 800ffc6:	fb02 f303 	mul.w	r3, r2, r3
 800ffca:	682a      	ldr	r2, [r5, #0]
 800ffcc:	f842 8003 	str.w	r8, [r2, r3]
 800ffd0:	89e8      	ldrh	r0, [r5, #14]
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	f006 f836 	bl	8016044 <uxr_seq_num_add>
 800ffd8:	9904      	ldr	r1, [sp, #16]
 800ffda:	9a03      	ldr	r2, [sp, #12]
 800ffdc:	81e8      	strh	r0, [r5, #14]
 800ffde:	1a52      	subs	r2, r2, r1
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f7fd fc33 	bl	800d84c <ucdr_init_buffer>
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	490f      	ldr	r1, [pc, #60]	@ (8010028 <on_full_output_buffer_fragmented+0x110>)
 800ffea:	4622      	mov	r2, r4
 800ffec:	f7fd fc02 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 800fff0:	2000      	movs	r0, #0
 800fff2:	b00a      	add	sp, #40	@ 0x28
 800fff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff8:	b292      	uxth	r2, r2
 800fffa:	2302      	movs	r3, #2
 800fffc:	210d      	movs	r1, #13
 800fffe:	a802      	add	r0, sp, #8
 8010000:	f7ff ff14 	bl	800fe2c <uxr_buffer_submessage_header>
 8010004:	8928      	ldrh	r0, [r5, #8]
 8010006:	89eb      	ldrh	r3, [r5, #14]
 8010008:	fbb3 f1f0 	udiv	r1, r3, r0
 801000c:	fb00 3311 	mls	r3, r0, r1, r3
 8010010:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010014:	6869      	ldr	r1, [r5, #4]
 8010016:	fbb1 f1f0 	udiv	r1, r1, r0
 801001a:	b29b      	uxth	r3, r3
 801001c:	fb01 f303 	mul.w	r3, r1, r3
 8010020:	6829      	ldr	r1, [r5, #0]
 8010022:	3208      	adds	r2, #8
 8010024:	50ca      	str	r2, [r1, r3]
 8010026:	e7d3      	b.n	800ffd0 <on_full_output_buffer_fragmented+0xb8>
 8010028:	0800ff19 	.word	0x0800ff19

0801002c <uxr_prepare_output_stream>:
 801002c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801002e:	b087      	sub	sp, #28
 8010030:	2707      	movs	r7, #7
 8010032:	9202      	str	r2, [sp, #8]
 8010034:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010036:	9103      	str	r1, [sp, #12]
 8010038:	2500      	movs	r5, #0
 801003a:	3204      	adds	r2, #4
 801003c:	e9cd 7500 	strd	r7, r5, [sp]
 8010040:	461c      	mov	r4, r3
 8010042:	4606      	mov	r6, r0
 8010044:	f7fe ffc2 	bl	800efcc <uxr_prepare_stream_to_write_submessage>
 8010048:	f080 0201 	eor.w	r2, r0, #1
 801004c:	b2d2      	uxtb	r2, r2
 801004e:	75a2      	strb	r2, [r4, #22]
 8010050:	b112      	cbz	r2, 8010058 <uxr_prepare_output_stream+0x2c>
 8010052:	4628      	mov	r0, r5
 8010054:	b007      	add	sp, #28
 8010056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010058:	aa05      	add	r2, sp, #20
 801005a:	9902      	ldr	r1, [sp, #8]
 801005c:	4630      	mov	r0, r6
 801005e:	f7ff f8eb 	bl	800f238 <uxr_init_base_object_request>
 8010062:	a905      	add	r1, sp, #20
 8010064:	4605      	mov	r5, r0
 8010066:	4620      	mov	r0, r4
 8010068:	f001 f88c 	bl	8011184 <uxr_serialize_WRITE_DATA_Payload_Data>
 801006c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010070:	69a6      	ldr	r6, [r4, #24]
 8010072:	69e7      	ldr	r7, [r4, #28]
 8010074:	1a52      	subs	r2, r2, r1
 8010076:	4620      	mov	r0, r4
 8010078:	f7fd fbe8 	bl	800d84c <ucdr_init_buffer>
 801007c:	4620      	mov	r0, r4
 801007e:	463a      	mov	r2, r7
 8010080:	4631      	mov	r1, r6
 8010082:	f7fd fbb7 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 8010086:	4628      	mov	r0, r5
 8010088:	b007      	add	sp, #28
 801008a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801008c <uxr_prepare_output_stream_fragmented>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	b091      	sub	sp, #68	@ 0x44
 8010092:	4605      	mov	r5, r0
 8010094:	9105      	str	r1, [sp, #20]
 8010096:	3008      	adds	r0, #8
 8010098:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801009c:	461e      	mov	r6, r3
 801009e:	9204      	str	r2, [sp, #16]
 80100a0:	f7ff fe90 	bl	800fdc4 <uxr_get_output_reliable_stream>
 80100a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	f000 8091 	beq.w	80101d0 <uxr_prepare_output_stream_fragmented+0x144>
 80100ae:	4604      	mov	r4, r0
 80100b0:	2800      	cmp	r0, #0
 80100b2:	f000 808d 	beq.w	80101d0 <uxr_prepare_output_stream_fragmented+0x144>
 80100b6:	f005 ffa5 	bl	8016004 <get_available_free_slots>
 80100ba:	2800      	cmp	r0, #0
 80100bc:	f000 8083 	beq.w	80101c6 <uxr_prepare_output_stream_fragmented+0x13a>
 80100c0:	8922      	ldrh	r2, [r4, #8]
 80100c2:	89e7      	ldrh	r7, [r4, #14]
 80100c4:	fbb7 f9f2 	udiv	r9, r7, r2
 80100c8:	fb02 7919 	mls	r9, r2, r9, r7
 80100cc:	fa1f f989 	uxth.w	r9, r9
 80100d0:	6863      	ldr	r3, [r4, #4]
 80100d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80100d6:	6823      	ldr	r3, [r4, #0]
 80100d8:	9203      	str	r2, [sp, #12]
 80100da:	fb02 f909 	mul.w	r9, r2, r9
 80100de:	f109 0904 	add.w	r9, r9, #4
 80100e2:	4499      	add	r9, r3
 80100e4:	7b23      	ldrb	r3, [r4, #12]
 80100e6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80100ea:	4543      	cmp	r3, r8
 80100ec:	f1a2 0b04 	sub.w	fp, r2, #4
 80100f0:	d37a      	bcc.n	80101e8 <uxr_prepare_output_stream_fragmented+0x15c>
 80100f2:	f1ab 0a04 	sub.w	sl, fp, #4
 80100f6:	ebaa 0a03 	sub.w	sl, sl, r3
 80100fa:	465a      	mov	r2, fp
 80100fc:	2300      	movs	r3, #0
 80100fe:	4649      	mov	r1, r9
 8010100:	a808      	add	r0, sp, #32
 8010102:	f8cd 8000 	str.w	r8, [sp]
 8010106:	f7fd fb8f 	bl	800d828 <ucdr_init_buffer_origin_offset>
 801010a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801010c:	fa1f fa8a 	uxth.w	sl, sl
 8010110:	4652      	mov	r2, sl
 8010112:	f103 0a08 	add.w	sl, r3, #8
 8010116:	45da      	cmp	sl, fp
 8010118:	bf34      	ite	cc
 801011a:	2302      	movcc	r3, #2
 801011c:	2300      	movcs	r3, #0
 801011e:	210d      	movs	r1, #13
 8010120:	a808      	add	r0, sp, #32
 8010122:	f7ff fe83 	bl	800fe2c <uxr_buffer_submessage_header>
 8010126:	8921      	ldrh	r1, [r4, #8]
 8010128:	fbb7 f2f1 	udiv	r2, r7, r1
 801012c:	fb01 7212 	mls	r2, r1, r2, r7
 8010130:	b292      	uxth	r2, r2
 8010132:	6863      	ldr	r3, [r4, #4]
 8010134:	fbb3 f3f1 	udiv	r3, r3, r1
 8010138:	fb02 f303 	mul.w	r3, r2, r3
 801013c:	6822      	ldr	r2, [r4, #0]
 801013e:	4638      	mov	r0, r7
 8010140:	f842 b003 	str.w	fp, [r2, r3]
 8010144:	2101      	movs	r1, #1
 8010146:	f005 ff7d 	bl	8016044 <uxr_seq_num_add>
 801014a:	9b03      	ldr	r3, [sp, #12]
 801014c:	f108 0104 	add.w	r1, r8, #4
 8010150:	f1a3 0208 	sub.w	r2, r3, #8
 8010154:	eba2 0208 	sub.w	r2, r2, r8
 8010158:	4449      	add	r1, r9
 801015a:	4607      	mov	r7, r0
 801015c:	4630      	mov	r0, r6
 801015e:	f7fd fb75 	bl	800d84c <ucdr_init_buffer>
 8010162:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010164:	81e7      	strh	r7, [r4, #14]
 8010166:	1d1a      	adds	r2, r3, #4
 8010168:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801016c:	bf28      	it	cs
 801016e:	2200      	movcs	r2, #0
 8010170:	2300      	movs	r3, #0
 8010172:	b292      	uxth	r2, r2
 8010174:	2107      	movs	r1, #7
 8010176:	4630      	mov	r0, r6
 8010178:	f7ff fe58 	bl	800fe2c <uxr_buffer_submessage_header>
 801017c:	9904      	ldr	r1, [sp, #16]
 801017e:	aa07      	add	r2, sp, #28
 8010180:	4628      	mov	r0, r5
 8010182:	f7ff f859 	bl	800f238 <uxr_init_base_object_request>
 8010186:	4604      	mov	r4, r0
 8010188:	b318      	cbz	r0, 80101d2 <uxr_prepare_output_stream_fragmented+0x146>
 801018a:	a907      	add	r1, sp, #28
 801018c:	4630      	mov	r0, r6
 801018e:	f000 fff9 	bl	8011184 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010192:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010196:	4630      	mov	r0, r6
 8010198:	1a52      	subs	r2, r2, r1
 801019a:	f7fd fb57 	bl	800d84c <ucdr_init_buffer>
 801019e:	9b05      	ldr	r3, [sp, #20]
 80101a0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80101a4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80101a6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80101aa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80101ac:	491b      	ldr	r1, [pc, #108]	@ (801021c <uxr_prepare_output_stream_fragmented+0x190>)
 80101ae:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80101b2:	4630      	mov	r0, r6
 80101b4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80101b8:	462a      	mov	r2, r5
 80101ba:	f7fd fb1b 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 80101be:	4620      	mov	r0, r4
 80101c0:	b011      	add	sp, #68	@ 0x44
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80101c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80101ca:	4628      	mov	r0, r5
 80101cc:	4798      	blx	r3
 80101ce:	b920      	cbnz	r0, 80101da <uxr_prepare_output_stream_fragmented+0x14e>
 80101d0:	2400      	movs	r4, #0
 80101d2:	4620      	mov	r0, r4
 80101d4:	b011      	add	sp, #68	@ 0x44
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	4620      	mov	r0, r4
 80101dc:	f005 ff12 	bl	8016004 <get_available_free_slots>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	f47f af6d 	bne.w	80100c0 <uxr_prepare_output_stream_fragmented+0x34>
 80101e6:	e7f3      	b.n	80101d0 <uxr_prepare_output_stream_fragmented+0x144>
 80101e8:	4638      	mov	r0, r7
 80101ea:	2101      	movs	r1, #1
 80101ec:	f005 ff2a 	bl	8016044 <uxr_seq_num_add>
 80101f0:	8921      	ldrh	r1, [r4, #8]
 80101f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80101f6:	fb01 0912 	mls	r9, r1, r2, r0
 80101fa:	fa1f f289 	uxth.w	r2, r9
 80101fe:	6863      	ldr	r3, [r4, #4]
 8010200:	fbb3 f9f1 	udiv	r9, r3, r1
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	fb02 f909 	mul.w	r9, r2, r9
 801020a:	f109 0904 	add.w	r9, r9, #4
 801020e:	4499      	add	r9, r3
 8010210:	4607      	mov	r7, r0
 8010212:	7b23      	ldrb	r3, [r4, #12]
 8010214:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010218:	e76b      	b.n	80100f2 <uxr_prepare_output_stream_fragmented+0x66>
 801021a:	bf00      	nop
 801021c:	0800ff19 	.word	0x0800ff19

08010220 <uxr_serialize_message_header>:
 8010220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010222:	b083      	sub	sp, #12
 8010224:	4616      	mov	r6, r2
 8010226:	4604      	mov	r4, r0
 8010228:	9301      	str	r3, [sp, #4]
 801022a:	460d      	mov	r5, r1
 801022c:	9f08      	ldr	r7, [sp, #32]
 801022e:	f7fc fb61 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010232:	4631      	mov	r1, r6
 8010234:	4620      	mov	r0, r4
 8010236:	f7fc fb5d 	bl	800c8f4 <ucdr_serialize_uint8_t>
 801023a:	9a01      	ldr	r2, [sp, #4]
 801023c:	2101      	movs	r1, #1
 801023e:	4620      	mov	r0, r4
 8010240:	f7fc fc04 	bl	800ca4c <ucdr_serialize_endian_uint16_t>
 8010244:	062b      	lsls	r3, r5, #24
 8010246:	d501      	bpl.n	801024c <uxr_serialize_message_header+0x2c>
 8010248:	b003      	add	sp, #12
 801024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801024c:	2204      	movs	r2, #4
 801024e:	4639      	mov	r1, r7
 8010250:	4620      	mov	r0, r4
 8010252:	b003      	add	sp, #12
 8010254:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010258:	f005 b874 	b.w	8015344 <ucdr_serialize_array_uint8_t>

0801025c <uxr_deserialize_message_header>:
 801025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025e:	b083      	sub	sp, #12
 8010260:	4616      	mov	r6, r2
 8010262:	4604      	mov	r4, r0
 8010264:	9301      	str	r3, [sp, #4]
 8010266:	460d      	mov	r5, r1
 8010268:	9f08      	ldr	r7, [sp, #32]
 801026a:	f7fc fb59 	bl	800c920 <ucdr_deserialize_uint8_t>
 801026e:	4631      	mov	r1, r6
 8010270:	4620      	mov	r0, r4
 8010272:	f7fc fb55 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010276:	9a01      	ldr	r2, [sp, #4]
 8010278:	2101      	movs	r1, #1
 801027a:	4620      	mov	r0, r4
 801027c:	f7fc fcda 	bl	800cc34 <ucdr_deserialize_endian_uint16_t>
 8010280:	f995 3000 	ldrsb.w	r3, [r5]
 8010284:	2b00      	cmp	r3, #0
 8010286:	da01      	bge.n	801028c <uxr_deserialize_message_header+0x30>
 8010288:	b003      	add	sp, #12
 801028a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801028c:	2204      	movs	r2, #4
 801028e:	4639      	mov	r1, r7
 8010290:	4620      	mov	r0, r4
 8010292:	b003      	add	sp, #12
 8010294:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010298:	f005 b8b8 	b.w	801540c <ucdr_deserialize_array_uint8_t>

0801029c <uxr_serialize_submessage_header>:
 801029c:	b530      	push	{r4, r5, lr}
 801029e:	b083      	sub	sp, #12
 80102a0:	4615      	mov	r5, r2
 80102a2:	4604      	mov	r4, r0
 80102a4:	9301      	str	r3, [sp, #4]
 80102a6:	f7fc fb25 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80102aa:	4629      	mov	r1, r5
 80102ac:	4620      	mov	r0, r4
 80102ae:	f7fc fb21 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80102b2:	9a01      	ldr	r2, [sp, #4]
 80102b4:	2101      	movs	r1, #1
 80102b6:	4620      	mov	r0, r4
 80102b8:	b003      	add	sp, #12
 80102ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102be:	f7fc bbc5 	b.w	800ca4c <ucdr_serialize_endian_uint16_t>
 80102c2:	bf00      	nop

080102c4 <uxr_deserialize_submessage_header>:
 80102c4:	b530      	push	{r4, r5, lr}
 80102c6:	b083      	sub	sp, #12
 80102c8:	4615      	mov	r5, r2
 80102ca:	4604      	mov	r4, r0
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	f7fc fb27 	bl	800c920 <ucdr_deserialize_uint8_t>
 80102d2:	4629      	mov	r1, r5
 80102d4:	4620      	mov	r0, r4
 80102d6:	f7fc fb23 	bl	800c920 <ucdr_deserialize_uint8_t>
 80102da:	9a01      	ldr	r2, [sp, #4]
 80102dc:	2101      	movs	r1, #1
 80102de:	4620      	mov	r0, r4
 80102e0:	b003      	add	sp, #12
 80102e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102e6:	f7fc bca5 	b.w	800cc34 <ucdr_deserialize_endian_uint16_t>
 80102ea:	bf00      	nop

080102ec <uxr_serialize_CLIENT_Representation>:
 80102ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102f0:	2204      	movs	r2, #4
 80102f2:	460e      	mov	r6, r1
 80102f4:	4605      	mov	r5, r0
 80102f6:	f005 f825 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80102fa:	2202      	movs	r2, #2
 80102fc:	4607      	mov	r7, r0
 80102fe:	1d31      	adds	r1, r6, #4
 8010300:	4628      	mov	r0, r5
 8010302:	f005 f81f 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010306:	4038      	ands	r0, r7
 8010308:	2202      	movs	r2, #2
 801030a:	1db1      	adds	r1, r6, #6
 801030c:	b2c7      	uxtb	r7, r0
 801030e:	4628      	mov	r0, r5
 8010310:	f005 f818 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010314:	2204      	movs	r2, #4
 8010316:	4007      	ands	r7, r0
 8010318:	f106 0108 	add.w	r1, r6, #8
 801031c:	4628      	mov	r0, r5
 801031e:	f005 f811 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010322:	7b31      	ldrb	r1, [r6, #12]
 8010324:	4007      	ands	r7, r0
 8010326:	4628      	mov	r0, r5
 8010328:	f7fc fae4 	bl	800c8f4 <ucdr_serialize_uint8_t>
 801032c:	7b71      	ldrb	r1, [r6, #13]
 801032e:	4007      	ands	r7, r0
 8010330:	4628      	mov	r0, r5
 8010332:	f7fc fab1 	bl	800c898 <ucdr_serialize_bool>
 8010336:	7b73      	ldrb	r3, [r6, #13]
 8010338:	ea07 0800 	and.w	r8, r7, r0
 801033c:	b93b      	cbnz	r3, 801034e <uxr_serialize_CLIENT_Representation+0x62>
 801033e:	8bb1      	ldrh	r1, [r6, #28]
 8010340:	4628      	mov	r0, r5
 8010342:	f7fc fb03 	bl	800c94c <ucdr_serialize_uint16_t>
 8010346:	ea08 0000 	and.w	r0, r8, r0
 801034a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801034e:	6931      	ldr	r1, [r6, #16]
 8010350:	4628      	mov	r0, r5
 8010352:	f7fc fce5 	bl	800cd20 <ucdr_serialize_uint32_t>
 8010356:	6933      	ldr	r3, [r6, #16]
 8010358:	b1e3      	cbz	r3, 8010394 <uxr_serialize_CLIENT_Representation+0xa8>
 801035a:	b1c0      	cbz	r0, 801038e <uxr_serialize_CLIENT_Representation+0xa2>
 801035c:	4637      	mov	r7, r6
 801035e:	f04f 0900 	mov.w	r9, #0
 8010362:	e001      	b.n	8010368 <uxr_serialize_CLIENT_Representation+0x7c>
 8010364:	3708      	adds	r7, #8
 8010366:	b194      	cbz	r4, 801038e <uxr_serialize_CLIENT_Representation+0xa2>
 8010368:	6979      	ldr	r1, [r7, #20]
 801036a:	4628      	mov	r0, r5
 801036c:	f005 f90a 	bl	8015584 <ucdr_serialize_string>
 8010370:	69b9      	ldr	r1, [r7, #24]
 8010372:	4604      	mov	r4, r0
 8010374:	4628      	mov	r0, r5
 8010376:	f005 f905 	bl	8015584 <ucdr_serialize_string>
 801037a:	6933      	ldr	r3, [r6, #16]
 801037c:	f109 0901 	add.w	r9, r9, #1
 8010380:	4004      	ands	r4, r0
 8010382:	4599      	cmp	r9, r3
 8010384:	b2e4      	uxtb	r4, r4
 8010386:	d3ed      	bcc.n	8010364 <uxr_serialize_CLIENT_Representation+0x78>
 8010388:	ea08 0804 	and.w	r8, r8, r4
 801038c:	e7d7      	b.n	801033e <uxr_serialize_CLIENT_Representation+0x52>
 801038e:	f04f 0800 	mov.w	r8, #0
 8010392:	e7d4      	b.n	801033e <uxr_serialize_CLIENT_Representation+0x52>
 8010394:	ea08 0800 	and.w	r8, r8, r0
 8010398:	e7d1      	b.n	801033e <uxr_serialize_CLIENT_Representation+0x52>
 801039a:	bf00      	nop

0801039c <uxr_deserialize_CLIENT_Representation>:
 801039c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103a0:	2204      	movs	r2, #4
 80103a2:	460c      	mov	r4, r1
 80103a4:	4605      	mov	r5, r0
 80103a6:	f005 f831 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80103aa:	2202      	movs	r2, #2
 80103ac:	4607      	mov	r7, r0
 80103ae:	1d21      	adds	r1, r4, #4
 80103b0:	4628      	mov	r0, r5
 80103b2:	f005 f82b 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80103b6:	4038      	ands	r0, r7
 80103b8:	2202      	movs	r2, #2
 80103ba:	1da1      	adds	r1, r4, #6
 80103bc:	b2c6      	uxtb	r6, r0
 80103be:	4628      	mov	r0, r5
 80103c0:	f005 f824 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80103c4:	2204      	movs	r2, #4
 80103c6:	4006      	ands	r6, r0
 80103c8:	f104 0108 	add.w	r1, r4, #8
 80103cc:	4628      	mov	r0, r5
 80103ce:	f005 f81d 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80103d2:	f104 010c 	add.w	r1, r4, #12
 80103d6:	4006      	ands	r6, r0
 80103d8:	4628      	mov	r0, r5
 80103da:	f7fc faa1 	bl	800c920 <ucdr_deserialize_uint8_t>
 80103de:	f104 010d 	add.w	r1, r4, #13
 80103e2:	ea06 0700 	and.w	r7, r6, r0
 80103e6:	4628      	mov	r0, r5
 80103e8:	f7fc fa6c 	bl	800c8c4 <ucdr_deserialize_bool>
 80103ec:	7b63      	ldrb	r3, [r4, #13]
 80103ee:	4007      	ands	r7, r0
 80103f0:	b93b      	cbnz	r3, 8010402 <uxr_deserialize_CLIENT_Representation+0x66>
 80103f2:	f104 011c 	add.w	r1, r4, #28
 80103f6:	4628      	mov	r0, r5
 80103f8:	f7fc fba8 	bl	800cb4c <ucdr_deserialize_uint16_t>
 80103fc:	4038      	ands	r0, r7
 80103fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010402:	f104 0110 	add.w	r1, r4, #16
 8010406:	4628      	mov	r0, r5
 8010408:	f7fc fdba 	bl	800cf80 <ucdr_deserialize_uint32_t>
 801040c:	6923      	ldr	r3, [r4, #16]
 801040e:	2b01      	cmp	r3, #1
 8010410:	d903      	bls.n	801041a <uxr_deserialize_CLIENT_Representation+0x7e>
 8010412:	2301      	movs	r3, #1
 8010414:	75ab      	strb	r3, [r5, #22]
 8010416:	2700      	movs	r7, #0
 8010418:	e7eb      	b.n	80103f2 <uxr_deserialize_CLIENT_Representation+0x56>
 801041a:	b30b      	cbz	r3, 8010460 <uxr_deserialize_CLIENT_Representation+0xc4>
 801041c:	2800      	cmp	r0, #0
 801041e:	d0fa      	beq.n	8010416 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010420:	46a0      	mov	r8, r4
 8010422:	f04f 0900 	mov.w	r9, #0
 8010426:	e001      	b.n	801042c <uxr_deserialize_CLIENT_Representation+0x90>
 8010428:	2e00      	cmp	r6, #0
 801042a:	d0f4      	beq.n	8010416 <uxr_deserialize_CLIENT_Representation+0x7a>
 801042c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010434:	4628      	mov	r0, r5
 8010436:	f005 f8b5 	bl	80155a4 <ucdr_deserialize_string>
 801043a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801043e:	4606      	mov	r6, r0
 8010440:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010444:	4628      	mov	r0, r5
 8010446:	f005 f8ad 	bl	80155a4 <ucdr_deserialize_string>
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	f109 0901 	add.w	r9, r9, #1
 8010450:	4006      	ands	r6, r0
 8010452:	4599      	cmp	r9, r3
 8010454:	f108 0808 	add.w	r8, r8, #8
 8010458:	b2f6      	uxtb	r6, r6
 801045a:	d3e5      	bcc.n	8010428 <uxr_deserialize_CLIENT_Representation+0x8c>
 801045c:	4037      	ands	r7, r6
 801045e:	e7c8      	b.n	80103f2 <uxr_deserialize_CLIENT_Representation+0x56>
 8010460:	4007      	ands	r7, r0
 8010462:	e7c6      	b.n	80103f2 <uxr_deserialize_CLIENT_Representation+0x56>

08010464 <uxr_serialize_AGENT_Representation>:
 8010464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010468:	2204      	movs	r2, #4
 801046a:	460f      	mov	r7, r1
 801046c:	4605      	mov	r5, r0
 801046e:	f004 ff69 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010472:	2202      	movs	r2, #2
 8010474:	4604      	mov	r4, r0
 8010476:	1d39      	adds	r1, r7, #4
 8010478:	4628      	mov	r0, r5
 801047a:	f004 ff63 	bl	8015344 <ucdr_serialize_array_uint8_t>
 801047e:	4020      	ands	r0, r4
 8010480:	2202      	movs	r2, #2
 8010482:	1db9      	adds	r1, r7, #6
 8010484:	b2c4      	uxtb	r4, r0
 8010486:	4628      	mov	r0, r5
 8010488:	f004 ff5c 	bl	8015344 <ucdr_serialize_array_uint8_t>
 801048c:	7a39      	ldrb	r1, [r7, #8]
 801048e:	4004      	ands	r4, r0
 8010490:	4628      	mov	r0, r5
 8010492:	f7fc fa01 	bl	800c898 <ucdr_serialize_bool>
 8010496:	7a3b      	ldrb	r3, [r7, #8]
 8010498:	ea00 0804 	and.w	r8, r0, r4
 801049c:	b913      	cbnz	r3, 80104a4 <uxr_serialize_AGENT_Representation+0x40>
 801049e:	4640      	mov	r0, r8
 80104a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a4:	68f9      	ldr	r1, [r7, #12]
 80104a6:	4628      	mov	r0, r5
 80104a8:	f7fc fc3a 	bl	800cd20 <ucdr_serialize_uint32_t>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	b303      	cbz	r3, 80104f2 <uxr_serialize_AGENT_Representation+0x8e>
 80104b0:	b1d0      	cbz	r0, 80104e8 <uxr_serialize_AGENT_Representation+0x84>
 80104b2:	463e      	mov	r6, r7
 80104b4:	f04f 0900 	mov.w	r9, #0
 80104b8:	e001      	b.n	80104be <uxr_serialize_AGENT_Representation+0x5a>
 80104ba:	3608      	adds	r6, #8
 80104bc:	b1a4      	cbz	r4, 80104e8 <uxr_serialize_AGENT_Representation+0x84>
 80104be:	6931      	ldr	r1, [r6, #16]
 80104c0:	4628      	mov	r0, r5
 80104c2:	f005 f85f 	bl	8015584 <ucdr_serialize_string>
 80104c6:	6971      	ldr	r1, [r6, #20]
 80104c8:	4604      	mov	r4, r0
 80104ca:	4628      	mov	r0, r5
 80104cc:	f005 f85a 	bl	8015584 <ucdr_serialize_string>
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f109 0901 	add.w	r9, r9, #1
 80104d6:	4004      	ands	r4, r0
 80104d8:	4599      	cmp	r9, r3
 80104da:	b2e4      	uxtb	r4, r4
 80104dc:	d3ed      	bcc.n	80104ba <uxr_serialize_AGENT_Representation+0x56>
 80104de:	ea08 0804 	and.w	r8, r8, r4
 80104e2:	4640      	mov	r0, r8
 80104e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104e8:	f04f 0800 	mov.w	r8, #0
 80104ec:	4640      	mov	r0, r8
 80104ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104f2:	ea08 0800 	and.w	r8, r8, r0
 80104f6:	e7d2      	b.n	801049e <uxr_serialize_AGENT_Representation+0x3a>

080104f8 <uxr_serialize_DATAWRITER_Representation>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	460d      	mov	r5, r1
 80104fc:	7809      	ldrb	r1, [r1, #0]
 80104fe:	4606      	mov	r6, r0
 8010500:	f7fc f9f8 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010504:	4604      	mov	r4, r0
 8010506:	b130      	cbz	r0, 8010516 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010508:	782b      	ldrb	r3, [r5, #0]
 801050a:	2b02      	cmp	r3, #2
 801050c:	d00c      	beq.n	8010528 <uxr_serialize_DATAWRITER_Representation+0x30>
 801050e:	2b03      	cmp	r3, #3
 8010510:	d010      	beq.n	8010534 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010512:	2b01      	cmp	r3, #1
 8010514:	d008      	beq.n	8010528 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010516:	2202      	movs	r2, #2
 8010518:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801051c:	4630      	mov	r0, r6
 801051e:	f004 ff11 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010522:	4020      	ands	r0, r4
 8010524:	b2c0      	uxtb	r0, r0
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	6869      	ldr	r1, [r5, #4]
 801052a:	4630      	mov	r0, r6
 801052c:	f005 f82a 	bl	8015584 <ucdr_serialize_string>
 8010530:	4604      	mov	r4, r0
 8010532:	e7f0      	b.n	8010516 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010534:	4629      	mov	r1, r5
 8010536:	4630      	mov	r0, r6
 8010538:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801053c:	3104      	adds	r1, #4
 801053e:	f004 fff5 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 8010542:	4604      	mov	r4, r0
 8010544:	e7e7      	b.n	8010516 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010546:	bf00      	nop

08010548 <uxr_serialize_ObjectVariant.part.0>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	780b      	ldrb	r3, [r1, #0]
 801054c:	3b01      	subs	r3, #1
 801054e:	460c      	mov	r4, r1
 8010550:	4605      	mov	r5, r0
 8010552:	2b0d      	cmp	r3, #13
 8010554:	d854      	bhi.n	8010600 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010556:	e8df f003 	tbb	[pc, r3]
 801055a:	0730      	.short	0x0730
 801055c:	07071b1b 	.word	0x07071b1b
 8010560:	0c530707 	.word	0x0c530707
 8010564:	494e0c0c 	.word	0x494e0c0c
 8010568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801056c:	3104      	adds	r1, #4
 801056e:	f7ff bfc3 	b.w	80104f8 <uxr_serialize_DATAWRITER_Representation>
 8010572:	7909      	ldrb	r1, [r1, #4]
 8010574:	f7fc f9be 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010578:	b1e8      	cbz	r0, 80105b6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801057a:	7923      	ldrb	r3, [r4, #4]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d001      	beq.n	8010584 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010580:	2b02      	cmp	r3, #2
 8010582:	d13d      	bne.n	8010600 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010584:	68a1      	ldr	r1, [r4, #8]
 8010586:	4628      	mov	r0, r5
 8010588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801058c:	f004 bffa 	b.w	8015584 <ucdr_serialize_string>
 8010590:	7909      	ldrb	r1, [r1, #4]
 8010592:	f7fc f9af 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010596:	4606      	mov	r6, r0
 8010598:	b120      	cbz	r0, 80105a4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801059a:	7923      	ldrb	r3, [r4, #4]
 801059c:	2b02      	cmp	r3, #2
 801059e:	d039      	beq.n	8010614 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d02f      	beq.n	8010604 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80105a4:	2202      	movs	r2, #2
 80105a6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80105aa:	4628      	mov	r0, r5
 80105ac:	f004 feca 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80105b0:	4030      	ands	r0, r6
 80105b2:	b2c0      	uxtb	r0, r0
 80105b4:	bd70      	pop	{r4, r5, r6, pc}
 80105b6:	2000      	movs	r0, #0
 80105b8:	bd70      	pop	{r4, r5, r6, pc}
 80105ba:	7909      	ldrb	r1, [r1, #4]
 80105bc:	f7fc f99a 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80105c0:	4606      	mov	r6, r0
 80105c2:	b158      	cbz	r0, 80105dc <uxr_serialize_ObjectVariant.part.0+0x94>
 80105c4:	7923      	ldrb	r3, [r4, #4]
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d003      	beq.n	80105d2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	d028      	beq.n	8010620 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d104      	bne.n	80105dc <uxr_serialize_ObjectVariant.part.0+0x94>
 80105d2:	68a1      	ldr	r1, [r4, #8]
 80105d4:	4628      	mov	r0, r5
 80105d6:	f004 ffd5 	bl	8015584 <ucdr_serialize_string>
 80105da:	4606      	mov	r6, r0
 80105dc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80105e0:	4628      	mov	r0, r5
 80105e2:	f7fc fec3 	bl	800d36c <ucdr_serialize_int16_t>
 80105e6:	4030      	ands	r0, r6
 80105e8:	b2c0      	uxtb	r0, r0
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
 80105ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105f0:	3104      	adds	r1, #4
 80105f2:	f7ff be7b 	b.w	80102ec <uxr_serialize_CLIENT_Representation>
 80105f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105fa:	3104      	adds	r1, #4
 80105fc:	f7ff bf32 	b.w	8010464 <uxr_serialize_AGENT_Representation>
 8010600:	2001      	movs	r0, #1
 8010602:	bd70      	pop	{r4, r5, r6, pc}
 8010604:	68a2      	ldr	r2, [r4, #8]
 8010606:	f104 010c 	add.w	r1, r4, #12
 801060a:	4628      	mov	r0, r5
 801060c:	f004 ff8e 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 8010610:	4606      	mov	r6, r0
 8010612:	e7c7      	b.n	80105a4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010614:	68a1      	ldr	r1, [r4, #8]
 8010616:	4628      	mov	r0, r5
 8010618:	f004 ffb4 	bl	8015584 <ucdr_serialize_string>
 801061c:	4606      	mov	r6, r0
 801061e:	e7c1      	b.n	80105a4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010620:	68a2      	ldr	r2, [r4, #8]
 8010622:	f104 010c 	add.w	r1, r4, #12
 8010626:	4628      	mov	r0, r5
 8010628:	f004 ff80 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 801062c:	4606      	mov	r6, r0
 801062e:	e7d5      	b.n	80105dc <uxr_serialize_ObjectVariant.part.0+0x94>

08010630 <uxr_deserialize_DATAWRITER_Representation>:
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	4606      	mov	r6, r0
 8010634:	460d      	mov	r5, r1
 8010636:	f7fc f973 	bl	800c920 <ucdr_deserialize_uint8_t>
 801063a:	4604      	mov	r4, r0
 801063c:	b130      	cbz	r0, 801064c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801063e:	782b      	ldrb	r3, [r5, #0]
 8010640:	2b02      	cmp	r3, #2
 8010642:	d00c      	beq.n	801065e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010644:	2b03      	cmp	r3, #3
 8010646:	d012      	beq.n	801066e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010648:	2b01      	cmp	r3, #1
 801064a:	d008      	beq.n	801065e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801064c:	2202      	movs	r2, #2
 801064e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010652:	4630      	mov	r0, r6
 8010654:	f004 feda 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010658:	4020      	ands	r0, r4
 801065a:	b2c0      	uxtb	r0, r0
 801065c:	bd70      	pop	{r4, r5, r6, pc}
 801065e:	6869      	ldr	r1, [r5, #4]
 8010660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010664:	4630      	mov	r0, r6
 8010666:	f004 ff9d 	bl	80155a4 <ucdr_deserialize_string>
 801066a:	4604      	mov	r4, r0
 801066c:	e7ee      	b.n	801064c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801066e:	1d2b      	adds	r3, r5, #4
 8010670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010674:	f105 0108 	add.w	r1, r5, #8
 8010678:	4630      	mov	r0, r6
 801067a:	f004 ff69 	bl	8015550 <ucdr_deserialize_sequence_uint8_t>
 801067e:	4604      	mov	r4, r0
 8010680:	e7e4      	b.n	801064c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010682:	bf00      	nop

08010684 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010684:	b570      	push	{r4, r5, r6, lr}
 8010686:	460d      	mov	r5, r1
 8010688:	7809      	ldrb	r1, [r1, #0]
 801068a:	4606      	mov	r6, r0
 801068c:	f7fc f904 	bl	800c898 <ucdr_serialize_bool>
 8010690:	782b      	ldrb	r3, [r5, #0]
 8010692:	4604      	mov	r4, r0
 8010694:	b94b      	cbnz	r3, 80106aa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010696:	7a29      	ldrb	r1, [r5, #8]
 8010698:	4630      	mov	r0, r6
 801069a:	f7fc f8fd 	bl	800c898 <ucdr_serialize_bool>
 801069e:	7a2b      	ldrb	r3, [r5, #8]
 80106a0:	4004      	ands	r4, r0
 80106a2:	b2e4      	uxtb	r4, r4
 80106a4:	b943      	cbnz	r3, 80106b8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80106a6:	4620      	mov	r0, r4
 80106a8:	bd70      	pop	{r4, r5, r6, pc}
 80106aa:	6869      	ldr	r1, [r5, #4]
 80106ac:	4630      	mov	r0, r6
 80106ae:	f004 ff69 	bl	8015584 <ucdr_serialize_string>
 80106b2:	4004      	ands	r4, r0
 80106b4:	b2e4      	uxtb	r4, r4
 80106b6:	e7ee      	b.n	8010696 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80106b8:	68e9      	ldr	r1, [r5, #12]
 80106ba:	4630      	mov	r0, r6
 80106bc:	f004 ff62 	bl	8015584 <ucdr_serialize_string>
 80106c0:	4004      	ands	r4, r0
 80106c2:	4620      	mov	r0, r4
 80106c4:	bd70      	pop	{r4, r5, r6, pc}
 80106c6:	bf00      	nop

080106c8 <uxr_serialize_OBJK_Topic_Binary>:
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	460d      	mov	r5, r1
 80106cc:	6809      	ldr	r1, [r1, #0]
 80106ce:	4606      	mov	r6, r0
 80106d0:	f004 ff58 	bl	8015584 <ucdr_serialize_string>
 80106d4:	7929      	ldrb	r1, [r5, #4]
 80106d6:	4604      	mov	r4, r0
 80106d8:	4630      	mov	r0, r6
 80106da:	f7fc f8dd 	bl	800c898 <ucdr_serialize_bool>
 80106de:	792b      	ldrb	r3, [r5, #4]
 80106e0:	4004      	ands	r4, r0
 80106e2:	b2e4      	uxtb	r4, r4
 80106e4:	b943      	cbnz	r3, 80106f8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80106e6:	7b29      	ldrb	r1, [r5, #12]
 80106e8:	4630      	mov	r0, r6
 80106ea:	f7fc f8d5 	bl	800c898 <ucdr_serialize_bool>
 80106ee:	7b2b      	ldrb	r3, [r5, #12]
 80106f0:	4004      	ands	r4, r0
 80106f2:	b93b      	cbnz	r3, 8010704 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80106f4:	4620      	mov	r0, r4
 80106f6:	bd70      	pop	{r4, r5, r6, pc}
 80106f8:	68a9      	ldr	r1, [r5, #8]
 80106fa:	4630      	mov	r0, r6
 80106fc:	f004 ff42 	bl	8015584 <ucdr_serialize_string>
 8010700:	4004      	ands	r4, r0
 8010702:	e7f0      	b.n	80106e6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010704:	6929      	ldr	r1, [r5, #16]
 8010706:	4630      	mov	r0, r6
 8010708:	f004 ff3c 	bl	8015584 <ucdr_serialize_string>
 801070c:	4004      	ands	r4, r0
 801070e:	b2e4      	uxtb	r4, r4
 8010710:	4620      	mov	r0, r4
 8010712:	bd70      	pop	{r4, r5, r6, pc}

08010714 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010718:	460c      	mov	r4, r1
 801071a:	7809      	ldrb	r1, [r1, #0]
 801071c:	4606      	mov	r6, r0
 801071e:	f7fc f8bb 	bl	800c898 <ucdr_serialize_bool>
 8010722:	7823      	ldrb	r3, [r4, #0]
 8010724:	4605      	mov	r5, r0
 8010726:	b96b      	cbnz	r3, 8010744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010728:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801072c:	4630      	mov	r0, r6
 801072e:	f7fc f8b3 	bl	800c898 <ucdr_serialize_bool>
 8010732:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010736:	4005      	ands	r5, r0
 8010738:	b2ed      	uxtb	r5, r5
 801073a:	2b00      	cmp	r3, #0
 801073c:	d169      	bne.n	8010812 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801073e:	4628      	mov	r0, r5
 8010740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010744:	6861      	ldr	r1, [r4, #4]
 8010746:	4630      	mov	r0, r6
 8010748:	f7fc faea 	bl	800cd20 <ucdr_serialize_uint32_t>
 801074c:	6863      	ldr	r3, [r4, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d06b      	beq.n	801082a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010752:	2800      	cmp	r0, #0
 8010754:	d067      	beq.n	8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010756:	68a1      	ldr	r1, [r4, #8]
 8010758:	4630      	mov	r0, r6
 801075a:	f004 ff13 	bl	8015584 <ucdr_serialize_string>
 801075e:	6863      	ldr	r3, [r4, #4]
 8010760:	2b01      	cmp	r3, #1
 8010762:	d953      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010764:	2800      	cmp	r0, #0
 8010766:	d05e      	beq.n	8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010768:	68e1      	ldr	r1, [r4, #12]
 801076a:	4630      	mov	r0, r6
 801076c:	f004 ff0a 	bl	8015584 <ucdr_serialize_string>
 8010770:	6863      	ldr	r3, [r4, #4]
 8010772:	2b02      	cmp	r3, #2
 8010774:	d94a      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010776:	2800      	cmp	r0, #0
 8010778:	d055      	beq.n	8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801077a:	6921      	ldr	r1, [r4, #16]
 801077c:	4630      	mov	r0, r6
 801077e:	f004 ff01 	bl	8015584 <ucdr_serialize_string>
 8010782:	6863      	ldr	r3, [r4, #4]
 8010784:	2b03      	cmp	r3, #3
 8010786:	d941      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010788:	2800      	cmp	r0, #0
 801078a:	d04c      	beq.n	8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801078c:	6961      	ldr	r1, [r4, #20]
 801078e:	4630      	mov	r0, r6
 8010790:	f004 fef8 	bl	8015584 <ucdr_serialize_string>
 8010794:	6863      	ldr	r3, [r4, #4]
 8010796:	2b04      	cmp	r3, #4
 8010798:	d938      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801079a:	2800      	cmp	r0, #0
 801079c:	d043      	beq.n	8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801079e:	69a1      	ldr	r1, [r4, #24]
 80107a0:	4630      	mov	r0, r6
 80107a2:	f004 feef 	bl	8015584 <ucdr_serialize_string>
 80107a6:	6863      	ldr	r3, [r4, #4]
 80107a8:	2b05      	cmp	r3, #5
 80107aa:	d92f      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d03a      	beq.n	8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80107b0:	69e1      	ldr	r1, [r4, #28]
 80107b2:	4630      	mov	r0, r6
 80107b4:	f004 fee6 	bl	8015584 <ucdr_serialize_string>
 80107b8:	6863      	ldr	r3, [r4, #4]
 80107ba:	2b06      	cmp	r3, #6
 80107bc:	d926      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80107be:	b390      	cbz	r0, 8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80107c0:	6a21      	ldr	r1, [r4, #32]
 80107c2:	4630      	mov	r0, r6
 80107c4:	f004 fede 	bl	8015584 <ucdr_serialize_string>
 80107c8:	6863      	ldr	r3, [r4, #4]
 80107ca:	2b07      	cmp	r3, #7
 80107cc:	d91e      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80107ce:	b350      	cbz	r0, 8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80107d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80107d2:	4630      	mov	r0, r6
 80107d4:	f004 fed6 	bl	8015584 <ucdr_serialize_string>
 80107d8:	6863      	ldr	r3, [r4, #4]
 80107da:	2b08      	cmp	r3, #8
 80107dc:	d916      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80107de:	b310      	cbz	r0, 8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80107e0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80107e2:	4630      	mov	r0, r6
 80107e4:	f004 fece 	bl	8015584 <ucdr_serialize_string>
 80107e8:	6863      	ldr	r3, [r4, #4]
 80107ea:	2b09      	cmp	r3, #9
 80107ec:	d90e      	bls.n	801080c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80107ee:	b1d0      	cbz	r0, 8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80107f0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80107f4:	2709      	movs	r7, #9
 80107f6:	e000      	b.n	80107fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80107f8:	b1a8      	cbz	r0, 8010826 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80107fa:	f858 1b04 	ldr.w	r1, [r8], #4
 80107fe:	4630      	mov	r0, r6
 8010800:	f004 fec0 	bl	8015584 <ucdr_serialize_string>
 8010804:	6862      	ldr	r2, [r4, #4]
 8010806:	3701      	adds	r7, #1
 8010808:	4297      	cmp	r7, r2
 801080a:	d3f5      	bcc.n	80107f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801080c:	4005      	ands	r5, r0
 801080e:	b2ed      	uxtb	r5, r5
 8010810:	e78a      	b.n	8010728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010812:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010814:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010818:	4630      	mov	r0, r6
 801081a:	f004 fe87 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 801081e:	4005      	ands	r5, r0
 8010820:	4628      	mov	r0, r5
 8010822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010826:	2500      	movs	r5, #0
 8010828:	e77e      	b.n	8010728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801082a:	4028      	ands	r0, r5
 801082c:	b2c5      	uxtb	r5, r0
 801082e:	e77b      	b.n	8010728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010830 <uxr_serialize_OBJK_Publisher_Binary>:
 8010830:	b570      	push	{r4, r5, r6, lr}
 8010832:	460d      	mov	r5, r1
 8010834:	7809      	ldrb	r1, [r1, #0]
 8010836:	4606      	mov	r6, r0
 8010838:	f7fc f82e 	bl	800c898 <ucdr_serialize_bool>
 801083c:	782b      	ldrb	r3, [r5, #0]
 801083e:	4604      	mov	r4, r0
 8010840:	b94b      	cbnz	r3, 8010856 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010842:	7a29      	ldrb	r1, [r5, #8]
 8010844:	4630      	mov	r0, r6
 8010846:	f7fc f827 	bl	800c898 <ucdr_serialize_bool>
 801084a:	7a2b      	ldrb	r3, [r5, #8]
 801084c:	4004      	ands	r4, r0
 801084e:	b2e4      	uxtb	r4, r4
 8010850:	b943      	cbnz	r3, 8010864 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010852:	4620      	mov	r0, r4
 8010854:	bd70      	pop	{r4, r5, r6, pc}
 8010856:	6869      	ldr	r1, [r5, #4]
 8010858:	4630      	mov	r0, r6
 801085a:	f004 fe93 	bl	8015584 <ucdr_serialize_string>
 801085e:	4004      	ands	r4, r0
 8010860:	b2e4      	uxtb	r4, r4
 8010862:	e7ee      	b.n	8010842 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010864:	f105 010c 	add.w	r1, r5, #12
 8010868:	4630      	mov	r0, r6
 801086a:	f7ff ff53 	bl	8010714 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801086e:	4004      	ands	r4, r0
 8010870:	4620      	mov	r0, r4
 8010872:	bd70      	pop	{r4, r5, r6, pc}

08010874 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010878:	460c      	mov	r4, r1
 801087a:	7809      	ldrb	r1, [r1, #0]
 801087c:	4606      	mov	r6, r0
 801087e:	f7fc f80b 	bl	800c898 <ucdr_serialize_bool>
 8010882:	7823      	ldrb	r3, [r4, #0]
 8010884:	4605      	mov	r5, r0
 8010886:	b96b      	cbnz	r3, 80108a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010888:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801088c:	4630      	mov	r0, r6
 801088e:	f7fc f803 	bl	800c898 <ucdr_serialize_bool>
 8010892:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010896:	4005      	ands	r5, r0
 8010898:	b2ed      	uxtb	r5, r5
 801089a:	2b00      	cmp	r3, #0
 801089c:	d169      	bne.n	8010972 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801089e:	4628      	mov	r0, r5
 80108a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a4:	6861      	ldr	r1, [r4, #4]
 80108a6:	4630      	mov	r0, r6
 80108a8:	f7fc fa3a 	bl	800cd20 <ucdr_serialize_uint32_t>
 80108ac:	6863      	ldr	r3, [r4, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d06b      	beq.n	801098a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d067      	beq.n	8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108b6:	68a1      	ldr	r1, [r4, #8]
 80108b8:	4630      	mov	r0, r6
 80108ba:	f004 fe63 	bl	8015584 <ucdr_serialize_string>
 80108be:	6863      	ldr	r3, [r4, #4]
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d953      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d05e      	beq.n	8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108c8:	68e1      	ldr	r1, [r4, #12]
 80108ca:	4630      	mov	r0, r6
 80108cc:	f004 fe5a 	bl	8015584 <ucdr_serialize_string>
 80108d0:	6863      	ldr	r3, [r4, #4]
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d94a      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d055      	beq.n	8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108da:	6921      	ldr	r1, [r4, #16]
 80108dc:	4630      	mov	r0, r6
 80108de:	f004 fe51 	bl	8015584 <ucdr_serialize_string>
 80108e2:	6863      	ldr	r3, [r4, #4]
 80108e4:	2b03      	cmp	r3, #3
 80108e6:	d941      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d04c      	beq.n	8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108ec:	6961      	ldr	r1, [r4, #20]
 80108ee:	4630      	mov	r0, r6
 80108f0:	f004 fe48 	bl	8015584 <ucdr_serialize_string>
 80108f4:	6863      	ldr	r3, [r4, #4]
 80108f6:	2b04      	cmp	r3, #4
 80108f8:	d938      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d043      	beq.n	8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108fe:	69a1      	ldr	r1, [r4, #24]
 8010900:	4630      	mov	r0, r6
 8010902:	f004 fe3f 	bl	8015584 <ucdr_serialize_string>
 8010906:	6863      	ldr	r3, [r4, #4]
 8010908:	2b05      	cmp	r3, #5
 801090a:	d92f      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801090c:	2800      	cmp	r0, #0
 801090e:	d03a      	beq.n	8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010910:	69e1      	ldr	r1, [r4, #28]
 8010912:	4630      	mov	r0, r6
 8010914:	f004 fe36 	bl	8015584 <ucdr_serialize_string>
 8010918:	6863      	ldr	r3, [r4, #4]
 801091a:	2b06      	cmp	r3, #6
 801091c:	d926      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801091e:	b390      	cbz	r0, 8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010920:	6a21      	ldr	r1, [r4, #32]
 8010922:	4630      	mov	r0, r6
 8010924:	f004 fe2e 	bl	8015584 <ucdr_serialize_string>
 8010928:	6863      	ldr	r3, [r4, #4]
 801092a:	2b07      	cmp	r3, #7
 801092c:	d91e      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801092e:	b350      	cbz	r0, 8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010930:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010932:	4630      	mov	r0, r6
 8010934:	f004 fe26 	bl	8015584 <ucdr_serialize_string>
 8010938:	6863      	ldr	r3, [r4, #4]
 801093a:	2b08      	cmp	r3, #8
 801093c:	d916      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801093e:	b310      	cbz	r0, 8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010940:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010942:	4630      	mov	r0, r6
 8010944:	f004 fe1e 	bl	8015584 <ucdr_serialize_string>
 8010948:	6863      	ldr	r3, [r4, #4]
 801094a:	2b09      	cmp	r3, #9
 801094c:	d90e      	bls.n	801096c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801094e:	b1d0      	cbz	r0, 8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010950:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010954:	2709      	movs	r7, #9
 8010956:	e000      	b.n	801095a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010958:	b1a8      	cbz	r0, 8010986 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801095a:	f858 1b04 	ldr.w	r1, [r8], #4
 801095e:	4630      	mov	r0, r6
 8010960:	f004 fe10 	bl	8015584 <ucdr_serialize_string>
 8010964:	6862      	ldr	r2, [r4, #4]
 8010966:	3701      	adds	r7, #1
 8010968:	4297      	cmp	r7, r2
 801096a:	d3f5      	bcc.n	8010958 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801096c:	4005      	ands	r5, r0
 801096e:	b2ed      	uxtb	r5, r5
 8010970:	e78a      	b.n	8010888 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010972:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010974:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010978:	4630      	mov	r0, r6
 801097a:	f004 fdd7 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 801097e:	4005      	ands	r5, r0
 8010980:	4628      	mov	r0, r5
 8010982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010986:	2500      	movs	r5, #0
 8010988:	e77e      	b.n	8010888 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801098a:	4028      	ands	r0, r5
 801098c:	b2c5      	uxtb	r5, r0
 801098e:	e77b      	b.n	8010888 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08010990 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010990:	b570      	push	{r4, r5, r6, lr}
 8010992:	460d      	mov	r5, r1
 8010994:	7809      	ldrb	r1, [r1, #0]
 8010996:	4606      	mov	r6, r0
 8010998:	f7fb ff7e 	bl	800c898 <ucdr_serialize_bool>
 801099c:	782b      	ldrb	r3, [r5, #0]
 801099e:	4604      	mov	r4, r0
 80109a0:	b94b      	cbnz	r3, 80109b6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80109a2:	7a29      	ldrb	r1, [r5, #8]
 80109a4:	4630      	mov	r0, r6
 80109a6:	f7fb ff77 	bl	800c898 <ucdr_serialize_bool>
 80109aa:	7a2b      	ldrb	r3, [r5, #8]
 80109ac:	4004      	ands	r4, r0
 80109ae:	b2e4      	uxtb	r4, r4
 80109b0:	b943      	cbnz	r3, 80109c4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80109b2:	4620      	mov	r0, r4
 80109b4:	bd70      	pop	{r4, r5, r6, pc}
 80109b6:	6869      	ldr	r1, [r5, #4]
 80109b8:	4630      	mov	r0, r6
 80109ba:	f004 fde3 	bl	8015584 <ucdr_serialize_string>
 80109be:	4004      	ands	r4, r0
 80109c0:	b2e4      	uxtb	r4, r4
 80109c2:	e7ee      	b.n	80109a2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80109c4:	f105 010c 	add.w	r1, r5, #12
 80109c8:	4630      	mov	r0, r6
 80109ca:	f7ff ff53 	bl	8010874 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80109ce:	4004      	ands	r4, r0
 80109d0:	4620      	mov	r0, r4
 80109d2:	bd70      	pop	{r4, r5, r6, pc}

080109d4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80109d4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80109d8:	4688      	mov	r8, r1
 80109da:	8809      	ldrh	r1, [r1, #0]
 80109dc:	4681      	mov	r9, r0
 80109de:	f7fb ffb5 	bl	800c94c <ucdr_serialize_uint16_t>
 80109e2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80109e6:	4606      	mov	r6, r0
 80109e8:	4648      	mov	r0, r9
 80109ea:	f7fb ff55 	bl	800c898 <ucdr_serialize_bool>
 80109ee:	f898 3002 	ldrb.w	r3, [r8, #2]
 80109f2:	4006      	ands	r6, r0
 80109f4:	b2f5      	uxtb	r5, r6
 80109f6:	b9eb      	cbnz	r3, 8010a34 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80109f8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80109fc:	4648      	mov	r0, r9
 80109fe:	f7fb ff4b 	bl	800c898 <ucdr_serialize_bool>
 8010a02:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010a06:	4005      	ands	r5, r0
 8010a08:	bb7b      	cbnz	r3, 8010a6a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8010a0a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010a0e:	4648      	mov	r0, r9
 8010a10:	f7fb ff42 	bl	800c898 <ucdr_serialize_bool>
 8010a14:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010a18:	4005      	ands	r5, r0
 8010a1a:	b9f3      	cbnz	r3, 8010a5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010a1c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010a20:	4648      	mov	r0, r9
 8010a22:	f7fb ff39 	bl	800c898 <ucdr_serialize_bool>
 8010a26:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010a2a:	4005      	ands	r5, r0
 8010a2c:	b94b      	cbnz	r3, 8010a42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010a2e:	4628      	mov	r0, r5
 8010a30:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010a34:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010a38:	4648      	mov	r0, r9
 8010a3a:	f7fb ff87 	bl	800c94c <ucdr_serialize_uint16_t>
 8010a3e:	4005      	ands	r5, r0
 8010a40:	e7da      	b.n	80109f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010a42:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010a46:	f108 011c 	add.w	r1, r8, #28
 8010a4a:	4648      	mov	r0, r9
 8010a4c:	f004 fd6e 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 8010a50:	4028      	ands	r0, r5
 8010a52:	b2c5      	uxtb	r5, r0
 8010a54:	4628      	mov	r0, r5
 8010a56:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010a5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010a5e:	4648      	mov	r0, r9
 8010a60:	f7fc f95e 	bl	800cd20 <ucdr_serialize_uint32_t>
 8010a64:	4028      	ands	r0, r5
 8010a66:	b2c5      	uxtb	r5, r0
 8010a68:	e7d8      	b.n	8010a1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010a6a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010a6e:	4648      	mov	r0, r9
 8010a70:	f7fc f956 	bl	800cd20 <ucdr_serialize_uint32_t>
 8010a74:	4028      	ands	r0, r5
 8010a76:	b2c5      	uxtb	r5, r0
 8010a78:	e7c7      	b.n	8010a0a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010a7a:	bf00      	nop

08010a7c <uxr_serialize_OBJK_DataReader_Binary>:
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	2202      	movs	r2, #2
 8010a80:	460c      	mov	r4, r1
 8010a82:	4606      	mov	r6, r0
 8010a84:	f004 fc5e 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010a88:	78a1      	ldrb	r1, [r4, #2]
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7fb ff03 	bl	800c898 <ucdr_serialize_bool>
 8010a92:	78a3      	ldrb	r3, [r4, #2]
 8010a94:	4005      	ands	r5, r0
 8010a96:	b2ed      	uxtb	r5, r5
 8010a98:	b90b      	cbnz	r3, 8010a9e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a9e:	f104 0108 	add.w	r1, r4, #8
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff ff96 	bl	80109d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010aa8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010aac:	4607      	mov	r7, r0
 8010aae:	4630      	mov	r0, r6
 8010ab0:	f7fb fef2 	bl	800c898 <ucdr_serialize_bool>
 8010ab4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010ab8:	4038      	ands	r0, r7
 8010aba:	b2c7      	uxtb	r7, r0
 8010abc:	b95b      	cbnz	r3, 8010ad6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010abe:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	f7fb fee8 	bl	800c898 <ucdr_serialize_bool>
 8010ac8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010acc:	4007      	ands	r7, r0
 8010ace:	b94b      	cbnz	r3, 8010ae4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010ad0:	403d      	ands	r5, r7
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ad6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010ada:	4630      	mov	r0, r6
 8010adc:	f7fc fb76 	bl	800d1cc <ucdr_serialize_uint64_t>
 8010ae0:	4007      	ands	r7, r0
 8010ae2:	e7ec      	b.n	8010abe <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010ae4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f004 fd4c 	bl	8015584 <ucdr_serialize_string>
 8010aec:	4007      	ands	r7, r0
 8010aee:	b2ff      	uxtb	r7, r7
 8010af0:	e7ee      	b.n	8010ad0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010af2:	bf00      	nop

08010af4 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010af6:	2202      	movs	r2, #2
 8010af8:	460d      	mov	r5, r1
 8010afa:	4606      	mov	r6, r0
 8010afc:	f004 fc22 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010b00:	78a9      	ldrb	r1, [r5, #2]
 8010b02:	4604      	mov	r4, r0
 8010b04:	4630      	mov	r0, r6
 8010b06:	f7fb fec7 	bl	800c898 <ucdr_serialize_bool>
 8010b0a:	78ab      	ldrb	r3, [r5, #2]
 8010b0c:	4004      	ands	r4, r0
 8010b0e:	b2e4      	uxtb	r4, r4
 8010b10:	b90b      	cbnz	r3, 8010b16 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010b12:	4620      	mov	r0, r4
 8010b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b16:	f105 0108 	add.w	r1, r5, #8
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	f7ff ff5a 	bl	80109d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010b20:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8010b24:	4607      	mov	r7, r0
 8010b26:	4630      	mov	r0, r6
 8010b28:	f7fb feb6 	bl	800c898 <ucdr_serialize_bool>
 8010b2c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010b30:	4038      	ands	r0, r7
 8010b32:	b2c7      	uxtb	r7, r0
 8010b34:	b913      	cbnz	r3, 8010b3c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8010b36:	403c      	ands	r4, r7
 8010b38:	4620      	mov	r0, r4
 8010b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b3c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8010b40:	4630      	mov	r0, r6
 8010b42:	f7fc fb43 	bl	800d1cc <ucdr_serialize_uint64_t>
 8010b46:	4007      	ands	r7, r0
 8010b48:	e7f5      	b.n	8010b36 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010b4a:	bf00      	nop

08010b4c <uxr_deserialize_ObjectVariant>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	4605      	mov	r5, r0
 8010b50:	460e      	mov	r6, r1
 8010b52:	f7fb fee5 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010b56:	b168      	cbz	r0, 8010b74 <uxr_deserialize_ObjectVariant+0x28>
 8010b58:	7833      	ldrb	r3, [r6, #0]
 8010b5a:	3b01      	subs	r3, #1
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	2b0d      	cmp	r3, #13
 8010b60:	d809      	bhi.n	8010b76 <uxr_deserialize_ObjectVariant+0x2a>
 8010b62:	e8df f003 	tbb	[pc, r3]
 8010b66:	0a41      	.short	0x0a41
 8010b68:	0a0a2323 	.word	0x0a0a2323
 8010b6c:	10080a0a 	.word	0x10080a0a
 8010b70:	565c1010 	.word	0x565c1010
 8010b74:	2400      	movs	r4, #0
 8010b76:	4620      	mov	r0, r4
 8010b78:	bd70      	pop	{r4, r5, r6, pc}
 8010b7a:	1d31      	adds	r1, r6, #4
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b82:	f7ff bd55 	b.w	8010630 <uxr_deserialize_DATAWRITER_Representation>
 8010b86:	1d31      	adds	r1, r6, #4
 8010b88:	4628      	mov	r0, r5
 8010b8a:	f7fb fec9 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d0f0      	beq.n	8010b74 <uxr_deserialize_ObjectVariant+0x28>
 8010b92:	7933      	ldrb	r3, [r6, #4]
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	d001      	beq.n	8010b9c <uxr_deserialize_ObjectVariant+0x50>
 8010b98:	2b02      	cmp	r3, #2
 8010b9a:	d1ec      	bne.n	8010b76 <uxr_deserialize_ObjectVariant+0x2a>
 8010b9c:	68b1      	ldr	r1, [r6, #8]
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ba8:	f004 bcfc 	b.w	80155a4 <ucdr_deserialize_string>
 8010bac:	1d31      	adds	r1, r6, #4
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f7fb feb6 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	b170      	cbz	r0, 8010bd6 <uxr_deserialize_ObjectVariant+0x8a>
 8010bb8:	7933      	ldrb	r3, [r6, #4]
 8010bba:	2b02      	cmp	r3, #2
 8010bbc:	d04c      	beq.n	8010c58 <uxr_deserialize_ObjectVariant+0x10c>
 8010bbe:	2b03      	cmp	r3, #3
 8010bc0:	d109      	bne.n	8010bd6 <uxr_deserialize_ObjectVariant+0x8a>
 8010bc2:	f106 0308 	add.w	r3, r6, #8
 8010bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bca:	f106 010c 	add.w	r1, r6, #12
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f004 fcbe 	bl	8015550 <ucdr_deserialize_sequence_uint8_t>
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010bdc:	4628      	mov	r0, r5
 8010bde:	f004 fc15 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010be2:	4020      	ands	r0, r4
 8010be4:	b2c4      	uxtb	r4, r0
 8010be6:	e7c6      	b.n	8010b76 <uxr_deserialize_ObjectVariant+0x2a>
 8010be8:	1d31      	adds	r1, r6, #4
 8010bea:	4628      	mov	r0, r5
 8010bec:	f7fb fe98 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	b130      	cbz	r0, 8010c02 <uxr_deserialize_ObjectVariant+0xb6>
 8010bf4:	7933      	ldrb	r3, [r6, #4]
 8010bf6:	2b02      	cmp	r3, #2
 8010bf8:	d036      	beq.n	8010c68 <uxr_deserialize_ObjectVariant+0x11c>
 8010bfa:	2b03      	cmp	r3, #3
 8010bfc:	d03c      	beq.n	8010c78 <uxr_deserialize_ObjectVariant+0x12c>
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d032      	beq.n	8010c68 <uxr_deserialize_ObjectVariant+0x11c>
 8010c02:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010c06:	4628      	mov	r0, r5
 8010c08:	f7fc fc30 	bl	800d46c <ucdr_deserialize_int16_t>
 8010c0c:	4020      	ands	r0, r4
 8010c0e:	b2c4      	uxtb	r4, r0
 8010c10:	e7b1      	b.n	8010b76 <uxr_deserialize_ObjectVariant+0x2a>
 8010c12:	1d31      	adds	r1, r6, #4
 8010c14:	4628      	mov	r0, r5
 8010c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c1a:	f7ff bbbf 	b.w	801039c <uxr_deserialize_CLIENT_Representation>
 8010c1e:	2204      	movs	r2, #4
 8010c20:	18b1      	adds	r1, r6, r2
 8010c22:	4628      	mov	r0, r5
 8010c24:	f004 fbf2 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010c28:	2202      	movs	r2, #2
 8010c2a:	f106 0108 	add.w	r1, r6, #8
 8010c2e:	4604      	mov	r4, r0
 8010c30:	4628      	mov	r0, r5
 8010c32:	f004 fbeb 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010c36:	2202      	movs	r2, #2
 8010c38:	4004      	ands	r4, r0
 8010c3a:	f106 010a 	add.w	r1, r6, #10
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f004 fbe4 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010c44:	b2e4      	uxtb	r4, r4
 8010c46:	4603      	mov	r3, r0
 8010c48:	f106 010c 	add.w	r1, r6, #12
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	401c      	ands	r4, r3
 8010c50:	f7fb fe38 	bl	800c8c4 <ucdr_deserialize_bool>
 8010c54:	4004      	ands	r4, r0
 8010c56:	e78e      	b.n	8010b76 <uxr_deserialize_ObjectVariant+0x2a>
 8010c58:	68b1      	ldr	r1, [r6, #8]
 8010c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f004 fca0 	bl	80155a4 <ucdr_deserialize_string>
 8010c64:	4604      	mov	r4, r0
 8010c66:	e7b6      	b.n	8010bd6 <uxr_deserialize_ObjectVariant+0x8a>
 8010c68:	68b1      	ldr	r1, [r6, #8]
 8010c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f004 fc98 	bl	80155a4 <ucdr_deserialize_string>
 8010c74:	4604      	mov	r4, r0
 8010c76:	e7c4      	b.n	8010c02 <uxr_deserialize_ObjectVariant+0xb6>
 8010c78:	f106 0308 	add.w	r3, r6, #8
 8010c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c80:	f106 010c 	add.w	r1, r6, #12
 8010c84:	4628      	mov	r0, r5
 8010c86:	f004 fc63 	bl	8015550 <ucdr_deserialize_sequence_uint8_t>
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	e7b9      	b.n	8010c02 <uxr_deserialize_ObjectVariant+0xb6>
 8010c8e:	bf00      	nop

08010c90 <uxr_deserialize_BaseObjectRequest>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	2202      	movs	r2, #2
 8010c94:	4605      	mov	r5, r0
 8010c96:	460e      	mov	r6, r1
 8010c98:	f004 fbb8 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010c9c:	2202      	movs	r2, #2
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	18b1      	adds	r1, r6, r2
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	f004 fbb2 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010ca8:	4020      	ands	r0, r4
 8010caa:	b2c0      	uxtb	r0, r0
 8010cac:	bd70      	pop	{r4, r5, r6, pc}
 8010cae:	bf00      	nop

08010cb0 <uxr_serialize_ActivityInfoVariant>:
 8010cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb4:	460d      	mov	r5, r1
 8010cb6:	7809      	ldrb	r1, [r1, #0]
 8010cb8:	4607      	mov	r7, r0
 8010cba:	f7fb fe1b 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010cbe:	4681      	mov	r9, r0
 8010cc0:	b138      	cbz	r0, 8010cd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8010cc2:	782b      	ldrb	r3, [r5, #0]
 8010cc4:	2b06      	cmp	r3, #6
 8010cc6:	f000 8082 	beq.w	8010dce <uxr_serialize_ActivityInfoVariant+0x11e>
 8010cca:	2b0d      	cmp	r3, #13
 8010ccc:	d016      	beq.n	8010cfc <uxr_serialize_ActivityInfoVariant+0x4c>
 8010cce:	2b05      	cmp	r3, #5
 8010cd0:	d002      	beq.n	8010cd8 <uxr_serialize_ActivityInfoVariant+0x28>
 8010cd2:	4648      	mov	r0, r9
 8010cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cd8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010cdc:	4638      	mov	r0, r7
 8010cde:	f7fc fb45 	bl	800d36c <ucdr_serialize_int16_t>
 8010ce2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010ce6:	4681      	mov	r9, r0
 8010ce8:	4638      	mov	r0, r7
 8010cea:	f7fc fa6f 	bl	800d1cc <ucdr_serialize_uint64_t>
 8010cee:	ea09 0000 	and.w	r0, r9, r0
 8010cf2:	fa5f f980 	uxtb.w	r9, r0
 8010cf6:	4648      	mov	r0, r9
 8010cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010d00:	4638      	mov	r0, r7
 8010d02:	f7fc fb33 	bl	800d36c <ucdr_serialize_int16_t>
 8010d06:	68e9      	ldr	r1, [r5, #12]
 8010d08:	4681      	mov	r9, r0
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	f7fc f808 	bl	800cd20 <ucdr_serialize_uint32_t>
 8010d10:	68eb      	ldr	r3, [r5, #12]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d0eb      	beq.n	8010cee <uxr_serialize_ActivityInfoVariant+0x3e>
 8010d16:	b320      	cbz	r0, 8010d62 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010d18:	f105 080c 	add.w	r8, r5, #12
 8010d1c:	2600      	movs	r6, #0
 8010d1e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8010d22:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8010d26:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	f7fb fde2 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d053      	beq.n	8010ddc <uxr_serialize_ActivityInfoVariant+0x12c>
 8010d34:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8010d38:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010d3c:	0074      	lsls	r4, r6, #1
 8010d3e:	00c9      	lsls	r1, r1, #3
 8010d40:	2b03      	cmp	r3, #3
 8010d42:	d854      	bhi.n	8010dee <uxr_serialize_ActivityInfoVariant+0x13e>
 8010d44:	e8df f003 	tbb	[pc, r3]
 8010d48:	02102132 	.word	0x02102132
 8010d4c:	4441      	add	r1, r8
 8010d4e:	4638      	mov	r0, r7
 8010d50:	6889      	ldr	r1, [r1, #8]
 8010d52:	f004 fc17 	bl	8015584 <ucdr_serialize_string>
 8010d56:	68ea      	ldr	r2, [r5, #12]
 8010d58:	3601      	adds	r6, #1
 8010d5a:	4296      	cmp	r6, r2
 8010d5c:	d242      	bcs.n	8010de4 <uxr_serialize_ActivityInfoVariant+0x134>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	d1dd      	bne.n	8010d1e <uxr_serialize_ActivityInfoVariant+0x6e>
 8010d62:	f04f 0900 	mov.w	r9, #0
 8010d66:	e7b4      	b.n	8010cd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8010d68:	3108      	adds	r1, #8
 8010d6a:	4441      	add	r1, r8
 8010d6c:	2210      	movs	r2, #16
 8010d6e:	4638      	mov	r0, r7
 8010d70:	f004 fae8 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010d74:	4434      	add	r4, r6
 8010d76:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010d7e:	4638      	mov	r0, r7
 8010d80:	f7fb ffce 	bl	800cd20 <ucdr_serialize_uint32_t>
 8010d84:	4020      	ands	r0, r4
 8010d86:	b2c0      	uxtb	r0, r0
 8010d88:	e7e5      	b.n	8010d56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010d8a:	3108      	adds	r1, #8
 8010d8c:	4441      	add	r1, r8
 8010d8e:	2204      	movs	r2, #4
 8010d90:	4638      	mov	r0, r7
 8010d92:	f004 fad7 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010d96:	4434      	add	r4, r6
 8010d98:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	8b19      	ldrh	r1, [r3, #24]
 8010da0:	4638      	mov	r0, r7
 8010da2:	f7fb fdd3 	bl	800c94c <ucdr_serialize_uint16_t>
 8010da6:	4020      	ands	r0, r4
 8010da8:	b2c0      	uxtb	r0, r0
 8010daa:	e7d4      	b.n	8010d56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010dac:	3108      	adds	r1, #8
 8010dae:	4441      	add	r1, r8
 8010db0:	2202      	movs	r2, #2
 8010db2:	4638      	mov	r0, r7
 8010db4:	f004 fac6 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010db8:	4434      	add	r4, r6
 8010dba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	7d99      	ldrb	r1, [r3, #22]
 8010dc2:	4638      	mov	r0, r7
 8010dc4:	f7fb fd96 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010dc8:	4020      	ands	r0, r4
 8010dca:	b2c0      	uxtb	r0, r0
 8010dcc:	e7c3      	b.n	8010d56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010dce:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010dd2:	4638      	mov	r0, r7
 8010dd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd8:	f7fc bac8 	b.w	800d36c <ucdr_serialize_int16_t>
 8010ddc:	68ea      	ldr	r2, [r5, #12]
 8010dde:	3601      	adds	r6, #1
 8010de0:	42b2      	cmp	r2, r6
 8010de2:	d8be      	bhi.n	8010d62 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010de4:	ea09 0900 	and.w	r9, r9, r0
 8010de8:	fa5f f989 	uxtb.w	r9, r9
 8010dec:	e771      	b.n	8010cd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8010dee:	68eb      	ldr	r3, [r5, #12]
 8010df0:	3601      	adds	r6, #1
 8010df2:	429e      	cmp	r6, r3
 8010df4:	f10a 0a18 	add.w	sl, sl, #24
 8010df8:	d395      	bcc.n	8010d26 <uxr_serialize_ActivityInfoVariant+0x76>
 8010dfa:	e76a      	b.n	8010cd2 <uxr_serialize_ActivityInfoVariant+0x22>

08010dfc <uxr_deserialize_BaseObjectReply>:
 8010dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e00:	2202      	movs	r2, #2
 8010e02:	4606      	mov	r6, r0
 8010e04:	460f      	mov	r7, r1
 8010e06:	f004 fb01 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010e0a:	2202      	movs	r2, #2
 8010e0c:	18b9      	adds	r1, r7, r2
 8010e0e:	4605      	mov	r5, r0
 8010e10:	4630      	mov	r0, r6
 8010e12:	f004 fafb 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010e16:	1d39      	adds	r1, r7, #4
 8010e18:	4680      	mov	r8, r0
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	f7fb fd80 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010e20:	1d79      	adds	r1, r7, #5
 8010e22:	4604      	mov	r4, r0
 8010e24:	4630      	mov	r0, r6
 8010e26:	f7fb fd7b 	bl	800c920 <ucdr_deserialize_uint8_t>
 8010e2a:	ea05 0508 	and.w	r5, r5, r8
 8010e2e:	402c      	ands	r4, r5
 8010e30:	4020      	ands	r0, r4
 8010e32:	b2c0      	uxtb	r0, r0
 8010e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e38 <uxr_serialize_ReadSpecification>:
 8010e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3c:	460e      	mov	r6, r1
 8010e3e:	7809      	ldrb	r1, [r1, #0]
 8010e40:	4607      	mov	r7, r0
 8010e42:	f7fb fd57 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010e46:	7871      	ldrb	r1, [r6, #1]
 8010e48:	4604      	mov	r4, r0
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	f7fb fd52 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010e50:	78b1      	ldrb	r1, [r6, #2]
 8010e52:	4004      	ands	r4, r0
 8010e54:	4638      	mov	r0, r7
 8010e56:	f7fb fd1f 	bl	800c898 <ucdr_serialize_bool>
 8010e5a:	78b3      	ldrb	r3, [r6, #2]
 8010e5c:	b2e4      	uxtb	r4, r4
 8010e5e:	4004      	ands	r4, r0
 8010e60:	b94b      	cbnz	r3, 8010e76 <uxr_serialize_ReadSpecification+0x3e>
 8010e62:	7a31      	ldrb	r1, [r6, #8]
 8010e64:	4638      	mov	r0, r7
 8010e66:	f7fb fd17 	bl	800c898 <ucdr_serialize_bool>
 8010e6a:	7a33      	ldrb	r3, [r6, #8]
 8010e6c:	4004      	ands	r4, r0
 8010e6e:	b943      	cbnz	r3, 8010e82 <uxr_serialize_ReadSpecification+0x4a>
 8010e70:	4620      	mov	r0, r4
 8010e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e76:	6871      	ldr	r1, [r6, #4]
 8010e78:	4638      	mov	r0, r7
 8010e7a:	f004 fb83 	bl	8015584 <ucdr_serialize_string>
 8010e7e:	4004      	ands	r4, r0
 8010e80:	e7ef      	b.n	8010e62 <uxr_serialize_ReadSpecification+0x2a>
 8010e82:	8971      	ldrh	r1, [r6, #10]
 8010e84:	4638      	mov	r0, r7
 8010e86:	f7fb fd61 	bl	800c94c <ucdr_serialize_uint16_t>
 8010e8a:	89b1      	ldrh	r1, [r6, #12]
 8010e8c:	4605      	mov	r5, r0
 8010e8e:	4638      	mov	r0, r7
 8010e90:	f7fb fd5c 	bl	800c94c <ucdr_serialize_uint16_t>
 8010e94:	89f1      	ldrh	r1, [r6, #14]
 8010e96:	4005      	ands	r5, r0
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f7fb fd57 	bl	800c94c <ucdr_serialize_uint16_t>
 8010e9e:	8a31      	ldrh	r1, [r6, #16]
 8010ea0:	4680      	mov	r8, r0
 8010ea2:	4638      	mov	r0, r7
 8010ea4:	f7fb fd52 	bl	800c94c <ucdr_serialize_uint16_t>
 8010ea8:	b2ed      	uxtb	r5, r5
 8010eaa:	4025      	ands	r5, r4
 8010eac:	ea08 0505 	and.w	r5, r8, r5
 8010eb0:	ea00 0405 	and.w	r4, r0, r5
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eba:	bf00      	nop

08010ebc <uxr_serialize_CREATE_CLIENT_Payload>:
 8010ebc:	f7ff ba16 	b.w	80102ec <uxr_serialize_CLIENT_Representation>

08010ec0 <uxr_serialize_CREATE_Payload>:
 8010ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ec2:	2202      	movs	r2, #2
 8010ec4:	4607      	mov	r7, r0
 8010ec6:	460e      	mov	r6, r1
 8010ec8:	f004 fa3c 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010ecc:	2202      	movs	r2, #2
 8010ece:	18b1      	adds	r1, r6, r2
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	f004 fa36 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010ed8:	7931      	ldrb	r1, [r6, #4]
 8010eda:	4604      	mov	r4, r0
 8010edc:	4638      	mov	r0, r7
 8010ede:	f7fb fd09 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010ee2:	b170      	cbz	r0, 8010f02 <uxr_serialize_CREATE_Payload+0x42>
 8010ee4:	7933      	ldrb	r3, [r6, #4]
 8010ee6:	402c      	ands	r4, r5
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	b2e4      	uxtb	r4, r4
 8010eec:	2b0d      	cmp	r3, #13
 8010eee:	d809      	bhi.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010ef0:	e8df f003 	tbb	[pc, r3]
 8010ef4:	23230a4c 	.word	0x23230a4c
 8010ef8:	0a0a0a0a 	.word	0x0a0a0a0a
 8010efc:	12121208 	.word	0x12121208
 8010f00:	3e45      	.short	0x3e45
 8010f02:	2400      	movs	r4, #0
 8010f04:	4620      	mov	r0, r4
 8010f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f08:	f106 0108 	add.w	r1, r6, #8
 8010f0c:	4638      	mov	r0, r7
 8010f0e:	f7ff faf3 	bl	80104f8 <uxr_serialize_DATAWRITER_Representation>
 8010f12:	4004      	ands	r4, r0
 8010f14:	4620      	mov	r0, r4
 8010f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f18:	7a31      	ldrb	r1, [r6, #8]
 8010f1a:	4638      	mov	r0, r7
 8010f1c:	f7fb fcea 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d0ee      	beq.n	8010f02 <uxr_serialize_CREATE_Payload+0x42>
 8010f24:	7a33      	ldrb	r3, [r6, #8]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d001      	beq.n	8010f2e <uxr_serialize_CREATE_Payload+0x6e>
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d1ea      	bne.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010f2e:	68f1      	ldr	r1, [r6, #12]
 8010f30:	4638      	mov	r0, r7
 8010f32:	f004 fb27 	bl	8015584 <ucdr_serialize_string>
 8010f36:	4004      	ands	r4, r0
 8010f38:	e7e4      	b.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010f3a:	7a31      	ldrb	r1, [r6, #8]
 8010f3c:	4638      	mov	r0, r7
 8010f3e:	f7fb fcd9 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010f42:	4605      	mov	r5, r0
 8010f44:	b158      	cbz	r0, 8010f5e <uxr_serialize_CREATE_Payload+0x9e>
 8010f46:	7a33      	ldrb	r3, [r6, #8]
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	d034      	beq.n	8010fb6 <uxr_serialize_CREATE_Payload+0xf6>
 8010f4c:	2b03      	cmp	r3, #3
 8010f4e:	d106      	bne.n	8010f5e <uxr_serialize_CREATE_Payload+0x9e>
 8010f50:	68f2      	ldr	r2, [r6, #12]
 8010f52:	f106 0110 	add.w	r1, r6, #16
 8010f56:	4638      	mov	r0, r7
 8010f58:	f004 fae8 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	2202      	movs	r2, #2
 8010f60:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010f64:	4638      	mov	r0, r7
 8010f66:	f004 f9ed 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8010f6a:	4028      	ands	r0, r5
 8010f6c:	4004      	ands	r4, r0
 8010f6e:	e7c9      	b.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010f70:	f106 0108 	add.w	r1, r6, #8
 8010f74:	4638      	mov	r0, r7
 8010f76:	f7ff f9b9 	bl	80102ec <uxr_serialize_CLIENT_Representation>
 8010f7a:	4004      	ands	r4, r0
 8010f7c:	e7c2      	b.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010f7e:	f106 0108 	add.w	r1, r6, #8
 8010f82:	4638      	mov	r0, r7
 8010f84:	f7ff fa6e 	bl	8010464 <uxr_serialize_AGENT_Representation>
 8010f88:	4004      	ands	r4, r0
 8010f8a:	e7bb      	b.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010f8c:	7a31      	ldrb	r1, [r6, #8]
 8010f8e:	4638      	mov	r0, r7
 8010f90:	f7fb fcb0 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8010f94:	4605      	mov	r5, r0
 8010f96:	b130      	cbz	r0, 8010fa6 <uxr_serialize_CREATE_Payload+0xe6>
 8010f98:	7a33      	ldrb	r3, [r6, #8]
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d011      	beq.n	8010fc2 <uxr_serialize_CREATE_Payload+0x102>
 8010f9e:	2b03      	cmp	r3, #3
 8010fa0:	d015      	beq.n	8010fce <uxr_serialize_CREATE_Payload+0x10e>
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d00d      	beq.n	8010fc2 <uxr_serialize_CREATE_Payload+0x102>
 8010fa6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010faa:	4638      	mov	r0, r7
 8010fac:	f7fc f9de 	bl	800d36c <ucdr_serialize_int16_t>
 8010fb0:	4028      	ands	r0, r5
 8010fb2:	4004      	ands	r4, r0
 8010fb4:	e7a6      	b.n	8010f04 <uxr_serialize_CREATE_Payload+0x44>
 8010fb6:	68f1      	ldr	r1, [r6, #12]
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f004 fae3 	bl	8015584 <ucdr_serialize_string>
 8010fbe:	4605      	mov	r5, r0
 8010fc0:	e7cd      	b.n	8010f5e <uxr_serialize_CREATE_Payload+0x9e>
 8010fc2:	68f1      	ldr	r1, [r6, #12]
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f004 fadd 	bl	8015584 <ucdr_serialize_string>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	e7eb      	b.n	8010fa6 <uxr_serialize_CREATE_Payload+0xe6>
 8010fce:	68f2      	ldr	r2, [r6, #12]
 8010fd0:	f106 0110 	add.w	r1, r6, #16
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	f004 faa9 	bl	801552c <ucdr_serialize_sequence_uint8_t>
 8010fda:	4605      	mov	r5, r0
 8010fdc:	e7e3      	b.n	8010fa6 <uxr_serialize_CREATE_Payload+0xe6>
 8010fde:	bf00      	nop

08010fe0 <uxr_deserialize_GET_INFO_Payload>:
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	460e      	mov	r6, r1
 8010fe8:	f004 fa10 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010fec:	2202      	movs	r2, #2
 8010fee:	18b1      	adds	r1, r6, r2
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f004 fa0a 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8010ff8:	1d31      	adds	r1, r6, #4
 8010ffa:	4004      	ands	r4, r0
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f7fb ffbf 	bl	800cf80 <ucdr_deserialize_uint32_t>
 8011002:	b2e4      	uxtb	r4, r4
 8011004:	4020      	ands	r0, r4
 8011006:	bd70      	pop	{r4, r5, r6, pc}

08011008 <uxr_serialize_DELETE_Payload>:
 8011008:	b570      	push	{r4, r5, r6, lr}
 801100a:	2202      	movs	r2, #2
 801100c:	4605      	mov	r5, r0
 801100e:	460e      	mov	r6, r1
 8011010:	f004 f998 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8011014:	2202      	movs	r2, #2
 8011016:	4604      	mov	r4, r0
 8011018:	18b1      	adds	r1, r6, r2
 801101a:	4628      	mov	r0, r5
 801101c:	f004 f992 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8011020:	4020      	ands	r0, r4
 8011022:	b2c0      	uxtb	r0, r0
 8011024:	bd70      	pop	{r4, r5, r6, pc}
 8011026:	bf00      	nop

08011028 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801102c:	4605      	mov	r5, r0
 801102e:	460e      	mov	r6, r1
 8011030:	f7fb fc76 	bl	800c920 <ucdr_deserialize_uint8_t>
 8011034:	1c71      	adds	r1, r6, #1
 8011036:	4604      	mov	r4, r0
 8011038:	4628      	mov	r0, r5
 801103a:	f7fb fc71 	bl	800c920 <ucdr_deserialize_uint8_t>
 801103e:	2204      	movs	r2, #4
 8011040:	18b1      	adds	r1, r6, r2
 8011042:	4680      	mov	r8, r0
 8011044:	4628      	mov	r0, r5
 8011046:	f004 f9e1 	bl	801540c <ucdr_deserialize_array_uint8_t>
 801104a:	f106 0108 	add.w	r1, r6, #8
 801104e:	4607      	mov	r7, r0
 8011050:	2202      	movs	r2, #2
 8011052:	4628      	mov	r0, r5
 8011054:	f004 f9da 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8011058:	ea04 0308 	and.w	r3, r4, r8
 801105c:	b2db      	uxtb	r3, r3
 801105e:	ea03 0407 	and.w	r4, r3, r7
 8011062:	2202      	movs	r2, #2
 8011064:	4607      	mov	r7, r0
 8011066:	f106 010a 	add.w	r1, r6, #10
 801106a:	4628      	mov	r0, r5
 801106c:	f004 f9ce 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8011070:	f106 010c 	add.w	r1, r6, #12
 8011074:	4603      	mov	r3, r0
 8011076:	4628      	mov	r0, r5
 8011078:	461d      	mov	r5, r3
 801107a:	f7fb fc23 	bl	800c8c4 <ucdr_deserialize_bool>
 801107e:	403c      	ands	r4, r7
 8011080:	4025      	ands	r5, r4
 8011082:	4028      	ands	r0, r5
 8011084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011088 <uxr_deserialize_STATUS_Payload>:
 8011088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108c:	2202      	movs	r2, #2
 801108e:	4606      	mov	r6, r0
 8011090:	460f      	mov	r7, r1
 8011092:	f004 f9bb 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8011096:	2202      	movs	r2, #2
 8011098:	18b9      	adds	r1, r7, r2
 801109a:	4605      	mov	r5, r0
 801109c:	4630      	mov	r0, r6
 801109e:	f004 f9b5 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80110a2:	1d39      	adds	r1, r7, #4
 80110a4:	4680      	mov	r8, r0
 80110a6:	4630      	mov	r0, r6
 80110a8:	f7fb fc3a 	bl	800c920 <ucdr_deserialize_uint8_t>
 80110ac:	1d79      	adds	r1, r7, #5
 80110ae:	4604      	mov	r4, r0
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7fb fc35 	bl	800c920 <ucdr_deserialize_uint8_t>
 80110b6:	ea05 0508 	and.w	r5, r5, r8
 80110ba:	402c      	ands	r4, r5
 80110bc:	4020      	ands	r0, r4
 80110be:	b2c0      	uxtb	r0, r0
 80110c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110c4 <uxr_serialize_INFO_Payload>:
 80110c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	2202      	movs	r2, #2
 80110ca:	460c      	mov	r4, r1
 80110cc:	4605      	mov	r5, r0
 80110ce:	f004 f939 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80110d2:	2202      	movs	r2, #2
 80110d4:	18a1      	adds	r1, r4, r2
 80110d6:	4680      	mov	r8, r0
 80110d8:	4628      	mov	r0, r5
 80110da:	f004 f933 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80110de:	7921      	ldrb	r1, [r4, #4]
 80110e0:	4607      	mov	r7, r0
 80110e2:	4628      	mov	r0, r5
 80110e4:	f7fb fc06 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80110e8:	7961      	ldrb	r1, [r4, #5]
 80110ea:	4606      	mov	r6, r0
 80110ec:	4628      	mov	r0, r5
 80110ee:	f7fb fc01 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80110f2:	ea08 0807 	and.w	r8, r8, r7
 80110f6:	ea06 0608 	and.w	r6, r6, r8
 80110fa:	4006      	ands	r6, r0
 80110fc:	7a21      	ldrb	r1, [r4, #8]
 80110fe:	4628      	mov	r0, r5
 8011100:	f7fb fbca 	bl	800c898 <ucdr_serialize_bool>
 8011104:	7a23      	ldrb	r3, [r4, #8]
 8011106:	b2f7      	uxtb	r7, r6
 8011108:	4606      	mov	r6, r0
 801110a:	b96b      	cbnz	r3, 8011128 <uxr_serialize_INFO_Payload+0x64>
 801110c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011110:	4628      	mov	r0, r5
 8011112:	f7fb fbc1 	bl	800c898 <ucdr_serialize_bool>
 8011116:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801111a:	4030      	ands	r0, r6
 801111c:	b2c6      	uxtb	r6, r0
 801111e:	b983      	cbnz	r3, 8011142 <uxr_serialize_INFO_Payload+0x7e>
 8011120:	ea06 0007 	and.w	r0, r6, r7
 8011124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011128:	7b21      	ldrb	r1, [r4, #12]
 801112a:	4628      	mov	r0, r5
 801112c:	f7fb fbe2 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8011130:	b188      	cbz	r0, 8011156 <uxr_serialize_INFO_Payload+0x92>
 8011132:	f104 010c 	add.w	r1, r4, #12
 8011136:	4628      	mov	r0, r5
 8011138:	f7ff fa06 	bl	8010548 <uxr_serialize_ObjectVariant.part.0>
 801113c:	4030      	ands	r0, r6
 801113e:	b2c6      	uxtb	r6, r0
 8011140:	e7e4      	b.n	801110c <uxr_serialize_INFO_Payload+0x48>
 8011142:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011146:	4628      	mov	r0, r5
 8011148:	f7ff fdb2 	bl	8010cb0 <uxr_serialize_ActivityInfoVariant>
 801114c:	4006      	ands	r6, r0
 801114e:	ea06 0007 	and.w	r0, r6, r7
 8011152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011156:	4606      	mov	r6, r0
 8011158:	e7d8      	b.n	801110c <uxr_serialize_INFO_Payload+0x48>
 801115a:	bf00      	nop

0801115c <uxr_serialize_READ_DATA_Payload>:
 801115c:	b570      	push	{r4, r5, r6, lr}
 801115e:	2202      	movs	r2, #2
 8011160:	4605      	mov	r5, r0
 8011162:	460e      	mov	r6, r1
 8011164:	f004 f8ee 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8011168:	2202      	movs	r2, #2
 801116a:	18b1      	adds	r1, r6, r2
 801116c:	4604      	mov	r4, r0
 801116e:	4628      	mov	r0, r5
 8011170:	f004 f8e8 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8011174:	1d31      	adds	r1, r6, #4
 8011176:	4004      	ands	r4, r0
 8011178:	4628      	mov	r0, r5
 801117a:	f7ff fe5d 	bl	8010e38 <uxr_serialize_ReadSpecification>
 801117e:	b2e4      	uxtb	r4, r4
 8011180:	4020      	ands	r0, r4
 8011182:	bd70      	pop	{r4, r5, r6, pc}

08011184 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	2202      	movs	r2, #2
 8011188:	4605      	mov	r5, r0
 801118a:	460e      	mov	r6, r1
 801118c:	f004 f8da 	bl	8015344 <ucdr_serialize_array_uint8_t>
 8011190:	2202      	movs	r2, #2
 8011192:	4604      	mov	r4, r0
 8011194:	18b1      	adds	r1, r6, r2
 8011196:	4628      	mov	r0, r5
 8011198:	f004 f8d4 	bl	8015344 <ucdr_serialize_array_uint8_t>
 801119c:	4020      	ands	r0, r4
 801119e:	b2c0      	uxtb	r0, r0
 80111a0:	bd70      	pop	{r4, r5, r6, pc}
 80111a2:	bf00      	nop

080111a4 <uxr_serialize_ACKNACK_Payload>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	460c      	mov	r4, r1
 80111a8:	460e      	mov	r6, r1
 80111aa:	f834 1b02 	ldrh.w	r1, [r4], #2
 80111ae:	4605      	mov	r5, r0
 80111b0:	f7fb fbcc 	bl	800c94c <ucdr_serialize_uint16_t>
 80111b4:	2202      	movs	r2, #2
 80111b6:	4621      	mov	r1, r4
 80111b8:	4604      	mov	r4, r0
 80111ba:	4628      	mov	r0, r5
 80111bc:	f004 f8c2 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80111c0:	7931      	ldrb	r1, [r6, #4]
 80111c2:	4004      	ands	r4, r0
 80111c4:	4628      	mov	r0, r5
 80111c6:	f7fb fb95 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80111ca:	b2e4      	uxtb	r4, r4
 80111cc:	4020      	ands	r0, r4
 80111ce:	bd70      	pop	{r4, r5, r6, pc}

080111d0 <uxr_deserialize_ACKNACK_Payload>:
 80111d0:	b570      	push	{r4, r5, r6, lr}
 80111d2:	4605      	mov	r5, r0
 80111d4:	460e      	mov	r6, r1
 80111d6:	f7fb fcb9 	bl	800cb4c <ucdr_deserialize_uint16_t>
 80111da:	2202      	movs	r2, #2
 80111dc:	18b1      	adds	r1, r6, r2
 80111de:	4604      	mov	r4, r0
 80111e0:	4628      	mov	r0, r5
 80111e2:	f004 f913 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80111e6:	1d31      	adds	r1, r6, #4
 80111e8:	4004      	ands	r4, r0
 80111ea:	4628      	mov	r0, r5
 80111ec:	f7fb fb98 	bl	800c920 <ucdr_deserialize_uint8_t>
 80111f0:	b2e4      	uxtb	r4, r4
 80111f2:	4020      	ands	r0, r4
 80111f4:	bd70      	pop	{r4, r5, r6, pc}
 80111f6:	bf00      	nop

080111f8 <uxr_serialize_HEARTBEAT_Payload>:
 80111f8:	b570      	push	{r4, r5, r6, lr}
 80111fa:	460d      	mov	r5, r1
 80111fc:	8809      	ldrh	r1, [r1, #0]
 80111fe:	4606      	mov	r6, r0
 8011200:	f7fb fba4 	bl	800c94c <ucdr_serialize_uint16_t>
 8011204:	8869      	ldrh	r1, [r5, #2]
 8011206:	4604      	mov	r4, r0
 8011208:	4630      	mov	r0, r6
 801120a:	f7fb fb9f 	bl	800c94c <ucdr_serialize_uint16_t>
 801120e:	7929      	ldrb	r1, [r5, #4]
 8011210:	4004      	ands	r4, r0
 8011212:	4630      	mov	r0, r6
 8011214:	f7fb fb6e 	bl	800c8f4 <ucdr_serialize_uint8_t>
 8011218:	b2e4      	uxtb	r4, r4
 801121a:	4020      	ands	r0, r4
 801121c:	bd70      	pop	{r4, r5, r6, pc}
 801121e:	bf00      	nop

08011220 <uxr_deserialize_HEARTBEAT_Payload>:
 8011220:	b570      	push	{r4, r5, r6, lr}
 8011222:	4605      	mov	r5, r0
 8011224:	460e      	mov	r6, r1
 8011226:	f7fb fc91 	bl	800cb4c <ucdr_deserialize_uint16_t>
 801122a:	1cb1      	adds	r1, r6, #2
 801122c:	4604      	mov	r4, r0
 801122e:	4628      	mov	r0, r5
 8011230:	f7fb fc8c 	bl	800cb4c <ucdr_deserialize_uint16_t>
 8011234:	1d31      	adds	r1, r6, #4
 8011236:	4004      	ands	r4, r0
 8011238:	4628      	mov	r0, r5
 801123a:	f7fb fb71 	bl	800c920 <ucdr_deserialize_uint8_t>
 801123e:	b2e4      	uxtb	r4, r4
 8011240:	4020      	ands	r0, r4
 8011242:	bd70      	pop	{r4, r5, r6, pc}

08011244 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	4605      	mov	r5, r0
 801124a:	460e      	mov	r6, r1
 801124c:	f7fc fa1a 	bl	800d684 <ucdr_deserialize_int32_t>
 8011250:	1d31      	adds	r1, r6, #4
 8011252:	4607      	mov	r7, r0
 8011254:	4628      	mov	r0, r5
 8011256:	f7fb fe93 	bl	800cf80 <ucdr_deserialize_uint32_t>
 801125a:	f106 0108 	add.w	r1, r6, #8
 801125e:	4680      	mov	r8, r0
 8011260:	4628      	mov	r0, r5
 8011262:	f7fc fa0f 	bl	800d684 <ucdr_deserialize_int32_t>
 8011266:	f106 010c 	add.w	r1, r6, #12
 801126a:	4604      	mov	r4, r0
 801126c:	4628      	mov	r0, r5
 801126e:	f7fb fe87 	bl	800cf80 <ucdr_deserialize_uint32_t>
 8011272:	ea07 0708 	and.w	r7, r7, r8
 8011276:	403c      	ands	r4, r7
 8011278:	f106 0110 	add.w	r1, r6, #16
 801127c:	4004      	ands	r4, r0
 801127e:	4628      	mov	r0, r5
 8011280:	f7fc fa00 	bl	800d684 <ucdr_deserialize_int32_t>
 8011284:	f106 0114 	add.w	r1, r6, #20
 8011288:	4607      	mov	r7, r0
 801128a:	4628      	mov	r0, r5
 801128c:	f7fb fe78 	bl	800cf80 <ucdr_deserialize_uint32_t>
 8011290:	b2e4      	uxtb	r4, r4
 8011292:	403c      	ands	r4, r7
 8011294:	4020      	ands	r0, r4
 8011296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129a:	bf00      	nop

0801129c <uxr_serialize_SampleIdentity>:
 801129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a0:	220c      	movs	r2, #12
 80112a2:	4604      	mov	r4, r0
 80112a4:	460d      	mov	r5, r1
 80112a6:	f004 f84d 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80112aa:	2203      	movs	r2, #3
 80112ac:	f105 010c 	add.w	r1, r5, #12
 80112b0:	4607      	mov	r7, r0
 80112b2:	4620      	mov	r0, r4
 80112b4:	f004 f846 	bl	8015344 <ucdr_serialize_array_uint8_t>
 80112b8:	7be9      	ldrb	r1, [r5, #15]
 80112ba:	4680      	mov	r8, r0
 80112bc:	4620      	mov	r0, r4
 80112be:	f7fb fb19 	bl	800c8f4 <ucdr_serialize_uint8_t>
 80112c2:	6929      	ldr	r1, [r5, #16]
 80112c4:	4606      	mov	r6, r0
 80112c6:	4620      	mov	r0, r4
 80112c8:	f7fc f944 	bl	800d554 <ucdr_serialize_int32_t>
 80112cc:	6969      	ldr	r1, [r5, #20]
 80112ce:	4603      	mov	r3, r0
 80112d0:	4620      	mov	r0, r4
 80112d2:	ea07 0708 	and.w	r7, r7, r8
 80112d6:	461c      	mov	r4, r3
 80112d8:	f7fb fd22 	bl	800cd20 <ucdr_serialize_uint32_t>
 80112dc:	403e      	ands	r6, r7
 80112de:	4034      	ands	r4, r6
 80112e0:	4020      	ands	r0, r4
 80112e2:	b2c0      	uxtb	r0, r0
 80112e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080112e8 <uxr_deserialize_SampleIdentity>:
 80112e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ec:	220c      	movs	r2, #12
 80112ee:	4604      	mov	r4, r0
 80112f0:	460d      	mov	r5, r1
 80112f2:	f004 f88b 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80112f6:	2203      	movs	r2, #3
 80112f8:	f105 010c 	add.w	r1, r5, #12
 80112fc:	4607      	mov	r7, r0
 80112fe:	4620      	mov	r0, r4
 8011300:	f004 f884 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8011304:	f105 010f 	add.w	r1, r5, #15
 8011308:	4680      	mov	r8, r0
 801130a:	4620      	mov	r0, r4
 801130c:	f7fb fb08 	bl	800c920 <ucdr_deserialize_uint8_t>
 8011310:	f105 0110 	add.w	r1, r5, #16
 8011314:	4606      	mov	r6, r0
 8011316:	4620      	mov	r0, r4
 8011318:	f7fc f9b4 	bl	800d684 <ucdr_deserialize_int32_t>
 801131c:	f105 0114 	add.w	r1, r5, #20
 8011320:	4603      	mov	r3, r0
 8011322:	4620      	mov	r0, r4
 8011324:	ea07 0708 	and.w	r7, r7, r8
 8011328:	461c      	mov	r4, r3
 801132a:	f7fb fe29 	bl	800cf80 <ucdr_deserialize_uint32_t>
 801132e:	403e      	ands	r6, r7
 8011330:	4034      	ands	r4, r6
 8011332:	4020      	ands	r0, r4
 8011334:	b2c0      	uxtb	r0, r0
 8011336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801133a:	bf00      	nop

0801133c <rcl_client_get_rmw_handle>:
 801133c:	b118      	cbz	r0, 8011346 <rcl_client_get_rmw_handle+0xa>
 801133e:	6800      	ldr	r0, [r0, #0]
 8011340:	b108      	cbz	r0, 8011346 <rcl_client_get_rmw_handle+0xa>
 8011342:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011346:	4770      	bx	lr

08011348 <rcl_send_request>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	b1e8      	cbz	r0, 801138a <rcl_send_request+0x42>
 801134e:	4604      	mov	r4, r0
 8011350:	6800      	ldr	r0, [r0, #0]
 8011352:	b1d0      	cbz	r0, 801138a <rcl_send_request+0x42>
 8011354:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011358:	b1bb      	cbz	r3, 801138a <rcl_send_request+0x42>
 801135a:	460e      	mov	r6, r1
 801135c:	b1d1      	cbz	r1, 8011394 <rcl_send_request+0x4c>
 801135e:	4615      	mov	r5, r2
 8011360:	b1c2      	cbz	r2, 8011394 <rcl_send_request+0x4c>
 8011362:	2105      	movs	r1, #5
 8011364:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011368:	f002 fd06 	bl	8013d78 <__atomic_load_8>
 801136c:	6823      	ldr	r3, [r4, #0]
 801136e:	e9c5 0100 	strd	r0, r1, [r5]
 8011372:	462a      	mov	r2, r5
 8011374:	4631      	mov	r1, r6
 8011376:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801137a:	f003 fc01 	bl	8014b80 <rmw_send_request>
 801137e:	4606      	mov	r6, r0
 8011380:	b160      	cbz	r0, 801139c <rcl_send_request+0x54>
 8011382:	2601      	movs	r6, #1
 8011384:	4630      	mov	r0, r6
 8011386:	b002      	add	sp, #8
 8011388:	bd70      	pop	{r4, r5, r6, pc}
 801138a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801138e:	4630      	mov	r0, r6
 8011390:	b002      	add	sp, #8
 8011392:	bd70      	pop	{r4, r5, r6, pc}
 8011394:	260b      	movs	r6, #11
 8011396:	4630      	mov	r0, r6
 8011398:	b002      	add	sp, #8
 801139a:	bd70      	pop	{r4, r5, r6, pc}
 801139c:	6820      	ldr	r0, [r4, #0]
 801139e:	2105      	movs	r1, #5
 80113a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113a4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80113a8:	9100      	str	r1, [sp, #0]
 80113aa:	f002 fd51 	bl	8013e50 <__atomic_exchange_8>
 80113ae:	4630      	mov	r0, r6
 80113b0:	b002      	add	sp, #8
 80113b2:	bd70      	pop	{r4, r5, r6, pc}
 80113b4:	0000      	movs	r0, r0
	...

080113b8 <rcl_take_response>:
 80113b8:	b570      	push	{r4, r5, r6, lr}
 80113ba:	468e      	mov	lr, r1
 80113bc:	460c      	mov	r4, r1
 80113be:	4616      	mov	r6, r2
 80113c0:	4605      	mov	r5, r0
 80113c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80113c6:	b08c      	sub	sp, #48	@ 0x30
 80113c8:	f10d 0c18 	add.w	ip, sp, #24
 80113cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80113d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80113d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80113d8:	b35d      	cbz	r5, 8011432 <rcl_take_response+0x7a>
 80113da:	682b      	ldr	r3, [r5, #0]
 80113dc:	b34b      	cbz	r3, 8011432 <rcl_take_response+0x7a>
 80113de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80113e2:	b330      	cbz	r0, 8011432 <rcl_take_response+0x7a>
 80113e4:	b346      	cbz	r6, 8011438 <rcl_take_response+0x80>
 80113e6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011440 <rcl_take_response+0x88>
 80113ea:	2300      	movs	r3, #0
 80113ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80113f0:	4632      	mov	r2, r6
 80113f2:	f10d 0307 	add.w	r3, sp, #7
 80113f6:	a902      	add	r1, sp, #8
 80113f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011400:	f003 fcc6 	bl	8014d90 <rmw_take_response>
 8011404:	4605      	mov	r5, r0
 8011406:	b9c8      	cbnz	r0, 801143c <rcl_take_response+0x84>
 8011408:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801140c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011410:	2a00      	cmp	r2, #0
 8011412:	bf08      	it	eq
 8011414:	461d      	moveq	r5, r3
 8011416:	f10d 0e18 	add.w	lr, sp, #24
 801141a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801141e:	46a4      	mov	ip, r4
 8011420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011424:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011428:	e88c 0003 	stmia.w	ip, {r0, r1}
 801142c:	4628      	mov	r0, r5
 801142e:	b00c      	add	sp, #48	@ 0x30
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011436:	e7ee      	b.n	8011416 <rcl_take_response+0x5e>
 8011438:	250b      	movs	r5, #11
 801143a:	e7ec      	b.n	8011416 <rcl_take_response+0x5e>
 801143c:	2501      	movs	r5, #1
 801143e:	e7ea      	b.n	8011416 <rcl_take_response+0x5e>
	...

08011448 <rcl_client_is_valid>:
 8011448:	b130      	cbz	r0, 8011458 <rcl_client_is_valid+0x10>
 801144a:	6800      	ldr	r0, [r0, #0]
 801144c:	b120      	cbz	r0, 8011458 <rcl_client_is_valid+0x10>
 801144e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011452:	3800      	subs	r0, #0
 8011454:	bf18      	it	ne
 8011456:	2001      	movne	r0, #1
 8011458:	4770      	bx	lr
 801145a:	bf00      	nop

0801145c <rcl_convert_rmw_ret_to_rcl_ret>:
 801145c:	280b      	cmp	r0, #11
 801145e:	dc0d      	bgt.n	801147c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011460:	2800      	cmp	r0, #0
 8011462:	db09      	blt.n	8011478 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011464:	280b      	cmp	r0, #11
 8011466:	d807      	bhi.n	8011478 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011468:	e8df f000 	tbb	[pc, r0]
 801146c:	07060607 	.word	0x07060607
 8011470:	06060606 	.word	0x06060606
 8011474:	07070606 	.word	0x07070606
 8011478:	2001      	movs	r0, #1
 801147a:	4770      	bx	lr
 801147c:	28cb      	cmp	r0, #203	@ 0xcb
 801147e:	bf18      	it	ne
 8011480:	2001      	movne	r0, #1
 8011482:	4770      	bx	lr

08011484 <rcl_get_zero_initialized_context>:
 8011484:	4a03      	ldr	r2, [pc, #12]	@ (8011494 <rcl_get_zero_initialized_context+0x10>)
 8011486:	4603      	mov	r3, r0
 8011488:	e892 0003 	ldmia.w	r2, {r0, r1}
 801148c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011490:	4618      	mov	r0, r3
 8011492:	4770      	bx	lr
 8011494:	08018944 	.word	0x08018944

08011498 <rcl_context_is_valid>:
 8011498:	b118      	cbz	r0, 80114a2 <rcl_context_is_valid+0xa>
 801149a:	6840      	ldr	r0, [r0, #4]
 801149c:	3800      	subs	r0, #0
 801149e:	bf18      	it	ne
 80114a0:	2001      	movne	r0, #1
 80114a2:	4770      	bx	lr

080114a4 <__cleanup_context>:
 80114a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a8:	4606      	mov	r6, r0
 80114aa:	6800      	ldr	r0, [r0, #0]
 80114ac:	2300      	movs	r3, #0
 80114ae:	6073      	str	r3, [r6, #4]
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d049      	beq.n	8011548 <__cleanup_context+0xa4>
 80114b4:	6947      	ldr	r7, [r0, #20]
 80114b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80114ba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80114be:	b137      	cbz	r7, 80114ce <__cleanup_context+0x2a>
 80114c0:	3014      	adds	r0, #20
 80114c2:	f7f8 fd29 	bl	8009f18 <rcl_init_options_fini>
 80114c6:	4607      	mov	r7, r0
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d144      	bne.n	8011556 <__cleanup_context+0xb2>
 80114cc:	6830      	ldr	r0, [r6, #0]
 80114ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80114d0:	b143      	cbz	r3, 80114e4 <__cleanup_context+0x40>
 80114d2:	3028      	adds	r0, #40	@ 0x28
 80114d4:	f7fa f97e 	bl	800b7d4 <rmw_context_fini>
 80114d8:	b118      	cbz	r0, 80114e2 <__cleanup_context+0x3e>
 80114da:	2f00      	cmp	r7, #0
 80114dc:	d03e      	beq.n	801155c <__cleanup_context+0xb8>
 80114de:	f7f9 fe87 	bl	800b1f0 <rcutils_reset_error>
 80114e2:	6830      	ldr	r0, [r6, #0]
 80114e4:	6a03      	ldr	r3, [r0, #32]
 80114e6:	b1db      	cbz	r3, 8011520 <__cleanup_context+0x7c>
 80114e8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80114ec:	2a01      	cmp	r2, #1
 80114ee:	f17c 0100 	sbcs.w	r1, ip, #0
 80114f2:	db11      	blt.n	8011518 <__cleanup_context+0x74>
 80114f4:	2400      	movs	r4, #0
 80114f6:	4625      	mov	r5, r4
 80114f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80114fc:	4649      	mov	r1, r9
 80114fe:	b1b8      	cbz	r0, 8011530 <__cleanup_context+0x8c>
 8011500:	47c0      	blx	r8
 8011502:	6833      	ldr	r3, [r6, #0]
 8011504:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011508:	3401      	adds	r4, #1
 801150a:	f145 0500 	adc.w	r5, r5, #0
 801150e:	4294      	cmp	r4, r2
 8011510:	eb75 010c 	sbcs.w	r1, r5, ip
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	dbef      	blt.n	80114f8 <__cleanup_context+0x54>
 8011518:	4618      	mov	r0, r3
 801151a:	4649      	mov	r1, r9
 801151c:	47c0      	blx	r8
 801151e:	6830      	ldr	r0, [r6, #0]
 8011520:	4649      	mov	r1, r9
 8011522:	47c0      	blx	r8
 8011524:	2300      	movs	r3, #0
 8011526:	e9c6 3300 	strd	r3, r3, [r6]
 801152a:	4638      	mov	r0, r7
 801152c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011530:	3401      	adds	r4, #1
 8011532:	f145 0500 	adc.w	r5, r5, #0
 8011536:	4294      	cmp	r4, r2
 8011538:	eb75 010c 	sbcs.w	r1, r5, ip
 801153c:	dbdc      	blt.n	80114f8 <__cleanup_context+0x54>
 801153e:	4618      	mov	r0, r3
 8011540:	4649      	mov	r1, r9
 8011542:	47c0      	blx	r8
 8011544:	6830      	ldr	r0, [r6, #0]
 8011546:	e7eb      	b.n	8011520 <__cleanup_context+0x7c>
 8011548:	4607      	mov	r7, r0
 801154a:	2300      	movs	r3, #0
 801154c:	e9c6 3300 	strd	r3, r3, [r6]
 8011550:	4638      	mov	r0, r7
 8011552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011556:	f7f9 fe4b 	bl	800b1f0 <rcutils_reset_error>
 801155a:	e7b7      	b.n	80114cc <__cleanup_context+0x28>
 801155c:	f7ff ff7e 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8011560:	4607      	mov	r7, r0
 8011562:	e7bc      	b.n	80114de <__cleanup_context+0x3a>

08011564 <rcl_init>:
 8011564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011568:	1e05      	subs	r5, r0, #0
 801156a:	b09c      	sub	sp, #112	@ 0x70
 801156c:	460e      	mov	r6, r1
 801156e:	4690      	mov	r8, r2
 8011570:	461f      	mov	r7, r3
 8011572:	f340 8099 	ble.w	80116a8 <rcl_init+0x144>
 8011576:	2900      	cmp	r1, #0
 8011578:	f000 8099 	beq.w	80116ae <rcl_init+0x14a>
 801157c:	f1a1 0e04 	sub.w	lr, r1, #4
 8011580:	f04f 0c00 	mov.w	ip, #0
 8011584:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011588:	f10c 0c01 	add.w	ip, ip, #1
 801158c:	2c00      	cmp	r4, #0
 801158e:	f000 808e 	beq.w	80116ae <rcl_init+0x14a>
 8011592:	4565      	cmp	r5, ip
 8011594:	d1f6      	bne.n	8011584 <rcl_init+0x20>
 8011596:	f1b8 0f00 	cmp.w	r8, #0
 801159a:	f000 8088 	beq.w	80116ae <rcl_init+0x14a>
 801159e:	f8d8 4000 	ldr.w	r4, [r8]
 80115a2:	2c00      	cmp	r4, #0
 80115a4:	f000 8083 	beq.w	80116ae <rcl_init+0x14a>
 80115a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115aa:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80115ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	f8cc 3000 	str.w	r3, [ip]
 80115b8:	a817      	add	r0, sp, #92	@ 0x5c
 80115ba:	f7f9 fdf3 	bl	800b1a4 <rcutils_allocator_is_valid>
 80115be:	2800      	cmp	r0, #0
 80115c0:	d075      	beq.n	80116ae <rcl_init+0x14a>
 80115c2:	2f00      	cmp	r7, #0
 80115c4:	d073      	beq.n	80116ae <rcl_init+0x14a>
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d175      	bne.n	80116b8 <rcl_init+0x154>
 80115cc:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80115d0:	2178      	movs	r1, #120	@ 0x78
 80115d2:	2001      	movs	r0, #1
 80115d4:	4798      	blx	r3
 80115d6:	4604      	mov	r4, r0
 80115d8:	6038      	str	r0, [r7, #0]
 80115da:	2800      	cmp	r0, #0
 80115dc:	f000 80a0 	beq.w	8011720 <rcl_init+0x1bc>
 80115e0:	a802      	add	r0, sp, #8
 80115e2:	f002 ff09 	bl	80143f8 <rmw_get_zero_initialized_context>
 80115e6:	a902      	add	r1, sp, #8
 80115e8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80115ec:	2250      	movs	r2, #80	@ 0x50
 80115ee:	ac17      	add	r4, sp, #92	@ 0x5c
 80115f0:	f005 fdd9 	bl	80171a6 <memcpy>
 80115f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115f6:	f8d7 e000 	ldr.w	lr, [r7]
 80115fa:	46f4      	mov	ip, lr
 80115fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	f8cc 3000 	str.w	r3, [ip]
 8011606:	f10e 0114 	add.w	r1, lr, #20
 801160a:	4640      	mov	r0, r8
 801160c:	f7f8 fcae 	bl	8009f6c <rcl_init_options_copy>
 8011610:	4604      	mov	r4, r0
 8011612:	2800      	cmp	r0, #0
 8011614:	d144      	bne.n	80116a0 <rcl_init+0x13c>
 8011616:	f8d7 9000 	ldr.w	r9, [r7]
 801161a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801161e:	f8c9 0020 	str.w	r0, [r9, #32]
 8011622:	f8c9 5018 	str.w	r5, [r9, #24]
 8011626:	f8c9 801c 	str.w	r8, [r9, #28]
 801162a:	2d00      	cmp	r5, #0
 801162c:	d04b      	beq.n	80116c6 <rcl_init+0x162>
 801162e:	2e00      	cmp	r6, #0
 8011630:	d049      	beq.n	80116c6 <rcl_init+0x162>
 8011632:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8011636:	2104      	movs	r1, #4
 8011638:	4628      	mov	r0, r5
 801163a:	4798      	blx	r3
 801163c:	f8c9 0020 	str.w	r0, [r9, #32]
 8011640:	f8d7 9000 	ldr.w	r9, [r7]
 8011644:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011648:	46ca      	mov	sl, r9
 801164a:	b343      	cbz	r3, 801169e <rcl_init+0x13a>
 801164c:	2d01      	cmp	r5, #1
 801164e:	f178 0300 	sbcs.w	r3, r8, #0
 8011652:	db38      	blt.n	80116c6 <rcl_init+0x162>
 8011654:	2400      	movs	r4, #0
 8011656:	3e04      	subs	r6, #4
 8011658:	46a1      	mov	r9, r4
 801165a:	e00b      	b.n	8011674 <rcl_init+0x110>
 801165c:	6831      	ldr	r1, [r6, #0]
 801165e:	f005 fda2 	bl	80171a6 <memcpy>
 8011662:	3401      	adds	r4, #1
 8011664:	f149 0900 	adc.w	r9, r9, #0
 8011668:	45c8      	cmp	r8, r9
 801166a:	bf08      	it	eq
 801166c:	42a5      	cmpeq	r5, r4
 801166e:	d028      	beq.n	80116c2 <rcl_init+0x15e>
 8011670:	f8d7 a000 	ldr.w	sl, [r7]
 8011674:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011678:	f7ee fddc 	bl	8000234 <strlen>
 801167c:	1c42      	adds	r2, r0, #1
 801167e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011680:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011682:	f8da a020 	ldr.w	sl, [sl, #32]
 8011686:	9201      	str	r2, [sp, #4]
 8011688:	4610      	mov	r0, r2
 801168a:	4798      	blx	r3
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011692:	6a1b      	ldr	r3, [r3, #32]
 8011694:	9a01      	ldr	r2, [sp, #4]
 8011696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801169a:	2800      	cmp	r0, #0
 801169c:	d1de      	bne.n	801165c <rcl_init+0xf8>
 801169e:	240a      	movs	r4, #10
 80116a0:	4638      	mov	r0, r7
 80116a2:	f7ff feff 	bl	80114a4 <__cleanup_context>
 80116a6:	e003      	b.n	80116b0 <rcl_init+0x14c>
 80116a8:	2900      	cmp	r1, #0
 80116aa:	f43f af74 	beq.w	8011596 <rcl_init+0x32>
 80116ae:	240b      	movs	r4, #11
 80116b0:	4620      	mov	r0, r4
 80116b2:	b01c      	add	sp, #112	@ 0x70
 80116b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b8:	2464      	movs	r4, #100	@ 0x64
 80116ba:	4620      	mov	r0, r4
 80116bc:	b01c      	add	sp, #112	@ 0x70
 80116be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c2:	f8d7 9000 	ldr.w	r9, [r7]
 80116c6:	491d      	ldr	r1, [pc, #116]	@ (801173c <rcl_init+0x1d8>)
 80116c8:	680b      	ldr	r3, [r1, #0]
 80116ca:	3301      	adds	r3, #1
 80116cc:	d023      	beq.n	8011716 <rcl_init+0x1b2>
 80116ce:	600b      	str	r3, [r1, #0]
 80116d0:	461a      	mov	r2, r3
 80116d2:	2400      	movs	r4, #0
 80116d4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80116d8:	607b      	str	r3, [r7, #4]
 80116da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80116dc:	6182      	str	r2, [r0, #24]
 80116de:	3301      	adds	r3, #1
 80116e0:	61c4      	str	r4, [r0, #28]
 80116e2:	d01f      	beq.n	8011724 <rcl_init+0x1c0>
 80116e4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80116e8:	b94b      	cbnz	r3, 80116fe <rcl_init+0x19a>
 80116ea:	3030      	adds	r0, #48	@ 0x30
 80116ec:	f000 f828 	bl	8011740 <rcl_get_localhost_only>
 80116f0:	4604      	mov	r4, r0
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d1d4      	bne.n	80116a0 <rcl_init+0x13c>
 80116f6:	f8d7 9000 	ldr.w	r9, [r7]
 80116fa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80116fe:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8011702:	3018      	adds	r0, #24
 8011704:	f7f9 ff30 	bl	800b568 <rmw_init>
 8011708:	4604      	mov	r4, r0
 801170a:	2800      	cmp	r0, #0
 801170c:	d0d0      	beq.n	80116b0 <rcl_init+0x14c>
 801170e:	f7ff fea5 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8011712:	4604      	mov	r4, r0
 8011714:	e7c4      	b.n	80116a0 <rcl_init+0x13c>
 8011716:	2201      	movs	r2, #1
 8011718:	461c      	mov	r4, r3
 801171a:	600a      	str	r2, [r1, #0]
 801171c:	4613      	mov	r3, r2
 801171e:	e7d9      	b.n	80116d4 <rcl_init+0x170>
 8011720:	240a      	movs	r4, #10
 8011722:	e7c5      	b.n	80116b0 <rcl_init+0x14c>
 8011724:	3024      	adds	r0, #36	@ 0x24
 8011726:	f004 fcad 	bl	8016084 <rcl_get_default_domain_id>
 801172a:	4604      	mov	r4, r0
 801172c:	2800      	cmp	r0, #0
 801172e:	d1b7      	bne.n	80116a0 <rcl_init+0x13c>
 8011730:	f8d7 9000 	ldr.w	r9, [r7]
 8011734:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011738:	e7d4      	b.n	80116e4 <rcl_init+0x180>
 801173a:	bf00      	nop
 801173c:	2000aca0 	.word	0x2000aca0

08011740 <rcl_get_localhost_only>:
 8011740:	b510      	push	{r4, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	2300      	movs	r3, #0
 8011746:	9301      	str	r3, [sp, #4]
 8011748:	b1b8      	cbz	r0, 801177a <rcl_get_localhost_only+0x3a>
 801174a:	4604      	mov	r4, r0
 801174c:	a901      	add	r1, sp, #4
 801174e:	480c      	ldr	r0, [pc, #48]	@ (8011780 <rcl_get_localhost_only+0x40>)
 8011750:	f002 fbb6 	bl	8013ec0 <rcutils_get_env>
 8011754:	b110      	cbz	r0, 801175c <rcl_get_localhost_only+0x1c>
 8011756:	2001      	movs	r0, #1
 8011758:	b002      	add	sp, #8
 801175a:	bd10      	pop	{r4, pc}
 801175c:	9b01      	ldr	r3, [sp, #4]
 801175e:	b113      	cbz	r3, 8011766 <rcl_get_localhost_only+0x26>
 8011760:	781a      	ldrb	r2, [r3, #0]
 8011762:	2a31      	cmp	r2, #49	@ 0x31
 8011764:	d004      	beq.n	8011770 <rcl_get_localhost_only+0x30>
 8011766:	2302      	movs	r3, #2
 8011768:	2000      	movs	r0, #0
 801176a:	7023      	strb	r3, [r4, #0]
 801176c:	b002      	add	sp, #8
 801176e:	bd10      	pop	{r4, pc}
 8011770:	785b      	ldrb	r3, [r3, #1]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1f7      	bne.n	8011766 <rcl_get_localhost_only+0x26>
 8011776:	2301      	movs	r3, #1
 8011778:	e7f6      	b.n	8011768 <rcl_get_localhost_only+0x28>
 801177a:	200b      	movs	r0, #11
 801177c:	b002      	add	sp, #8
 801177e:	bd10      	pop	{r4, pc}
 8011780:	08018360 	.word	0x08018360

08011784 <rcl_get_zero_initialized_node>:
 8011784:	4a03      	ldr	r2, [pc, #12]	@ (8011794 <rcl_get_zero_initialized_node+0x10>)
 8011786:	4603      	mov	r3, r0
 8011788:	e892 0003 	ldmia.w	r2, {r0, r1}
 801178c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011790:	4618      	mov	r0, r3
 8011792:	4770      	bx	lr
 8011794:	0801894c 	.word	0x0801894c

08011798 <rcl_node_init>:
 8011798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179c:	b0a9      	sub	sp, #164	@ 0xa4
 801179e:	4604      	mov	r4, r0
 80117a0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80117a4:	a823      	add	r0, sp, #140	@ 0x8c
 80117a6:	460e      	mov	r6, r1
 80117a8:	4615      	mov	r5, r2
 80117aa:	461f      	mov	r7, r3
 80117ac:	f004 fede 	bl	801656c <rcl_guard_condition_get_default_options>
 80117b0:	f1b8 0f00 	cmp.w	r8, #0
 80117b4:	f000 80e6 	beq.w	8011984 <rcl_node_init+0x1ec>
 80117b8:	4640      	mov	r0, r8
 80117ba:	f7f9 fcf3 	bl	800b1a4 <rcutils_allocator_is_valid>
 80117be:	2800      	cmp	r0, #0
 80117c0:	f000 80e0 	beq.w	8011984 <rcl_node_init+0x1ec>
 80117c4:	2e00      	cmp	r6, #0
 80117c6:	f000 80dd 	beq.w	8011984 <rcl_node_init+0x1ec>
 80117ca:	2d00      	cmp	r5, #0
 80117cc:	f000 80da 	beq.w	8011984 <rcl_node_init+0x1ec>
 80117d0:	2c00      	cmp	r4, #0
 80117d2:	f000 80d7 	beq.w	8011984 <rcl_node_init+0x1ec>
 80117d6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80117da:	f1b9 0f00 	cmp.w	r9, #0
 80117de:	f040 80fd 	bne.w	80119dc <rcl_node_init+0x244>
 80117e2:	2f00      	cmp	r7, #0
 80117e4:	f000 80ce 	beq.w	8011984 <rcl_node_init+0x1ec>
 80117e8:	4638      	mov	r0, r7
 80117ea:	f7ff fe55 	bl	8011498 <rcl_context_is_valid>
 80117ee:	4682      	mov	sl, r0
 80117f0:	2800      	cmp	r0, #0
 80117f2:	f000 80cd 	beq.w	8011990 <rcl_node_init+0x1f8>
 80117f6:	464a      	mov	r2, r9
 80117f8:	a922      	add	r1, sp, #136	@ 0x88
 80117fa:	4630      	mov	r0, r6
 80117fc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011800:	f002 ff98 	bl	8014734 <rmw_validate_node_name>
 8011804:	4681      	mov	r9, r0
 8011806:	2800      	cmp	r0, #0
 8011808:	f040 80be 	bne.w	8011988 <rcl_node_init+0x1f0>
 801180c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801180e:	2800      	cmp	r0, #0
 8011810:	f040 80f0 	bne.w	80119f4 <rcl_node_init+0x25c>
 8011814:	4628      	mov	r0, r5
 8011816:	f7ee fd0d 	bl	8000234 <strlen>
 801181a:	2800      	cmp	r0, #0
 801181c:	f040 80bb 	bne.w	8011996 <rcl_node_init+0x1fe>
 8011820:	4d7c      	ldr	r5, [pc, #496]	@ (8011a14 <rcl_node_init+0x27c>)
 8011822:	a922      	add	r1, sp, #136	@ 0x88
 8011824:	2200      	movs	r2, #0
 8011826:	4628      	mov	r0, r5
 8011828:	f002 ff66 	bl	80146f8 <rmw_validate_namespace>
 801182c:	4681      	mov	r9, r0
 801182e:	2800      	cmp	r0, #0
 8011830:	f040 80aa 	bne.w	8011988 <rcl_node_init+0x1f0>
 8011834:	4682      	mov	sl, r0
 8011836:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011838:	2800      	cmp	r0, #0
 801183a:	f040 80e0 	bne.w	80119fe <rcl_node_init+0x266>
 801183e:	f8d8 3000 	ldr.w	r3, [r8]
 8011842:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011846:	2078      	movs	r0, #120	@ 0x78
 8011848:	4798      	blx	r3
 801184a:	4681      	mov	r9, r0
 801184c:	6060      	str	r0, [r4, #4]
 801184e:	2800      	cmp	r0, #0
 8011850:	f000 80ca 	beq.w	80119e8 <rcl_node_init+0x250>
 8011854:	2200      	movs	r2, #0
 8011856:	2300      	movs	r3, #0
 8011858:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 801185c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011860:	a808      	add	r0, sp, #32
 8011862:	f000 f907 	bl	8011a74 <rcl_node_get_default_options>
 8011866:	a908      	add	r1, sp, #32
 8011868:	4648      	mov	r0, r9
 801186a:	2268      	movs	r2, #104	@ 0x68
 801186c:	f005 fc9b 	bl	80171a6 <memcpy>
 8011870:	6861      	ldr	r1, [r4, #4]
 8011872:	6027      	str	r7, [r4, #0]
 8011874:	4640      	mov	r0, r8
 8011876:	f000 f90b 	bl	8011a90 <rcl_node_options_copy>
 801187a:	2800      	cmp	r0, #0
 801187c:	d158      	bne.n	8011930 <rcl_node_init+0x198>
 801187e:	4628      	mov	r0, r5
 8011880:	f7ee fcd8 	bl	8000234 <strlen>
 8011884:	4428      	add	r0, r5
 8011886:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801188a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801188e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011890:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	bf0c      	ite	eq
 8011898:	4b5f      	ldreq	r3, [pc, #380]	@ (8011a18 <rcl_node_init+0x280>)
 801189a:	4b60      	ldrne	r3, [pc, #384]	@ (8011a1c <rcl_node_init+0x284>)
 801189c:	9302      	str	r3, [sp, #8]
 801189e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80118a8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80118ac:	f002 fb20 	bl	8013ef0 <rcutils_format_string_limit>
 80118b0:	6823      	ldr	r3, [r4, #0]
 80118b2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80118b6:	6818      	ldr	r0, [r3, #0]
 80118b8:	4631      	mov	r1, r6
 80118ba:	3028      	adds	r0, #40	@ 0x28
 80118bc:	462a      	mov	r2, r5
 80118be:	6866      	ldr	r6, [r4, #4]
 80118c0:	f7fa f834 	bl	800b92c <rmw_create_node>
 80118c4:	6863      	ldr	r3, [r4, #4]
 80118c6:	66b0      	str	r0, [r6, #104]	@ 0x68
 80118c8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d032      	beq.n	8011934 <rcl_node_init+0x19c>
 80118ce:	f7fa f8c1 	bl	800ba54 <rmw_node_get_graph_guard_condition>
 80118d2:	4681      	mov	r9, r0
 80118d4:	b360      	cbz	r0, 8011930 <rcl_node_init+0x198>
 80118d6:	f8d8 3000 	ldr.w	r3, [r8]
 80118da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80118de:	6866      	ldr	r6, [r4, #4]
 80118e0:	2008      	movs	r0, #8
 80118e2:	4798      	blx	r3
 80118e4:	6863      	ldr	r3, [r4, #4]
 80118e6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80118e8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80118ec:	f1bb 0f00 	cmp.w	fp, #0
 80118f0:	d020      	beq.n	8011934 <rcl_node_init+0x19c>
 80118f2:	a806      	add	r0, sp, #24
 80118f4:	f004 fd5e 	bl	80163b4 <rcl_get_zero_initialized_guard_condition>
 80118f8:	a806      	add	r0, sp, #24
 80118fa:	c803      	ldmia	r0, {r0, r1}
 80118fc:	6863      	ldr	r3, [r4, #4]
 80118fe:	46c4      	mov	ip, r8
 8011900:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011904:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801190c:	ae23      	add	r6, sp, #140	@ 0x8c
 801190e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011910:	f8dc 3000 	ldr.w	r3, [ip]
 8011914:	6033      	str	r3, [r6, #0]
 8011916:	ab28      	add	r3, sp, #160	@ 0xa0
 8011918:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801191c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011920:	4649      	mov	r1, r9
 8011922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011924:	463a      	mov	r2, r7
 8011926:	4670      	mov	r0, lr
 8011928:	f004 fd9a 	bl	8016460 <rcl_guard_condition_init_from_rmw>
 801192c:	4681      	mov	r9, r0
 801192e:	b328      	cbz	r0, 801197c <rcl_node_init+0x1e4>
 8011930:	6863      	ldr	r3, [r4, #4]
 8011932:	b1f3      	cbz	r3, 8011972 <rcl_node_init+0x1da>
 8011934:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011936:	b128      	cbz	r0, 8011944 <rcl_node_init+0x1ac>
 8011938:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801193c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011940:	4798      	blx	r3
 8011942:	6863      	ldr	r3, [r4, #4]
 8011944:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011946:	b110      	cbz	r0, 801194e <rcl_node_init+0x1b6>
 8011948:	f7fa f808 	bl	800b95c <rmw_destroy_node>
 801194c:	6863      	ldr	r3, [r4, #4]
 801194e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011950:	b148      	cbz	r0, 8011966 <rcl_node_init+0x1ce>
 8011952:	f004 fde5 	bl	8016520 <rcl_guard_condition_fini>
 8011956:	6863      	ldr	r3, [r4, #4]
 8011958:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801195c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801195e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011962:	4798      	blx	r3
 8011964:	6863      	ldr	r3, [r4, #4]
 8011966:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801196a:	4618      	mov	r0, r3
 801196c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011970:	4798      	blx	r3
 8011972:	2300      	movs	r3, #0
 8011974:	e9c4 3300 	strd	r3, r3, [r4]
 8011978:	f04f 0901 	mov.w	r9, #1
 801197c:	f1ba 0f00 	cmp.w	sl, #0
 8011980:	d125      	bne.n	80119ce <rcl_node_init+0x236>
 8011982:	e001      	b.n	8011988 <rcl_node_init+0x1f0>
 8011984:	f04f 090b 	mov.w	r9, #11
 8011988:	4648      	mov	r0, r9
 801198a:	b029      	add	sp, #164	@ 0xa4
 801198c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011990:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011994:	e7f8      	b.n	8011988 <rcl_node_init+0x1f0>
 8011996:	782b      	ldrb	r3, [r5, #0]
 8011998:	2b2f      	cmp	r3, #47	@ 0x2f
 801199a:	f43f af42 	beq.w	8011822 <rcl_node_init+0x8a>
 801199e:	9503      	str	r5, [sp, #12]
 80119a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	4b1e      	ldr	r3, [pc, #120]	@ (8011a20 <rcl_node_init+0x288>)
 80119a8:	9302      	str	r3, [sp, #8]
 80119aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80119ae:	9301      	str	r3, [sp, #4]
 80119b0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80119b4:	f002 fa9c 	bl	8013ef0 <rcutils_format_string_limit>
 80119b8:	4605      	mov	r5, r0
 80119ba:	b340      	cbz	r0, 8011a0e <rcl_node_init+0x276>
 80119bc:	2200      	movs	r2, #0
 80119be:	a922      	add	r1, sp, #136	@ 0x88
 80119c0:	9222      	str	r2, [sp, #136]	@ 0x88
 80119c2:	f002 fe99 	bl	80146f8 <rmw_validate_namespace>
 80119c6:	4681      	mov	r9, r0
 80119c8:	2800      	cmp	r0, #0
 80119ca:	f43f af34 	beq.w	8011836 <rcl_node_init+0x9e>
 80119ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80119d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80119d6:	4628      	mov	r0, r5
 80119d8:	4798      	blx	r3
 80119da:	e7d5      	b.n	8011988 <rcl_node_init+0x1f0>
 80119dc:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80119e0:	4648      	mov	r0, r9
 80119e2:	b029      	add	sp, #164	@ 0xa4
 80119e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e8:	f04f 090a 	mov.w	r9, #10
 80119ec:	f1ba 0f00 	cmp.w	sl, #0
 80119f0:	d1ed      	bne.n	80119ce <rcl_node_init+0x236>
 80119f2:	e7c9      	b.n	8011988 <rcl_node_init+0x1f0>
 80119f4:	f002 fef0 	bl	80147d8 <rmw_node_name_validation_result_string>
 80119f8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80119fc:	e7c4      	b.n	8011988 <rcl_node_init+0x1f0>
 80119fe:	f002 fe8d 	bl	801471c <rmw_namespace_validation_result_string>
 8011a02:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8011a06:	f1ba 0f00 	cmp.w	sl, #0
 8011a0a:	d1e0      	bne.n	80119ce <rcl_node_init+0x236>
 8011a0c:	e7bc      	b.n	8011988 <rcl_node_init+0x1f0>
 8011a0e:	f04f 090a 	mov.w	r9, #10
 8011a12:	e7b9      	b.n	8011988 <rcl_node_init+0x1f0>
 8011a14:	08018378 	.word	0x08018378
 8011a18:	08018248 	.word	0x08018248
 8011a1c:	08018200 	.word	0x08018200
 8011a20:	0801837c 	.word	0x0801837c

08011a24 <rcl_node_is_valid>:
 8011a24:	b130      	cbz	r0, 8011a34 <rcl_node_is_valid+0x10>
 8011a26:	6843      	ldr	r3, [r0, #4]
 8011a28:	b123      	cbz	r3, 8011a34 <rcl_node_is_valid+0x10>
 8011a2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011a2c:	b113      	cbz	r3, 8011a34 <rcl_node_is_valid+0x10>
 8011a2e:	6800      	ldr	r0, [r0, #0]
 8011a30:	f7ff bd32 	b.w	8011498 <rcl_context_is_valid>
 8011a34:	2000      	movs	r0, #0
 8011a36:	4770      	bx	lr

08011a38 <rcl_node_get_name>:
 8011a38:	b120      	cbz	r0, 8011a44 <rcl_node_get_name+0xc>
 8011a3a:	6840      	ldr	r0, [r0, #4]
 8011a3c:	b110      	cbz	r0, 8011a44 <rcl_node_get_name+0xc>
 8011a3e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011a40:	b100      	cbz	r0, 8011a44 <rcl_node_get_name+0xc>
 8011a42:	6880      	ldr	r0, [r0, #8]
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop

08011a48 <rcl_node_get_namespace>:
 8011a48:	b120      	cbz	r0, 8011a54 <rcl_node_get_namespace+0xc>
 8011a4a:	6840      	ldr	r0, [r0, #4]
 8011a4c:	b110      	cbz	r0, 8011a54 <rcl_node_get_namespace+0xc>
 8011a4e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011a50:	b100      	cbz	r0, 8011a54 <rcl_node_get_namespace+0xc>
 8011a52:	68c0      	ldr	r0, [r0, #12]
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop

08011a58 <rcl_node_get_options>:
 8011a58:	b128      	cbz	r0, 8011a66 <rcl_node_get_options+0xe>
 8011a5a:	6840      	ldr	r0, [r0, #4]
 8011a5c:	b118      	cbz	r0, 8011a66 <rcl_node_get_options+0xe>
 8011a5e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	bf08      	it	eq
 8011a64:	2000      	moveq	r0, #0
 8011a66:	4770      	bx	lr

08011a68 <rcl_node_get_rmw_handle>:
 8011a68:	b110      	cbz	r0, 8011a70 <rcl_node_get_rmw_handle+0x8>
 8011a6a:	6840      	ldr	r0, [r0, #4]
 8011a6c:	b100      	cbz	r0, 8011a70 <rcl_node_get_rmw_handle+0x8>
 8011a6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011a70:	4770      	bx	lr
 8011a72:	bf00      	nop

08011a74 <rcl_node_get_default_options>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	2268      	movs	r2, #104	@ 0x68
 8011a78:	4604      	mov	r4, r0
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	f005 faca 	bl	8017014 <memset>
 8011a80:	4620      	mov	r0, r4
 8011a82:	f7f9 fb81 	bl	800b188 <rcutils_get_default_allocator>
 8011a86:	2301      	movs	r3, #1
 8011a88:	7523      	strb	r3, [r4, #20]
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	bd10      	pop	{r4, pc}
 8011a8e:	bf00      	nop

08011a90 <rcl_node_options_copy>:
 8011a90:	b1d0      	cbz	r0, 8011ac8 <rcl_node_options_copy+0x38>
 8011a92:	b570      	push	{r4, r5, r6, lr}
 8011a94:	460c      	mov	r4, r1
 8011a96:	b1a9      	cbz	r1, 8011ac4 <rcl_node_options_copy+0x34>
 8011a98:	4288      	cmp	r0, r1
 8011a9a:	4684      	mov	ip, r0
 8011a9c:	d012      	beq.n	8011ac4 <rcl_node_options_copy+0x34>
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	8a86      	ldrh	r6, [r0, #20]
 8011aa2:	468e      	mov	lr, r1
 8011aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aa6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011aaa:	682b      	ldr	r3, [r5, #0]
 8011aac:	f8ce 3000 	str.w	r3, [lr]
 8011ab0:	f10c 0118 	add.w	r1, ip, #24
 8011ab4:	2250      	movs	r2, #80	@ 0x50
 8011ab6:	82a6      	strh	r6, [r4, #20]
 8011ab8:	f104 0018 	add.w	r0, r4, #24
 8011abc:	f005 fb73 	bl	80171a6 <memcpy>
 8011ac0:	2000      	movs	r0, #0
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}
 8011ac4:	200b      	movs	r0, #11
 8011ac6:	bd70      	pop	{r4, r5, r6, pc}
 8011ac8:	200b      	movs	r0, #11
 8011aca:	4770      	bx	lr

08011acc <rcl_node_resolve_name>:
 8011acc:	b082      	sub	sp, #8
 8011ace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad2:	b091      	sub	sp, #68	@ 0x44
 8011ad4:	ac1a      	add	r4, sp, #104	@ 0x68
 8011ad6:	e884 000c 	stmia.w	r4, {r2, r3}
 8011ada:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d03b      	beq.n	8011b5a <rcl_node_resolve_name+0x8e>
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	4605      	mov	r5, r0
 8011ae6:	f7ff ffb7 	bl	8011a58 <rcl_node_get_options>
 8011aea:	2800      	cmp	r0, #0
 8011aec:	d037      	beq.n	8011b5e <rcl_node_resolve_name+0x92>
 8011aee:	4628      	mov	r0, r5
 8011af0:	f7ff ffa2 	bl	8011a38 <rcl_node_get_name>
 8011af4:	4606      	mov	r6, r0
 8011af6:	4628      	mov	r0, r5
 8011af8:	f7ff ffa6 	bl	8011a48 <rcl_node_get_namespace>
 8011afc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8011b00:	4681      	mov	r9, r0
 8011b02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b06:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011b08:	46ac      	mov	ip, r5
 8011b0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b0e:	f8de 3000 	ldr.w	r3, [lr]
 8011b12:	f8cc 3000 	str.w	r3, [ip]
 8011b16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011b18:	b1fb      	cbz	r3, 8011b5a <rcl_node_resolve_name+0x8e>
 8011b1a:	468a      	mov	sl, r1
 8011b1c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8011b20:	f002 fb3e 	bl	80141a0 <rcutils_get_zero_initialized_string_map>
 8011b24:	ab10      	add	r3, sp, #64	@ 0x40
 8011b26:	9008      	str	r0, [sp, #32]
 8011b28:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011b2c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011b30:	2100      	movs	r1, #0
 8011b32:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011b36:	a808      	add	r0, sp, #32
 8011b38:	f002 fbaa 	bl	8014290 <rcutils_string_map_init>
 8011b3c:	4607      	mov	r7, r0
 8011b3e:	b180      	cbz	r0, 8011b62 <rcl_node_resolve_name+0x96>
 8011b40:	f7f9 fb3e 	bl	800b1c0 <rcutils_get_error_string>
 8011b44:	f7f9 fb54 	bl	800b1f0 <rcutils_reset_error>
 8011b48:	2f0a      	cmp	r7, #10
 8011b4a:	bf18      	it	ne
 8011b4c:	2701      	movne	r7, #1
 8011b4e:	4638      	mov	r0, r7
 8011b50:	b011      	add	sp, #68	@ 0x44
 8011b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b56:	b002      	add	sp, #8
 8011b58:	4770      	bx	lr
 8011b5a:	270b      	movs	r7, #11
 8011b5c:	e7f7      	b.n	8011b4e <rcl_node_resolve_name+0x82>
 8011b5e:	2701      	movs	r7, #1
 8011b60:	e7f5      	b.n	8011b4e <rcl_node_resolve_name+0x82>
 8011b62:	9009      	str	r0, [sp, #36]	@ 0x24
 8011b64:	9007      	str	r0, [sp, #28]
 8011b66:	a808      	add	r0, sp, #32
 8011b68:	f004 fc1e 	bl	80163a8 <rcl_get_default_topic_name_substitutions>
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	b1a8      	cbz	r0, 8011b9c <rcl_node_resolve_name+0xd0>
 8011b70:	280a      	cmp	r0, #10
 8011b72:	9c07      	ldr	r4, [sp, #28]
 8011b74:	d000      	beq.n	8011b78 <rcl_node_resolve_name+0xac>
 8011b76:	2701      	movs	r7, #1
 8011b78:	a808      	add	r0, sp, #32
 8011b7a:	f002 fbc9 	bl	8014310 <rcutils_string_map_fini>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d13d      	bne.n	8011bfe <rcl_node_resolve_name+0x132>
 8011b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b84:	4659      	mov	r1, fp
 8011b86:	47d0      	blx	sl
 8011b88:	4659      	mov	r1, fp
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	47d0      	blx	sl
 8011b8e:	f1b8 0f00 	cmp.w	r8, #0
 8011b92:	d0dc      	beq.n	8011b4e <rcl_node_resolve_name+0x82>
 8011b94:	2f67      	cmp	r7, #103	@ 0x67
 8011b96:	bf08      	it	eq
 8011b98:	2768      	moveq	r7, #104	@ 0x68
 8011b9a:	e7d8      	b.n	8011b4e <rcl_node_resolve_name+0x82>
 8011b9c:	ab09      	add	r3, sp, #36	@ 0x24
 8011b9e:	9305      	str	r3, [sp, #20]
 8011ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ba2:	46ec      	mov	ip, sp
 8011ba4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ba8:	682b      	ldr	r3, [r5, #0]
 8011baa:	f8cc 3000 	str.w	r3, [ip]
 8011bae:	464a      	mov	r2, r9
 8011bb0:	4631      	mov	r1, r6
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	ab08      	add	r3, sp, #32
 8011bb6:	f004 fa99 	bl	80160ec <rcl_expand_topic_name>
 8011bba:	4607      	mov	r7, r0
 8011bbc:	b9b8      	cbnz	r0, 8011bee <rcl_node_resolve_name+0x122>
 8011bbe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8011bc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	a90a      	add	r1, sp, #40	@ 0x28
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f002 fcd2 	bl	8014570 <rmw_validate_full_topic_name>
 8011bcc:	b988      	cbnz	r0, 8011bf2 <rcl_node_resolve_name+0x126>
 8011bce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011bd0:	b9d5      	cbnz	r5, 8011c08 <rcl_node_resolve_name+0x13c>
 8011bd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011bd4:	a808      	add	r0, sp, #32
 8011bd6:	601c      	str	r4, [r3, #0]
 8011bd8:	f002 fb9a 	bl	8014310 <rcutils_string_map_fini>
 8011bdc:	4607      	mov	r7, r0
 8011bde:	b1a8      	cbz	r0, 8011c0c <rcl_node_resolve_name+0x140>
 8011be0:	f7f9 faee 	bl	800b1c0 <rcutils_get_error_string>
 8011be4:	462c      	mov	r4, r5
 8011be6:	f7f9 fb03 	bl	800b1f0 <rcutils_reset_error>
 8011bea:	2701      	movs	r7, #1
 8011bec:	e7c9      	b.n	8011b82 <rcl_node_resolve_name+0xb6>
 8011bee:	9c07      	ldr	r4, [sp, #28]
 8011bf0:	e7c2      	b.n	8011b78 <rcl_node_resolve_name+0xac>
 8011bf2:	f7f9 fae5 	bl	800b1c0 <rcutils_get_error_string>
 8011bf6:	2701      	movs	r7, #1
 8011bf8:	f7f9 fafa 	bl	800b1f0 <rcutils_reset_error>
 8011bfc:	e7bc      	b.n	8011b78 <rcl_node_resolve_name+0xac>
 8011bfe:	f7f9 fadf 	bl	800b1c0 <rcutils_get_error_string>
 8011c02:	f7f9 faf5 	bl	800b1f0 <rcutils_reset_error>
 8011c06:	e7bc      	b.n	8011b82 <rcl_node_resolve_name+0xb6>
 8011c08:	2767      	movs	r7, #103	@ 0x67
 8011c0a:	e7b5      	b.n	8011b78 <rcl_node_resolve_name+0xac>
 8011c0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c0e:	4659      	mov	r1, fp
 8011c10:	47d0      	blx	sl
 8011c12:	4659      	mov	r1, fp
 8011c14:	4638      	mov	r0, r7
 8011c16:	47d0      	blx	sl
 8011c18:	e799      	b.n	8011b4e <rcl_node_resolve_name+0x82>
 8011c1a:	bf00      	nop

08011c1c <rcl_service_get_rmw_handle>:
 8011c1c:	b118      	cbz	r0, 8011c26 <rcl_service_get_rmw_handle+0xa>
 8011c1e:	6800      	ldr	r0, [r0, #0]
 8011c20:	b108      	cbz	r0, 8011c26 <rcl_service_get_rmw_handle+0xa>
 8011c22:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011c26:	4770      	bx	lr

08011c28 <rcl_take_request>:
 8011c28:	b570      	push	{r4, r5, r6, lr}
 8011c2a:	468e      	mov	lr, r1
 8011c2c:	460c      	mov	r4, r1
 8011c2e:	4616      	mov	r6, r2
 8011c30:	4605      	mov	r5, r0
 8011c32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c36:	b08c      	sub	sp, #48	@ 0x30
 8011c38:	f10d 0c18 	add.w	ip, sp, #24
 8011c3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c40:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011c44:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011c48:	b30d      	cbz	r5, 8011c8e <rcl_take_request+0x66>
 8011c4a:	682b      	ldr	r3, [r5, #0]
 8011c4c:	b1fb      	cbz	r3, 8011c8e <rcl_take_request+0x66>
 8011c4e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011c52:	b1e0      	cbz	r0, 8011c8e <rcl_take_request+0x66>
 8011c54:	b336      	cbz	r6, 8011ca4 <rcl_take_request+0x7c>
 8011c56:	2300      	movs	r3, #0
 8011c58:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c5c:	4632      	mov	r2, r6
 8011c5e:	f10d 0307 	add.w	r3, sp, #7
 8011c62:	a902      	add	r1, sp, #8
 8011c64:	f002 ffda 	bl	8014c1c <rmw_take_request>
 8011c68:	4605      	mov	r5, r0
 8011c6a:	b198      	cbz	r0, 8011c94 <rcl_take_request+0x6c>
 8011c6c:	280a      	cmp	r0, #10
 8011c6e:	bf18      	it	ne
 8011c70:	2501      	movne	r5, #1
 8011c72:	f10d 0e18 	add.w	lr, sp, #24
 8011c76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c7a:	46a4      	mov	ip, r4
 8011c7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011c84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011c88:	4628      	mov	r0, r5
 8011c8a:	b00c      	add	sp, #48	@ 0x30
 8011c8c:	bd70      	pop	{r4, r5, r6, pc}
 8011c8e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8011c92:	e7ee      	b.n	8011c72 <rcl_take_request+0x4a>
 8011c94:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c98:	f240 2359 	movw	r3, #601	@ 0x259
 8011c9c:	2a00      	cmp	r2, #0
 8011c9e:	bf08      	it	eq
 8011ca0:	461d      	moveq	r5, r3
 8011ca2:	e7e6      	b.n	8011c72 <rcl_take_request+0x4a>
 8011ca4:	250b      	movs	r5, #11
 8011ca6:	e7e4      	b.n	8011c72 <rcl_take_request+0x4a>

08011ca8 <rcl_send_response>:
 8011ca8:	b170      	cbz	r0, 8011cc8 <rcl_send_response+0x20>
 8011caa:	6800      	ldr	r0, [r0, #0]
 8011cac:	b160      	cbz	r0, 8011cc8 <rcl_send_response+0x20>
 8011cae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011cb2:	b148      	cbz	r0, 8011cc8 <rcl_send_response+0x20>
 8011cb4:	b159      	cbz	r1, 8011cce <rcl_send_response+0x26>
 8011cb6:	b510      	push	{r4, lr}
 8011cb8:	b15a      	cbz	r2, 8011cd2 <rcl_send_response+0x2a>
 8011cba:	f003 f80d 	bl	8014cd8 <rmw_send_response>
 8011cbe:	b110      	cbz	r0, 8011cc6 <rcl_send_response+0x1e>
 8011cc0:	2802      	cmp	r0, #2
 8011cc2:	bf18      	it	ne
 8011cc4:	2001      	movne	r0, #1
 8011cc6:	bd10      	pop	{r4, pc}
 8011cc8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011ccc:	4770      	bx	lr
 8011cce:	200b      	movs	r0, #11
 8011cd0:	4770      	bx	lr
 8011cd2:	200b      	movs	r0, #11
 8011cd4:	bd10      	pop	{r4, pc}
 8011cd6:	bf00      	nop

08011cd8 <rcl_service_is_valid>:
 8011cd8:	b130      	cbz	r0, 8011ce8 <rcl_service_is_valid+0x10>
 8011cda:	6800      	ldr	r0, [r0, #0]
 8011cdc:	b120      	cbz	r0, 8011ce8 <rcl_service_is_valid+0x10>
 8011cde:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011ce2:	3800      	subs	r0, #0
 8011ce4:	bf18      	it	ne
 8011ce6:	2001      	movne	r0, #1
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop

08011cec <rcl_get_zero_initialized_subscription>:
 8011cec:	4b01      	ldr	r3, [pc, #4]	@ (8011cf4 <rcl_get_zero_initialized_subscription+0x8>)
 8011cee:	6818      	ldr	r0, [r3, #0]
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	08018954 	.word	0x08018954

08011cf8 <rcl_subscription_init>:
 8011cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cfc:	b089      	sub	sp, #36	@ 0x24
 8011cfe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011d00:	b1d6      	cbz	r6, 8011d38 <rcl_subscription_init+0x40>
 8011d02:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8011d06:	4604      	mov	r4, r0
 8011d08:	4648      	mov	r0, r9
 8011d0a:	460d      	mov	r5, r1
 8011d0c:	4690      	mov	r8, r2
 8011d0e:	461f      	mov	r7, r3
 8011d10:	f7f9 fa48 	bl	800b1a4 <rcutils_allocator_is_valid>
 8011d14:	b180      	cbz	r0, 8011d38 <rcl_subscription_init+0x40>
 8011d16:	b17c      	cbz	r4, 8011d38 <rcl_subscription_init+0x40>
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f7ff fe83 	bl	8011a24 <rcl_node_is_valid>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d054      	beq.n	8011dcc <rcl_subscription_init+0xd4>
 8011d22:	f1b8 0f00 	cmp.w	r8, #0
 8011d26:	d007      	beq.n	8011d38 <rcl_subscription_init+0x40>
 8011d28:	b137      	cbz	r7, 8011d38 <rcl_subscription_init+0x40>
 8011d2a:	6823      	ldr	r3, [r4, #0]
 8011d2c:	b14b      	cbz	r3, 8011d42 <rcl_subscription_init+0x4a>
 8011d2e:	2764      	movs	r7, #100	@ 0x64
 8011d30:	4638      	mov	r0, r7
 8011d32:	b009      	add	sp, #36	@ 0x24
 8011d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d38:	270b      	movs	r7, #11
 8011d3a:	4638      	mov	r0, r7
 8011d3c:	b009      	add	sp, #36	@ 0x24
 8011d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d42:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011d46:	aa07      	add	r2, sp, #28
 8011d48:	9205      	str	r2, [sp, #20]
 8011d4a:	9307      	str	r3, [sp, #28]
 8011d4c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d54:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011d58:	4639      	mov	r1, r7
 8011d5a:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f7ff feb4 	bl	8011acc <rcl_node_resolve_name>
 8011d64:	4607      	mov	r7, r0
 8011d66:	2800      	cmp	r0, #0
 8011d68:	d15f      	bne.n	8011e2a <rcl_subscription_init+0x132>
 8011d6a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011d6e:	21c8      	movs	r1, #200	@ 0xc8
 8011d70:	2001      	movs	r0, #1
 8011d72:	4798      	blx	r3
 8011d74:	6020      	str	r0, [r4, #0]
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d05d      	beq.n	8011e36 <rcl_subscription_init+0x13e>
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	f7ff fe74 	bl	8011a68 <rcl_node_get_rmw_handle>
 8011d80:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	9a07      	ldr	r2, [sp, #28]
 8011d88:	6827      	ldr	r7, [r4, #0]
 8011d8a:	4641      	mov	r1, r8
 8011d8c:	4633      	mov	r3, r6
 8011d8e:	f7fa f84f 	bl	800be30 <rmw_create_subscription>
 8011d92:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8011d96:	6827      	ldr	r7, [r4, #0]
 8011d98:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8011d9c:	b348      	cbz	r0, 8011df2 <rcl_subscription_init+0xfa>
 8011d9e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8011da2:	f7fa f927 	bl	800bff4 <rmw_subscription_get_actual_qos>
 8011da6:	4607      	mov	r7, r0
 8011da8:	b9a8      	cbnz	r0, 8011dd6 <rcl_subscription_init+0xde>
 8011daa:	6820      	ldr	r0, [r4, #0]
 8011dac:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011db0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8011db4:	2270      	movs	r2, #112	@ 0x70
 8011db6:	4631      	mov	r1, r6
 8011db8:	f005 f9f5 	bl	80171a6 <memcpy>
 8011dbc:	9807      	ldr	r0, [sp, #28]
 8011dbe:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011dc0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011dc2:	4798      	blx	r3
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	b009      	add	sp, #36	@ 0x24
 8011dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dcc:	27c8      	movs	r7, #200	@ 0xc8
 8011dce:	4638      	mov	r0, r7
 8011dd0:	b009      	add	sp, #36	@ 0x24
 8011dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dd6:	6827      	ldr	r7, [r4, #0]
 8011dd8:	b32f      	cbz	r7, 8011e26 <rcl_subscription_init+0x12e>
 8011dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011dde:	b14b      	cbz	r3, 8011df4 <rcl_subscription_init+0xfc>
 8011de0:	4628      	mov	r0, r5
 8011de2:	f7ff fe41 	bl	8011a68 <rcl_node_get_rmw_handle>
 8011de6:	6823      	ldr	r3, [r4, #0]
 8011de8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8011dec:	f7fa f912 	bl	800c014 <rmw_destroy_subscription>
 8011df0:	6827      	ldr	r7, [r4, #0]
 8011df2:	b197      	cbz	r7, 8011e1a <rcl_subscription_init+0x122>
 8011df4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8011df8:	4628      	mov	r0, r5
 8011dfa:	f7f9 f9d3 	bl	800b1a4 <rcutils_allocator_is_valid>
 8011dfe:	b158      	cbz	r0, 8011e18 <rcl_subscription_init+0x120>
 8011e00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e02:	b148      	cbz	r0, 8011e18 <rcl_subscription_init+0x120>
 8011e04:	4629      	mov	r1, r5
 8011e06:	f002 fb07 	bl	8014418 <rmw_subscription_content_filter_options_fini>
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	b9b8      	cbnz	r0, 8011e3e <rcl_subscription_init+0x146>
 8011e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e10:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011e12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e14:	4798      	blx	r3
 8011e16:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8011e18:	6827      	ldr	r7, [r4, #0]
 8011e1a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011e1c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011e1e:	4638      	mov	r0, r7
 8011e20:	4798      	blx	r3
 8011e22:	2300      	movs	r3, #0
 8011e24:	6023      	str	r3, [r4, #0]
 8011e26:	2701      	movs	r7, #1
 8011e28:	e7c8      	b.n	8011dbc <rcl_subscription_init+0xc4>
 8011e2a:	2867      	cmp	r0, #103	@ 0x67
 8011e2c:	d0c6      	beq.n	8011dbc <rcl_subscription_init+0xc4>
 8011e2e:	2869      	cmp	r0, #105	@ 0x69
 8011e30:	d003      	beq.n	8011e3a <rcl_subscription_init+0x142>
 8011e32:	280a      	cmp	r0, #10
 8011e34:	d1f7      	bne.n	8011e26 <rcl_subscription_init+0x12e>
 8011e36:	270a      	movs	r7, #10
 8011e38:	e7c0      	b.n	8011dbc <rcl_subscription_init+0xc4>
 8011e3a:	2767      	movs	r7, #103	@ 0x67
 8011e3c:	e7be      	b.n	8011dbc <rcl_subscription_init+0xc4>
 8011e3e:	f7ff fb0d 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8011e42:	6827      	ldr	r7, [r4, #0]
 8011e44:	e7e9      	b.n	8011e1a <rcl_subscription_init+0x122>
 8011e46:	bf00      	nop

08011e48 <rcl_subscription_get_default_options>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	4d14      	ldr	r5, [pc, #80]	@ (8011e9c <rcl_subscription_get_default_options+0x54>)
 8011e4c:	4914      	ldr	r1, [pc, #80]	@ (8011ea0 <rcl_subscription_get_default_options+0x58>)
 8011e4e:	b08a      	sub	sp, #40	@ 0x28
 8011e50:	4604      	mov	r4, r0
 8011e52:	2250      	movs	r2, #80	@ 0x50
 8011e54:	4628      	mov	r0, r5
 8011e56:	f005 f9a6 	bl	80171a6 <memcpy>
 8011e5a:	a804      	add	r0, sp, #16
 8011e5c:	f7f9 f994 	bl	800b188 <rcutils_get_default_allocator>
 8011e60:	f10d 0c10 	add.w	ip, sp, #16
 8011e64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011e68:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011e6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011e70:	466e      	mov	r6, sp
 8011e72:	f8dc 3000 	ldr.w	r3, [ip]
 8011e76:	f8ce 3000 	str.w	r3, [lr]
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	f002 fae6 	bl	801444c <rmw_get_default_subscription_options>
 8011e80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011e84:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8011e88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e8c:	2270      	movs	r2, #112	@ 0x70
 8011e8e:	4629      	mov	r1, r5
 8011e90:	4620      	mov	r0, r4
 8011e92:	f005 f988 	bl	80171a6 <memcpy>
 8011e96:	4620      	mov	r0, r4
 8011e98:	b00a      	add	sp, #40	@ 0x28
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	2000aca8 	.word	0x2000aca8
 8011ea0:	08018958 	.word	0x08018958

08011ea4 <rcl_take>:
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d04a      	beq.n	8011f3e <rcl_take+0x9a>
 8011ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eac:	4604      	mov	r4, r0
 8011eae:	6800      	ldr	r0, [r0, #0]
 8011eb0:	b0a4      	sub	sp, #144	@ 0x90
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	d03b      	beq.n	8011f2e <rcl_take+0x8a>
 8011eb6:	461f      	mov	r7, r3
 8011eb8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d036      	beq.n	8011f2e <rcl_take+0x8a>
 8011ec0:	460e      	mov	r6, r1
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	d039      	beq.n	8011f3a <rcl_take+0x96>
 8011ec6:	4615      	mov	r5, r2
 8011ec8:	2a00      	cmp	r2, #0
 8011eca:	d03c      	beq.n	8011f46 <rcl_take+0xa2>
 8011ecc:	a802      	add	r0, sp, #8
 8011ece:	f002 fb47 	bl	8014560 <rmw_get_zero_initialized_message_info>
 8011ed2:	f10d 0c08 	add.w	ip, sp, #8
 8011ed6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011eda:	46ae      	mov	lr, r5
 8011edc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ee0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ee4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ee8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011eec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ef0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011ef4:	f04f 0800 	mov.w	r8, #0
 8011ef8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011efc:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8011f00:	6822      	ldr	r2, [r4, #0]
 8011f02:	462b      	mov	r3, r5
 8011f04:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8011f08:	9700      	str	r7, [sp, #0]
 8011f0a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011f0e:	4631      	mov	r1, r6
 8011f10:	f002 ff88 	bl	8014e24 <rmw_take_with_info>
 8011f14:	4603      	mov	r3, r0
 8011f16:	b9c0      	cbnz	r0, 8011f4a <rcl_take+0xa6>
 8011f18:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011f1c:	f240 1291 	movw	r2, #401	@ 0x191
 8011f20:	2900      	cmp	r1, #0
 8011f22:	bf08      	it	eq
 8011f24:	4613      	moveq	r3, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	b024      	add	sp, #144	@ 0x90
 8011f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f2e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011f32:	4618      	mov	r0, r3
 8011f34:	b024      	add	sp, #144	@ 0x90
 8011f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f3a:	230b      	movs	r3, #11
 8011f3c:	e7f3      	b.n	8011f26 <rcl_take+0x82>
 8011f3e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011f42:	4618      	mov	r0, r3
 8011f44:	4770      	bx	lr
 8011f46:	ad14      	add	r5, sp, #80	@ 0x50
 8011f48:	e7c0      	b.n	8011ecc <rcl_take+0x28>
 8011f4a:	f7ff fa87 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	e7e9      	b.n	8011f26 <rcl_take+0x82>
 8011f52:	bf00      	nop

08011f54 <rcl_subscription_get_rmw_handle>:
 8011f54:	b118      	cbz	r0, 8011f5e <rcl_subscription_get_rmw_handle+0xa>
 8011f56:	6800      	ldr	r0, [r0, #0]
 8011f58:	b108      	cbz	r0, 8011f5e <rcl_subscription_get_rmw_handle+0xa>
 8011f5a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011f5e:	4770      	bx	lr

08011f60 <rcl_subscription_is_valid>:
 8011f60:	b130      	cbz	r0, 8011f70 <rcl_subscription_is_valid+0x10>
 8011f62:	6800      	ldr	r0, [r0, #0]
 8011f64:	b120      	cbz	r0, 8011f70 <rcl_subscription_is_valid+0x10>
 8011f66:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011f6a:	3800      	subs	r0, #0
 8011f6c:	bf18      	it	ne
 8011f6e:	2001      	movne	r0, #1
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop

08011f74 <rcl_get_system_time>:
 8011f74:	4608      	mov	r0, r1
 8011f76:	f7f9 b957 	b.w	800b228 <rcutils_system_time_now>
 8011f7a:	bf00      	nop

08011f7c <rcl_get_steady_time>:
 8011f7c:	4608      	mov	r0, r1
 8011f7e:	f7f9 b97b 	b.w	800b278 <rcutils_steady_time_now>
 8011f82:	bf00      	nop

08011f84 <rcl_get_ros_time>:
 8011f84:	7a03      	ldrb	r3, [r0, #8]
 8011f86:	b510      	push	{r4, lr}
 8011f88:	460c      	mov	r4, r1
 8011f8a:	b133      	cbz	r3, 8011f9a <rcl_get_ros_time+0x16>
 8011f8c:	2105      	movs	r1, #5
 8011f8e:	f001 fef3 	bl	8013d78 <__atomic_load_8>
 8011f92:	e9c4 0100 	strd	r0, r1, [r4]
 8011f96:	2000      	movs	r0, #0
 8011f98:	bd10      	pop	{r4, pc}
 8011f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	f7f9 b942 	b.w	800b228 <rcutils_system_time_now>

08011fa4 <rcl_clock_init>:
 8011fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa6:	4605      	mov	r5, r0
 8011fa8:	4610      	mov	r0, r2
 8011faa:	4614      	mov	r4, r2
 8011fac:	460e      	mov	r6, r1
 8011fae:	f7f9 f8f9 	bl	800b1a4 <rcutils_allocator_is_valid>
 8011fb2:	b128      	cbz	r0, 8011fc0 <rcl_clock_init+0x1c>
 8011fb4:	2d03      	cmp	r5, #3
 8011fb6:	d803      	bhi.n	8011fc0 <rcl_clock_init+0x1c>
 8011fb8:	e8df f005 	tbb	[pc, r5]
 8011fbc:	06532e1d 	.word	0x06532e1d
 8011fc0:	f04f 0c0b 	mov.w	ip, #11
 8011fc4:	4660      	mov	r0, ip
 8011fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc8:	2e00      	cmp	r6, #0
 8011fca:	d0f9      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 8011fcc:	2c00      	cmp	r4, #0
 8011fce:	d0f7      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011fd6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801208c <rcl_clock_init+0xe8>
 8011fda:	6133      	str	r3, [r6, #16]
 8011fdc:	f106 0514 	add.w	r5, r6, #20
 8011fe0:	469c      	mov	ip, r3
 8011fe2:	2703      	movs	r7, #3
 8011fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011fe8:	6823      	ldr	r3, [r4, #0]
 8011fea:	602b      	str	r3, [r5, #0]
 8011fec:	7037      	strb	r7, [r6, #0]
 8011fee:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011ff2:	4660      	mov	r0, ip
 8011ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff6:	2e00      	cmp	r6, #0
 8011ff8:	d0e2      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	7033      	strb	r3, [r6, #0]
 8011ffe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012002:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012006:	469c      	mov	ip, r3
 8012008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801200a:	f106 0514 	add.w	r5, r6, #20
 801200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012010:	6823      	ldr	r3, [r4, #0]
 8012012:	602b      	str	r3, [r5, #0]
 8012014:	4660      	mov	r0, ip
 8012016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012018:	2e00      	cmp	r6, #0
 801201a:	d0d1      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 801201c:	2c00      	cmp	r4, #0
 801201e:	d0cf      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 8012020:	2700      	movs	r7, #0
 8012022:	7037      	strb	r7, [r6, #0]
 8012024:	46a4      	mov	ip, r4
 8012026:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801202a:	f106 0514 	add.w	r5, r6, #20
 801202e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012032:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012038:	f8dc 3000 	ldr.w	r3, [ip]
 801203c:	602b      	str	r3, [r5, #0]
 801203e:	6921      	ldr	r1, [r4, #16]
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	2010      	movs	r0, #16
 8012044:	4798      	blx	r3
 8012046:	6130      	str	r0, [r6, #16]
 8012048:	b1d0      	cbz	r0, 8012080 <rcl_clock_init+0xdc>
 801204a:	2200      	movs	r2, #0
 801204c:	2300      	movs	r3, #0
 801204e:	e9c0 2300 	strd	r2, r3, [r0]
 8012052:	2301      	movs	r3, #1
 8012054:	7207      	strb	r7, [r0, #8]
 8012056:	4a0c      	ldr	r2, [pc, #48]	@ (8012088 <rcl_clock_init+0xe4>)
 8012058:	7033      	strb	r3, [r6, #0]
 801205a:	46bc      	mov	ip, r7
 801205c:	60f2      	str	r2, [r6, #12]
 801205e:	4660      	mov	r0, ip
 8012060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012062:	2e00      	cmp	r6, #0
 8012064:	d0ac      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 8012066:	2c00      	cmp	r4, #0
 8012068:	d0aa      	beq.n	8011fc0 <rcl_clock_init+0x1c>
 801206a:	2300      	movs	r3, #0
 801206c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012070:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012090 <rcl_clock_init+0xec>
 8012074:	6133      	str	r3, [r6, #16]
 8012076:	f106 0514 	add.w	r5, r6, #20
 801207a:	469c      	mov	ip, r3
 801207c:	2702      	movs	r7, #2
 801207e:	e7b1      	b.n	8011fe4 <rcl_clock_init+0x40>
 8012080:	f04f 0c0a 	mov.w	ip, #10
 8012084:	e79e      	b.n	8011fc4 <rcl_clock_init+0x20>
 8012086:	bf00      	nop
 8012088:	08011f85 	.word	0x08011f85
 801208c:	08011f7d 	.word	0x08011f7d
 8012090:	08011f75 	.word	0x08011f75

08012094 <rcl_clock_get_now>:
 8012094:	b140      	cbz	r0, 80120a8 <rcl_clock_get_now+0x14>
 8012096:	b139      	cbz	r1, 80120a8 <rcl_clock_get_now+0x14>
 8012098:	7803      	ldrb	r3, [r0, #0]
 801209a:	b11b      	cbz	r3, 80120a4 <rcl_clock_get_now+0x10>
 801209c:	68c3      	ldr	r3, [r0, #12]
 801209e:	b10b      	cbz	r3, 80120a4 <rcl_clock_get_now+0x10>
 80120a0:	6900      	ldr	r0, [r0, #16]
 80120a2:	4718      	bx	r3
 80120a4:	2001      	movs	r0, #1
 80120a6:	4770      	bx	lr
 80120a8:	200b      	movs	r0, #11
 80120aa:	4770      	bx	lr

080120ac <rcl_clock_add_jump_callback>:
 80120ac:	b082      	sub	sp, #8
 80120ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b2:	a906      	add	r1, sp, #24
 80120b4:	e881 000c 	stmia.w	r1, {r2, r3}
 80120b8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80120bc:	b320      	cbz	r0, 8012108 <rcl_clock_add_jump_callback+0x5c>
 80120be:	4604      	mov	r4, r0
 80120c0:	3014      	adds	r0, #20
 80120c2:	f7f9 f86f 	bl	800b1a4 <rcutils_allocator_is_valid>
 80120c6:	b1f8      	cbz	r0, 8012108 <rcl_clock_add_jump_callback+0x5c>
 80120c8:	b1f6      	cbz	r6, 8012108 <rcl_clock_add_jump_callback+0x5c>
 80120ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	db1b      	blt.n	8012108 <rcl_clock_add_jump_callback+0x5c>
 80120d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80120d4:	2a01      	cmp	r2, #1
 80120d6:	f173 0300 	sbcs.w	r3, r3, #0
 80120da:	da15      	bge.n	8012108 <rcl_clock_add_jump_callback+0x5c>
 80120dc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80120e0:	2f00      	cmp	r7, #0
 80120e2:	d042      	beq.n	801216a <rcl_clock_add_jump_callback+0xbe>
 80120e4:	2300      	movs	r3, #0
 80120e6:	4602      	mov	r2, r0
 80120e8:	e003      	b.n	80120f2 <rcl_clock_add_jump_callback+0x46>
 80120ea:	42bb      	cmp	r3, r7
 80120ec:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80120f0:	d011      	beq.n	8012116 <rcl_clock_add_jump_callback+0x6a>
 80120f2:	6811      	ldr	r1, [r2, #0]
 80120f4:	42b1      	cmp	r1, r6
 80120f6:	f103 0301 	add.w	r3, r3, #1
 80120fa:	d1f6      	bne.n	80120ea <rcl_clock_add_jump_callback+0x3e>
 80120fc:	6a11      	ldr	r1, [r2, #32]
 80120fe:	42a9      	cmp	r1, r5
 8012100:	d1f3      	bne.n	80120ea <rcl_clock_add_jump_callback+0x3e>
 8012102:	f04f 0e01 	mov.w	lr, #1
 8012106:	e001      	b.n	801210c <rcl_clock_add_jump_callback+0x60>
 8012108:	f04f 0e0b 	mov.w	lr, #11
 801210c:	4670      	mov	r0, lr
 801210e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012112:	b002      	add	sp, #8
 8012114:	4770      	bx	lr
 8012116:	3301      	adds	r3, #1
 8012118:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801211c:	00d9      	lsls	r1, r3, #3
 801211e:	69e3      	ldr	r3, [r4, #28]
 8012120:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012122:	4798      	blx	r3
 8012124:	b1f0      	cbz	r0, 8012164 <rcl_clock_add_jump_callback+0xb8>
 8012126:	68a3      	ldr	r3, [r4, #8]
 8012128:	6060      	str	r0, [r4, #4]
 801212a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801212e:	f10d 0c18 	add.w	ip, sp, #24
 8012132:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012136:	f103 0801 	add.w	r8, r3, #1
 801213a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801213e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012142:	f106 0708 	add.w	r7, r6, #8
 8012146:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012148:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801214c:	f04f 0e00 	mov.w	lr, #0
 8012150:	e887 0003 	stmia.w	r7, {r0, r1}
 8012154:	6235      	str	r5, [r6, #32]
 8012156:	4670      	mov	r0, lr
 8012158:	f8c4 8008 	str.w	r8, [r4, #8]
 801215c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012160:	b002      	add	sp, #8
 8012162:	4770      	bx	lr
 8012164:	f04f 0e0a 	mov.w	lr, #10
 8012168:	e7d0      	b.n	801210c <rcl_clock_add_jump_callback+0x60>
 801216a:	2128      	movs	r1, #40	@ 0x28
 801216c:	e7d7      	b.n	801211e <rcl_clock_add_jump_callback+0x72>
 801216e:	bf00      	nop

08012170 <rcl_clock_remove_jump_callback>:
 8012170:	2800      	cmp	r0, #0
 8012172:	d057      	beq.n	8012224 <rcl_clock_remove_jump_callback+0xb4>
 8012174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012178:	4605      	mov	r5, r0
 801217a:	3014      	adds	r0, #20
 801217c:	4688      	mov	r8, r1
 801217e:	4692      	mov	sl, r2
 8012180:	f7f9 f810 	bl	800b1a4 <rcutils_allocator_is_valid>
 8012184:	2800      	cmp	r0, #0
 8012186:	d03b      	beq.n	8012200 <rcl_clock_remove_jump_callback+0x90>
 8012188:	f1b8 0f00 	cmp.w	r8, #0
 801218c:	d038      	beq.n	8012200 <rcl_clock_remove_jump_callback+0x90>
 801218e:	68ae      	ldr	r6, [r5, #8]
 8012190:	b166      	cbz	r6, 80121ac <rcl_clock_remove_jump_callback+0x3c>
 8012192:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012196:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801219a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801219e:	464c      	mov	r4, r9
 80121a0:	6823      	ldr	r3, [r4, #0]
 80121a2:	4543      	cmp	r3, r8
 80121a4:	d005      	beq.n	80121b2 <rcl_clock_remove_jump_callback+0x42>
 80121a6:	3428      	adds	r4, #40	@ 0x28
 80121a8:	42a7      	cmp	r7, r4
 80121aa:	d1f9      	bne.n	80121a0 <rcl_clock_remove_jump_callback+0x30>
 80121ac:	2001      	movs	r0, #1
 80121ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b2:	6a23      	ldr	r3, [r4, #32]
 80121b4:	3428      	adds	r4, #40	@ 0x28
 80121b6:	42bc      	cmp	r4, r7
 80121b8:	d02d      	beq.n	8012216 <rcl_clock_remove_jump_callback+0xa6>
 80121ba:	4553      	cmp	r3, sl
 80121bc:	d1f0      	bne.n	80121a0 <rcl_clock_remove_jump_callback+0x30>
 80121be:	46a6      	mov	lr, r4
 80121c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121c4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80121c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80121d8:	3428      	adds	r4, #40	@ 0x28
 80121da:	42a7      	cmp	r7, r4
 80121dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80121e0:	d1ed      	bne.n	80121be <rcl_clock_remove_jump_callback+0x4e>
 80121e2:	3e01      	subs	r6, #1
 80121e4:	60ae      	str	r6, [r5, #8]
 80121e6:	b176      	cbz	r6, 8012206 <rcl_clock_remove_jump_callback+0x96>
 80121e8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80121ec:	69eb      	ldr	r3, [r5, #28]
 80121ee:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80121f0:	00f1      	lsls	r1, r6, #3
 80121f2:	4648      	mov	r0, r9
 80121f4:	4798      	blx	r3
 80121f6:	b1b8      	cbz	r0, 8012228 <rcl_clock_remove_jump_callback+0xb8>
 80121f8:	6068      	str	r0, [r5, #4]
 80121fa:	2000      	movs	r0, #0
 80121fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012200:	200b      	movs	r0, #11
 8012202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012206:	4648      	mov	r0, r9
 8012208:	69ab      	ldr	r3, [r5, #24]
 801220a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801220c:	4798      	blx	r3
 801220e:	606e      	str	r6, [r5, #4]
 8012210:	4630      	mov	r0, r6
 8012212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012216:	4553      	cmp	r3, sl
 8012218:	d1c8      	bne.n	80121ac <rcl_clock_remove_jump_callback+0x3c>
 801221a:	3e01      	subs	r6, #1
 801221c:	60ae      	str	r6, [r5, #8]
 801221e:	2e00      	cmp	r6, #0
 8012220:	d1e2      	bne.n	80121e8 <rcl_clock_remove_jump_callback+0x78>
 8012222:	e7f0      	b.n	8012206 <rcl_clock_remove_jump_callback+0x96>
 8012224:	200b      	movs	r0, #11
 8012226:	4770      	bx	lr
 8012228:	200a      	movs	r0, #10
 801222a:	e7ea      	b.n	8012202 <rcl_clock_remove_jump_callback+0x92>

0801222c <_rcl_timer_time_jump>:
 801222c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012230:	4605      	mov	r5, r0
 8012232:	b084      	sub	sp, #16
 8012234:	4614      	mov	r4, r2
 8012236:	b131      	cbz	r1, 8012246 <_rcl_timer_time_jump+0x1a>
 8012238:	7803      	ldrb	r3, [r0, #0]
 801223a:	3b02      	subs	r3, #2
 801223c:	2b01      	cmp	r3, #1
 801223e:	d93f      	bls.n	80122c0 <_rcl_timer_time_jump+0x94>
 8012240:	b004      	add	sp, #16
 8012242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012246:	6813      	ldr	r3, [r2, #0]
 8012248:	a902      	add	r1, sp, #8
 801224a:	6818      	ldr	r0, [r3, #0]
 801224c:	f7ff ff22 	bl	8012094 <rcl_clock_get_now>
 8012250:	2800      	cmp	r0, #0
 8012252:	d1f5      	bne.n	8012240 <_rcl_timer_time_jump+0x14>
 8012254:	6820      	ldr	r0, [r4, #0]
 8012256:	2105      	movs	r1, #5
 8012258:	3020      	adds	r0, #32
 801225a:	f001 fd8d 	bl	8013d78 <__atomic_load_8>
 801225e:	6823      	ldr	r3, [r4, #0]
 8012260:	4681      	mov	r9, r0
 8012262:	4688      	mov	r8, r1
 8012264:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012268:	2105      	movs	r1, #5
 801226a:	f001 fd85 	bl	8013d78 <__atomic_load_8>
 801226e:	4607      	mov	r7, r0
 8012270:	6820      	ldr	r0, [r4, #0]
 8012272:	460e      	mov	r6, r1
 8012274:	3018      	adds	r0, #24
 8012276:	2105      	movs	r1, #5
 8012278:	f001 fd7e 	bl	8013d78 <__atomic_load_8>
 801227c:	782b      	ldrb	r3, [r5, #0]
 801227e:	9a02      	ldr	r2, [sp, #8]
 8012280:	3b02      	subs	r3, #2
 8012282:	2b01      	cmp	r3, #1
 8012284:	460d      	mov	r5, r1
 8012286:	9b03      	ldr	r3, [sp, #12]
 8012288:	4682      	mov	sl, r0
 801228a:	d937      	bls.n	80122fc <_rcl_timer_time_jump+0xd0>
 801228c:	42ba      	cmp	r2, r7
 801228e:	eb73 0106 	sbcs.w	r1, r3, r6
 8012292:	da5f      	bge.n	8012354 <_rcl_timer_time_jump+0x128>
 8012294:	454a      	cmp	r2, r9
 8012296:	eb73 0108 	sbcs.w	r1, r3, r8
 801229a:	dad1      	bge.n	8012240 <_rcl_timer_time_jump+0x14>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	eb1a 0202 	adds.w	r2, sl, r2
 80122a2:	eb43 0305 	adc.w	r3, r3, r5
 80122a6:	2505      	movs	r5, #5
 80122a8:	3028      	adds	r0, #40	@ 0x28
 80122aa:	9500      	str	r5, [sp, #0]
 80122ac:	f001 fd9a 	bl	8013de4 <__atomic_store_8>
 80122b0:	6820      	ldr	r0, [r4, #0]
 80122b2:	9500      	str	r5, [sp, #0]
 80122b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122b8:	3020      	adds	r0, #32
 80122ba:	f001 fd93 	bl	8013de4 <__atomic_store_8>
 80122be:	e7bf      	b.n	8012240 <_rcl_timer_time_jump+0x14>
 80122c0:	6813      	ldr	r3, [r2, #0]
 80122c2:	a902      	add	r1, sp, #8
 80122c4:	6818      	ldr	r0, [r3, #0]
 80122c6:	f7ff fee5 	bl	8012094 <rcl_clock_get_now>
 80122ca:	2800      	cmp	r0, #0
 80122cc:	d1b8      	bne.n	8012240 <_rcl_timer_time_jump+0x14>
 80122ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122d2:	4313      	orrs	r3, r2
 80122d4:	d0b4      	beq.n	8012240 <_rcl_timer_time_jump+0x14>
 80122d6:	6820      	ldr	r0, [r4, #0]
 80122d8:	2105      	movs	r1, #5
 80122da:	3028      	adds	r0, #40	@ 0x28
 80122dc:	f001 fd4c 	bl	8013d78 <__atomic_load_8>
 80122e0:	9d02      	ldr	r5, [sp, #8]
 80122e2:	9b03      	ldr	r3, [sp, #12]
 80122e4:	4602      	mov	r2, r0
 80122e6:	6820      	ldr	r0, [r4, #0]
 80122e8:	1b52      	subs	r2, r2, r5
 80122ea:	f04f 0405 	mov.w	r4, #5
 80122ee:	9400      	str	r4, [sp, #0]
 80122f0:	eb61 0303 	sbc.w	r3, r1, r3
 80122f4:	3030      	adds	r0, #48	@ 0x30
 80122f6:	f001 fd75 	bl	8013de4 <__atomic_store_8>
 80122fa:	e7a1      	b.n	8012240 <_rcl_timer_time_jump+0x14>
 80122fc:	4313      	orrs	r3, r2
 80122fe:	d09f      	beq.n	8012240 <_rcl_timer_time_jump+0x14>
 8012300:	6820      	ldr	r0, [r4, #0]
 8012302:	f04f 0805 	mov.w	r8, #5
 8012306:	2300      	movs	r3, #0
 8012308:	f8cd 8000 	str.w	r8, [sp]
 801230c:	3030      	adds	r0, #48	@ 0x30
 801230e:	2200      	movs	r2, #0
 8012310:	f001 fd9e 	bl	8013e50 <__atomic_exchange_8>
 8012314:	ea51 0300 	orrs.w	r3, r1, r0
 8012318:	4606      	mov	r6, r0
 801231a:	460f      	mov	r7, r1
 801231c:	d090      	beq.n	8012240 <_rcl_timer_time_jump+0x14>
 801231e:	9a02      	ldr	r2, [sp, #8]
 8012320:	9b03      	ldr	r3, [sp, #12]
 8012322:	f8cd 8000 	str.w	r8, [sp]
 8012326:	1a12      	subs	r2, r2, r0
 8012328:	6820      	ldr	r0, [r4, #0]
 801232a:	eb63 0301 	sbc.w	r3, r3, r1
 801232e:	eb12 020a 	adds.w	r2, r2, sl
 8012332:	eb43 0305 	adc.w	r3, r3, r5
 8012336:	3028      	adds	r0, #40	@ 0x28
 8012338:	f001 fd54 	bl	8013de4 <__atomic_store_8>
 801233c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012340:	f8cd 8000 	str.w	r8, [sp]
 8012344:	6820      	ldr	r0, [r4, #0]
 8012346:	1b92      	subs	r2, r2, r6
 8012348:	eb63 0307 	sbc.w	r3, r3, r7
 801234c:	3020      	adds	r0, #32
 801234e:	f001 fd49 	bl	8013de4 <__atomic_store_8>
 8012352:	e775      	b.n	8012240 <_rcl_timer_time_jump+0x14>
 8012354:	6820      	ldr	r0, [r4, #0]
 8012356:	3008      	adds	r0, #8
 8012358:	f004 f924 	bl	80165a4 <rcl_trigger_guard_condition>
 801235c:	e770      	b.n	8012240 <_rcl_timer_time_jump+0x14>
 801235e:	bf00      	nop

08012360 <rcl_get_zero_initialized_timer>:
 8012360:	4b01      	ldr	r3, [pc, #4]	@ (8012368 <rcl_get_zero_initialized_timer+0x8>)
 8012362:	6818      	ldr	r0, [r3, #0]
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	080189a8 	.word	0x080189a8
 801236c:	00000000 	.word	0x00000000

08012370 <rcl_timer_init>:
 8012370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012374:	b0aa      	sub	sp, #168	@ 0xa8
 8012376:	4604      	mov	r4, r0
 8012378:	a835      	add	r0, sp, #212	@ 0xd4
 801237a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801237e:	460d      	mov	r5, r1
 8012380:	4692      	mov	sl, r2
 8012382:	f7f8 ff0f 	bl	800b1a4 <rcutils_allocator_is_valid>
 8012386:	2800      	cmp	r0, #0
 8012388:	d064      	beq.n	8012454 <rcl_timer_init+0xe4>
 801238a:	2c00      	cmp	r4, #0
 801238c:	d062      	beq.n	8012454 <rcl_timer_init+0xe4>
 801238e:	2d00      	cmp	r5, #0
 8012390:	d060      	beq.n	8012454 <rcl_timer_init+0xe4>
 8012392:	2f00      	cmp	r7, #0
 8012394:	db5e      	blt.n	8012454 <rcl_timer_init+0xe4>
 8012396:	6823      	ldr	r3, [r4, #0]
 8012398:	b123      	cbz	r3, 80123a4 <rcl_timer_init+0x34>
 801239a:	2664      	movs	r6, #100	@ 0x64
 801239c:	4630      	mov	r0, r6
 801239e:	b02a      	add	sp, #168	@ 0xa8
 80123a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123a4:	a908      	add	r1, sp, #32
 80123a6:	4628      	mov	r0, r5
 80123a8:	f7ff fe74 	bl	8012094 <rcl_clock_get_now>
 80123ac:	4606      	mov	r6, r0
 80123ae:	2800      	cmp	r0, #0
 80123b0:	d1f4      	bne.n	801239c <rcl_timer_init+0x2c>
 80123b2:	ae06      	add	r6, sp, #24
 80123b4:	4630      	mov	r0, r6
 80123b6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80123ba:	f003 fffb 	bl	80163b4 <rcl_get_zero_initialized_guard_condition>
 80123be:	e896 0003 	ldmia.w	r6, {r0, r1}
 80123c2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80123c6:	ae0b      	add	r6, sp, #44	@ 0x2c
 80123c8:	e889 0003 	stmia.w	r9, {r0, r1}
 80123cc:	4630      	mov	r0, r6
 80123ce:	f004 f8cd 	bl	801656c <rcl_guard_condition_get_default_options>
 80123d2:	ab0d      	add	r3, sp, #52	@ 0x34
 80123d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80123d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80123dc:	4651      	mov	r1, sl
 80123de:	e896 000c 	ldmia.w	r6, {r2, r3}
 80123e2:	4648      	mov	r0, r9
 80123e4:	f003 fff0 	bl	80163c8 <rcl_guard_condition_init>
 80123e8:	4606      	mov	r6, r0
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d1d6      	bne.n	801239c <rcl_timer_init+0x2c>
 80123ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d033      	beq.n	801245e <rcl_timer_init+0xee>
 80123f6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80123f8:	911a      	str	r1, [sp, #104]	@ 0x68
 80123fa:	4642      	mov	r2, r8
 80123fc:	463b      	mov	r3, r7
 80123fe:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012406:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80124b8 <rcl_timer_init+0x148>
 801240a:	eb12 0008 	adds.w	r0, r2, r8
 801240e:	eb47 0103 	adc.w	r1, r7, r3
 8012412:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012416:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801241a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801241e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012422:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012426:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801242a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801242e:	f8de 3000 	ldr.w	r3, [lr]
 8012432:	f8cc 3000 	str.w	r3, [ip]
 8012436:	f04f 0a00 	mov.w	sl, #0
 801243a:	4619      	mov	r1, r3
 801243c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012440:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012442:	2050      	movs	r0, #80	@ 0x50
 8012444:	4798      	blx	r3
 8012446:	6020      	str	r0, [r4, #0]
 8012448:	b358      	cbz	r0, 80124a2 <rcl_timer_init+0x132>
 801244a:	2250      	movs	r2, #80	@ 0x50
 801244c:	a916      	add	r1, sp, #88	@ 0x58
 801244e:	f004 feaa 	bl	80171a6 <memcpy>
 8012452:	e7a3      	b.n	801239c <rcl_timer_init+0x2c>
 8012454:	260b      	movs	r6, #11
 8012456:	4630      	mov	r0, r6
 8012458:	b02a      	add	sp, #168	@ 0xa8
 801245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245e:	2001      	movs	r0, #1
 8012460:	2100      	movs	r1, #0
 8012462:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801246a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801246e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012472:	4a13      	ldr	r2, [pc, #76]	@ (80124c0 <rcl_timer_init+0x150>)
 8012474:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012478:	9405      	str	r4, [sp, #20]
 801247a:	9204      	str	r2, [sp, #16]
 801247c:	ab12      	add	r3, sp, #72	@ 0x48
 801247e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012480:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012484:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012488:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801248c:	4628      	mov	r0, r5
 801248e:	f7ff fe0d 	bl	80120ac <rcl_clock_add_jump_callback>
 8012492:	4682      	mov	sl, r0
 8012494:	2800      	cmp	r0, #0
 8012496:	d0ae      	beq.n	80123f6 <rcl_timer_init+0x86>
 8012498:	4648      	mov	r0, r9
 801249a:	f004 f841 	bl	8016520 <rcl_guard_condition_fini>
 801249e:	4656      	mov	r6, sl
 80124a0:	e77c      	b.n	801239c <rcl_timer_init+0x2c>
 80124a2:	4648      	mov	r0, r9
 80124a4:	f004 f83c 	bl	8016520 <rcl_guard_condition_fini>
 80124a8:	4905      	ldr	r1, [pc, #20]	@ (80124c0 <rcl_timer_init+0x150>)
 80124aa:	4622      	mov	r2, r4
 80124ac:	4628      	mov	r0, r5
 80124ae:	f7ff fe5f 	bl	8012170 <rcl_clock_remove_jump_callback>
 80124b2:	260a      	movs	r6, #10
 80124b4:	e772      	b.n	801239c <rcl_timer_init+0x2c>
 80124b6:	bf00      	nop
	...
 80124c0:	0801222d 	.word	0x0801222d

080124c4 <rcl_timer_call>:
 80124c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	b087      	sub	sp, #28
 80124ca:	2800      	cmp	r0, #0
 80124cc:	d06d      	beq.n	80125aa <rcl_timer_call+0xe6>
 80124ce:	6803      	ldr	r3, [r0, #0]
 80124d0:	4604      	mov	r4, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d063      	beq.n	801259e <rcl_timer_call+0xda>
 80124d6:	f3bf 8f5b 	dmb	ish
 80124da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80124de:	f3bf 8f5b 	dmb	ish
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d150      	bne.n	8012588 <rcl_timer_call+0xc4>
 80124e6:	6803      	ldr	r3, [r0, #0]
 80124e8:	a904      	add	r1, sp, #16
 80124ea:	6818      	ldr	r0, [r3, #0]
 80124ec:	f7ff fdd2 	bl	8012094 <rcl_clock_get_now>
 80124f0:	4605      	mov	r5, r0
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d14a      	bne.n	801258c <rcl_timer_call+0xc8>
 80124f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	db4a      	blt.n	8012594 <rcl_timer_call+0xd0>
 80124fe:	6820      	ldr	r0, [r4, #0]
 8012500:	f04f 0a05 	mov.w	sl, #5
 8012504:	f8cd a000 	str.w	sl, [sp]
 8012508:	3020      	adds	r0, #32
 801250a:	f001 fca1 	bl	8013e50 <__atomic_exchange_8>
 801250e:	6823      	ldr	r3, [r4, #0]
 8012510:	f3bf 8f5b 	dmb	ish
 8012514:	4680      	mov	r8, r0
 8012516:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801251a:	f3bf 8f5b 	dmb	ish
 801251e:	6820      	ldr	r0, [r4, #0]
 8012520:	4689      	mov	r9, r1
 8012522:	3028      	adds	r0, #40	@ 0x28
 8012524:	4651      	mov	r1, sl
 8012526:	f001 fc27 	bl	8013d78 <__atomic_load_8>
 801252a:	4606      	mov	r6, r0
 801252c:	6820      	ldr	r0, [r4, #0]
 801252e:	460f      	mov	r7, r1
 8012530:	3018      	adds	r0, #24
 8012532:	4651      	mov	r1, sl
 8012534:	f001 fc20 	bl	8013d78 <__atomic_load_8>
 8012538:	1836      	adds	r6, r6, r0
 801253a:	4602      	mov	r2, r0
 801253c:	4682      	mov	sl, r0
 801253e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012542:	eb47 0701 	adc.w	r7, r7, r1
 8012546:	4286      	cmp	r6, r0
 8012548:	460b      	mov	r3, r1
 801254a:	eb77 010c 	sbcs.w	r1, r7, ip
 801254e:	da04      	bge.n	801255a <rcl_timer_call+0x96>
 8012550:	ea53 0102 	orrs.w	r1, r3, r2
 8012554:	d12e      	bne.n	80125b4 <rcl_timer_call+0xf0>
 8012556:	4606      	mov	r6, r0
 8012558:	4667      	mov	r7, ip
 801255a:	6820      	ldr	r0, [r4, #0]
 801255c:	2105      	movs	r1, #5
 801255e:	4632      	mov	r2, r6
 8012560:	463b      	mov	r3, r7
 8012562:	3028      	adds	r0, #40	@ 0x28
 8012564:	9100      	str	r1, [sp, #0]
 8012566:	f001 fc3d 	bl	8013de4 <__atomic_store_8>
 801256a:	f1bb 0f00 	cmp.w	fp, #0
 801256e:	d00d      	beq.n	801258c <rcl_timer_call+0xc8>
 8012570:	9a04      	ldr	r2, [sp, #16]
 8012572:	9b05      	ldr	r3, [sp, #20]
 8012574:	ebb2 0208 	subs.w	r2, r2, r8
 8012578:	4620      	mov	r0, r4
 801257a:	eb63 0309 	sbc.w	r3, r3, r9
 801257e:	47d8      	blx	fp
 8012580:	4628      	mov	r0, r5
 8012582:	b007      	add	sp, #28
 8012584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012588:	f240 3521 	movw	r5, #801	@ 0x321
 801258c:	4628      	mov	r0, r5
 801258e:	b007      	add	sp, #28
 8012590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012594:	2501      	movs	r5, #1
 8012596:	4628      	mov	r0, r5
 8012598:	b007      	add	sp, #28
 801259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80125a2:	4628      	mov	r0, r5
 80125a4:	b007      	add	sp, #28
 80125a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125aa:	250b      	movs	r5, #11
 80125ac:	4628      	mov	r0, r5
 80125ae:	b007      	add	sp, #28
 80125b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b4:	1b80      	subs	r0, r0, r6
 80125b6:	eb6c 0107 	sbc.w	r1, ip, r7
 80125ba:	3801      	subs	r0, #1
 80125bc:	f161 0100 	sbc.w	r1, r1, #0
 80125c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80125c4:	f7ed fe94 	bl	80002f0 <__aeabi_ldivmod>
 80125c8:	9b02      	ldr	r3, [sp, #8]
 80125ca:	3001      	adds	r0, #1
 80125cc:	f141 0100 	adc.w	r1, r1, #0
 80125d0:	fb00 f303 	mul.w	r3, r0, r3
 80125d4:	fb01 330a 	mla	r3, r1, sl, r3
 80125d8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80125dc:	1986      	adds	r6, r0, r6
 80125de:	4453      	add	r3, sl
 80125e0:	eb43 0707 	adc.w	r7, r3, r7
 80125e4:	e7b9      	b.n	801255a <rcl_timer_call+0x96>
 80125e6:	bf00      	nop

080125e8 <rcl_timer_is_ready>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	b378      	cbz	r0, 801264e <rcl_timer_is_ready+0x66>
 80125ee:	6803      	ldr	r3, [r0, #0]
 80125f0:	4604      	mov	r4, r0
 80125f2:	b383      	cbz	r3, 8012656 <rcl_timer_is_ready+0x6e>
 80125f4:	460d      	mov	r5, r1
 80125f6:	b351      	cbz	r1, 801264e <rcl_timer_is_ready+0x66>
 80125f8:	f3bf 8f5b 	dmb	ish
 80125fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012600:	f3bf 8f5b 	dmb	ish
 8012604:	b953      	cbnz	r3, 801261c <rcl_timer_is_ready+0x34>
 8012606:	6803      	ldr	r3, [r0, #0]
 8012608:	4669      	mov	r1, sp
 801260a:	6818      	ldr	r0, [r3, #0]
 801260c:	f7ff fd42 	bl	8012094 <rcl_clock_get_now>
 8012610:	4606      	mov	r6, r0
 8012612:	b140      	cbz	r0, 8012626 <rcl_timer_is_ready+0x3e>
 8012614:	f240 3321 	movw	r3, #801	@ 0x321
 8012618:	4298      	cmp	r0, r3
 801261a:	d101      	bne.n	8012620 <rcl_timer_is_ready+0x38>
 801261c:	2600      	movs	r6, #0
 801261e:	702e      	strb	r6, [r5, #0]
 8012620:	4630      	mov	r0, r6
 8012622:	b002      	add	sp, #8
 8012624:	bd70      	pop	{r4, r5, r6, pc}
 8012626:	6820      	ldr	r0, [r4, #0]
 8012628:	2105      	movs	r1, #5
 801262a:	3028      	adds	r0, #40	@ 0x28
 801262c:	f001 fba4 	bl	8013d78 <__atomic_load_8>
 8012630:	9b00      	ldr	r3, [sp, #0]
 8012632:	1ac0      	subs	r0, r0, r3
 8012634:	9b01      	ldr	r3, [sp, #4]
 8012636:	eb61 0103 	sbc.w	r1, r1, r3
 801263a:	2801      	cmp	r0, #1
 801263c:	f171 0300 	sbcs.w	r3, r1, #0
 8012640:	bfb4      	ite	lt
 8012642:	2301      	movlt	r3, #1
 8012644:	2300      	movge	r3, #0
 8012646:	4630      	mov	r0, r6
 8012648:	702b      	strb	r3, [r5, #0]
 801264a:	b002      	add	sp, #8
 801264c:	bd70      	pop	{r4, r5, r6, pc}
 801264e:	260b      	movs	r6, #11
 8012650:	4630      	mov	r0, r6
 8012652:	b002      	add	sp, #8
 8012654:	bd70      	pop	{r4, r5, r6, pc}
 8012656:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801265a:	e7e1      	b.n	8012620 <rcl_timer_is_ready+0x38>

0801265c <rcl_timer_get_time_until_next_call>:
 801265c:	b570      	push	{r4, r5, r6, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	b330      	cbz	r0, 80126b0 <rcl_timer_get_time_until_next_call+0x54>
 8012662:	6803      	ldr	r3, [r0, #0]
 8012664:	4604      	mov	r4, r0
 8012666:	b33b      	cbz	r3, 80126b8 <rcl_timer_get_time_until_next_call+0x5c>
 8012668:	460d      	mov	r5, r1
 801266a:	b309      	cbz	r1, 80126b0 <rcl_timer_get_time_until_next_call+0x54>
 801266c:	f3bf 8f5b 	dmb	ish
 8012670:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012674:	f3bf 8f5b 	dmb	ish
 8012678:	b9ab      	cbnz	r3, 80126a6 <rcl_timer_get_time_until_next_call+0x4a>
 801267a:	6803      	ldr	r3, [r0, #0]
 801267c:	4669      	mov	r1, sp
 801267e:	6818      	ldr	r0, [r3, #0]
 8012680:	f7ff fd08 	bl	8012094 <rcl_clock_get_now>
 8012684:	4606      	mov	r6, r0
 8012686:	b958      	cbnz	r0, 80126a0 <rcl_timer_get_time_until_next_call+0x44>
 8012688:	6820      	ldr	r0, [r4, #0]
 801268a:	2105      	movs	r1, #5
 801268c:	3028      	adds	r0, #40	@ 0x28
 801268e:	f001 fb73 	bl	8013d78 <__atomic_load_8>
 8012692:	9b00      	ldr	r3, [sp, #0]
 8012694:	1ac0      	subs	r0, r0, r3
 8012696:	9b01      	ldr	r3, [sp, #4]
 8012698:	6028      	str	r0, [r5, #0]
 801269a:	eb61 0103 	sbc.w	r1, r1, r3
 801269e:	6069      	str	r1, [r5, #4]
 80126a0:	4630      	mov	r0, r6
 80126a2:	b002      	add	sp, #8
 80126a4:	bd70      	pop	{r4, r5, r6, pc}
 80126a6:	f240 3621 	movw	r6, #801	@ 0x321
 80126aa:	4630      	mov	r0, r6
 80126ac:	b002      	add	sp, #8
 80126ae:	bd70      	pop	{r4, r5, r6, pc}
 80126b0:	260b      	movs	r6, #11
 80126b2:	4630      	mov	r0, r6
 80126b4:	b002      	add	sp, #8
 80126b6:	bd70      	pop	{r4, r5, r6, pc}
 80126b8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80126bc:	e7f0      	b.n	80126a0 <rcl_timer_get_time_until_next_call+0x44>
 80126be:	bf00      	nop

080126c0 <rcl_timer_get_guard_condition>:
 80126c0:	b130      	cbz	r0, 80126d0 <rcl_timer_get_guard_condition+0x10>
 80126c2:	6800      	ldr	r0, [r0, #0]
 80126c4:	b120      	cbz	r0, 80126d0 <rcl_timer_get_guard_condition+0x10>
 80126c6:	68c3      	ldr	r3, [r0, #12]
 80126c8:	b10b      	cbz	r3, 80126ce <rcl_timer_get_guard_condition+0xe>
 80126ca:	3008      	adds	r0, #8
 80126cc:	4770      	bx	lr
 80126ce:	4618      	mov	r0, r3
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop

080126d4 <rcl_get_zero_initialized_wait_set>:
 80126d4:	b510      	push	{r4, lr}
 80126d6:	4c08      	ldr	r4, [pc, #32]	@ (80126f8 <rcl_get_zero_initialized_wait_set+0x24>)
 80126d8:	4686      	mov	lr, r0
 80126da:	4684      	mov	ip, r0
 80126dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126ee:	6823      	ldr	r3, [r4, #0]
 80126f0:	f8cc 3000 	str.w	r3, [ip]
 80126f4:	4670      	mov	r0, lr
 80126f6:	bd10      	pop	{r4, pc}
 80126f8:	080189ac 	.word	0x080189ac

080126fc <rcl_wait_set_is_valid>:
 80126fc:	b118      	cbz	r0, 8012706 <rcl_wait_set_is_valid+0xa>
 80126fe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012700:	3800      	subs	r0, #0
 8012702:	bf18      	it	ne
 8012704:	2001      	movne	r0, #1
 8012706:	4770      	bx	lr

08012708 <rcl_wait_set_fini>:
 8012708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801270c:	b082      	sub	sp, #8
 801270e:	2800      	cmp	r0, #0
 8012710:	f000 8095 	beq.w	801283e <rcl_wait_set_fini+0x136>
 8012714:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012716:	4604      	mov	r4, r0
 8012718:	2e00      	cmp	r6, #0
 801271a:	f000 808c 	beq.w	8012836 <rcl_wait_set_fini+0x12e>
 801271e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012720:	f002 fd56 	bl	80151d0 <rmw_destroy_wait_set>
 8012724:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012726:	1e06      	subs	r6, r0, #0
 8012728:	bf18      	it	ne
 801272a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801272e:	2d00      	cmp	r5, #0
 8012730:	f000 8081 	beq.w	8012836 <rcl_wait_set_fini+0x12e>
 8012734:	6820      	ldr	r0, [r4, #0]
 8012736:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801273a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801273c:	2700      	movs	r7, #0
 801273e:	6067      	str	r7, [r4, #4]
 8012740:	602f      	str	r7, [r5, #0]
 8012742:	b120      	cbz	r0, 801274e <rcl_wait_set_fini+0x46>
 8012744:	9101      	str	r1, [sp, #4]
 8012746:	47c0      	blx	r8
 8012748:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801274a:	9901      	ldr	r1, [sp, #4]
 801274c:	6027      	str	r7, [r4, #0]
 801274e:	68a8      	ldr	r0, [r5, #8]
 8012750:	b120      	cbz	r0, 801275c <rcl_wait_set_fini+0x54>
 8012752:	47c0      	blx	r8
 8012754:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012756:	2300      	movs	r3, #0
 8012758:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801275c:	68a0      	ldr	r0, [r4, #8]
 801275e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012760:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012762:	f04f 0800 	mov.w	r8, #0
 8012766:	f8c4 800c 	str.w	r8, [r4, #12]
 801276a:	f8c5 800c 	str.w	r8, [r5, #12]
 801276e:	b128      	cbz	r0, 801277c <rcl_wait_set_fini+0x74>
 8012770:	47b8      	blx	r7
 8012772:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012774:	f8c4 8008 	str.w	r8, [r4, #8]
 8012778:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801277a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801277c:	6968      	ldr	r0, [r5, #20]
 801277e:	f04f 0800 	mov.w	r8, #0
 8012782:	f8c5 8010 	str.w	r8, [r5, #16]
 8012786:	b128      	cbz	r0, 8012794 <rcl_wait_set_fini+0x8c>
 8012788:	47b8      	blx	r7
 801278a:	f8c5 8014 	str.w	r8, [r5, #20]
 801278e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012790:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012792:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012794:	6920      	ldr	r0, [r4, #16]
 8012796:	f04f 0800 	mov.w	r8, #0
 801279a:	f8c4 8014 	str.w	r8, [r4, #20]
 801279e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80127a2:	b128      	cbz	r0, 80127b0 <rcl_wait_set_fini+0xa8>
 80127a4:	47b8      	blx	r7
 80127a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80127a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80127ac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80127ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80127b0:	69a0      	ldr	r0, [r4, #24]
 80127b2:	f04f 0800 	mov.w	r8, #0
 80127b6:	f8c4 801c 	str.w	r8, [r4, #28]
 80127ba:	f8c5 8018 	str.w	r8, [r5, #24]
 80127be:	b128      	cbz	r0, 80127cc <rcl_wait_set_fini+0xc4>
 80127c0:	9101      	str	r1, [sp, #4]
 80127c2:	47b8      	blx	r7
 80127c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80127c6:	9901      	ldr	r1, [sp, #4]
 80127c8:	f8c4 8018 	str.w	r8, [r4, #24]
 80127cc:	6a28      	ldr	r0, [r5, #32]
 80127ce:	b120      	cbz	r0, 80127da <rcl_wait_set_fini+0xd2>
 80127d0:	47b8      	blx	r7
 80127d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80127d4:	2300      	movs	r3, #0
 80127d6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80127da:	6a20      	ldr	r0, [r4, #32]
 80127dc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80127e0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80127e2:	2700      	movs	r7, #0
 80127e4:	6267      	str	r7, [r4, #36]	@ 0x24
 80127e6:	626f      	str	r7, [r5, #36]	@ 0x24
 80127e8:	b120      	cbz	r0, 80127f4 <rcl_wait_set_fini+0xec>
 80127ea:	9101      	str	r1, [sp, #4]
 80127ec:	47c0      	blx	r8
 80127ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80127f0:	9901      	ldr	r1, [sp, #4]
 80127f2:	6227      	str	r7, [r4, #32]
 80127f4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80127f6:	b120      	cbz	r0, 8012802 <rcl_wait_set_fini+0xfa>
 80127f8:	47c0      	blx	r8
 80127fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80127fc:	2300      	movs	r3, #0
 80127fe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012802:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012804:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012808:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801280a:	2700      	movs	r7, #0
 801280c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801280e:	632f      	str	r7, [r5, #48]	@ 0x30
 8012810:	b120      	cbz	r0, 801281c <rcl_wait_set_fini+0x114>
 8012812:	9101      	str	r1, [sp, #4]
 8012814:	47c0      	blx	r8
 8012816:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012818:	9901      	ldr	r1, [sp, #4]
 801281a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801281c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801281e:	b120      	cbz	r0, 801282a <rcl_wait_set_fini+0x122>
 8012820:	47c0      	blx	r8
 8012822:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012824:	2300      	movs	r3, #0
 8012826:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801282a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801282c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801282e:	4628      	mov	r0, r5
 8012830:	4798      	blx	r3
 8012832:	2300      	movs	r3, #0
 8012834:	6323      	str	r3, [r4, #48]	@ 0x30
 8012836:	4630      	mov	r0, r6
 8012838:	b002      	add	sp, #8
 801283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801283e:	260b      	movs	r6, #11
 8012840:	4630      	mov	r0, r6
 8012842:	b002      	add	sp, #8
 8012844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012848 <rcl_wait_set_add_subscription>:
 8012848:	b318      	cbz	r0, 8012892 <rcl_wait_set_add_subscription+0x4a>
 801284a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801284c:	b570      	push	{r4, r5, r6, lr}
 801284e:	4604      	mov	r4, r0
 8012850:	b30b      	cbz	r3, 8012896 <rcl_wait_set_add_subscription+0x4e>
 8012852:	b319      	cbz	r1, 801289c <rcl_wait_set_add_subscription+0x54>
 8012854:	681d      	ldr	r5, [r3, #0]
 8012856:	6840      	ldr	r0, [r0, #4]
 8012858:	4285      	cmp	r5, r0
 801285a:	d217      	bcs.n	801288c <rcl_wait_set_add_subscription+0x44>
 801285c:	6820      	ldr	r0, [r4, #0]
 801285e:	1c6e      	adds	r6, r5, #1
 8012860:	601e      	str	r6, [r3, #0]
 8012862:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012866:	b102      	cbz	r2, 801286a <rcl_wait_set_add_subscription+0x22>
 8012868:	6015      	str	r5, [r2, #0]
 801286a:	4608      	mov	r0, r1
 801286c:	f7ff fb72 	bl	8011f54 <rcl_subscription_get_rmw_handle>
 8012870:	b150      	cbz	r0, 8012888 <rcl_wait_set_add_subscription+0x40>
 8012872:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012874:	6842      	ldr	r2, [r0, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801287c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801287e:	6853      	ldr	r3, [r2, #4]
 8012880:	3301      	adds	r3, #1
 8012882:	2000      	movs	r0, #0
 8012884:	6053      	str	r3, [r2, #4]
 8012886:	bd70      	pop	{r4, r5, r6, pc}
 8012888:	2001      	movs	r0, #1
 801288a:	bd70      	pop	{r4, r5, r6, pc}
 801288c:	f240 3086 	movw	r0, #902	@ 0x386
 8012890:	bd70      	pop	{r4, r5, r6, pc}
 8012892:	200b      	movs	r0, #11
 8012894:	4770      	bx	lr
 8012896:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	200b      	movs	r0, #11
 801289e:	bd70      	pop	{r4, r5, r6, pc}

080128a0 <rcl_wait_set_clear>:
 80128a0:	2800      	cmp	r0, #0
 80128a2:	d073      	beq.n	801298c <rcl_wait_set_clear+0xec>
 80128a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80128a6:	b510      	push	{r4, lr}
 80128a8:	4604      	mov	r4, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d070      	beq.n	8012990 <rcl_wait_set_clear+0xf0>
 80128ae:	6800      	ldr	r0, [r0, #0]
 80128b0:	b138      	cbz	r0, 80128c2 <rcl_wait_set_clear+0x22>
 80128b2:	6862      	ldr	r2, [r4, #4]
 80128b4:	2100      	movs	r1, #0
 80128b6:	0092      	lsls	r2, r2, #2
 80128b8:	f004 fbac 	bl	8017014 <memset>
 80128bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128be:	2200      	movs	r2, #0
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	68a0      	ldr	r0, [r4, #8]
 80128c4:	b138      	cbz	r0, 80128d6 <rcl_wait_set_clear+0x36>
 80128c6:	68e2      	ldr	r2, [r4, #12]
 80128c8:	2100      	movs	r1, #0
 80128ca:	0092      	lsls	r2, r2, #2
 80128cc:	f004 fba2 	bl	8017014 <memset>
 80128d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128d2:	2200      	movs	r2, #0
 80128d4:	60da      	str	r2, [r3, #12]
 80128d6:	69a0      	ldr	r0, [r4, #24]
 80128d8:	b138      	cbz	r0, 80128ea <rcl_wait_set_clear+0x4a>
 80128da:	69e2      	ldr	r2, [r4, #28]
 80128dc:	2100      	movs	r1, #0
 80128de:	0092      	lsls	r2, r2, #2
 80128e0:	f004 fb98 	bl	8017014 <memset>
 80128e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128e6:	2200      	movs	r2, #0
 80128e8:	619a      	str	r2, [r3, #24]
 80128ea:	6a20      	ldr	r0, [r4, #32]
 80128ec:	b138      	cbz	r0, 80128fe <rcl_wait_set_clear+0x5e>
 80128ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80128f0:	2100      	movs	r1, #0
 80128f2:	0092      	lsls	r2, r2, #2
 80128f4:	f004 fb8e 	bl	8017014 <memset>
 80128f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128fa:	2200      	movs	r2, #0
 80128fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80128fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012900:	b138      	cbz	r0, 8012912 <rcl_wait_set_clear+0x72>
 8012902:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012904:	2100      	movs	r1, #0
 8012906:	0092      	lsls	r2, r2, #2
 8012908:	f004 fb84 	bl	8017014 <memset>
 801290c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801290e:	2200      	movs	r2, #0
 8012910:	631a      	str	r2, [r3, #48]	@ 0x30
 8012912:	6920      	ldr	r0, [r4, #16]
 8012914:	b138      	cbz	r0, 8012926 <rcl_wait_set_clear+0x86>
 8012916:	6962      	ldr	r2, [r4, #20]
 8012918:	2100      	movs	r1, #0
 801291a:	0092      	lsls	r2, r2, #2
 801291c:	f004 fb7a 	bl	8017014 <memset>
 8012920:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012922:	2200      	movs	r2, #0
 8012924:	641a      	str	r2, [r3, #64]	@ 0x40
 8012926:	6898      	ldr	r0, [r3, #8]
 8012928:	b138      	cbz	r0, 801293a <rcl_wait_set_clear+0x9a>
 801292a:	685a      	ldr	r2, [r3, #4]
 801292c:	2100      	movs	r1, #0
 801292e:	0092      	lsls	r2, r2, #2
 8012930:	f004 fb70 	bl	8017014 <memset>
 8012934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012936:	2200      	movs	r2, #0
 8012938:	605a      	str	r2, [r3, #4]
 801293a:	6958      	ldr	r0, [r3, #20]
 801293c:	b138      	cbz	r0, 801294e <rcl_wait_set_clear+0xae>
 801293e:	691a      	ldr	r2, [r3, #16]
 8012940:	2100      	movs	r1, #0
 8012942:	0092      	lsls	r2, r2, #2
 8012944:	f004 fb66 	bl	8017014 <memset>
 8012948:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801294a:	2200      	movs	r2, #0
 801294c:	611a      	str	r2, [r3, #16]
 801294e:	6a18      	ldr	r0, [r3, #32]
 8012950:	b138      	cbz	r0, 8012962 <rcl_wait_set_clear+0xc2>
 8012952:	69da      	ldr	r2, [r3, #28]
 8012954:	2100      	movs	r1, #0
 8012956:	0092      	lsls	r2, r2, #2
 8012958:	f004 fb5c 	bl	8017014 <memset>
 801295c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801295e:	2200      	movs	r2, #0
 8012960:	61da      	str	r2, [r3, #28]
 8012962:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012964:	b138      	cbz	r0, 8012976 <rcl_wait_set_clear+0xd6>
 8012966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012968:	2100      	movs	r1, #0
 801296a:	0092      	lsls	r2, r2, #2
 801296c:	f004 fb52 	bl	8017014 <memset>
 8012970:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012972:	2200      	movs	r2, #0
 8012974:	629a      	str	r2, [r3, #40]	@ 0x28
 8012976:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012978:	b138      	cbz	r0, 801298a <rcl_wait_set_clear+0xea>
 801297a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801297c:	2100      	movs	r1, #0
 801297e:	0092      	lsls	r2, r2, #2
 8012980:	f004 fb48 	bl	8017014 <memset>
 8012984:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012986:	2000      	movs	r0, #0
 8012988:	6358      	str	r0, [r3, #52]	@ 0x34
 801298a:	bd10      	pop	{r4, pc}
 801298c:	200b      	movs	r0, #11
 801298e:	4770      	bx	lr
 8012990:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012994:	bd10      	pop	{r4, pc}
 8012996:	bf00      	nop

08012998 <rcl_wait_set_resize>:
 8012998:	2800      	cmp	r0, #0
 801299a:	f000 8185 	beq.w	8012ca8 <rcl_wait_set_resize+0x310>
 801299e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80129a4:	b083      	sub	sp, #12
 80129a6:	4605      	mov	r5, r0
 80129a8:	2c00      	cmp	r4, #0
 80129aa:	f000 817f 	beq.w	8012cac <rcl_wait_set_resize+0x314>
 80129ae:	f04f 0900 	mov.w	r9, #0
 80129b2:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80129b6:	461f      	mov	r7, r3
 80129b8:	4688      	mov	r8, r1
 80129ba:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80129be:	4616      	mov	r6, r2
 80129c0:	f8c0 9004 	str.w	r9, [r0, #4]
 80129c4:	f8c4 9000 	str.w	r9, [r4]
 80129c8:	2900      	cmp	r1, #0
 80129ca:	f000 80bd 	beq.w	8012b48 <rcl_wait_set_resize+0x1b0>
 80129ce:	008c      	lsls	r4, r1, #2
 80129d0:	6800      	ldr	r0, [r0, #0]
 80129d2:	9301      	str	r3, [sp, #4]
 80129d4:	4652      	mov	r2, sl
 80129d6:	4621      	mov	r1, r4
 80129d8:	4798      	blx	r3
 80129da:	9b01      	ldr	r3, [sp, #4]
 80129dc:	6028      	str	r0, [r5, #0]
 80129de:	2800      	cmp	r0, #0
 80129e0:	f000 80cb 	beq.w	8012b7a <rcl_wait_set_resize+0x1e2>
 80129e4:	4622      	mov	r2, r4
 80129e6:	4649      	mov	r1, r9
 80129e8:	9301      	str	r3, [sp, #4]
 80129ea:	f004 fb13 	bl	8017014 <memset>
 80129ee:	f8c5 8004 	str.w	r8, [r5, #4]
 80129f2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80129f6:	9b01      	ldr	r3, [sp, #4]
 80129f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80129fc:	f8c8 9004 	str.w	r9, [r8, #4]
 8012a00:	4652      	mov	r2, sl
 8012a02:	4621      	mov	r1, r4
 8012a04:	4798      	blx	r3
 8012a06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a08:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a0c:	689b      	ldr	r3, [r3, #8]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	f000 80ac 	beq.w	8012b6c <rcl_wait_set_resize+0x1d4>
 8012a14:	4622      	mov	r2, r4
 8012a16:	4649      	mov	r1, r9
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f004 fafb 	bl	8017014 <memset>
 8012a1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a20:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012a24:	f04f 0800 	mov.w	r8, #0
 8012a28:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8012a2c:	f8c5 800c 	str.w	r8, [r5, #12]
 8012a30:	f8c4 800c 	str.w	r8, [r4, #12]
 8012a34:	2e00      	cmp	r6, #0
 8012a36:	f040 80a4 	bne.w	8012b82 <rcl_wait_set_resize+0x1ea>
 8012a3a:	68a8      	ldr	r0, [r5, #8]
 8012a3c:	b128      	cbz	r0, 8012a4a <rcl_wait_set_resize+0xb2>
 8012a3e:	4649      	mov	r1, r9
 8012a40:	4790      	blx	r2
 8012a42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a44:	60ae      	str	r6, [r5, #8]
 8012a46:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012a4a:	f04f 0800 	mov.w	r8, #0
 8012a4e:	19f6      	adds	r6, r6, r7
 8012a50:	f8c4 8010 	str.w	r8, [r4, #16]
 8012a54:	f040 80ac 	bne.w	8012bb0 <rcl_wait_set_resize+0x218>
 8012a58:	6960      	ldr	r0, [r4, #20]
 8012a5a:	b130      	cbz	r0, 8012a6a <rcl_wait_set_resize+0xd2>
 8012a5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8012a5e:	4649      	mov	r1, r9
 8012a60:	4798      	blx	r3
 8012a62:	6166      	str	r6, [r4, #20]
 8012a64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a66:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012a6a:	2600      	movs	r6, #0
 8012a6c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012a70:	616e      	str	r6, [r5, #20]
 8012a72:	6426      	str	r6, [r4, #64]	@ 0x40
 8012a74:	2f00      	cmp	r7, #0
 8012a76:	f040 80ad 	bne.w	8012bd4 <rcl_wait_set_resize+0x23c>
 8012a7a:	6928      	ldr	r0, [r5, #16]
 8012a7c:	b138      	cbz	r0, 8012a8e <rcl_wait_set_resize+0xf6>
 8012a7e:	4649      	mov	r1, r9
 8012a80:	47d0      	blx	sl
 8012a82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a84:	612f      	str	r7, [r5, #16]
 8012a86:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012a8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a90:	2600      	movs	r6, #0
 8012a92:	61ee      	str	r6, [r5, #28]
 8012a94:	61a6      	str	r6, [r4, #24]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f040 80af 	bne.w	8012bfa <rcl_wait_set_resize+0x262>
 8012a9c:	69a8      	ldr	r0, [r5, #24]
 8012a9e:	b120      	cbz	r0, 8012aaa <rcl_wait_set_resize+0x112>
 8012aa0:	4649      	mov	r1, r9
 8012aa2:	47d0      	blx	sl
 8012aa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012aa6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012aa8:	61ab      	str	r3, [r5, #24]
 8012aaa:	6a20      	ldr	r0, [r4, #32]
 8012aac:	b128      	cbz	r0, 8012aba <rcl_wait_set_resize+0x122>
 8012aae:	4649      	mov	r1, r9
 8012ab0:	47d0      	blx	sl
 8012ab2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012aba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012abc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012abe:	2600      	movs	r6, #0
 8012ac0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012ac4:	626e      	str	r6, [r5, #36]	@ 0x24
 8012ac6:	6266      	str	r6, [r4, #36]	@ 0x24
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	f000 80b6 	beq.w	8012c3a <rcl_wait_set_resize+0x2a2>
 8012ace:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012ad2:	6a28      	ldr	r0, [r5, #32]
 8012ad4:	463a      	mov	r2, r7
 8012ad6:	4651      	mov	r1, sl
 8012ad8:	47c8      	blx	r9
 8012ada:	6228      	str	r0, [r5, #32]
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d04c      	beq.n	8012b7a <rcl_wait_set_resize+0x1e2>
 8012ae0:	4652      	mov	r2, sl
 8012ae2:	4631      	mov	r1, r6
 8012ae4:	f004 fa96 	bl	8017014 <memset>
 8012ae8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012aec:	626b      	str	r3, [r5, #36]	@ 0x24
 8012aee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012af0:	62a6      	str	r6, [r4, #40]	@ 0x28
 8012af2:	463a      	mov	r2, r7
 8012af4:	4651      	mov	r1, sl
 8012af6:	47c8      	blx	r9
 8012af8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012afa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012afc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8012afe:	2c00      	cmp	r4, #0
 8012b00:	f000 80f0 	beq.w	8012ce4 <rcl_wait_set_resize+0x34c>
 8012b04:	4620      	mov	r0, r4
 8012b06:	4652      	mov	r2, sl
 8012b08:	4631      	mov	r1, r6
 8012b0a:	f004 fa83 	bl	8017014 <memset>
 8012b0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b12:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012b14:	2600      	movs	r6, #0
 8012b16:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012b1a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8012b1c:	6326      	str	r6, [r4, #48]	@ 0x30
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f040 809d 	bne.w	8012c5e <rcl_wait_set_resize+0x2c6>
 8012b24:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012b26:	b120      	cbz	r0, 8012b32 <rcl_wait_set_resize+0x19a>
 8012b28:	4639      	mov	r1, r7
 8012b2a:	47c0      	blx	r8
 8012b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b30:	62ab      	str	r3, [r5, #40]	@ 0x28
 8012b32:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012b34:	b310      	cbz	r0, 8012b7c <rcl_wait_set_resize+0x1e4>
 8012b36:	4639      	mov	r1, r7
 8012b38:	47c0      	blx	r8
 8012b3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012b3c:	2000      	movs	r0, #0
 8012b3e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8012b42:	b003      	add	sp, #12
 8012b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b48:	6800      	ldr	r0, [r0, #0]
 8012b4a:	b120      	cbz	r0, 8012b56 <rcl_wait_set_resize+0x1be>
 8012b4c:	4651      	mov	r1, sl
 8012b4e:	47d8      	blx	fp
 8012b50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b52:	f8c5 8000 	str.w	r8, [r5]
 8012b56:	68a0      	ldr	r0, [r4, #8]
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	f43f af61 	beq.w	8012a20 <rcl_wait_set_resize+0x88>
 8012b5e:	4651      	mov	r1, sl
 8012b60:	47d8      	blx	fp
 8012b62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b64:	2300      	movs	r3, #0
 8012b66:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012b6a:	e759      	b.n	8012a20 <rcl_wait_set_resize+0x88>
 8012b6c:	6828      	ldr	r0, [r5, #0]
 8012b6e:	9301      	str	r3, [sp, #4]
 8012b70:	4651      	mov	r1, sl
 8012b72:	47d8      	blx	fp
 8012b74:	9b01      	ldr	r3, [sp, #4]
 8012b76:	e9c5 3300 	strd	r3, r3, [r5]
 8012b7a:	200a      	movs	r0, #10
 8012b7c:	b003      	add	sp, #12
 8012b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b82:	00b4      	lsls	r4, r6, #2
 8012b84:	68a8      	ldr	r0, [r5, #8]
 8012b86:	464a      	mov	r2, r9
 8012b88:	4621      	mov	r1, r4
 8012b8a:	4798      	blx	r3
 8012b8c:	60a8      	str	r0, [r5, #8]
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d0f3      	beq.n	8012b7a <rcl_wait_set_resize+0x1e2>
 8012b92:	4622      	mov	r2, r4
 8012b94:	4641      	mov	r1, r8
 8012b96:	f004 fa3d 	bl	8017014 <memset>
 8012b9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b9c:	60ee      	str	r6, [r5, #12]
 8012b9e:	f04f 0800 	mov.w	r8, #0
 8012ba2:	19f6      	adds	r6, r6, r7
 8012ba4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012ba8:	f8c4 8010 	str.w	r8, [r4, #16]
 8012bac:	f43f af54 	beq.w	8012a58 <rcl_wait_set_resize+0xc0>
 8012bb0:	00b6      	lsls	r6, r6, #2
 8012bb2:	464a      	mov	r2, r9
 8012bb4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012bb6:	6960      	ldr	r0, [r4, #20]
 8012bb8:	4631      	mov	r1, r6
 8012bba:	4798      	blx	r3
 8012bbc:	4681      	mov	r9, r0
 8012bbe:	6160      	str	r0, [r4, #20]
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	d076      	beq.n	8012cb2 <rcl_wait_set_resize+0x31a>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	4641      	mov	r1, r8
 8012bc8:	f004 fa24 	bl	8017014 <memset>
 8012bcc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012bce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012bd2:	e74a      	b.n	8012a6a <rcl_wait_set_resize+0xd2>
 8012bd4:	00bc      	lsls	r4, r7, #2
 8012bd6:	6928      	ldr	r0, [r5, #16]
 8012bd8:	464a      	mov	r2, r9
 8012bda:	4621      	mov	r1, r4
 8012bdc:	47c0      	blx	r8
 8012bde:	6128      	str	r0, [r5, #16]
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d0ca      	beq.n	8012b7a <rcl_wait_set_resize+0x1e2>
 8012be4:	4622      	mov	r2, r4
 8012be6:	4631      	mov	r1, r6
 8012be8:	f004 fa14 	bl	8017014 <memset>
 8012bec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012bee:	616f      	str	r7, [r5, #20]
 8012bf0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012bf4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012bf8:	e749      	b.n	8012a8e <rcl_wait_set_resize+0xf6>
 8012bfa:	009c      	lsls	r4, r3, #2
 8012bfc:	69a8      	ldr	r0, [r5, #24]
 8012bfe:	464a      	mov	r2, r9
 8012c00:	4621      	mov	r1, r4
 8012c02:	47c0      	blx	r8
 8012c04:	61a8      	str	r0, [r5, #24]
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d0b7      	beq.n	8012b7a <rcl_wait_set_resize+0x1e2>
 8012c0a:	4622      	mov	r2, r4
 8012c0c:	4631      	mov	r1, r6
 8012c0e:	f004 fa01 	bl	8017014 <memset>
 8012c12:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8012c14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c16:	61eb      	str	r3, [r5, #28]
 8012c18:	6a38      	ldr	r0, [r7, #32]
 8012c1a:	61fe      	str	r6, [r7, #28]
 8012c1c:	464a      	mov	r2, r9
 8012c1e:	4621      	mov	r1, r4
 8012c20:	47c0      	blx	r8
 8012c22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012c24:	6238      	str	r0, [r7, #32]
 8012c26:	6a1f      	ldr	r7, [r3, #32]
 8012c28:	2f00      	cmp	r7, #0
 8012c2a:	d054      	beq.n	8012cd6 <rcl_wait_set_resize+0x33e>
 8012c2c:	4622      	mov	r2, r4
 8012c2e:	4631      	mov	r1, r6
 8012c30:	4638      	mov	r0, r7
 8012c32:	f004 f9ef 	bl	8017014 <memset>
 8012c36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012c38:	e73f      	b.n	8012aba <rcl_wait_set_resize+0x122>
 8012c3a:	6a28      	ldr	r0, [r5, #32]
 8012c3c:	b120      	cbz	r0, 8012c48 <rcl_wait_set_resize+0x2b0>
 8012c3e:	4639      	mov	r1, r7
 8012c40:	47c0      	blx	r8
 8012c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012c46:	622b      	str	r3, [r5, #32]
 8012c48:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	f43f af60 	beq.w	8012b10 <rcl_wait_set_resize+0x178>
 8012c50:	4639      	mov	r1, r7
 8012c52:	47c0      	blx	r8
 8012c54:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012c56:	2300      	movs	r3, #0
 8012c58:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8012c5c:	e758      	b.n	8012b10 <rcl_wait_set_resize+0x178>
 8012c5e:	009c      	lsls	r4, r3, #2
 8012c60:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012c62:	463a      	mov	r2, r7
 8012c64:	4621      	mov	r1, r4
 8012c66:	47c8      	blx	r9
 8012c68:	62a8      	str	r0, [r5, #40]	@ 0x28
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	d085      	beq.n	8012b7a <rcl_wait_set_resize+0x1e2>
 8012c6e:	4622      	mov	r2, r4
 8012c70:	4631      	mov	r1, r6
 8012c72:	f004 f9cf 	bl	8017014 <memset>
 8012c76:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8012c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c7c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8012c7e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012c82:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8012c86:	463a      	mov	r2, r7
 8012c88:	4621      	mov	r1, r4
 8012c8a:	47c8      	blx	r9
 8012c8c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012c8e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c94:	b36b      	cbz	r3, 8012cf2 <rcl_wait_set_resize+0x35a>
 8012c96:	4622      	mov	r2, r4
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f004 f9ba 	bl	8017014 <memset>
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	b003      	add	sp, #12
 8012ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca8:	200b      	movs	r0, #11
 8012caa:	4770      	bx	lr
 8012cac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012cb0:	e764      	b.n	8012b7c <rcl_wait_set_resize+0x1e4>
 8012cb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012cb4:	68a8      	ldr	r0, [r5, #8]
 8012cb6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cba:	4798      	blx	r3
 8012cbc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012cbe:	6928      	ldr	r0, [r5, #16]
 8012cc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012cc2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012cc4:	f8c5 900c 	str.w	r9, [r5, #12]
 8012cc8:	f8c5 9008 	str.w	r9, [r5, #8]
 8012ccc:	4790      	blx	r2
 8012cce:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012cd2:	200a      	movs	r0, #10
 8012cd4:	e752      	b.n	8012b7c <rcl_wait_set_resize+0x1e4>
 8012cd6:	69a8      	ldr	r0, [r5, #24]
 8012cd8:	4649      	mov	r1, r9
 8012cda:	47d0      	blx	sl
 8012cdc:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012ce0:	200a      	movs	r0, #10
 8012ce2:	e74b      	b.n	8012b7c <rcl_wait_set_resize+0x1e4>
 8012ce4:	6a28      	ldr	r0, [r5, #32]
 8012ce6:	4639      	mov	r1, r7
 8012ce8:	47c0      	blx	r8
 8012cea:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012cee:	200a      	movs	r0, #10
 8012cf0:	e744      	b.n	8012b7c <rcl_wait_set_resize+0x1e4>
 8012cf2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012cf4:	9301      	str	r3, [sp, #4]
 8012cf6:	4639      	mov	r1, r7
 8012cf8:	47c0      	blx	r8
 8012cfa:	9b01      	ldr	r3, [sp, #4]
 8012cfc:	200a      	movs	r0, #10
 8012cfe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012d02:	e73b      	b.n	8012b7c <rcl_wait_set_resize+0x1e4>

08012d04 <rcl_wait_set_init>:
 8012d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d08:	b084      	sub	sp, #16
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	a810      	add	r0, sp, #64	@ 0x40
 8012d0e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8012d12:	460f      	mov	r7, r1
 8012d14:	4690      	mov	r8, r2
 8012d16:	4699      	mov	r9, r3
 8012d18:	f7f8 fa44 	bl	800b1a4 <rcutils_allocator_is_valid>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d06b      	beq.n	8012df8 <rcl_wait_set_init+0xf4>
 8012d20:	2c00      	cmp	r4, #0
 8012d22:	d069      	beq.n	8012df8 <rcl_wait_set_init+0xf4>
 8012d24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d26:	b125      	cbz	r5, 8012d32 <rcl_wait_set_init+0x2e>
 8012d28:	2564      	movs	r5, #100	@ 0x64
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	b004      	add	sp, #16
 8012d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d32:	f1ba 0f00 	cmp.w	sl, #0
 8012d36:	d05f      	beq.n	8012df8 <rcl_wait_set_init+0xf4>
 8012d38:	4650      	mov	r0, sl
 8012d3a:	f7fe fbad 	bl	8011498 <rcl_context_is_valid>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d067      	beq.n	8012e12 <rcl_wait_set_init+0x10e>
 8012d42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d44:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012d46:	205c      	movs	r0, #92	@ 0x5c
 8012d48:	4798      	blx	r3
 8012d4a:	6320      	str	r0, [r4, #48]	@ 0x30
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d062      	beq.n	8012e16 <rcl_wait_set_init+0x112>
 8012d50:	4629      	mov	r1, r5
 8012d52:	225c      	movs	r2, #92	@ 0x5c
 8012d54:	f004 f95e 	bl	8017014 <memset>
 8012d58:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012d5c:	eb03 0e02 	add.w	lr, r3, r2
 8012d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d62:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012d64:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012d68:	449e      	add	lr, r3
 8012d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d6e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012d72:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012d76:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012d7a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012d7e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012d82:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8012d86:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012d8a:	f8da a000 	ldr.w	sl, [sl]
 8012d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d90:	44c6      	add	lr, r8
 8012d92:	f8dc 3000 	ldr.w	r3, [ip]
 8012d96:	602b      	str	r3, [r5, #0]
 8012d98:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012d9c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012da0:	f002 fa0c 	bl	80151bc <rmw_create_wait_set>
 8012da4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012da6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8012da8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012daa:	b350      	cbz	r0, 8012e02 <rcl_wait_set_init+0xfe>
 8012dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dae:	9302      	str	r3, [sp, #8]
 8012db0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012db2:	9301      	str	r3, [sp, #4]
 8012db4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	4642      	mov	r2, r8
 8012dba:	464b      	mov	r3, r9
 8012dbc:	4639      	mov	r1, r7
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f7ff fdea 	bl	8012998 <rcl_wait_set_resize>
 8012dc4:	4605      	mov	r5, r0
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	d0af      	beq.n	8012d2a <rcl_wait_set_init+0x26>
 8012dca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012dcc:	bb2b      	cbnz	r3, 8012e1a <rcl_wait_set_init+0x116>
 8012dce:	2600      	movs	r6, #0
 8012dd0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012dd4:	9600      	str	r6, [sp, #0]
 8012dd6:	4633      	mov	r3, r6
 8012dd8:	4632      	mov	r2, r6
 8012dda:	4631      	mov	r1, r6
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f7ff fddb 	bl	8012998 <rcl_wait_set_resize>
 8012de2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d0a0      	beq.n	8012d2a <rcl_wait_set_init+0x26>
 8012de8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012dea:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012dec:	4798      	blx	r3
 8012dee:	4628      	mov	r0, r5
 8012df0:	6326      	str	r6, [r4, #48]	@ 0x30
 8012df2:	b004      	add	sp, #16
 8012df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012df8:	250b      	movs	r5, #11
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	b004      	add	sp, #16
 8012dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e02:	2501      	movs	r5, #1
 8012e04:	f002 f9e4 	bl	80151d0 <rmw_destroy_wait_set>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	bf18      	it	ne
 8012e0c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012e10:	e7dd      	b.n	8012dce <rcl_wait_set_init+0xca>
 8012e12:	2565      	movs	r5, #101	@ 0x65
 8012e14:	e789      	b.n	8012d2a <rcl_wait_set_init+0x26>
 8012e16:	250a      	movs	r5, #10
 8012e18:	e787      	b.n	8012d2a <rcl_wait_set_init+0x26>
 8012e1a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012e1c:	e7f2      	b.n	8012e04 <rcl_wait_set_init+0x100>
 8012e1e:	bf00      	nop

08012e20 <rcl_wait_set_add_guard_condition>:
 8012e20:	b318      	cbz	r0, 8012e6a <rcl_wait_set_add_guard_condition+0x4a>
 8012e22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012e24:	b570      	push	{r4, r5, r6, lr}
 8012e26:	4604      	mov	r4, r0
 8012e28:	b30b      	cbz	r3, 8012e6e <rcl_wait_set_add_guard_condition+0x4e>
 8012e2a:	b319      	cbz	r1, 8012e74 <rcl_wait_set_add_guard_condition+0x54>
 8012e2c:	68dd      	ldr	r5, [r3, #12]
 8012e2e:	68c0      	ldr	r0, [r0, #12]
 8012e30:	4285      	cmp	r5, r0
 8012e32:	d217      	bcs.n	8012e64 <rcl_wait_set_add_guard_condition+0x44>
 8012e34:	68a0      	ldr	r0, [r4, #8]
 8012e36:	1c6e      	adds	r6, r5, #1
 8012e38:	60de      	str	r6, [r3, #12]
 8012e3a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012e3e:	b102      	cbz	r2, 8012e42 <rcl_wait_set_add_guard_condition+0x22>
 8012e40:	6015      	str	r5, [r2, #0]
 8012e42:	4608      	mov	r0, r1
 8012e44:	f003 fbbe 	bl	80165c4 <rcl_guard_condition_get_rmw_handle>
 8012e48:	b150      	cbz	r0, 8012e60 <rcl_wait_set_add_guard_condition+0x40>
 8012e4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e4c:	6842      	ldr	r2, [r0, #4]
 8012e4e:	695b      	ldr	r3, [r3, #20]
 8012e50:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e54:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012e56:	6913      	ldr	r3, [r2, #16]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	6113      	str	r3, [r2, #16]
 8012e5e:	bd70      	pop	{r4, r5, r6, pc}
 8012e60:	2001      	movs	r0, #1
 8012e62:	bd70      	pop	{r4, r5, r6, pc}
 8012e64:	f240 3086 	movw	r0, #902	@ 0x386
 8012e68:	bd70      	pop	{r4, r5, r6, pc}
 8012e6a:	200b      	movs	r0, #11
 8012e6c:	4770      	bx	lr
 8012e6e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012e72:	bd70      	pop	{r4, r5, r6, pc}
 8012e74:	200b      	movs	r0, #11
 8012e76:	bd70      	pop	{r4, r5, r6, pc}

08012e78 <rcl_wait_set_add_timer>:
 8012e78:	b328      	cbz	r0, 8012ec6 <rcl_wait_set_add_timer+0x4e>
 8012e7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012e7c:	b570      	push	{r4, r5, r6, lr}
 8012e7e:	4604      	mov	r4, r0
 8012e80:	b31b      	cbz	r3, 8012eca <rcl_wait_set_add_timer+0x52>
 8012e82:	b329      	cbz	r1, 8012ed0 <rcl_wait_set_add_timer+0x58>
 8012e84:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012e86:	6965      	ldr	r5, [r4, #20]
 8012e88:	42a8      	cmp	r0, r5
 8012e8a:	d219      	bcs.n	8012ec0 <rcl_wait_set_add_timer+0x48>
 8012e8c:	6925      	ldr	r5, [r4, #16]
 8012e8e:	1c46      	adds	r6, r0, #1
 8012e90:	641e      	str	r6, [r3, #64]	@ 0x40
 8012e92:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012e96:	b102      	cbz	r2, 8012e9a <rcl_wait_set_add_timer+0x22>
 8012e98:	6010      	str	r0, [r2, #0]
 8012e9a:	4608      	mov	r0, r1
 8012e9c:	f7ff fc10 	bl	80126c0 <rcl_timer_get_guard_condition>
 8012ea0:	b168      	cbz	r0, 8012ebe <rcl_wait_set_add_timer+0x46>
 8012ea2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012ea4:	68e3      	ldr	r3, [r4, #12]
 8012ea6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012ea8:	3b01      	subs	r3, #1
 8012eaa:	441d      	add	r5, r3
 8012eac:	f003 fb8a 	bl	80165c4 <rcl_guard_condition_get_rmw_handle>
 8012eb0:	b180      	cbz	r0, 8012ed4 <rcl_wait_set_add_timer+0x5c>
 8012eb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012eb4:	6842      	ldr	r2, [r0, #4]
 8012eb6:	695b      	ldr	r3, [r3, #20]
 8012eb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	bd70      	pop	{r4, r5, r6, pc}
 8012ec0:	f240 3086 	movw	r0, #902	@ 0x386
 8012ec4:	bd70      	pop	{r4, r5, r6, pc}
 8012ec6:	200b      	movs	r0, #11
 8012ec8:	4770      	bx	lr
 8012eca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012ece:	bd70      	pop	{r4, r5, r6, pc}
 8012ed0:	200b      	movs	r0, #11
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}
 8012ed4:	2001      	movs	r0, #1
 8012ed6:	bd70      	pop	{r4, r5, r6, pc}

08012ed8 <rcl_wait_set_add_client>:
 8012ed8:	b318      	cbz	r0, 8012f22 <rcl_wait_set_add_client+0x4a>
 8012eda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012edc:	b570      	push	{r4, r5, r6, lr}
 8012ede:	4604      	mov	r4, r0
 8012ee0:	b30b      	cbz	r3, 8012f26 <rcl_wait_set_add_client+0x4e>
 8012ee2:	b319      	cbz	r1, 8012f2c <rcl_wait_set_add_client+0x54>
 8012ee4:	699d      	ldr	r5, [r3, #24]
 8012ee6:	69c0      	ldr	r0, [r0, #28]
 8012ee8:	4285      	cmp	r5, r0
 8012eea:	d217      	bcs.n	8012f1c <rcl_wait_set_add_client+0x44>
 8012eec:	69a0      	ldr	r0, [r4, #24]
 8012eee:	1c6e      	adds	r6, r5, #1
 8012ef0:	619e      	str	r6, [r3, #24]
 8012ef2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012ef6:	b102      	cbz	r2, 8012efa <rcl_wait_set_add_client+0x22>
 8012ef8:	6015      	str	r5, [r2, #0]
 8012efa:	4608      	mov	r0, r1
 8012efc:	f7fe fa1e 	bl	801133c <rcl_client_get_rmw_handle>
 8012f00:	b150      	cbz	r0, 8012f18 <rcl_wait_set_add_client+0x40>
 8012f02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f04:	6842      	ldr	r2, [r0, #4]
 8012f06:	6a1b      	ldr	r3, [r3, #32]
 8012f08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f0c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012f0e:	69d3      	ldr	r3, [r2, #28]
 8012f10:	3301      	adds	r3, #1
 8012f12:	2000      	movs	r0, #0
 8012f14:	61d3      	str	r3, [r2, #28]
 8012f16:	bd70      	pop	{r4, r5, r6, pc}
 8012f18:	2001      	movs	r0, #1
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	f240 3086 	movw	r0, #902	@ 0x386
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
 8012f22:	200b      	movs	r0, #11
 8012f24:	4770      	bx	lr
 8012f26:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	200b      	movs	r0, #11
 8012f2e:	bd70      	pop	{r4, r5, r6, pc}

08012f30 <rcl_wait_set_add_service>:
 8012f30:	b318      	cbz	r0, 8012f7a <rcl_wait_set_add_service+0x4a>
 8012f32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012f34:	b570      	push	{r4, r5, r6, lr}
 8012f36:	4604      	mov	r4, r0
 8012f38:	b30b      	cbz	r3, 8012f7e <rcl_wait_set_add_service+0x4e>
 8012f3a:	b319      	cbz	r1, 8012f84 <rcl_wait_set_add_service+0x54>
 8012f3c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012f3e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012f40:	4285      	cmp	r5, r0
 8012f42:	d217      	bcs.n	8012f74 <rcl_wait_set_add_service+0x44>
 8012f44:	6a20      	ldr	r0, [r4, #32]
 8012f46:	1c6e      	adds	r6, r5, #1
 8012f48:	625e      	str	r6, [r3, #36]	@ 0x24
 8012f4a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012f4e:	b102      	cbz	r2, 8012f52 <rcl_wait_set_add_service+0x22>
 8012f50:	6015      	str	r5, [r2, #0]
 8012f52:	4608      	mov	r0, r1
 8012f54:	f7fe fe62 	bl	8011c1c <rcl_service_get_rmw_handle>
 8012f58:	b150      	cbz	r0, 8012f70 <rcl_wait_set_add_service+0x40>
 8012f5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f5c:	6842      	ldr	r2, [r0, #4]
 8012f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f64:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012f66:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012f68:	3301      	adds	r3, #1
 8012f6a:	2000      	movs	r0, #0
 8012f6c:	6293      	str	r3, [r2, #40]	@ 0x28
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
 8012f70:	2001      	movs	r0, #1
 8012f72:	bd70      	pop	{r4, r5, r6, pc}
 8012f74:	f240 3086 	movw	r0, #902	@ 0x386
 8012f78:	bd70      	pop	{r4, r5, r6, pc}
 8012f7a:	200b      	movs	r0, #11
 8012f7c:	4770      	bx	lr
 8012f7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012f82:	bd70      	pop	{r4, r5, r6, pc}
 8012f84:	200b      	movs	r0, #11
 8012f86:	bd70      	pop	{r4, r5, r6, pc}

08012f88 <rcl_wait>:
 8012f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8c:	ed2d 8b02 	vpush	{d8}
 8012f90:	b08d      	sub	sp, #52	@ 0x34
 8012f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012f96:	2800      	cmp	r0, #0
 8012f98:	f000 8143 	beq.w	8013222 <rcl_wait+0x29a>
 8012f9c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	2e00      	cmp	r6, #0
 8012fa2:	f000 8112 	beq.w	80131ca <rcl_wait+0x242>
 8012fa6:	6843      	ldr	r3, [r0, #4]
 8012fa8:	b983      	cbnz	r3, 8012fcc <rcl_wait+0x44>
 8012faa:	68eb      	ldr	r3, [r5, #12]
 8012fac:	b973      	cbnz	r3, 8012fcc <rcl_wait+0x44>
 8012fae:	696b      	ldr	r3, [r5, #20]
 8012fb0:	b963      	cbnz	r3, 8012fcc <rcl_wait+0x44>
 8012fb2:	69eb      	ldr	r3, [r5, #28]
 8012fb4:	b953      	cbnz	r3, 8012fcc <rcl_wait+0x44>
 8012fb6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012fb8:	b943      	cbnz	r3, 8012fcc <rcl_wait+0x44>
 8012fba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012fbc:	b933      	cbnz	r3, 8012fcc <rcl_wait+0x44>
 8012fbe:	f240 3085 	movw	r0, #901	@ 0x385
 8012fc2:	b00d      	add	sp, #52	@ 0x34
 8012fc4:	ecbd 8b02 	vpop	{d8}
 8012fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fcc:	9b04      	ldr	r3, [sp, #16]
 8012fce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	9b05      	ldr	r3, [sp, #20]
 8012fd4:	f173 0300 	sbcs.w	r3, r3, #0
 8012fd8:	f2c0 80f0 	blt.w	80131bc <rcl_wait+0x234>
 8012fdc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012fe0:	4643      	mov	r3, r8
 8012fe2:	2a00      	cmp	r2, #0
 8012fe4:	f000 8133 	beq.w	801324e <rcl_wait+0x2c6>
 8012fe8:	2400      	movs	r4, #0
 8012fea:	4613      	mov	r3, r2
 8012fec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013260 <rcl_wait+0x2d8>
 8012ff0:	46a2      	mov	sl, r4
 8012ff2:	46a3      	mov	fp, r4
 8012ff4:	f240 3921 	movw	r9, #801	@ 0x321
 8012ff8:	4632      	mov	r2, r6
 8012ffa:	e014      	b.n	8013026 <rcl_wait+0x9e>
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d1e0      	bne.n	8012fc2 <rcl_wait+0x3a>
 8013000:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013004:	4542      	cmp	r2, r8
 8013006:	eb73 0107 	sbcs.w	r1, r3, r7
 801300a:	da03      	bge.n	8013014 <rcl_wait+0x8c>
 801300c:	4690      	mov	r8, r2
 801300e:	461f      	mov	r7, r3
 8013010:	f04f 0b01 	mov.w	fp, #1
 8013014:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013016:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013018:	3401      	adds	r4, #1
 801301a:	f14a 0a00 	adc.w	sl, sl, #0
 801301e:	429c      	cmp	r4, r3
 8013020:	f17a 0100 	sbcs.w	r1, sl, #0
 8013024:	d228      	bcs.n	8013078 <rcl_wait+0xf0>
 8013026:	6928      	ldr	r0, [r5, #16]
 8013028:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801302c:	a908      	add	r1, sp, #32
 801302e:	00a6      	lsls	r6, r4, #2
 8013030:	2800      	cmp	r0, #0
 8013032:	d0f1      	beq.n	8013018 <rcl_wait+0x90>
 8013034:	68eb      	ldr	r3, [r5, #12]
 8013036:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801303a:	4423      	add	r3, r4
 801303c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013040:	f1be 0f00 	cmp.w	lr, #0
 8013044:	d006      	beq.n	8013054 <rcl_wait+0xcc>
 8013046:	6913      	ldr	r3, [r2, #16]
 8013048:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801304c:	3301      	adds	r3, #1
 801304e:	6113      	str	r3, [r2, #16]
 8013050:	692b      	ldr	r3, [r5, #16]
 8013052:	5998      	ldr	r0, [r3, r6]
 8013054:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013058:	f7ff fb00 	bl	801265c <rcl_timer_get_time_until_next_call>
 801305c:	4548      	cmp	r0, r9
 801305e:	d1cd      	bne.n	8012ffc <rcl_wait+0x74>
 8013060:	692b      	ldr	r3, [r5, #16]
 8013062:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013064:	2100      	movs	r1, #0
 8013066:	5199      	str	r1, [r3, r6]
 8013068:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801306a:	3401      	adds	r4, #1
 801306c:	f14a 0a00 	adc.w	sl, sl, #0
 8013070:	429c      	cmp	r4, r3
 8013072:	f17a 0100 	sbcs.w	r1, sl, #0
 8013076:	d3d6      	bcc.n	8013026 <rcl_wait+0x9e>
 8013078:	4616      	mov	r6, r2
 801307a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801307e:	4313      	orrs	r3, r2
 8013080:	46d9      	mov	r9, fp
 8013082:	f040 80a9 	bne.w	80131d8 <rcl_wait+0x250>
 8013086:	2300      	movs	r3, #0
 8013088:	2200      	movs	r2, #0
 801308a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801308e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013092:	ab08      	add	r3, sp, #32
 8013094:	9302      	str	r3, [sp, #8]
 8013096:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013098:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801309c:	e9cd 3200 	strd	r3, r2, [sp]
 80130a0:	f106 0110 	add.w	r1, r6, #16
 80130a4:	f106 031c 	add.w	r3, r6, #28
 80130a8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80130ac:	1d30      	adds	r0, r6, #4
 80130ae:	f001 ff0d 	bl	8014ecc <rmw_wait>
 80130b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80130b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80130b6:	4680      	mov	r8, r0
 80130b8:	b1ca      	cbz	r2, 80130ee <rcl_wait+0x166>
 80130ba:	2400      	movs	r4, #0
 80130bc:	4627      	mov	r7, r4
 80130be:	692a      	ldr	r2, [r5, #16]
 80130c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80130c4:	f10d 011f 	add.w	r1, sp, #31
 80130c8:	00a6      	lsls	r6, r4, #2
 80130ca:	b160      	cbz	r0, 80130e6 <rcl_wait+0x15e>
 80130cc:	f88d 701f 	strb.w	r7, [sp, #31]
 80130d0:	f7ff fa8a 	bl	80125e8 <rcl_timer_is_ready>
 80130d4:	2800      	cmp	r0, #0
 80130d6:	f47f af74 	bne.w	8012fc2 <rcl_wait+0x3a>
 80130da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80130de:	b90b      	cbnz	r3, 80130e4 <rcl_wait+0x15c>
 80130e0:	692a      	ldr	r2, [r5, #16]
 80130e2:	5193      	str	r3, [r2, r6]
 80130e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80130e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80130e8:	3401      	adds	r4, #1
 80130ea:	42a2      	cmp	r2, r4
 80130ec:	d8e7      	bhi.n	80130be <rcl_wait+0x136>
 80130ee:	f038 0002 	bics.w	r0, r8, #2
 80130f2:	f040 8090 	bne.w	8013216 <rcl_wait+0x28e>
 80130f6:	686e      	ldr	r6, [r5, #4]
 80130f8:	4602      	mov	r2, r0
 80130fa:	b91e      	cbnz	r6, 8013104 <rcl_wait+0x17c>
 80130fc:	e00d      	b.n	801311a <rcl_wait+0x192>
 80130fe:	3201      	adds	r2, #1
 8013100:	42b2      	cmp	r2, r6
 8013102:	d00a      	beq.n	801311a <rcl_wait+0x192>
 8013104:	6899      	ldr	r1, [r3, #8]
 8013106:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801310a:	2900      	cmp	r1, #0
 801310c:	d1f7      	bne.n	80130fe <rcl_wait+0x176>
 801310e:	682c      	ldr	r4, [r5, #0]
 8013110:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013114:	3201      	adds	r2, #1
 8013116:	42b2      	cmp	r2, r6
 8013118:	d1f4      	bne.n	8013104 <rcl_wait+0x17c>
 801311a:	68ee      	ldr	r6, [r5, #12]
 801311c:	2200      	movs	r2, #0
 801311e:	b91e      	cbnz	r6, 8013128 <rcl_wait+0x1a0>
 8013120:	e00d      	b.n	801313e <rcl_wait+0x1b6>
 8013122:	3201      	adds	r2, #1
 8013124:	42b2      	cmp	r2, r6
 8013126:	d00a      	beq.n	801313e <rcl_wait+0x1b6>
 8013128:	6959      	ldr	r1, [r3, #20]
 801312a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801312e:	2900      	cmp	r1, #0
 8013130:	d1f7      	bne.n	8013122 <rcl_wait+0x19a>
 8013132:	68ac      	ldr	r4, [r5, #8]
 8013134:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013138:	3201      	adds	r2, #1
 801313a:	42b2      	cmp	r2, r6
 801313c:	d1f4      	bne.n	8013128 <rcl_wait+0x1a0>
 801313e:	69ee      	ldr	r6, [r5, #28]
 8013140:	2200      	movs	r2, #0
 8013142:	b91e      	cbnz	r6, 801314c <rcl_wait+0x1c4>
 8013144:	e00d      	b.n	8013162 <rcl_wait+0x1da>
 8013146:	3201      	adds	r2, #1
 8013148:	42b2      	cmp	r2, r6
 801314a:	d00a      	beq.n	8013162 <rcl_wait+0x1da>
 801314c:	6a19      	ldr	r1, [r3, #32]
 801314e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013152:	2900      	cmp	r1, #0
 8013154:	d1f7      	bne.n	8013146 <rcl_wait+0x1be>
 8013156:	69ac      	ldr	r4, [r5, #24]
 8013158:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801315c:	3201      	adds	r2, #1
 801315e:	42b2      	cmp	r2, r6
 8013160:	d1f4      	bne.n	801314c <rcl_wait+0x1c4>
 8013162:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013164:	2200      	movs	r2, #0
 8013166:	b91e      	cbnz	r6, 8013170 <rcl_wait+0x1e8>
 8013168:	e00d      	b.n	8013186 <rcl_wait+0x1fe>
 801316a:	3201      	adds	r2, #1
 801316c:	4296      	cmp	r6, r2
 801316e:	d00a      	beq.n	8013186 <rcl_wait+0x1fe>
 8013170:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013172:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013176:	2900      	cmp	r1, #0
 8013178:	d1f7      	bne.n	801316a <rcl_wait+0x1e2>
 801317a:	6a2c      	ldr	r4, [r5, #32]
 801317c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013180:	3201      	adds	r2, #1
 8013182:	4296      	cmp	r6, r2
 8013184:	d1f4      	bne.n	8013170 <rcl_wait+0x1e8>
 8013186:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013188:	2200      	movs	r2, #0
 801318a:	b91e      	cbnz	r6, 8013194 <rcl_wait+0x20c>
 801318c:	e00d      	b.n	80131aa <rcl_wait+0x222>
 801318e:	3201      	adds	r2, #1
 8013190:	42b2      	cmp	r2, r6
 8013192:	d00a      	beq.n	80131aa <rcl_wait+0x222>
 8013194:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013196:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801319a:	2900      	cmp	r1, #0
 801319c:	d1f7      	bne.n	801318e <rcl_wait+0x206>
 801319e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80131a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80131a4:	3201      	adds	r2, #1
 80131a6:	42b2      	cmp	r2, r6
 80131a8:	d1f4      	bne.n	8013194 <rcl_wait+0x20c>
 80131aa:	f1b8 0f02 	cmp.w	r8, #2
 80131ae:	f47f af08 	bne.w	8012fc2 <rcl_wait+0x3a>
 80131b2:	464b      	mov	r3, r9
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	bf08      	it	eq
 80131b8:	2002      	moveq	r0, #2
 80131ba:	e702      	b.n	8012fc2 <rcl_wait+0x3a>
 80131bc:	2a00      	cmp	r2, #0
 80131be:	d03a      	beq.n	8013236 <rcl_wait+0x2ae>
 80131c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80131c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80131c8:	e70e      	b.n	8012fe8 <rcl_wait+0x60>
 80131ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80131ce:	b00d      	add	sp, #52	@ 0x34
 80131d0:	ecbd 8b02 	vpop	{d8}
 80131d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d8:	9b04      	ldr	r3, [sp, #16]
 80131da:	2b01      	cmp	r3, #1
 80131dc:	9b05      	ldr	r3, [sp, #20]
 80131de:	f173 0300 	sbcs.w	r3, r3, #0
 80131e2:	db24      	blt.n	801322e <rcl_wait+0x2a6>
 80131e4:	2f00      	cmp	r7, #0
 80131e6:	bfbc      	itt	lt
 80131e8:	f04f 0800 	movlt.w	r8, #0
 80131ec:	4647      	movlt	r7, r8
 80131ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8013268 <rcl_wait+0x2e0>)
 80131f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f4:	4640      	mov	r0, r8
 80131f6:	4639      	mov	r1, r7
 80131f8:	f7ed f87a 	bl	80002f0 <__aeabi_ldivmod>
 80131fc:	a31a      	add	r3, pc, #104	@ (adr r3, 8013268 <rcl_wait+0x2e0>)
 80131fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013202:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013206:	4640      	mov	r0, r8
 8013208:	4639      	mov	r1, r7
 801320a:	f7ed f871 	bl	80002f0 <__aeabi_ldivmod>
 801320e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013212:	ab08      	add	r3, sp, #32
 8013214:	e73e      	b.n	8013094 <rcl_wait+0x10c>
 8013216:	2001      	movs	r0, #1
 8013218:	b00d      	add	sp, #52	@ 0x34
 801321a:	ecbd 8b02 	vpop	{d8}
 801321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013222:	200b      	movs	r0, #11
 8013224:	b00d      	add	sp, #52	@ 0x34
 8013226:	ecbd 8b02 	vpop	{d8}
 801322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801322e:	465b      	mov	r3, fp
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1d7      	bne.n	80131e4 <rcl_wait+0x25c>
 8013234:	e72e      	b.n	8013094 <rcl_wait+0x10c>
 8013236:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801323a:	430b      	orrs	r3, r1
 801323c:	bf08      	it	eq
 801323e:	4691      	moveq	r9, r2
 8013240:	f43f af21 	beq.w	8013086 <rcl_wait+0xfe>
 8013244:	9b04      	ldr	r3, [sp, #16]
 8013246:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801324a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801324e:	2b01      	cmp	r3, #1
 8013250:	9b05      	ldr	r3, [sp, #20]
 8013252:	f173 0300 	sbcs.w	r3, r3, #0
 8013256:	f04f 0300 	mov.w	r3, #0
 801325a:	4699      	mov	r9, r3
 801325c:	dac2      	bge.n	80131e4 <rcl_wait+0x25c>
 801325e:	e719      	b.n	8013094 <rcl_wait+0x10c>
 8013260:	ffffffff 	.word	0xffffffff
 8013264:	7fffffff 	.word	0x7fffffff
 8013268:	3b9aca00 	.word	0x3b9aca00
 801326c:	00000000 	.word	0x00000000

08013270 <rcl_action_take_goal_response>:
 8013270:	2800      	cmp	r0, #0
 8013272:	d039      	beq.n	80132e8 <rcl_action_take_goal_response+0x78>
 8013274:	b570      	push	{r4, r5, r6, lr}
 8013276:	4604      	mov	r4, r0
 8013278:	6800      	ldr	r0, [r0, #0]
 801327a:	b380      	cbz	r0, 80132de <rcl_action_take_goal_response+0x6e>
 801327c:	460d      	mov	r5, r1
 801327e:	4616      	mov	r6, r2
 8013280:	f7fe f8e2 	bl	8011448 <rcl_client_is_valid>
 8013284:	b330      	cbz	r0, 80132d4 <rcl_action_take_goal_response+0x64>
 8013286:	6820      	ldr	r0, [r4, #0]
 8013288:	3004      	adds	r0, #4
 801328a:	f7fe f8dd 	bl	8011448 <rcl_client_is_valid>
 801328e:	b308      	cbz	r0, 80132d4 <rcl_action_take_goal_response+0x64>
 8013290:	6820      	ldr	r0, [r4, #0]
 8013292:	3008      	adds	r0, #8
 8013294:	f7fe f8d8 	bl	8011448 <rcl_client_is_valid>
 8013298:	b1e0      	cbz	r0, 80132d4 <rcl_action_take_goal_response+0x64>
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	300c      	adds	r0, #12
 801329e:	f7fe fe5f 	bl	8011f60 <rcl_subscription_is_valid>
 80132a2:	b1b8      	cbz	r0, 80132d4 <rcl_action_take_goal_response+0x64>
 80132a4:	6820      	ldr	r0, [r4, #0]
 80132a6:	3010      	adds	r0, #16
 80132a8:	f7fe fe5a 	bl	8011f60 <rcl_subscription_is_valid>
 80132ac:	b190      	cbz	r0, 80132d4 <rcl_action_take_goal_response+0x64>
 80132ae:	b1cd      	cbz	r5, 80132e4 <rcl_action_take_goal_response+0x74>
 80132b0:	b1c6      	cbz	r6, 80132e4 <rcl_action_take_goal_response+0x74>
 80132b2:	6820      	ldr	r0, [r4, #0]
 80132b4:	4632      	mov	r2, r6
 80132b6:	4629      	mov	r1, r5
 80132b8:	f7fe f87e 	bl	80113b8 <rcl_take_response>
 80132bc:	b148      	cbz	r0, 80132d2 <rcl_action_take_goal_response+0x62>
 80132be:	280a      	cmp	r0, #10
 80132c0:	d007      	beq.n	80132d2 <rcl_action_take_goal_response+0x62>
 80132c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80132c6:	f640 0337 	movw	r3, #2103	@ 0x837
 80132ca:	4290      	cmp	r0, r2
 80132cc:	bf0c      	ite	eq
 80132ce:	4618      	moveq	r0, r3
 80132d0:	2001      	movne	r0, #1
 80132d2:	bd70      	pop	{r4, r5, r6, pc}
 80132d4:	f7f7 ff8c 	bl	800b1f0 <rcutils_reset_error>
 80132d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80132dc:	bd70      	pop	{r4, r5, r6, pc}
 80132de:	f640 0036 	movw	r0, #2102	@ 0x836
 80132e2:	bd70      	pop	{r4, r5, r6, pc}
 80132e4:	200b      	movs	r0, #11
 80132e6:	bd70      	pop	{r4, r5, r6, pc}
 80132e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop

080132f0 <rcl_action_send_result_request>:
 80132f0:	b390      	cbz	r0, 8013358 <rcl_action_send_result_request+0x68>
 80132f2:	b570      	push	{r4, r5, r6, lr}
 80132f4:	4604      	mov	r4, r0
 80132f6:	6800      	ldr	r0, [r0, #0]
 80132f8:	b348      	cbz	r0, 801334e <rcl_action_send_result_request+0x5e>
 80132fa:	460d      	mov	r5, r1
 80132fc:	4616      	mov	r6, r2
 80132fe:	f7fe f8a3 	bl	8011448 <rcl_client_is_valid>
 8013302:	b1f8      	cbz	r0, 8013344 <rcl_action_send_result_request+0x54>
 8013304:	6820      	ldr	r0, [r4, #0]
 8013306:	3004      	adds	r0, #4
 8013308:	f7fe f89e 	bl	8011448 <rcl_client_is_valid>
 801330c:	b1d0      	cbz	r0, 8013344 <rcl_action_send_result_request+0x54>
 801330e:	6820      	ldr	r0, [r4, #0]
 8013310:	3008      	adds	r0, #8
 8013312:	f7fe f899 	bl	8011448 <rcl_client_is_valid>
 8013316:	b1a8      	cbz	r0, 8013344 <rcl_action_send_result_request+0x54>
 8013318:	6820      	ldr	r0, [r4, #0]
 801331a:	300c      	adds	r0, #12
 801331c:	f7fe fe20 	bl	8011f60 <rcl_subscription_is_valid>
 8013320:	b180      	cbz	r0, 8013344 <rcl_action_send_result_request+0x54>
 8013322:	6820      	ldr	r0, [r4, #0]
 8013324:	3010      	adds	r0, #16
 8013326:	f7fe fe1b 	bl	8011f60 <rcl_subscription_is_valid>
 801332a:	b158      	cbz	r0, 8013344 <rcl_action_send_result_request+0x54>
 801332c:	b195      	cbz	r5, 8013354 <rcl_action_send_result_request+0x64>
 801332e:	b18e      	cbz	r6, 8013354 <rcl_action_send_result_request+0x64>
 8013330:	6820      	ldr	r0, [r4, #0]
 8013332:	4632      	mov	r2, r6
 8013334:	4629      	mov	r1, r5
 8013336:	3008      	adds	r0, #8
 8013338:	f7fe f806 	bl	8011348 <rcl_send_request>
 801333c:	3800      	subs	r0, #0
 801333e:	bf18      	it	ne
 8013340:	2001      	movne	r0, #1
 8013342:	bd70      	pop	{r4, r5, r6, pc}
 8013344:	f7f7 ff54 	bl	800b1f0 <rcutils_reset_error>
 8013348:	f640 0036 	movw	r0, #2102	@ 0x836
 801334c:	bd70      	pop	{r4, r5, r6, pc}
 801334e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013352:	bd70      	pop	{r4, r5, r6, pc}
 8013354:	200b      	movs	r0, #11
 8013356:	bd70      	pop	{r4, r5, r6, pc}
 8013358:	f640 0036 	movw	r0, #2102	@ 0x836
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop

08013360 <rcl_action_take_result_response>:
 8013360:	2800      	cmp	r0, #0
 8013362:	d03a      	beq.n	80133da <rcl_action_take_result_response+0x7a>
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	4604      	mov	r4, r0
 8013368:	6800      	ldr	r0, [r0, #0]
 801336a:	b388      	cbz	r0, 80133d0 <rcl_action_take_result_response+0x70>
 801336c:	460d      	mov	r5, r1
 801336e:	4616      	mov	r6, r2
 8013370:	f7fe f86a 	bl	8011448 <rcl_client_is_valid>
 8013374:	b338      	cbz	r0, 80133c6 <rcl_action_take_result_response+0x66>
 8013376:	6820      	ldr	r0, [r4, #0]
 8013378:	3004      	adds	r0, #4
 801337a:	f7fe f865 	bl	8011448 <rcl_client_is_valid>
 801337e:	b310      	cbz	r0, 80133c6 <rcl_action_take_result_response+0x66>
 8013380:	6820      	ldr	r0, [r4, #0]
 8013382:	3008      	adds	r0, #8
 8013384:	f7fe f860 	bl	8011448 <rcl_client_is_valid>
 8013388:	b1e8      	cbz	r0, 80133c6 <rcl_action_take_result_response+0x66>
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	300c      	adds	r0, #12
 801338e:	f7fe fde7 	bl	8011f60 <rcl_subscription_is_valid>
 8013392:	b1c0      	cbz	r0, 80133c6 <rcl_action_take_result_response+0x66>
 8013394:	6820      	ldr	r0, [r4, #0]
 8013396:	3010      	adds	r0, #16
 8013398:	f7fe fde2 	bl	8011f60 <rcl_subscription_is_valid>
 801339c:	b198      	cbz	r0, 80133c6 <rcl_action_take_result_response+0x66>
 801339e:	b1d5      	cbz	r5, 80133d6 <rcl_action_take_result_response+0x76>
 80133a0:	b1ce      	cbz	r6, 80133d6 <rcl_action_take_result_response+0x76>
 80133a2:	6820      	ldr	r0, [r4, #0]
 80133a4:	4632      	mov	r2, r6
 80133a6:	4629      	mov	r1, r5
 80133a8:	3008      	adds	r0, #8
 80133aa:	f7fe f805 	bl	80113b8 <rcl_take_response>
 80133ae:	b148      	cbz	r0, 80133c4 <rcl_action_take_result_response+0x64>
 80133b0:	280a      	cmp	r0, #10
 80133b2:	d007      	beq.n	80133c4 <rcl_action_take_result_response+0x64>
 80133b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80133b8:	f640 0337 	movw	r3, #2103	@ 0x837
 80133bc:	4290      	cmp	r0, r2
 80133be:	bf0c      	ite	eq
 80133c0:	4618      	moveq	r0, r3
 80133c2:	2001      	movne	r0, #1
 80133c4:	bd70      	pop	{r4, r5, r6, pc}
 80133c6:	f7f7 ff13 	bl	800b1f0 <rcutils_reset_error>
 80133ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80133ce:	bd70      	pop	{r4, r5, r6, pc}
 80133d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80133d4:	bd70      	pop	{r4, r5, r6, pc}
 80133d6:	200b      	movs	r0, #11
 80133d8:	bd70      	pop	{r4, r5, r6, pc}
 80133da:	f640 0036 	movw	r0, #2102	@ 0x836
 80133de:	4770      	bx	lr

080133e0 <rcl_action_take_cancel_response>:
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d03a      	beq.n	801345a <rcl_action_take_cancel_response+0x7a>
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	4604      	mov	r4, r0
 80133e8:	6800      	ldr	r0, [r0, #0]
 80133ea:	b388      	cbz	r0, 8013450 <rcl_action_take_cancel_response+0x70>
 80133ec:	460d      	mov	r5, r1
 80133ee:	4616      	mov	r6, r2
 80133f0:	f7fe f82a 	bl	8011448 <rcl_client_is_valid>
 80133f4:	b338      	cbz	r0, 8013446 <rcl_action_take_cancel_response+0x66>
 80133f6:	6820      	ldr	r0, [r4, #0]
 80133f8:	3004      	adds	r0, #4
 80133fa:	f7fe f825 	bl	8011448 <rcl_client_is_valid>
 80133fe:	b310      	cbz	r0, 8013446 <rcl_action_take_cancel_response+0x66>
 8013400:	6820      	ldr	r0, [r4, #0]
 8013402:	3008      	adds	r0, #8
 8013404:	f7fe f820 	bl	8011448 <rcl_client_is_valid>
 8013408:	b1e8      	cbz	r0, 8013446 <rcl_action_take_cancel_response+0x66>
 801340a:	6820      	ldr	r0, [r4, #0]
 801340c:	300c      	adds	r0, #12
 801340e:	f7fe fda7 	bl	8011f60 <rcl_subscription_is_valid>
 8013412:	b1c0      	cbz	r0, 8013446 <rcl_action_take_cancel_response+0x66>
 8013414:	6820      	ldr	r0, [r4, #0]
 8013416:	3010      	adds	r0, #16
 8013418:	f7fe fda2 	bl	8011f60 <rcl_subscription_is_valid>
 801341c:	b198      	cbz	r0, 8013446 <rcl_action_take_cancel_response+0x66>
 801341e:	b1d5      	cbz	r5, 8013456 <rcl_action_take_cancel_response+0x76>
 8013420:	b1ce      	cbz	r6, 8013456 <rcl_action_take_cancel_response+0x76>
 8013422:	6820      	ldr	r0, [r4, #0]
 8013424:	4632      	mov	r2, r6
 8013426:	4629      	mov	r1, r5
 8013428:	3004      	adds	r0, #4
 801342a:	f7fd ffc5 	bl	80113b8 <rcl_take_response>
 801342e:	b148      	cbz	r0, 8013444 <rcl_action_take_cancel_response+0x64>
 8013430:	280a      	cmp	r0, #10
 8013432:	d007      	beq.n	8013444 <rcl_action_take_cancel_response+0x64>
 8013434:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013438:	f640 0337 	movw	r3, #2103	@ 0x837
 801343c:	4290      	cmp	r0, r2
 801343e:	bf0c      	ite	eq
 8013440:	4618      	moveq	r0, r3
 8013442:	2001      	movne	r0, #1
 8013444:	bd70      	pop	{r4, r5, r6, pc}
 8013446:	f7f7 fed3 	bl	800b1f0 <rcutils_reset_error>
 801344a:	f640 0036 	movw	r0, #2102	@ 0x836
 801344e:	bd70      	pop	{r4, r5, r6, pc}
 8013450:	f640 0036 	movw	r0, #2102	@ 0x836
 8013454:	bd70      	pop	{r4, r5, r6, pc}
 8013456:	200b      	movs	r0, #11
 8013458:	bd70      	pop	{r4, r5, r6, pc}
 801345a:	f640 0036 	movw	r0, #2102	@ 0x836
 801345e:	4770      	bx	lr

08013460 <rcl_action_take_feedback>:
 8013460:	2800      	cmp	r0, #0
 8013462:	d038      	beq.n	80134d6 <rcl_action_take_feedback+0x76>
 8013464:	b530      	push	{r4, r5, lr}
 8013466:	4604      	mov	r4, r0
 8013468:	6800      	ldr	r0, [r0, #0]
 801346a:	b091      	sub	sp, #68	@ 0x44
 801346c:	b378      	cbz	r0, 80134ce <rcl_action_take_feedback+0x6e>
 801346e:	460d      	mov	r5, r1
 8013470:	f7fd ffea 	bl	8011448 <rcl_client_is_valid>
 8013474:	b328      	cbz	r0, 80134c2 <rcl_action_take_feedback+0x62>
 8013476:	6820      	ldr	r0, [r4, #0]
 8013478:	3004      	adds	r0, #4
 801347a:	f7fd ffe5 	bl	8011448 <rcl_client_is_valid>
 801347e:	b300      	cbz	r0, 80134c2 <rcl_action_take_feedback+0x62>
 8013480:	6820      	ldr	r0, [r4, #0]
 8013482:	3008      	adds	r0, #8
 8013484:	f7fd ffe0 	bl	8011448 <rcl_client_is_valid>
 8013488:	b1d8      	cbz	r0, 80134c2 <rcl_action_take_feedback+0x62>
 801348a:	6820      	ldr	r0, [r4, #0]
 801348c:	300c      	adds	r0, #12
 801348e:	f7fe fd67 	bl	8011f60 <rcl_subscription_is_valid>
 8013492:	b1b0      	cbz	r0, 80134c2 <rcl_action_take_feedback+0x62>
 8013494:	6820      	ldr	r0, [r4, #0]
 8013496:	3010      	adds	r0, #16
 8013498:	f7fe fd62 	bl	8011f60 <rcl_subscription_is_valid>
 801349c:	b188      	cbz	r0, 80134c2 <rcl_action_take_feedback+0x62>
 801349e:	b1ed      	cbz	r5, 80134dc <rcl_action_take_feedback+0x7c>
 80134a0:	6820      	ldr	r0, [r4, #0]
 80134a2:	2300      	movs	r3, #0
 80134a4:	466a      	mov	r2, sp
 80134a6:	4629      	mov	r1, r5
 80134a8:	300c      	adds	r0, #12
 80134aa:	f7fe fcfb 	bl	8011ea4 <rcl_take>
 80134ae:	b160      	cbz	r0, 80134ca <rcl_action_take_feedback+0x6a>
 80134b0:	f240 1391 	movw	r3, #401	@ 0x191
 80134b4:	4298      	cmp	r0, r3
 80134b6:	d014      	beq.n	80134e2 <rcl_action_take_feedback+0x82>
 80134b8:	280a      	cmp	r0, #10
 80134ba:	bf18      	it	ne
 80134bc:	2001      	movne	r0, #1
 80134be:	b011      	add	sp, #68	@ 0x44
 80134c0:	bd30      	pop	{r4, r5, pc}
 80134c2:	f7f7 fe95 	bl	800b1f0 <rcutils_reset_error>
 80134c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80134ca:	b011      	add	sp, #68	@ 0x44
 80134cc:	bd30      	pop	{r4, r5, pc}
 80134ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80134d2:	b011      	add	sp, #68	@ 0x44
 80134d4:	bd30      	pop	{r4, r5, pc}
 80134d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80134da:	4770      	bx	lr
 80134dc:	200b      	movs	r0, #11
 80134de:	b011      	add	sp, #68	@ 0x44
 80134e0:	bd30      	pop	{r4, r5, pc}
 80134e2:	f640 0037 	movw	r0, #2103	@ 0x837
 80134e6:	e7f0      	b.n	80134ca <rcl_action_take_feedback+0x6a>

080134e8 <rcl_action_wait_set_add_action_client>:
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d048      	beq.n	801357e <rcl_action_wait_set_add_action_client+0x96>
 80134ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ee:	460c      	mov	r4, r1
 80134f0:	2900      	cmp	r1, #0
 80134f2:	d03c      	beq.n	801356e <rcl_action_wait_set_add_action_client+0x86>
 80134f4:	4605      	mov	r5, r0
 80134f6:	6808      	ldr	r0, [r1, #0]
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d038      	beq.n	801356e <rcl_action_wait_set_add_action_client+0x86>
 80134fc:	4617      	mov	r7, r2
 80134fe:	461e      	mov	r6, r3
 8013500:	f7fd ffa2 	bl	8011448 <rcl_client_is_valid>
 8013504:	b3b0      	cbz	r0, 8013574 <rcl_action_wait_set_add_action_client+0x8c>
 8013506:	6820      	ldr	r0, [r4, #0]
 8013508:	3004      	adds	r0, #4
 801350a:	f7fd ff9d 	bl	8011448 <rcl_client_is_valid>
 801350e:	b388      	cbz	r0, 8013574 <rcl_action_wait_set_add_action_client+0x8c>
 8013510:	6820      	ldr	r0, [r4, #0]
 8013512:	3008      	adds	r0, #8
 8013514:	f7fd ff98 	bl	8011448 <rcl_client_is_valid>
 8013518:	b360      	cbz	r0, 8013574 <rcl_action_wait_set_add_action_client+0x8c>
 801351a:	6820      	ldr	r0, [r4, #0]
 801351c:	300c      	adds	r0, #12
 801351e:	f7fe fd1f 	bl	8011f60 <rcl_subscription_is_valid>
 8013522:	b338      	cbz	r0, 8013574 <rcl_action_wait_set_add_action_client+0x8c>
 8013524:	6820      	ldr	r0, [r4, #0]
 8013526:	3010      	adds	r0, #16
 8013528:	f7fe fd1a 	bl	8011f60 <rcl_subscription_is_valid>
 801352c:	b310      	cbz	r0, 8013574 <rcl_action_wait_set_add_action_client+0x8c>
 801352e:	6821      	ldr	r1, [r4, #0]
 8013530:	4628      	mov	r0, r5
 8013532:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013536:	f7ff fccf 	bl	8012ed8 <rcl_wait_set_add_client>
 801353a:	b9b8      	cbnz	r0, 801356c <rcl_action_wait_set_add_action_client+0x84>
 801353c:	6821      	ldr	r1, [r4, #0]
 801353e:	4628      	mov	r0, r5
 8013540:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013544:	3104      	adds	r1, #4
 8013546:	f7ff fcc7 	bl	8012ed8 <rcl_wait_set_add_client>
 801354a:	b978      	cbnz	r0, 801356c <rcl_action_wait_set_add_action_client+0x84>
 801354c:	6821      	ldr	r1, [r4, #0]
 801354e:	4628      	mov	r0, r5
 8013550:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013554:	3108      	adds	r1, #8
 8013556:	f7ff fcbf 	bl	8012ed8 <rcl_wait_set_add_client>
 801355a:	b938      	cbnz	r0, 801356c <rcl_action_wait_set_add_action_client+0x84>
 801355c:	6821      	ldr	r1, [r4, #0]
 801355e:	4628      	mov	r0, r5
 8013560:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013564:	310c      	adds	r1, #12
 8013566:	f7ff f96f 	bl	8012848 <rcl_wait_set_add_subscription>
 801356a:	b158      	cbz	r0, 8013584 <rcl_action_wait_set_add_action_client+0x9c>
 801356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801356e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013574:	f7f7 fe3c 	bl	800b1f0 <rcutils_reset_error>
 8013578:	f640 0036 	movw	r0, #2102	@ 0x836
 801357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801357e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013582:	4770      	bx	lr
 8013584:	6821      	ldr	r1, [r4, #0]
 8013586:	4628      	mov	r0, r5
 8013588:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801358c:	3110      	adds	r1, #16
 801358e:	f7ff f95b 	bl	8012848 <rcl_wait_set_add_subscription>
 8013592:	2800      	cmp	r0, #0
 8013594:	d1ea      	bne.n	801356c <rcl_action_wait_set_add_action_client+0x84>
 8013596:	b11f      	cbz	r7, 80135a0 <rcl_action_wait_set_add_action_client+0xb8>
 8013598:	6823      	ldr	r3, [r4, #0]
 801359a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801359e:	603b      	str	r3, [r7, #0]
 80135a0:	2e00      	cmp	r6, #0
 80135a2:	d0e3      	beq.n	801356c <rcl_action_wait_set_add_action_client+0x84>
 80135a4:	6823      	ldr	r3, [r4, #0]
 80135a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80135aa:	6033      	str	r3, [r6, #0]
 80135ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135ae:	bf00      	nop

080135b0 <rcl_action_client_wait_set_get_entities_ready>:
 80135b0:	2800      	cmp	r0, #0
 80135b2:	f000 808d 	beq.w	80136d0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80135b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ba:	460c      	mov	r4, r1
 80135bc:	2900      	cmp	r1, #0
 80135be:	d077      	beq.n	80136b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80135c0:	4605      	mov	r5, r0
 80135c2:	6808      	ldr	r0, [r1, #0]
 80135c4:	2800      	cmp	r0, #0
 80135c6:	d073      	beq.n	80136b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80135c8:	4616      	mov	r6, r2
 80135ca:	461f      	mov	r7, r3
 80135cc:	f7fd ff3c 	bl	8011448 <rcl_client_is_valid>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d071      	beq.n	80136b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80135d4:	6820      	ldr	r0, [r4, #0]
 80135d6:	3004      	adds	r0, #4
 80135d8:	f7fd ff36 	bl	8011448 <rcl_client_is_valid>
 80135dc:	2800      	cmp	r0, #0
 80135de:	d06b      	beq.n	80136b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80135e0:	6820      	ldr	r0, [r4, #0]
 80135e2:	3008      	adds	r0, #8
 80135e4:	f7fd ff30 	bl	8011448 <rcl_client_is_valid>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d065      	beq.n	80136b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80135ec:	6820      	ldr	r0, [r4, #0]
 80135ee:	300c      	adds	r0, #12
 80135f0:	f7fe fcb6 	bl	8011f60 <rcl_subscription_is_valid>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d05f      	beq.n	80136b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80135f8:	6820      	ldr	r0, [r4, #0]
 80135fa:	3010      	adds	r0, #16
 80135fc:	f7fe fcb0 	bl	8011f60 <rcl_subscription_is_valid>
 8013600:	2800      	cmp	r0, #0
 8013602:	d059      	beq.n	80136b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013604:	2e00      	cmp	r6, #0
 8013606:	d060      	beq.n	80136ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013608:	2f00      	cmp	r7, #0
 801360a:	d05e      	beq.n	80136ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801360c:	9b06      	ldr	r3, [sp, #24]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d05b      	beq.n	80136ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013612:	9b07      	ldr	r3, [sp, #28]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d058      	beq.n	80136ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013618:	9b08      	ldr	r3, [sp, #32]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d055      	beq.n	80136ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	686a      	ldr	r2, [r5, #4]
 8013622:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8013626:	428a      	cmp	r2, r1
 8013628:	d94c      	bls.n	80136c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801362a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801362e:	4282      	cmp	r2, r0
 8013630:	d948      	bls.n	80136c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013632:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013636:	69ea      	ldr	r2, [r5, #28]
 8013638:	42a2      	cmp	r2, r4
 801363a:	d943      	bls.n	80136c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801363c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013640:	4562      	cmp	r2, ip
 8013642:	d93f      	bls.n	80136c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013644:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013648:	4572      	cmp	r2, lr
 801364a:	d93b      	bls.n	80136c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801364c:	69aa      	ldr	r2, [r5, #24]
 801364e:	682d      	ldr	r5, [r5, #0]
 8013650:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013654:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013658:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801365c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013660:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013664:	f103 0c0c 	add.w	ip, r3, #12
 8013668:	eba5 050c 	sub.w	r5, r5, ip
 801366c:	fab5 f585 	clz	r5, r5
 8013670:	096d      	lsrs	r5, r5, #5
 8013672:	7035      	strb	r5, [r6, #0]
 8013674:	f103 0510 	add.w	r5, r3, #16
 8013678:	1b64      	subs	r4, r4, r5
 801367a:	fab4 f484 	clz	r4, r4
 801367e:	0964      	lsrs	r4, r4, #5
 8013680:	703c      	strb	r4, [r7, #0]
 8013682:	eba3 0008 	sub.w	r0, r3, r8
 8013686:	1d1c      	adds	r4, r3, #4
 8013688:	3308      	adds	r3, #8
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	fab0 f080 	clz	r0, r0
 8013690:	9a06      	ldr	r2, [sp, #24]
 8013692:	0940      	lsrs	r0, r0, #5
 8013694:	1b09      	subs	r1, r1, r4
 8013696:	7010      	strb	r0, [r2, #0]
 8013698:	fab1 f181 	clz	r1, r1
 801369c:	9a07      	ldr	r2, [sp, #28]
 801369e:	0949      	lsrs	r1, r1, #5
 80136a0:	7011      	strb	r1, [r2, #0]
 80136a2:	fab3 f383 	clz	r3, r3
 80136a6:	9a08      	ldr	r2, [sp, #32]
 80136a8:	095b      	lsrs	r3, r3, #5
 80136aa:	2000      	movs	r0, #0
 80136ac:	7013      	strb	r3, [r2, #0]
 80136ae:	e001      	b.n	80136b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80136b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80136b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b8:	f7f7 fd9a 	bl	800b1f0 <rcutils_reset_error>
 80136bc:	f640 0036 	movw	r0, #2102	@ 0x836
 80136c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c4:	2001      	movs	r0, #1
 80136c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ca:	200b      	movs	r0, #11
 80136cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop

080136d8 <rcl_action_take_goal_request>:
 80136d8:	2800      	cmp	r0, #0
 80136da:	d039      	beq.n	8013750 <rcl_action_take_goal_request+0x78>
 80136dc:	b570      	push	{r4, r5, r6, lr}
 80136de:	4604      	mov	r4, r0
 80136e0:	6800      	ldr	r0, [r0, #0]
 80136e2:	b380      	cbz	r0, 8013746 <rcl_action_take_goal_request+0x6e>
 80136e4:	460d      	mov	r5, r1
 80136e6:	4616      	mov	r6, r2
 80136e8:	f7fe faf6 	bl	8011cd8 <rcl_service_is_valid>
 80136ec:	b330      	cbz	r0, 801373c <rcl_action_take_goal_request+0x64>
 80136ee:	6820      	ldr	r0, [r4, #0]
 80136f0:	3004      	adds	r0, #4
 80136f2:	f7fe faf1 	bl	8011cd8 <rcl_service_is_valid>
 80136f6:	b308      	cbz	r0, 801373c <rcl_action_take_goal_request+0x64>
 80136f8:	6820      	ldr	r0, [r4, #0]
 80136fa:	3008      	adds	r0, #8
 80136fc:	f7fe faec 	bl	8011cd8 <rcl_service_is_valid>
 8013700:	b1e0      	cbz	r0, 801373c <rcl_action_take_goal_request+0x64>
 8013702:	6820      	ldr	r0, [r4, #0]
 8013704:	300c      	adds	r0, #12
 8013706:	f7f6 fd93 	bl	800a230 <rcl_publisher_is_valid>
 801370a:	b1b8      	cbz	r0, 801373c <rcl_action_take_goal_request+0x64>
 801370c:	6820      	ldr	r0, [r4, #0]
 801370e:	3010      	adds	r0, #16
 8013710:	f7f6 fd8e 	bl	800a230 <rcl_publisher_is_valid>
 8013714:	b190      	cbz	r0, 801373c <rcl_action_take_goal_request+0x64>
 8013716:	b1cd      	cbz	r5, 801374c <rcl_action_take_goal_request+0x74>
 8013718:	b1c6      	cbz	r6, 801374c <rcl_action_take_goal_request+0x74>
 801371a:	6820      	ldr	r0, [r4, #0]
 801371c:	4632      	mov	r2, r6
 801371e:	4629      	mov	r1, r5
 8013720:	f7fe fa82 	bl	8011c28 <rcl_take_request>
 8013724:	b148      	cbz	r0, 801373a <rcl_action_take_goal_request+0x62>
 8013726:	280a      	cmp	r0, #10
 8013728:	d007      	beq.n	801373a <rcl_action_take_goal_request+0x62>
 801372a:	f240 2259 	movw	r2, #601	@ 0x259
 801372e:	f640 0399 	movw	r3, #2201	@ 0x899
 8013732:	4290      	cmp	r0, r2
 8013734:	bf0c      	ite	eq
 8013736:	4618      	moveq	r0, r3
 8013738:	2001      	movne	r0, #1
 801373a:	bd70      	pop	{r4, r5, r6, pc}
 801373c:	f7f7 fd58 	bl	800b1f0 <rcutils_reset_error>
 8013740:	f640 0098 	movw	r0, #2200	@ 0x898
 8013744:	bd70      	pop	{r4, r5, r6, pc}
 8013746:	f640 0098 	movw	r0, #2200	@ 0x898
 801374a:	bd70      	pop	{r4, r5, r6, pc}
 801374c:	200b      	movs	r0, #11
 801374e:	bd70      	pop	{r4, r5, r6, pc}
 8013750:	f640 0098 	movw	r0, #2200	@ 0x898
 8013754:	4770      	bx	lr
 8013756:	bf00      	nop

08013758 <rcl_action_send_goal_response>:
 8013758:	b390      	cbz	r0, 80137c0 <rcl_action_send_goal_response+0x68>
 801375a:	b570      	push	{r4, r5, r6, lr}
 801375c:	4604      	mov	r4, r0
 801375e:	6800      	ldr	r0, [r0, #0]
 8013760:	b348      	cbz	r0, 80137b6 <rcl_action_send_goal_response+0x5e>
 8013762:	460d      	mov	r5, r1
 8013764:	4616      	mov	r6, r2
 8013766:	f7fe fab7 	bl	8011cd8 <rcl_service_is_valid>
 801376a:	b1f8      	cbz	r0, 80137ac <rcl_action_send_goal_response+0x54>
 801376c:	6820      	ldr	r0, [r4, #0]
 801376e:	3004      	adds	r0, #4
 8013770:	f7fe fab2 	bl	8011cd8 <rcl_service_is_valid>
 8013774:	b1d0      	cbz	r0, 80137ac <rcl_action_send_goal_response+0x54>
 8013776:	6820      	ldr	r0, [r4, #0]
 8013778:	3008      	adds	r0, #8
 801377a:	f7fe faad 	bl	8011cd8 <rcl_service_is_valid>
 801377e:	b1a8      	cbz	r0, 80137ac <rcl_action_send_goal_response+0x54>
 8013780:	6820      	ldr	r0, [r4, #0]
 8013782:	300c      	adds	r0, #12
 8013784:	f7f6 fd54 	bl	800a230 <rcl_publisher_is_valid>
 8013788:	b180      	cbz	r0, 80137ac <rcl_action_send_goal_response+0x54>
 801378a:	6820      	ldr	r0, [r4, #0]
 801378c:	3010      	adds	r0, #16
 801378e:	f7f6 fd4f 	bl	800a230 <rcl_publisher_is_valid>
 8013792:	b158      	cbz	r0, 80137ac <rcl_action_send_goal_response+0x54>
 8013794:	b195      	cbz	r5, 80137bc <rcl_action_send_goal_response+0x64>
 8013796:	b18e      	cbz	r6, 80137bc <rcl_action_send_goal_response+0x64>
 8013798:	6820      	ldr	r0, [r4, #0]
 801379a:	4632      	mov	r2, r6
 801379c:	4629      	mov	r1, r5
 801379e:	f7fe fa83 	bl	8011ca8 <rcl_send_response>
 80137a2:	b110      	cbz	r0, 80137aa <rcl_action_send_goal_response+0x52>
 80137a4:	2802      	cmp	r0, #2
 80137a6:	bf18      	it	ne
 80137a8:	2001      	movne	r0, #1
 80137aa:	bd70      	pop	{r4, r5, r6, pc}
 80137ac:	f7f7 fd20 	bl	800b1f0 <rcutils_reset_error>
 80137b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80137ba:	bd70      	pop	{r4, r5, r6, pc}
 80137bc:	200b      	movs	r0, #11
 80137be:	bd70      	pop	{r4, r5, r6, pc}
 80137c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80137c4:	4770      	bx	lr
 80137c6:	bf00      	nop

080137c8 <rcl_action_take_result_request>:
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d03a      	beq.n	8013842 <rcl_action_take_result_request+0x7a>
 80137cc:	b570      	push	{r4, r5, r6, lr}
 80137ce:	4604      	mov	r4, r0
 80137d0:	6800      	ldr	r0, [r0, #0]
 80137d2:	b388      	cbz	r0, 8013838 <rcl_action_take_result_request+0x70>
 80137d4:	460d      	mov	r5, r1
 80137d6:	4616      	mov	r6, r2
 80137d8:	f7fe fa7e 	bl	8011cd8 <rcl_service_is_valid>
 80137dc:	b338      	cbz	r0, 801382e <rcl_action_take_result_request+0x66>
 80137de:	6820      	ldr	r0, [r4, #0]
 80137e0:	3004      	adds	r0, #4
 80137e2:	f7fe fa79 	bl	8011cd8 <rcl_service_is_valid>
 80137e6:	b310      	cbz	r0, 801382e <rcl_action_take_result_request+0x66>
 80137e8:	6820      	ldr	r0, [r4, #0]
 80137ea:	3008      	adds	r0, #8
 80137ec:	f7fe fa74 	bl	8011cd8 <rcl_service_is_valid>
 80137f0:	b1e8      	cbz	r0, 801382e <rcl_action_take_result_request+0x66>
 80137f2:	6820      	ldr	r0, [r4, #0]
 80137f4:	300c      	adds	r0, #12
 80137f6:	f7f6 fd1b 	bl	800a230 <rcl_publisher_is_valid>
 80137fa:	b1c0      	cbz	r0, 801382e <rcl_action_take_result_request+0x66>
 80137fc:	6820      	ldr	r0, [r4, #0]
 80137fe:	3010      	adds	r0, #16
 8013800:	f7f6 fd16 	bl	800a230 <rcl_publisher_is_valid>
 8013804:	b198      	cbz	r0, 801382e <rcl_action_take_result_request+0x66>
 8013806:	b1d5      	cbz	r5, 801383e <rcl_action_take_result_request+0x76>
 8013808:	b1ce      	cbz	r6, 801383e <rcl_action_take_result_request+0x76>
 801380a:	6820      	ldr	r0, [r4, #0]
 801380c:	4632      	mov	r2, r6
 801380e:	4629      	mov	r1, r5
 8013810:	3008      	adds	r0, #8
 8013812:	f7fe fa09 	bl	8011c28 <rcl_take_request>
 8013816:	b148      	cbz	r0, 801382c <rcl_action_take_result_request+0x64>
 8013818:	280a      	cmp	r0, #10
 801381a:	d007      	beq.n	801382c <rcl_action_take_result_request+0x64>
 801381c:	f240 2259 	movw	r2, #601	@ 0x259
 8013820:	f640 0399 	movw	r3, #2201	@ 0x899
 8013824:	4290      	cmp	r0, r2
 8013826:	bf0c      	ite	eq
 8013828:	4618      	moveq	r0, r3
 801382a:	2001      	movne	r0, #1
 801382c:	bd70      	pop	{r4, r5, r6, pc}
 801382e:	f7f7 fcdf 	bl	800b1f0 <rcutils_reset_error>
 8013832:	f640 0098 	movw	r0, #2200	@ 0x898
 8013836:	bd70      	pop	{r4, r5, r6, pc}
 8013838:	f640 0098 	movw	r0, #2200	@ 0x898
 801383c:	bd70      	pop	{r4, r5, r6, pc}
 801383e:	200b      	movs	r0, #11
 8013840:	bd70      	pop	{r4, r5, r6, pc}
 8013842:	f640 0098 	movw	r0, #2200	@ 0x898
 8013846:	4770      	bx	lr

08013848 <rcl_action_take_cancel_request>:
 8013848:	2800      	cmp	r0, #0
 801384a:	d03a      	beq.n	80138c2 <rcl_action_take_cancel_request+0x7a>
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	4604      	mov	r4, r0
 8013850:	6800      	ldr	r0, [r0, #0]
 8013852:	b388      	cbz	r0, 80138b8 <rcl_action_take_cancel_request+0x70>
 8013854:	460d      	mov	r5, r1
 8013856:	4616      	mov	r6, r2
 8013858:	f7fe fa3e 	bl	8011cd8 <rcl_service_is_valid>
 801385c:	b338      	cbz	r0, 80138ae <rcl_action_take_cancel_request+0x66>
 801385e:	6820      	ldr	r0, [r4, #0]
 8013860:	3004      	adds	r0, #4
 8013862:	f7fe fa39 	bl	8011cd8 <rcl_service_is_valid>
 8013866:	b310      	cbz	r0, 80138ae <rcl_action_take_cancel_request+0x66>
 8013868:	6820      	ldr	r0, [r4, #0]
 801386a:	3008      	adds	r0, #8
 801386c:	f7fe fa34 	bl	8011cd8 <rcl_service_is_valid>
 8013870:	b1e8      	cbz	r0, 80138ae <rcl_action_take_cancel_request+0x66>
 8013872:	6820      	ldr	r0, [r4, #0]
 8013874:	300c      	adds	r0, #12
 8013876:	f7f6 fcdb 	bl	800a230 <rcl_publisher_is_valid>
 801387a:	b1c0      	cbz	r0, 80138ae <rcl_action_take_cancel_request+0x66>
 801387c:	6820      	ldr	r0, [r4, #0]
 801387e:	3010      	adds	r0, #16
 8013880:	f7f6 fcd6 	bl	800a230 <rcl_publisher_is_valid>
 8013884:	b198      	cbz	r0, 80138ae <rcl_action_take_cancel_request+0x66>
 8013886:	b1d5      	cbz	r5, 80138be <rcl_action_take_cancel_request+0x76>
 8013888:	b1ce      	cbz	r6, 80138be <rcl_action_take_cancel_request+0x76>
 801388a:	6820      	ldr	r0, [r4, #0]
 801388c:	4632      	mov	r2, r6
 801388e:	4629      	mov	r1, r5
 8013890:	3004      	adds	r0, #4
 8013892:	f7fe f9c9 	bl	8011c28 <rcl_take_request>
 8013896:	b148      	cbz	r0, 80138ac <rcl_action_take_cancel_request+0x64>
 8013898:	280a      	cmp	r0, #10
 801389a:	d007      	beq.n	80138ac <rcl_action_take_cancel_request+0x64>
 801389c:	f240 2259 	movw	r2, #601	@ 0x259
 80138a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80138a4:	4290      	cmp	r0, r2
 80138a6:	bf0c      	ite	eq
 80138a8:	4618      	moveq	r0, r3
 80138aa:	2001      	movne	r0, #1
 80138ac:	bd70      	pop	{r4, r5, r6, pc}
 80138ae:	f7f7 fc9f 	bl	800b1f0 <rcutils_reset_error>
 80138b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80138b6:	bd70      	pop	{r4, r5, r6, pc}
 80138b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80138bc:	bd70      	pop	{r4, r5, r6, pc}
 80138be:	200b      	movs	r0, #11
 80138c0:	bd70      	pop	{r4, r5, r6, pc}
 80138c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80138c6:	4770      	bx	lr

080138c8 <rcl_action_send_cancel_response>:
 80138c8:	b398      	cbz	r0, 8013932 <rcl_action_send_cancel_response+0x6a>
 80138ca:	b570      	push	{r4, r5, r6, lr}
 80138cc:	4604      	mov	r4, r0
 80138ce:	6800      	ldr	r0, [r0, #0]
 80138d0:	b350      	cbz	r0, 8013928 <rcl_action_send_cancel_response+0x60>
 80138d2:	460d      	mov	r5, r1
 80138d4:	4616      	mov	r6, r2
 80138d6:	f7fe f9ff 	bl	8011cd8 <rcl_service_is_valid>
 80138da:	b300      	cbz	r0, 801391e <rcl_action_send_cancel_response+0x56>
 80138dc:	6820      	ldr	r0, [r4, #0]
 80138de:	3004      	adds	r0, #4
 80138e0:	f7fe f9fa 	bl	8011cd8 <rcl_service_is_valid>
 80138e4:	b1d8      	cbz	r0, 801391e <rcl_action_send_cancel_response+0x56>
 80138e6:	6820      	ldr	r0, [r4, #0]
 80138e8:	3008      	adds	r0, #8
 80138ea:	f7fe f9f5 	bl	8011cd8 <rcl_service_is_valid>
 80138ee:	b1b0      	cbz	r0, 801391e <rcl_action_send_cancel_response+0x56>
 80138f0:	6820      	ldr	r0, [r4, #0]
 80138f2:	300c      	adds	r0, #12
 80138f4:	f7f6 fc9c 	bl	800a230 <rcl_publisher_is_valid>
 80138f8:	b188      	cbz	r0, 801391e <rcl_action_send_cancel_response+0x56>
 80138fa:	6820      	ldr	r0, [r4, #0]
 80138fc:	3010      	adds	r0, #16
 80138fe:	f7f6 fc97 	bl	800a230 <rcl_publisher_is_valid>
 8013902:	b160      	cbz	r0, 801391e <rcl_action_send_cancel_response+0x56>
 8013904:	b19d      	cbz	r5, 801392e <rcl_action_send_cancel_response+0x66>
 8013906:	b196      	cbz	r6, 801392e <rcl_action_send_cancel_response+0x66>
 8013908:	6820      	ldr	r0, [r4, #0]
 801390a:	4632      	mov	r2, r6
 801390c:	4629      	mov	r1, r5
 801390e:	3004      	adds	r0, #4
 8013910:	f7fe f9ca 	bl	8011ca8 <rcl_send_response>
 8013914:	b110      	cbz	r0, 801391c <rcl_action_send_cancel_response+0x54>
 8013916:	2802      	cmp	r0, #2
 8013918:	bf18      	it	ne
 801391a:	2001      	movne	r0, #1
 801391c:	bd70      	pop	{r4, r5, r6, pc}
 801391e:	f7f7 fc67 	bl	800b1f0 <rcutils_reset_error>
 8013922:	f640 0098 	movw	r0, #2200	@ 0x898
 8013926:	bd70      	pop	{r4, r5, r6, pc}
 8013928:	f640 0098 	movw	r0, #2200	@ 0x898
 801392c:	bd70      	pop	{r4, r5, r6, pc}
 801392e:	200b      	movs	r0, #11
 8013930:	bd70      	pop	{r4, r5, r6, pc}
 8013932:	f640 0098 	movw	r0, #2200	@ 0x898
 8013936:	4770      	bx	lr

08013938 <rcl_action_wait_set_add_action_server>:
 8013938:	2800      	cmp	r0, #0
 801393a:	d04d      	beq.n	80139d8 <rcl_action_wait_set_add_action_server+0xa0>
 801393c:	b570      	push	{r4, r5, r6, lr}
 801393e:	460c      	mov	r4, r1
 8013940:	b159      	cbz	r1, 801395a <rcl_action_wait_set_add_action_server+0x22>
 8013942:	4605      	mov	r5, r0
 8013944:	6808      	ldr	r0, [r1, #0]
 8013946:	b140      	cbz	r0, 801395a <rcl_action_wait_set_add_action_server+0x22>
 8013948:	4616      	mov	r6, r2
 801394a:	f7fe f9c5 	bl	8011cd8 <rcl_service_is_valid>
 801394e:	b120      	cbz	r0, 801395a <rcl_action_wait_set_add_action_server+0x22>
 8013950:	6820      	ldr	r0, [r4, #0]
 8013952:	3004      	adds	r0, #4
 8013954:	f7fe f9c0 	bl	8011cd8 <rcl_service_is_valid>
 8013958:	b910      	cbnz	r0, 8013960 <rcl_action_wait_set_add_action_server+0x28>
 801395a:	f640 0098 	movw	r0, #2200	@ 0x898
 801395e:	bd70      	pop	{r4, r5, r6, pc}
 8013960:	6820      	ldr	r0, [r4, #0]
 8013962:	3008      	adds	r0, #8
 8013964:	f7fe f9b8 	bl	8011cd8 <rcl_service_is_valid>
 8013968:	2800      	cmp	r0, #0
 801396a:	d0f6      	beq.n	801395a <rcl_action_wait_set_add_action_server+0x22>
 801396c:	6820      	ldr	r0, [r4, #0]
 801396e:	300c      	adds	r0, #12
 8013970:	f7f6 fc76 	bl	800a260 <rcl_publisher_is_valid_except_context>
 8013974:	2800      	cmp	r0, #0
 8013976:	d0f0      	beq.n	801395a <rcl_action_wait_set_add_action_server+0x22>
 8013978:	6820      	ldr	r0, [r4, #0]
 801397a:	3010      	adds	r0, #16
 801397c:	f7f6 fc70 	bl	800a260 <rcl_publisher_is_valid_except_context>
 8013980:	2800      	cmp	r0, #0
 8013982:	d0ea      	beq.n	801395a <rcl_action_wait_set_add_action_server+0x22>
 8013984:	6821      	ldr	r1, [r4, #0]
 8013986:	4628      	mov	r0, r5
 8013988:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801398c:	f7ff fad0 	bl	8012f30 <rcl_wait_set_add_service>
 8013990:	2800      	cmp	r0, #0
 8013992:	d1e4      	bne.n	801395e <rcl_action_wait_set_add_action_server+0x26>
 8013994:	6821      	ldr	r1, [r4, #0]
 8013996:	4628      	mov	r0, r5
 8013998:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801399c:	3104      	adds	r1, #4
 801399e:	f7ff fac7 	bl	8012f30 <rcl_wait_set_add_service>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d1db      	bne.n	801395e <rcl_action_wait_set_add_action_server+0x26>
 80139a6:	6821      	ldr	r1, [r4, #0]
 80139a8:	4628      	mov	r0, r5
 80139aa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80139ae:	3108      	adds	r1, #8
 80139b0:	f7ff fabe 	bl	8012f30 <rcl_wait_set_add_service>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d1d2      	bne.n	801395e <rcl_action_wait_set_add_action_server+0x26>
 80139b8:	6821      	ldr	r1, [r4, #0]
 80139ba:	4628      	mov	r0, r5
 80139bc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80139c0:	3114      	adds	r1, #20
 80139c2:	f7ff fa59 	bl	8012e78 <rcl_wait_set_add_timer>
 80139c6:	2800      	cmp	r0, #0
 80139c8:	d1c9      	bne.n	801395e <rcl_action_wait_set_add_action_server+0x26>
 80139ca:	2e00      	cmp	r6, #0
 80139cc:	d0c7      	beq.n	801395e <rcl_action_wait_set_add_action_server+0x26>
 80139ce:	6823      	ldr	r3, [r4, #0]
 80139d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80139d4:	6033      	str	r3, [r6, #0]
 80139d6:	bd70      	pop	{r4, r5, r6, pc}
 80139d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop

080139e0 <rcl_action_server_wait_set_get_entities_ready>:
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d05a      	beq.n	8013a9a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80139e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e6:	460c      	mov	r4, r1
 80139e8:	b161      	cbz	r1, 8013a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80139ea:	4605      	mov	r5, r0
 80139ec:	6808      	ldr	r0, [r1, #0]
 80139ee:	b148      	cbz	r0, 8013a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80139f0:	4616      	mov	r6, r2
 80139f2:	461f      	mov	r7, r3
 80139f4:	f7fe f970 	bl	8011cd8 <rcl_service_is_valid>
 80139f8:	b120      	cbz	r0, 8013a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80139fa:	6820      	ldr	r0, [r4, #0]
 80139fc:	3004      	adds	r0, #4
 80139fe:	f7fe f96b 	bl	8011cd8 <rcl_service_is_valid>
 8013a02:	b910      	cbnz	r0, 8013a0a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013a04:	f640 0098 	movw	r0, #2200	@ 0x898
 8013a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a0a:	6820      	ldr	r0, [r4, #0]
 8013a0c:	3008      	adds	r0, #8
 8013a0e:	f7fe f963 	bl	8011cd8 <rcl_service_is_valid>
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0f6      	beq.n	8013a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013a16:	6820      	ldr	r0, [r4, #0]
 8013a18:	300c      	adds	r0, #12
 8013a1a:	f7f6 fc21 	bl	800a260 <rcl_publisher_is_valid_except_context>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d0f0      	beq.n	8013a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013a22:	6820      	ldr	r0, [r4, #0]
 8013a24:	3010      	adds	r0, #16
 8013a26:	f7f6 fc1b 	bl	800a260 <rcl_publisher_is_valid_except_context>
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d0ea      	beq.n	8013a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013a2e:	b3be      	cbz	r6, 8013aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013a30:	b3b7      	cbz	r7, 8013aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013a32:	9b06      	ldr	r3, [sp, #24]
 8013a34:	b3a3      	cbz	r3, 8013aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013a36:	9b07      	ldr	r3, [sp, #28]
 8013a38:	b393      	cbz	r3, 8013aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013a3a:	6821      	ldr	r1, [r4, #0]
 8013a3c:	692a      	ldr	r2, [r5, #16]
 8013a3e:	6a2c      	ldr	r4, [r5, #32]
 8013a40:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8013a44:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8013a48:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8013a4c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8013a50:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8013a54:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8013a58:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013a5c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013a60:	1a64      	subs	r4, r4, r1
 8013a62:	fab4 f484 	clz	r4, r4
 8013a66:	0964      	lsrs	r4, r4, #5
 8013a68:	7034      	strb	r4, [r6, #0]
 8013a6a:	1d0c      	adds	r4, r1, #4
 8013a6c:	1b1b      	subs	r3, r3, r4
 8013a6e:	fab3 f383 	clz	r3, r3
 8013a72:	095b      	lsrs	r3, r3, #5
 8013a74:	f101 0408 	add.w	r4, r1, #8
 8013a78:	703b      	strb	r3, [r7, #0]
 8013a7a:	f101 0314 	add.w	r3, r1, #20
 8013a7e:	1b01      	subs	r1, r0, r4
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	fab1 f181 	clz	r1, r1
 8013a86:	9a06      	ldr	r2, [sp, #24]
 8013a88:	0949      	lsrs	r1, r1, #5
 8013a8a:	7011      	strb	r1, [r2, #0]
 8013a8c:	fab3 f383 	clz	r3, r3
 8013a90:	9a07      	ldr	r2, [sp, #28]
 8013a92:	095b      	lsrs	r3, r3, #5
 8013a94:	2000      	movs	r0, #0
 8013a96:	7013      	strb	r3, [r2, #0]
 8013a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a9e:	4770      	bx	lr
 8013aa0:	200b      	movs	r0, #11
 8013aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013aa4 <_execute_event_handler>:
 8013aa4:	2002      	movs	r0, #2
 8013aa6:	4770      	bx	lr

08013aa8 <_cancel_goal_event_handler>:
 8013aa8:	2003      	movs	r0, #3
 8013aaa:	4770      	bx	lr

08013aac <_succeed_event_handler>:
 8013aac:	2004      	movs	r0, #4
 8013aae:	4770      	bx	lr

08013ab0 <_abort_event_handler>:
 8013ab0:	2006      	movs	r0, #6
 8013ab2:	4770      	bx	lr

08013ab4 <_canceled_event_handler>:
 8013ab4:	2005      	movs	r0, #5
 8013ab6:	4770      	bx	lr

08013ab8 <rcl_action_transition_goal_state>:
 8013ab8:	b2c2      	uxtb	r2, r0
 8013aba:	2a06      	cmp	r2, #6
 8013abc:	d80c      	bhi.n	8013ad8 <rcl_action_transition_goal_state+0x20>
 8013abe:	2904      	cmp	r1, #4
 8013ac0:	d80a      	bhi.n	8013ad8 <rcl_action_transition_goal_state+0x20>
 8013ac2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8013ac6:	b410      	push	{r4}
 8013ac8:	1853      	adds	r3, r2, r1
 8013aca:	4c06      	ldr	r4, [pc, #24]	@ (8013ae4 <rcl_action_transition_goal_state+0x2c>)
 8013acc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013ad0:	b123      	cbz	r3, 8013adc <rcl_action_transition_goal_state+0x24>
 8013ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ad6:	4718      	bx	r3
 8013ad8:	2000      	movs	r0, #0
 8013ada:	4770      	bx	lr
 8013adc:	2000      	movs	r0, #0
 8013ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ae2:	4770      	bx	lr
 8013ae4:	080189e0 	.word	0x080189e0

08013ae8 <rcl_action_get_zero_initialized_cancel_response>:
 8013ae8:	b510      	push	{r4, lr}
 8013aea:	4c07      	ldr	r4, [pc, #28]	@ (8013b08 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013aec:	4686      	mov	lr, r0
 8013aee:	4684      	mov	ip, r0
 8013af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013af2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013af8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	f8cc 3000 	str.w	r3, [ip]
 8013b02:	4670      	mov	r0, lr
 8013b04:	bd10      	pop	{r4, pc}
 8013b06:	bf00      	nop
 8013b08:	08018a6c 	.word	0x08018a6c

08013b0c <rclc_action_send_result_request>:
 8013b0c:	b1d0      	cbz	r0, 8013b44 <rclc_action_send_result_request+0x38>
 8013b0e:	b500      	push	{lr}
 8013b10:	4684      	mov	ip, r0
 8013b12:	b087      	sub	sp, #28
 8013b14:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013b18:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013b1c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013b20:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013b24:	f10d 0e08 	add.w	lr, sp, #8
 8013b28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b2c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013b30:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8013b34:	a902      	add	r1, sp, #8
 8013b36:	3010      	adds	r0, #16
 8013b38:	f7ff fbda 	bl	80132f0 <rcl_action_send_result_request>
 8013b3c:	b920      	cbnz	r0, 8013b48 <rclc_action_send_result_request+0x3c>
 8013b3e:	b007      	add	sp, #28
 8013b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b44:	200b      	movs	r0, #11
 8013b46:	4770      	bx	lr
 8013b48:	9001      	str	r0, [sp, #4]
 8013b4a:	f7f7 fb51 	bl	800b1f0 <rcutils_reset_error>
 8013b4e:	9801      	ldr	r0, [sp, #4]
 8013b50:	b007      	add	sp, #28
 8013b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b56:	bf00      	nop

08013b58 <rclc_action_take_goal_handle>:
 8013b58:	b160      	cbz	r0, 8013b74 <rclc_action_take_goal_handle+0x1c>
 8013b5a:	6883      	ldr	r3, [r0, #8]
 8013b5c:	b143      	cbz	r3, 8013b70 <rclc_action_take_goal_handle+0x18>
 8013b5e:	6819      	ldr	r1, [r3, #0]
 8013b60:	6081      	str	r1, [r0, #8]
 8013b62:	2200      	movs	r2, #0
 8013b64:	721a      	strb	r2, [r3, #8]
 8013b66:	68c1      	ldr	r1, [r0, #12]
 8013b68:	6019      	str	r1, [r3, #0]
 8013b6a:	621a      	str	r2, [r3, #32]
 8013b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8013b6e:	60c3      	str	r3, [r0, #12]
 8013b70:	4618      	mov	r0, r3
 8013b72:	4770      	bx	lr
 8013b74:	4603      	mov	r3, r0
 8013b76:	e7fb      	b.n	8013b70 <rclc_action_take_goal_handle+0x18>

08013b78 <rclc_action_remove_used_goal_handle>:
 8013b78:	b180      	cbz	r0, 8013b9c <rclc_action_remove_used_goal_handle+0x24>
 8013b7a:	b179      	cbz	r1, 8013b9c <rclc_action_remove_used_goal_handle+0x24>
 8013b7c:	68c3      	ldr	r3, [r0, #12]
 8013b7e:	4299      	cmp	r1, r3
 8013b80:	d00d      	beq.n	8013b9e <rclc_action_remove_used_goal_handle+0x26>
 8013b82:	b12b      	cbz	r3, 8013b90 <rclc_action_remove_used_goal_handle+0x18>
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	4291      	cmp	r1, r2
 8013b88:	d003      	beq.n	8013b92 <rclc_action_remove_used_goal_handle+0x1a>
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d1f9      	bne.n	8013b84 <rclc_action_remove_used_goal_handle+0xc>
 8013b90:	4770      	bx	lr
 8013b92:	680a      	ldr	r2, [r1, #0]
 8013b94:	601a      	str	r2, [r3, #0]
 8013b96:	6883      	ldr	r3, [r0, #8]
 8013b98:	600b      	str	r3, [r1, #0]
 8013b9a:	6081      	str	r1, [r0, #8]
 8013b9c:	4770      	bx	lr
 8013b9e:	680b      	ldr	r3, [r1, #0]
 8013ba0:	60c3      	str	r3, [r0, #12]
 8013ba2:	e7f8      	b.n	8013b96 <rclc_action_remove_used_goal_handle+0x1e>

08013ba4 <rclc_action_find_goal_handle_by_uuid>:
 8013ba4:	b538      	push	{r3, r4, r5, lr}
 8013ba6:	b180      	cbz	r0, 8013bca <rclc_action_find_goal_handle_by_uuid+0x26>
 8013ba8:	460d      	mov	r5, r1
 8013baa:	b181      	cbz	r1, 8013bce <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013bac:	68c4      	ldr	r4, [r0, #12]
 8013bae:	b914      	cbnz	r4, 8013bb6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8013bb0:	e009      	b.n	8013bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013bb2:	6824      	ldr	r4, [r4, #0]
 8013bb4:	b13c      	cbz	r4, 8013bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013bb6:	f104 0009 	add.w	r0, r4, #9
 8013bba:	2210      	movs	r2, #16
 8013bbc:	4629      	mov	r1, r5
 8013bbe:	f003 f9ff 	bl	8016fc0 <memcmp>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d1f5      	bne.n	8013bb2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	bd38      	pop	{r3, r4, r5, pc}
 8013bca:	4604      	mov	r4, r0
 8013bcc:	e7fb      	b.n	8013bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013bce:	460c      	mov	r4, r1
 8013bd0:	e7f9      	b.n	8013bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013bd2:	bf00      	nop

08013bd4 <rclc_action_find_first_handle_by_status>:
 8013bd4:	b140      	cbz	r0, 8013be8 <rclc_action_find_first_handle_by_status+0x14>
 8013bd6:	68c0      	ldr	r0, [r0, #12]
 8013bd8:	b910      	cbnz	r0, 8013be0 <rclc_action_find_first_handle_by_status+0xc>
 8013bda:	e005      	b.n	8013be8 <rclc_action_find_first_handle_by_status+0x14>
 8013bdc:	6800      	ldr	r0, [r0, #0]
 8013bde:	b118      	cbz	r0, 8013be8 <rclc_action_find_first_handle_by_status+0x14>
 8013be0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013be4:	428b      	cmp	r3, r1
 8013be6:	d1f9      	bne.n	8013bdc <rclc_action_find_first_handle_by_status+0x8>
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop

08013bec <rclc_action_find_first_terminated_handle>:
 8013bec:	b140      	cbz	r0, 8013c00 <rclc_action_find_first_terminated_handle+0x14>
 8013bee:	68c0      	ldr	r0, [r0, #12]
 8013bf0:	b910      	cbnz	r0, 8013bf8 <rclc_action_find_first_terminated_handle+0xc>
 8013bf2:	e005      	b.n	8013c00 <rclc_action_find_first_terminated_handle+0x14>
 8013bf4:	6800      	ldr	r0, [r0, #0]
 8013bf6:	b118      	cbz	r0, 8013c00 <rclc_action_find_first_terminated_handle+0x14>
 8013bf8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013bfc:	2b03      	cmp	r3, #3
 8013bfe:	ddf9      	ble.n	8013bf4 <rclc_action_find_first_terminated_handle+0x8>
 8013c00:	4770      	bx	lr
 8013c02:	bf00      	nop

08013c04 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013c04:	b170      	cbz	r0, 8013c24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013c06:	68c0      	ldr	r0, [r0, #12]
 8013c08:	b160      	cbz	r0, 8013c24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013c0a:	b410      	push	{r4}
 8013c0c:	e001      	b.n	8013c12 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013c0e:	6800      	ldr	r0, [r0, #0]
 8013c10:	b128      	cbz	r0, 8013c1e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013c12:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8013c16:	4299      	cmp	r1, r3
 8013c18:	bf08      	it	eq
 8013c1a:	4294      	cmpeq	r4, r2
 8013c1c:	d1f7      	bne.n	8013c0e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c22:	4770      	bx	lr
 8013c24:	4770      	bx	lr
 8013c26:	bf00      	nop

08013c28 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013c28:	b170      	cbz	r0, 8013c48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013c2a:	68c0      	ldr	r0, [r0, #12]
 8013c2c:	b160      	cbz	r0, 8013c48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013c2e:	b410      	push	{r4}
 8013c30:	e001      	b.n	8013c36 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8013c32:	6800      	ldr	r0, [r0, #0]
 8013c34:	b128      	cbz	r0, 8013c42 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8013c36:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8013c3a:	4299      	cmp	r1, r3
 8013c3c:	bf08      	it	eq
 8013c3e:	4294      	cmpeq	r4, r2
 8013c40:	d1f7      	bne.n	8013c32 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8013c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c46:	4770      	bx	lr
 8013c48:	4770      	bx	lr
 8013c4a:	bf00      	nop

08013c4c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013c4c:	b170      	cbz	r0, 8013c6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013c4e:	68c0      	ldr	r0, [r0, #12]
 8013c50:	b160      	cbz	r0, 8013c6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013c52:	b410      	push	{r4}
 8013c54:	e001      	b.n	8013c5a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8013c56:	6800      	ldr	r0, [r0, #0]
 8013c58:	b128      	cbz	r0, 8013c66 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8013c5a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8013c5e:	4299      	cmp	r1, r3
 8013c60:	bf08      	it	eq
 8013c62:	4294      	cmpeq	r4, r2
 8013c64:	d1f7      	bne.n	8013c56 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8013c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop

08013c70 <rclc_action_find_first_handle_with_goal_response>:
 8013c70:	b140      	cbz	r0, 8013c84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013c72:	68c0      	ldr	r0, [r0, #12]
 8013c74:	b910      	cbnz	r0, 8013c7c <rclc_action_find_first_handle_with_goal_response+0xc>
 8013c76:	e005      	b.n	8013c84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013c78:	6800      	ldr	r0, [r0, #0]
 8013c7a:	b118      	cbz	r0, 8013c84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013c7c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d0f9      	beq.n	8013c78 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop

08013c88 <rclc_action_find_first_handle_with_result_response>:
 8013c88:	b140      	cbz	r0, 8013c9c <rclc_action_find_first_handle_with_result_response+0x14>
 8013c8a:	68c0      	ldr	r0, [r0, #12]
 8013c8c:	b910      	cbnz	r0, 8013c94 <rclc_action_find_first_handle_with_result_response+0xc>
 8013c8e:	e005      	b.n	8013c9c <rclc_action_find_first_handle_with_result_response+0x14>
 8013c90:	6800      	ldr	r0, [r0, #0]
 8013c92:	b118      	cbz	r0, 8013c9c <rclc_action_find_first_handle_with_result_response+0x14>
 8013c94:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d0f9      	beq.n	8013c90 <rclc_action_find_first_handle_with_result_response+0x8>
 8013c9c:	4770      	bx	lr
 8013c9e:	bf00      	nop

08013ca0 <rclc_action_server_response_goal_request>:
 8013ca0:	b198      	cbz	r0, 8013cca <rclc_action_server_response_goal_request+0x2a>
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	6844      	ldr	r4, [r0, #4]
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	2200      	movs	r2, #0
 8013caa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013cae:	460b      	mov	r3, r1
 8013cb0:	9205      	str	r2, [sp, #20]
 8013cb2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8013cb6:	aa03      	add	r2, sp, #12
 8013cb8:	f104 0010 	add.w	r0, r4, #16
 8013cbc:	f88d 300c 	strb.w	r3, [sp, #12]
 8013cc0:	f7ff fd4a 	bl	8013758 <rcl_action_send_goal_response>
 8013cc4:	b918      	cbnz	r0, 8013cce <rclc_action_server_response_goal_request+0x2e>
 8013cc6:	b006      	add	sp, #24
 8013cc8:	bd10      	pop	{r4, pc}
 8013cca:	200b      	movs	r0, #11
 8013ccc:	4770      	bx	lr
 8013cce:	9001      	str	r0, [sp, #4]
 8013cd0:	f7f7 fa8e 	bl	800b1f0 <rcutils_reset_error>
 8013cd4:	9801      	ldr	r0, [sp, #4]
 8013cd6:	b006      	add	sp, #24
 8013cd8:	bd10      	pop	{r4, pc}
 8013cda:	bf00      	nop
 8013cdc:	0000      	movs	r0, r0
	...

08013ce0 <rclc_action_server_goal_cancel_accept>:
 8013ce0:	b310      	cbz	r0, 8013d28 <rclc_action_server_goal_cancel_accept+0x48>
 8013ce2:	b510      	push	{r4, lr}
 8013ce4:	b090      	sub	sp, #64	@ 0x40
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	a806      	add	r0, sp, #24
 8013cea:	f7ff fefd 	bl	8013ae8 <rcl_action_get_zero_initialized_cancel_response>
 8013cee:	2300      	movs	r3, #0
 8013cf0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013cf4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013cf8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013cfc:	f88d 3018 	strb.w	r3, [sp, #24]
 8013d00:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013d04:	f8cd d01c 	str.w	sp, [sp, #28]
 8013d08:	46ec      	mov	ip, sp
 8013d0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d0e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013d30 <rclc_action_server_goal_cancel_accept+0x50>
 8013d12:	6860      	ldr	r0, [r4, #4]
 8013d14:	aa06      	add	r2, sp, #24
 8013d16:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013d1a:	3010      	adds	r0, #16
 8013d1c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013d20:	f7ff fdd2 	bl	80138c8 <rcl_action_send_cancel_response>
 8013d24:	b010      	add	sp, #64	@ 0x40
 8013d26:	bd10      	pop	{r4, pc}
 8013d28:	200b      	movs	r0, #11
 8013d2a:	4770      	bx	lr
 8013d2c:	f3af 8000 	nop.w
 8013d30:	00000001 	.word	0x00000001
 8013d34:	00000001 	.word	0x00000001

08013d38 <rclc_action_server_goal_cancel_reject>:
 8013d38:	b082      	sub	sp, #8
 8013d3a:	b530      	push	{r4, r5, lr}
 8013d3c:	b08b      	sub	sp, #44	@ 0x2c
 8013d3e:	ac0e      	add	r4, sp, #56	@ 0x38
 8013d40:	e884 000c 	stmia.w	r4, {r2, r3}
 8013d44:	b188      	cbz	r0, 8013d6a <rclc_action_server_goal_cancel_reject+0x32>
 8013d46:	4604      	mov	r4, r0
 8013d48:	a801      	add	r0, sp, #4
 8013d4a:	460d      	mov	r5, r1
 8013d4c:	f7ff fecc 	bl	8013ae8 <rcl_action_get_zero_initialized_cancel_response>
 8013d50:	aa01      	add	r2, sp, #4
 8013d52:	a90e      	add	r1, sp, #56	@ 0x38
 8013d54:	f104 0010 	add.w	r0, r4, #16
 8013d58:	f88d 5004 	strb.w	r5, [sp, #4]
 8013d5c:	f7ff fdb4 	bl	80138c8 <rcl_action_send_cancel_response>
 8013d60:	b00b      	add	sp, #44	@ 0x2c
 8013d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d66:	b002      	add	sp, #8
 8013d68:	4770      	bx	lr
 8013d6a:	200b      	movs	r0, #11
 8013d6c:	b00b      	add	sp, #44	@ 0x2c
 8013d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d72:	b002      	add	sp, #8
 8013d74:	4770      	bx	lr
 8013d76:	bf00      	nop

08013d78 <__atomic_load_8>:
 8013d78:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013d7c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013d80:	4a15      	ldr	r2, [pc, #84]	@ (8013dd8 <__atomic_load_8+0x60>)
 8013d82:	4b16      	ldr	r3, [pc, #88]	@ (8013ddc <__atomic_load_8+0x64>)
 8013d84:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013d88:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013d8c:	fb02 f101 	mul.w	r1, r2, r1
 8013d90:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013d94:	fba3 2301 	umull	r2, r3, r3, r1
 8013d98:	091b      	lsrs	r3, r3, #4
 8013d9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013d9e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013da2:	b4d0      	push	{r4, r6, r7}
 8013da4:	4c0e      	ldr	r4, [pc, #56]	@ (8013de0 <__atomic_load_8+0x68>)
 8013da6:	1ac9      	subs	r1, r1, r3
 8013da8:	1862      	adds	r2, r4, r1
 8013daa:	f04f 0c01 	mov.w	ip, #1
 8013dae:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013db2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013db6:	2e00      	cmp	r6, #0
 8013db8:	d1f9      	bne.n	8013dae <__atomic_load_8+0x36>
 8013dba:	f3bf 8f5b 	dmb	ish
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d1f4      	bne.n	8013dae <__atomic_load_8+0x36>
 8013dc4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013dc8:	f3bf 8f5b 	dmb	ish
 8013dcc:	5463      	strb	r3, [r4, r1]
 8013dce:	4630      	mov	r0, r6
 8013dd0:	4639      	mov	r1, r7
 8013dd2:	bcd0      	pop	{r4, r6, r7}
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	27d4eb2d 	.word	0x27d4eb2d
 8013ddc:	b21642c9 	.word	0xb21642c9
 8013de0:	2000ad18 	.word	0x2000ad18

08013de4 <__atomic_store_8>:
 8013de4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013de8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013dec:	b570      	push	{r4, r5, r6, lr}
 8013dee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013df2:	4c14      	ldr	r4, [pc, #80]	@ (8013e44 <__atomic_store_8+0x60>)
 8013df4:	4d14      	ldr	r5, [pc, #80]	@ (8013e48 <__atomic_store_8+0x64>)
 8013df6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013dfa:	fb04 f101 	mul.w	r1, r4, r1
 8013dfe:	4c13      	ldr	r4, [pc, #76]	@ (8013e4c <__atomic_store_8+0x68>)
 8013e00:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013e04:	fba4 4e01 	umull	r4, lr, r4, r1
 8013e08:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8013e0c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013e10:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013e14:	eba1 0e0e 	sub.w	lr, r1, lr
 8013e18:	eb05 0c0e 	add.w	ip, r5, lr
 8013e1c:	f04f 0401 	mov.w	r4, #1
 8013e20:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013e24:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013e28:	2e00      	cmp	r6, #0
 8013e2a:	d1f9      	bne.n	8013e20 <__atomic_store_8+0x3c>
 8013e2c:	f3bf 8f5b 	dmb	ish
 8013e30:	b2c9      	uxtb	r1, r1
 8013e32:	2900      	cmp	r1, #0
 8013e34:	d1f4      	bne.n	8013e20 <__atomic_store_8+0x3c>
 8013e36:	e9c0 2300 	strd	r2, r3, [r0]
 8013e3a:	f3bf 8f5b 	dmb	ish
 8013e3e:	f805 100e 	strb.w	r1, [r5, lr]
 8013e42:	bd70      	pop	{r4, r5, r6, pc}
 8013e44:	27d4eb2d 	.word	0x27d4eb2d
 8013e48:	2000ad18 	.word	0x2000ad18
 8013e4c:	b21642c9 	.word	0xb21642c9

08013e50 <__atomic_exchange_8>:
 8013e50:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013e54:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8013e58:	4916      	ldr	r1, [pc, #88]	@ (8013eb4 <__atomic_exchange_8+0x64>)
 8013e5a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8013e5e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013e62:	fb01 fc0c 	mul.w	ip, r1, ip
 8013e66:	4914      	ldr	r1, [pc, #80]	@ (8013eb8 <__atomic_exchange_8+0x68>)
 8013e68:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8013e6c:	b570      	push	{r4, r5, r6, lr}
 8013e6e:	4605      	mov	r5, r0
 8013e70:	fba1 010c 	umull	r0, r1, r1, ip
 8013e74:	0909      	lsrs	r1, r1, #4
 8013e76:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013e7a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8013ebc <__atomic_exchange_8+0x6c>)
 8013e80:	ebac 0c01 	sub.w	ip, ip, r1
 8013e84:	eb06 010c 	add.w	r1, r6, ip
 8013e88:	f04f 0e01 	mov.w	lr, #1
 8013e8c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013e90:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d1f9      	bne.n	8013e8c <__atomic_exchange_8+0x3c>
 8013e98:	f3bf 8f5b 	dmb	ish
 8013e9c:	b2e4      	uxtb	r4, r4
 8013e9e:	2c00      	cmp	r4, #0
 8013ea0:	d1f4      	bne.n	8013e8c <__atomic_exchange_8+0x3c>
 8013ea2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013ea6:	e9c5 2300 	strd	r2, r3, [r5]
 8013eaa:	f3bf 8f5b 	dmb	ish
 8013eae:	f806 400c 	strb.w	r4, [r6, ip]
 8013eb2:	bd70      	pop	{r4, r5, r6, pc}
 8013eb4:	27d4eb2d 	.word	0x27d4eb2d
 8013eb8:	b21642c9 	.word	0xb21642c9
 8013ebc:	2000ad18 	.word	0x2000ad18

08013ec0 <rcutils_get_env>:
 8013ec0:	b168      	cbz	r0, 8013ede <rcutils_get_env+0x1e>
 8013ec2:	b510      	push	{r4, lr}
 8013ec4:	460c      	mov	r4, r1
 8013ec6:	b129      	cbz	r1, 8013ed4 <rcutils_get_env+0x14>
 8013ec8:	f002 fcd0 	bl	801686c <getenv>
 8013ecc:	b120      	cbz	r0, 8013ed8 <rcutils_get_env+0x18>
 8013ece:	6020      	str	r0, [r4, #0]
 8013ed0:	2000      	movs	r0, #0
 8013ed2:	bd10      	pop	{r4, pc}
 8013ed4:	4803      	ldr	r0, [pc, #12]	@ (8013ee4 <rcutils_get_env+0x24>)
 8013ed6:	bd10      	pop	{r4, pc}
 8013ed8:	4b03      	ldr	r3, [pc, #12]	@ (8013ee8 <rcutils_get_env+0x28>)
 8013eda:	6023      	str	r3, [r4, #0]
 8013edc:	bd10      	pop	{r4, pc}
 8013ede:	4803      	ldr	r0, [pc, #12]	@ (8013eec <rcutils_get_env+0x2c>)
 8013ee0:	4770      	bx	lr
 8013ee2:	bf00      	nop
 8013ee4:	0801839c 	.word	0x0801839c
 8013ee8:	080184c0 	.word	0x080184c0
 8013eec:	08018380 	.word	0x08018380

08013ef0 <rcutils_format_string_limit>:
 8013ef0:	b40f      	push	{r0, r1, r2, r3}
 8013ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ef4:	b083      	sub	sp, #12
 8013ef6:	ac08      	add	r4, sp, #32
 8013ef8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013efa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013efe:	b34e      	cbz	r6, 8013f54 <rcutils_format_string_limit+0x64>
 8013f00:	a808      	add	r0, sp, #32
 8013f02:	f7f7 f94f 	bl	800b1a4 <rcutils_allocator_is_valid>
 8013f06:	b328      	cbz	r0, 8013f54 <rcutils_format_string_limit+0x64>
 8013f08:	2100      	movs	r1, #0
 8013f0a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013f0c:	4632      	mov	r2, r6
 8013f0e:	4608      	mov	r0, r1
 8013f10:	e9cd 3300 	strd	r3, r3, [sp]
 8013f14:	f000 f8f4 	bl	8014100 <rcutils_vsnprintf>
 8013f18:	1c43      	adds	r3, r0, #1
 8013f1a:	4605      	mov	r5, r0
 8013f1c:	d01a      	beq.n	8013f54 <rcutils_format_string_limit+0x64>
 8013f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013f22:	1c47      	adds	r7, r0, #1
 8013f24:	429f      	cmp	r7, r3
 8013f26:	bf84      	itt	hi
 8013f28:	461f      	movhi	r7, r3
 8013f2a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8013f2e:	4638      	mov	r0, r7
 8013f30:	9b08      	ldr	r3, [sp, #32]
 8013f32:	4798      	blx	r3
 8013f34:	4604      	mov	r4, r0
 8013f36:	b168      	cbz	r0, 8013f54 <rcutils_format_string_limit+0x64>
 8013f38:	9b01      	ldr	r3, [sp, #4]
 8013f3a:	4632      	mov	r2, r6
 8013f3c:	4639      	mov	r1, r7
 8013f3e:	f000 f8df 	bl	8014100 <rcutils_vsnprintf>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	db02      	blt.n	8013f4c <rcutils_format_string_limit+0x5c>
 8013f46:	2300      	movs	r3, #0
 8013f48:	5563      	strb	r3, [r4, r5]
 8013f4a:	e004      	b.n	8013f56 <rcutils_format_string_limit+0x66>
 8013f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013f50:	4620      	mov	r0, r4
 8013f52:	4798      	blx	r3
 8013f54:	2400      	movs	r4, #0
 8013f56:	4620      	mov	r0, r4
 8013f58:	b003      	add	sp, #12
 8013f5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013f5e:	b004      	add	sp, #16
 8013f60:	4770      	bx	lr
 8013f62:	bf00      	nop

08013f64 <rcutils_repl_str>:
 8013f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f68:	ed2d 8b02 	vpush	{d8}
 8013f6c:	b087      	sub	sp, #28
 8013f6e:	4680      	mov	r8, r0
 8013f70:	4608      	mov	r0, r1
 8013f72:	f8cd 8004 	str.w	r8, [sp, #4]
 8013f76:	ee08 2a10 	vmov	s16, r2
 8013f7a:	468a      	mov	sl, r1
 8013f7c:	4699      	mov	r9, r3
 8013f7e:	f7ec f959 	bl	8000234 <strlen>
 8013f82:	2600      	movs	r6, #0
 8013f84:	4647      	mov	r7, r8
 8013f86:	9002      	str	r0, [sp, #8]
 8013f88:	46b3      	mov	fp, r6
 8013f8a:	2510      	movs	r5, #16
 8013f8c:	46b0      	mov	r8, r6
 8013f8e:	e01d      	b.n	8013fcc <rcutils_repl_str+0x68>
 8013f90:	f10b 0b01 	add.w	fp, fp, #1
 8013f94:	455e      	cmp	r6, fp
 8013f96:	d211      	bcs.n	8013fbc <rcutils_repl_str+0x58>
 8013f98:	442e      	add	r6, r5
 8013f9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f9e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013fa2:	00b1      	lsls	r1, r6, #2
 8013fa4:	4798      	blx	r3
 8013fa6:	2800      	cmp	r0, #0
 8013fa8:	f000 8088 	beq.w	80140bc <rcutils_repl_str+0x158>
 8013fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fb0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	bf28      	it	cs
 8013fb8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013fbc:	9a01      	ldr	r2, [sp, #4]
 8013fbe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013fc2:	1aa2      	subs	r2, r4, r2
 8013fc4:	f843 2c04 	str.w	r2, [r3, #-4]
 8013fc8:	9b02      	ldr	r3, [sp, #8]
 8013fca:	18e7      	adds	r7, r4, r3
 8013fcc:	4651      	mov	r1, sl
 8013fce:	4638      	mov	r0, r7
 8013fd0:	f003 f847 	bl	8017062 <strstr>
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	4640      	mov	r0, r8
 8013fd8:	2c00      	cmp	r4, #0
 8013fda:	d1d9      	bne.n	8013f90 <rcutils_repl_str+0x2c>
 8013fdc:	46b8      	mov	r8, r7
 8013fde:	4607      	mov	r7, r0
 8013fe0:	4640      	mov	r0, r8
 8013fe2:	f7ec f927 	bl	8000234 <strlen>
 8013fe6:	9b01      	ldr	r3, [sp, #4]
 8013fe8:	eba8 0303 	sub.w	r3, r8, r3
 8013fec:	181c      	adds	r4, r3, r0
 8013fee:	9404      	str	r4, [sp, #16]
 8013ff0:	f1bb 0f00 	cmp.w	fp, #0
 8013ff4:	d04a      	beq.n	801408c <rcutils_repl_str+0x128>
 8013ff6:	ee18 0a10 	vmov	r0, s16
 8013ffa:	f7ec f91b 	bl	8000234 <strlen>
 8013ffe:	9b02      	ldr	r3, [sp, #8]
 8014000:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014004:	1ac3      	subs	r3, r0, r3
 8014006:	fb0b 4303 	mla	r3, fp, r3, r4
 801400a:	461a      	mov	r2, r3
 801400c:	9305      	str	r3, [sp, #20]
 801400e:	4606      	mov	r6, r0
 8014010:	f8d9 3000 	ldr.w	r3, [r9]
 8014014:	1c50      	adds	r0, r2, #1
 8014016:	4798      	blx	r3
 8014018:	9003      	str	r0, [sp, #12]
 801401a:	2800      	cmp	r0, #0
 801401c:	d04f      	beq.n	80140be <rcutils_repl_str+0x15a>
 801401e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	4641      	mov	r1, r8
 8014026:	f003 f8be 	bl	80171a6 <memcpy>
 801402a:	683d      	ldr	r5, [r7, #0]
 801402c:	9b03      	ldr	r3, [sp, #12]
 801402e:	9701      	str	r7, [sp, #4]
 8014030:	46ba      	mov	sl, r7
 8014032:	441d      	add	r5, r3
 8014034:	9f02      	ldr	r7, [sp, #8]
 8014036:	f8cd 9008 	str.w	r9, [sp, #8]
 801403a:	2401      	movs	r4, #1
 801403c:	46d1      	mov	r9, sl
 801403e:	ee18 aa10 	vmov	sl, s16
 8014042:	e00a      	b.n	801405a <rcutils_repl_str+0xf6>
 8014044:	f8d9 5000 	ldr.w	r5, [r9]
 8014048:	1aaa      	subs	r2, r5, r2
 801404a:	1885      	adds	r5, r0, r2
 801404c:	f003 f8ab 	bl	80171a6 <memcpy>
 8014050:	45a3      	cmp	fp, r4
 8014052:	f104 0201 	add.w	r2, r4, #1
 8014056:	d935      	bls.n	80140c4 <rcutils_repl_str+0x160>
 8014058:	4614      	mov	r4, r2
 801405a:	4632      	mov	r2, r6
 801405c:	4651      	mov	r1, sl
 801405e:	4628      	mov	r0, r5
 8014060:	f003 f8a1 	bl	80171a6 <memcpy>
 8014064:	f859 2b04 	ldr.w	r2, [r9], #4
 8014068:	45a3      	cmp	fp, r4
 801406a:	443a      	add	r2, r7
 801406c:	eb05 0006 	add.w	r0, r5, r6
 8014070:	eb08 0102 	add.w	r1, r8, r2
 8014074:	d1e6      	bne.n	8014044 <rcutils_repl_str+0xe0>
 8014076:	9b04      	ldr	r3, [sp, #16]
 8014078:	1a9a      	subs	r2, r3, r2
 801407a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801407e:	f003 f892 	bl	80171a6 <memcpy>
 8014082:	9a03      	ldr	r2, [sp, #12]
 8014084:	9905      	ldr	r1, [sp, #20]
 8014086:	2300      	movs	r3, #0
 8014088:	5453      	strb	r3, [r2, r1]
 801408a:	e00b      	b.n	80140a4 <rcutils_repl_str+0x140>
 801408c:	4620      	mov	r0, r4
 801408e:	f8d9 3000 	ldr.w	r3, [r9]
 8014092:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014096:	3001      	adds	r0, #1
 8014098:	4798      	blx	r3
 801409a:	9003      	str	r0, [sp, #12]
 801409c:	b110      	cbz	r0, 80140a4 <rcutils_repl_str+0x140>
 801409e:	9901      	ldr	r1, [sp, #4]
 80140a0:	f003 f879 	bl	8017196 <strcpy>
 80140a4:	4638      	mov	r0, r7
 80140a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80140aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80140ae:	4798      	blx	r3
 80140b0:	9803      	ldr	r0, [sp, #12]
 80140b2:	b007      	add	sp, #28
 80140b4:	ecbd 8b02 	vpop	{d8}
 80140b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140bc:	4647      	mov	r7, r8
 80140be:	2300      	movs	r3, #0
 80140c0:	9303      	str	r3, [sp, #12]
 80140c2:	e7ef      	b.n	80140a4 <rcutils_repl_str+0x140>
 80140c4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80140c8:	e7db      	b.n	8014082 <rcutils_repl_str+0x11e>
 80140ca:	bf00      	nop

080140cc <rcutils_snprintf>:
 80140cc:	b40c      	push	{r2, r3}
 80140ce:	b530      	push	{r4, r5, lr}
 80140d0:	b083      	sub	sp, #12
 80140d2:	ab06      	add	r3, sp, #24
 80140d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80140d8:	9301      	str	r3, [sp, #4]
 80140da:	b152      	cbz	r2, 80140f2 <rcutils_snprintf+0x26>
 80140dc:	b138      	cbz	r0, 80140ee <rcutils_snprintf+0x22>
 80140de:	b141      	cbz	r1, 80140f2 <rcutils_snprintf+0x26>
 80140e0:	f002 ff60 	bl	8016fa4 <vsniprintf>
 80140e4:	b003      	add	sp, #12
 80140e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140ea:	b002      	add	sp, #8
 80140ec:	4770      	bx	lr
 80140ee:	2900      	cmp	r1, #0
 80140f0:	d0f6      	beq.n	80140e0 <rcutils_snprintf+0x14>
 80140f2:	f003 f823 	bl	801713c <__errno>
 80140f6:	2316      	movs	r3, #22
 80140f8:	6003      	str	r3, [r0, #0]
 80140fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80140fe:	e7f1      	b.n	80140e4 <rcutils_snprintf+0x18>

08014100 <rcutils_vsnprintf>:
 8014100:	b570      	push	{r4, r5, r6, lr}
 8014102:	b13a      	cbz	r2, 8014114 <rcutils_vsnprintf+0x14>
 8014104:	b120      	cbz	r0, 8014110 <rcutils_vsnprintf+0x10>
 8014106:	b129      	cbz	r1, 8014114 <rcutils_vsnprintf+0x14>
 8014108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801410c:	f002 bf4a 	b.w	8016fa4 <vsniprintf>
 8014110:	2900      	cmp	r1, #0
 8014112:	d0f9      	beq.n	8014108 <rcutils_vsnprintf+0x8>
 8014114:	f003 f812 	bl	801713c <__errno>
 8014118:	2316      	movs	r3, #22
 801411a:	6003      	str	r3, [r0, #0]
 801411c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014120:	bd70      	pop	{r4, r5, r6, pc}
 8014122:	bf00      	nop

08014124 <rcutils_strdup>:
 8014124:	b084      	sub	sp, #16
 8014126:	b570      	push	{r4, r5, r6, lr}
 8014128:	b082      	sub	sp, #8
 801412a:	ac07      	add	r4, sp, #28
 801412c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014130:	4605      	mov	r5, r0
 8014132:	b1b0      	cbz	r0, 8014162 <rcutils_strdup+0x3e>
 8014134:	f7ec f87e 	bl	8000234 <strlen>
 8014138:	1c42      	adds	r2, r0, #1
 801413a:	9b07      	ldr	r3, [sp, #28]
 801413c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801413e:	9201      	str	r2, [sp, #4]
 8014140:	4606      	mov	r6, r0
 8014142:	4610      	mov	r0, r2
 8014144:	4798      	blx	r3
 8014146:	4604      	mov	r4, r0
 8014148:	b128      	cbz	r0, 8014156 <rcutils_strdup+0x32>
 801414a:	9a01      	ldr	r2, [sp, #4]
 801414c:	4629      	mov	r1, r5
 801414e:	f003 f82a 	bl	80171a6 <memcpy>
 8014152:	2300      	movs	r3, #0
 8014154:	55a3      	strb	r3, [r4, r6]
 8014156:	4620      	mov	r0, r4
 8014158:	b002      	add	sp, #8
 801415a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801415e:	b004      	add	sp, #16
 8014160:	4770      	bx	lr
 8014162:	4604      	mov	r4, r0
 8014164:	e7f7      	b.n	8014156 <rcutils_strdup+0x32>
 8014166:	bf00      	nop

08014168 <rcutils_strndup>:
 8014168:	b082      	sub	sp, #8
 801416a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416c:	ac06      	add	r4, sp, #24
 801416e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014172:	4605      	mov	r5, r0
 8014174:	b188      	cbz	r0, 801419a <rcutils_strndup+0x32>
 8014176:	1c4f      	adds	r7, r1, #1
 8014178:	460e      	mov	r6, r1
 801417a:	4638      	mov	r0, r7
 801417c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801417e:	4790      	blx	r2
 8014180:	4604      	mov	r4, r0
 8014182:	b128      	cbz	r0, 8014190 <rcutils_strndup+0x28>
 8014184:	463a      	mov	r2, r7
 8014186:	4629      	mov	r1, r5
 8014188:	f003 f80d 	bl	80171a6 <memcpy>
 801418c:	2300      	movs	r3, #0
 801418e:	55a3      	strb	r3, [r4, r6]
 8014190:	4620      	mov	r0, r4
 8014192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014196:	b002      	add	sp, #8
 8014198:	4770      	bx	lr
 801419a:	4604      	mov	r4, r0
 801419c:	e7f8      	b.n	8014190 <rcutils_strndup+0x28>
 801419e:	bf00      	nop

080141a0 <rcutils_get_zero_initialized_string_map>:
 80141a0:	4b01      	ldr	r3, [pc, #4]	@ (80141a8 <rcutils_get_zero_initialized_string_map+0x8>)
 80141a2:	2000      	movs	r0, #0
 80141a4:	6018      	str	r0, [r3, #0]
 80141a6:	4770      	bx	lr
 80141a8:	2000ad30 	.word	0x2000ad30

080141ac <rcutils_string_map_reserve>:
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d05f      	beq.n	8014270 <rcutils_string_map_reserve+0xc4>
 80141b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141b4:	460c      	mov	r4, r1
 80141b6:	6801      	ldr	r1, [r0, #0]
 80141b8:	b082      	sub	sp, #8
 80141ba:	4605      	mov	r5, r0
 80141bc:	b129      	cbz	r1, 80141ca <rcutils_string_map_reserve+0x1e>
 80141be:	68cb      	ldr	r3, [r1, #12]
 80141c0:	42a3      	cmp	r3, r4
 80141c2:	d906      	bls.n	80141d2 <rcutils_string_map_reserve+0x26>
 80141c4:	461c      	mov	r4, r3
 80141c6:	2900      	cmp	r1, #0
 80141c8:	d1f9      	bne.n	80141be <rcutils_string_map_reserve+0x12>
 80141ca:	201f      	movs	r0, #31
 80141cc:	b002      	add	sp, #8
 80141ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d2:	688b      	ldr	r3, [r1, #8]
 80141d4:	42a3      	cmp	r3, r4
 80141d6:	d047      	beq.n	8014268 <rcutils_string_map_reserve+0xbc>
 80141d8:	6a0e      	ldr	r6, [r1, #32]
 80141da:	2c00      	cmp	r4, #0
 80141dc:	d034      	beq.n	8014248 <rcutils_string_map_reserve+0x9c>
 80141de:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80141e2:	d243      	bcs.n	801426c <rcutils_string_map_reserve+0xc0>
 80141e4:	00a7      	lsls	r7, r4, #2
 80141e6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80141ea:	6808      	ldr	r0, [r1, #0]
 80141ec:	4632      	mov	r2, r6
 80141ee:	4639      	mov	r1, r7
 80141f0:	47c0      	blx	r8
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d03a      	beq.n	801426c <rcutils_string_map_reserve+0xc0>
 80141f6:	682b      	ldr	r3, [r5, #0]
 80141f8:	4632      	mov	r2, r6
 80141fa:	6018      	str	r0, [r3, #0]
 80141fc:	4639      	mov	r1, r7
 80141fe:	6858      	ldr	r0, [r3, #4]
 8014200:	47c0      	blx	r8
 8014202:	2800      	cmp	r0, #0
 8014204:	d032      	beq.n	801426c <rcutils_string_map_reserve+0xc0>
 8014206:	682d      	ldr	r5, [r5, #0]
 8014208:	68ab      	ldr	r3, [r5, #8]
 801420a:	6068      	str	r0, [r5, #4]
 801420c:	42a3      	cmp	r3, r4
 801420e:	d226      	bcs.n	801425e <rcutils_string_map_reserve+0xb2>
 8014210:	682a      	ldr	r2, [r5, #0]
 8014212:	eb00 0c07 	add.w	ip, r0, r7
 8014216:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801421a:	45e6      	cmp	lr, ip
 801421c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014220:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014224:	d203      	bcs.n	801422e <rcutils_string_map_reserve+0x82>
 8014226:	eb02 0c07 	add.w	ip, r2, r7
 801422a:	4566      	cmp	r6, ip
 801422c:	d322      	bcc.n	8014274 <rcutils_string_map_reserve+0xc8>
 801422e:	1ae3      	subs	r3, r4, r3
 8014230:	009a      	lsls	r2, r3, #2
 8014232:	4670      	mov	r0, lr
 8014234:	2100      	movs	r1, #0
 8014236:	9201      	str	r2, [sp, #4]
 8014238:	f002 feec 	bl	8017014 <memset>
 801423c:	9a01      	ldr	r2, [sp, #4]
 801423e:	2100      	movs	r1, #0
 8014240:	4630      	mov	r0, r6
 8014242:	f002 fee7 	bl	8017014 <memset>
 8014246:	e00a      	b.n	801425e <rcutils_string_map_reserve+0xb2>
 8014248:	694f      	ldr	r7, [r1, #20]
 801424a:	6808      	ldr	r0, [r1, #0]
 801424c:	4631      	mov	r1, r6
 801424e:	47b8      	blx	r7
 8014250:	682b      	ldr	r3, [r5, #0]
 8014252:	4631      	mov	r1, r6
 8014254:	6858      	ldr	r0, [r3, #4]
 8014256:	601c      	str	r4, [r3, #0]
 8014258:	47b8      	blx	r7
 801425a:	682d      	ldr	r5, [r5, #0]
 801425c:	606c      	str	r4, [r5, #4]
 801425e:	2000      	movs	r0, #0
 8014260:	60ac      	str	r4, [r5, #8]
 8014262:	b002      	add	sp, #8
 8014264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014268:	2000      	movs	r0, #0
 801426a:	e7af      	b.n	80141cc <rcutils_string_map_reserve+0x20>
 801426c:	200a      	movs	r0, #10
 801426e:	e7ad      	b.n	80141cc <rcutils_string_map_reserve+0x20>
 8014270:	200b      	movs	r0, #11
 8014272:	4770      	bx	lr
 8014274:	1f0b      	subs	r3, r1, #4
 8014276:	4418      	add	r0, r3
 8014278:	4413      	add	r3, r2
 801427a:	3a04      	subs	r2, #4
 801427c:	4417      	add	r7, r2
 801427e:	2200      	movs	r2, #0
 8014280:	f843 2f04 	str.w	r2, [r3, #4]!
 8014284:	42bb      	cmp	r3, r7
 8014286:	f840 2f04 	str.w	r2, [r0, #4]!
 801428a:	d1f9      	bne.n	8014280 <rcutils_string_map_reserve+0xd4>
 801428c:	e7e7      	b.n	801425e <rcutils_string_map_reserve+0xb2>
 801428e:	bf00      	nop

08014290 <rcutils_string_map_init>:
 8014290:	b082      	sub	sp, #8
 8014292:	b570      	push	{r4, r5, r6, lr}
 8014294:	ac04      	add	r4, sp, #16
 8014296:	e884 000c 	stmia.w	r4, {r2, r3}
 801429a:	b380      	cbz	r0, 80142fe <rcutils_string_map_init+0x6e>
 801429c:	6806      	ldr	r6, [r0, #0]
 801429e:	4604      	mov	r4, r0
 80142a0:	b12e      	cbz	r6, 80142ae <rcutils_string_map_init+0x1e>
 80142a2:	251e      	movs	r5, #30
 80142a4:	4628      	mov	r0, r5
 80142a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142aa:	b002      	add	sp, #8
 80142ac:	4770      	bx	lr
 80142ae:	a804      	add	r0, sp, #16
 80142b0:	460d      	mov	r5, r1
 80142b2:	f7f6 ff77 	bl	800b1a4 <rcutils_allocator_is_valid>
 80142b6:	b310      	cbz	r0, 80142fe <rcutils_string_map_init+0x6e>
 80142b8:	9b04      	ldr	r3, [sp, #16]
 80142ba:	9908      	ldr	r1, [sp, #32]
 80142bc:	2024      	movs	r0, #36	@ 0x24
 80142be:	4798      	blx	r3
 80142c0:	6020      	str	r0, [r4, #0]
 80142c2:	b310      	cbz	r0, 801430a <rcutils_string_map_init+0x7a>
 80142c4:	f10d 0e10 	add.w	lr, sp, #16
 80142c8:	e9c0 6600 	strd	r6, r6, [r0]
 80142cc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80142d0:	f100 0c10 	add.w	ip, r0, #16
 80142d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142dc:	f8de 3000 	ldr.w	r3, [lr]
 80142e0:	f8cc 3000 	str.w	r3, [ip]
 80142e4:	4629      	mov	r1, r5
 80142e6:	4620      	mov	r0, r4
 80142e8:	f7ff ff60 	bl	80141ac <rcutils_string_map_reserve>
 80142ec:	4605      	mov	r5, r0
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d0d8      	beq.n	80142a4 <rcutils_string_map_init+0x14>
 80142f2:	9b05      	ldr	r3, [sp, #20]
 80142f4:	9908      	ldr	r1, [sp, #32]
 80142f6:	6820      	ldr	r0, [r4, #0]
 80142f8:	4798      	blx	r3
 80142fa:	6026      	str	r6, [r4, #0]
 80142fc:	e7d2      	b.n	80142a4 <rcutils_string_map_init+0x14>
 80142fe:	250b      	movs	r5, #11
 8014300:	4628      	mov	r0, r5
 8014302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014306:	b002      	add	sp, #8
 8014308:	4770      	bx	lr
 801430a:	250a      	movs	r5, #10
 801430c:	e7ca      	b.n	80142a4 <rcutils_string_map_init+0x14>
 801430e:	bf00      	nop

08014310 <rcutils_string_map_fini>:
 8014310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014314:	b082      	sub	sp, #8
 8014316:	2800      	cmp	r0, #0
 8014318:	d03a      	beq.n	8014390 <rcutils_string_map_fini+0x80>
 801431a:	6804      	ldr	r4, [r0, #0]
 801431c:	4606      	mov	r6, r0
 801431e:	2c00      	cmp	r4, #0
 8014320:	d032      	beq.n	8014388 <rcutils_string_map_fini+0x78>
 8014322:	68a3      	ldr	r3, [r4, #8]
 8014324:	b32b      	cbz	r3, 8014372 <rcutils_string_map_fini+0x62>
 8014326:	2500      	movs	r5, #0
 8014328:	6822      	ldr	r2, [r4, #0]
 801432a:	462f      	mov	r7, r5
 801432c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014330:	b1e0      	cbz	r0, 801436c <rcutils_string_map_fini+0x5c>
 8014332:	6a21      	ldr	r1, [r4, #32]
 8014334:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014338:	9101      	str	r1, [sp, #4]
 801433a:	47c0      	blx	r8
 801433c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014340:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014344:	9901      	ldr	r1, [sp, #4]
 8014346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801434a:	47c0      	blx	r8
 801434c:	68e3      	ldr	r3, [r4, #12]
 801434e:	6862      	ldr	r2, [r4, #4]
 8014350:	3b01      	subs	r3, #1
 8014352:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014356:	60e3      	str	r3, [r4, #12]
 8014358:	6834      	ldr	r4, [r6, #0]
 801435a:	68a3      	ldr	r3, [r4, #8]
 801435c:	3501      	adds	r5, #1
 801435e:	429d      	cmp	r5, r3
 8014360:	d207      	bcs.n	8014372 <rcutils_string_map_fini+0x62>
 8014362:	6822      	ldr	r2, [r4, #0]
 8014364:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014368:	2800      	cmp	r0, #0
 801436a:	d1e2      	bne.n	8014332 <rcutils_string_map_fini+0x22>
 801436c:	3501      	adds	r5, #1
 801436e:	429d      	cmp	r5, r3
 8014370:	d3dc      	bcc.n	801432c <rcutils_string_map_fini+0x1c>
 8014372:	2100      	movs	r1, #0
 8014374:	4630      	mov	r0, r6
 8014376:	f7ff ff19 	bl	80141ac <rcutils_string_map_reserve>
 801437a:	4604      	mov	r4, r0
 801437c:	b920      	cbnz	r0, 8014388 <rcutils_string_map_fini+0x78>
 801437e:	6830      	ldr	r0, [r6, #0]
 8014380:	6943      	ldr	r3, [r0, #20]
 8014382:	6a01      	ldr	r1, [r0, #32]
 8014384:	4798      	blx	r3
 8014386:	6034      	str	r4, [r6, #0]
 8014388:	4620      	mov	r0, r4
 801438a:	b002      	add	sp, #8
 801438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014390:	240b      	movs	r4, #11
 8014392:	4620      	mov	r0, r4
 8014394:	b002      	add	sp, #8
 8014396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439a:	bf00      	nop

0801439c <rcutils_string_map_getn>:
 801439c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a0:	b300      	cbz	r0, 80143e4 <rcutils_string_map_getn+0x48>
 80143a2:	6807      	ldr	r7, [r0, #0]
 80143a4:	b1ff      	cbz	r7, 80143e6 <rcutils_string_map_getn+0x4a>
 80143a6:	4688      	mov	r8, r1
 80143a8:	b1e1      	cbz	r1, 80143e4 <rcutils_string_map_getn+0x48>
 80143aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80143ae:	683e      	ldr	r6, [r7, #0]
 80143b0:	f1ba 0f00 	cmp.w	sl, #0
 80143b4:	d016      	beq.n	80143e4 <rcutils_string_map_getn+0x48>
 80143b6:	4691      	mov	r9, r2
 80143b8:	3e04      	subs	r6, #4
 80143ba:	2400      	movs	r4, #0
 80143bc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80143c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80143c4:	4628      	mov	r0, r5
 80143c6:	3401      	adds	r4, #1
 80143c8:	b155      	cbz	r5, 80143e0 <rcutils_string_map_getn+0x44>
 80143ca:	f7eb ff33 	bl	8000234 <strlen>
 80143ce:	4548      	cmp	r0, r9
 80143d0:	4602      	mov	r2, r0
 80143d2:	4629      	mov	r1, r5
 80143d4:	bf38      	it	cc
 80143d6:	464a      	movcc	r2, r9
 80143d8:	4640      	mov	r0, r8
 80143da:	f002 fe30 	bl	801703e <strncmp>
 80143de:	b128      	cbz	r0, 80143ec <rcutils_string_map_getn+0x50>
 80143e0:	45a2      	cmp	sl, r4
 80143e2:	d1eb      	bne.n	80143bc <rcutils_string_map_getn+0x20>
 80143e4:	2700      	movs	r7, #0
 80143e6:	4638      	mov	r0, r7
 80143e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f853 700b 	ldr.w	r7, [r3, fp]
 80143f2:	4638      	mov	r0, r7
 80143f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143f8 <rmw_get_zero_initialized_context>:
 80143f8:	b510      	push	{r4, lr}
 80143fa:	4604      	mov	r4, r0
 80143fc:	3010      	adds	r0, #16
 80143fe:	f7f6 ff63 	bl	800b2c8 <rmw_get_zero_initialized_init_options>
 8014402:	2300      	movs	r3, #0
 8014404:	2000      	movs	r0, #0
 8014406:	2100      	movs	r1, #0
 8014408:	e9c4 0100 	strd	r0, r1, [r4]
 801440c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014410:	60a3      	str	r3, [r4, #8]
 8014412:	4620      	mov	r0, r4
 8014414:	bd10      	pop	{r4, pc}
 8014416:	bf00      	nop

08014418 <rmw_subscription_content_filter_options_fini>:
 8014418:	b1b0      	cbz	r0, 8014448 <rmw_subscription_content_filter_options_fini+0x30>
 801441a:	b538      	push	{r3, r4, r5, lr}
 801441c:	4604      	mov	r4, r0
 801441e:	4608      	mov	r0, r1
 8014420:	460d      	mov	r5, r1
 8014422:	f7f6 febf 	bl	800b1a4 <rcutils_allocator_is_valid>
 8014426:	b168      	cbz	r0, 8014444 <rmw_subscription_content_filter_options_fini+0x2c>
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	b120      	cbz	r0, 8014436 <rmw_subscription_content_filter_options_fini+0x1e>
 801442c:	686b      	ldr	r3, [r5, #4]
 801442e:	6929      	ldr	r1, [r5, #16]
 8014430:	4798      	blx	r3
 8014432:	2300      	movs	r3, #0
 8014434:	6023      	str	r3, [r4, #0]
 8014436:	1d20      	adds	r0, r4, #4
 8014438:	f002 f99c 	bl	8016774 <rcutils_string_array_fini>
 801443c:	3800      	subs	r0, #0
 801443e:	bf18      	it	ne
 8014440:	2001      	movne	r0, #1
 8014442:	bd38      	pop	{r3, r4, r5, pc}
 8014444:	200b      	movs	r0, #11
 8014446:	bd38      	pop	{r3, r4, r5, pc}
 8014448:	200b      	movs	r0, #11
 801444a:	4770      	bx	lr

0801444c <rmw_get_default_subscription_options>:
 801444c:	2200      	movs	r2, #0
 801444e:	e9c0 2200 	strd	r2, r2, [r0]
 8014452:	6082      	str	r2, [r0, #8]
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop

08014458 <rmw_time_equal>:
 8014458:	b4f0      	push	{r4, r5, r6, r7}
 801445a:	b084      	sub	sp, #16
 801445c:	ac04      	add	r4, sp, #16
 801445e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014462:	4603      	mov	r3, r0
 8014464:	4924      	ldr	r1, [pc, #144]	@ (80144f8 <rmw_time_equal+0xa0>)
 8014466:	9e03      	ldr	r6, [sp, #12]
 8014468:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801446c:	2202      	movs	r2, #2
 801446e:	4299      	cmp	r1, r3
 8014470:	41aa      	sbcs	r2, r5
 8014472:	d330      	bcc.n	80144d6 <rmw_time_equal+0x7e>
 8014474:	4c21      	ldr	r4, [pc, #132]	@ (80144fc <rmw_time_equal+0xa4>)
 8014476:	fba3 3204 	umull	r3, r2, r3, r4
 801447a:	fb04 2205 	mla	r2, r4, r5, r2
 801447e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014482:	43dd      	mvns	r5, r3
 8014484:	1a8c      	subs	r4, r1, r2
 8014486:	4285      	cmp	r5, r0
 8014488:	41b4      	sbcs	r4, r6
 801448a:	d332      	bcc.n	80144f2 <rmw_time_equal+0x9a>
 801448c:	eb10 0c03 	adds.w	ip, r0, r3
 8014490:	eb42 0106 	adc.w	r1, r2, r6
 8014494:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014498:	4817      	ldr	r0, [pc, #92]	@ (80144f8 <rmw_time_equal+0xa0>)
 801449a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801449c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801449e:	2202      	movs	r2, #2
 80144a0:	4298      	cmp	r0, r3
 80144a2:	41b2      	sbcs	r2, r6
 80144a4:	d31c      	bcc.n	80144e0 <rmw_time_equal+0x88>
 80144a6:	4c15      	ldr	r4, [pc, #84]	@ (80144fc <rmw_time_equal+0xa4>)
 80144a8:	fba3 3204 	umull	r3, r2, r3, r4
 80144ac:	fb04 2206 	mla	r2, r4, r6, r2
 80144b0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80144b4:	43de      	mvns	r6, r3
 80144b6:	1a84      	subs	r4, r0, r2
 80144b8:	42ae      	cmp	r6, r5
 80144ba:	41bc      	sbcs	r4, r7
 80144bc:	d315      	bcc.n	80144ea <rmw_time_equal+0x92>
 80144be:	195b      	adds	r3, r3, r5
 80144c0:	eb42 0207 	adc.w	r2, r2, r7
 80144c4:	428a      	cmp	r2, r1
 80144c6:	bf08      	it	eq
 80144c8:	4563      	cmpeq	r3, ip
 80144ca:	bf0c      	ite	eq
 80144cc:	2001      	moveq	r0, #1
 80144ce:	2000      	movne	r0, #0
 80144d0:	b004      	add	sp, #16
 80144d2:	bcf0      	pop	{r4, r5, r6, r7}
 80144d4:	4770      	bx	lr
 80144d6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80144da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144de:	e7d9      	b.n	8014494 <rmw_time_equal+0x3c>
 80144e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80144e4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80144e8:	e7ec      	b.n	80144c4 <rmw_time_equal+0x6c>
 80144ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80144ee:	4602      	mov	r2, r0
 80144f0:	e7e8      	b.n	80144c4 <rmw_time_equal+0x6c>
 80144f2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80144f6:	e7cd      	b.n	8014494 <rmw_time_equal+0x3c>
 80144f8:	25c17d04 	.word	0x25c17d04
 80144fc:	3b9aca00 	.word	0x3b9aca00

08014500 <rmw_time_total_nsec>:
 8014500:	b470      	push	{r4, r5, r6}
 8014502:	b085      	sub	sp, #20
 8014504:	ac04      	add	r4, sp, #16
 8014506:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801450a:	4603      	mov	r3, r0
 801450c:	4912      	ldr	r1, [pc, #72]	@ (8014558 <rmw_time_total_nsec+0x58>)
 801450e:	9e03      	ldr	r6, [sp, #12]
 8014510:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014514:	2202      	movs	r2, #2
 8014516:	4299      	cmp	r1, r3
 8014518:	41aa      	sbcs	r2, r5
 801451a:	d311      	bcc.n	8014540 <rmw_time_total_nsec+0x40>
 801451c:	4c0f      	ldr	r4, [pc, #60]	@ (801455c <rmw_time_total_nsec+0x5c>)
 801451e:	fba3 3204 	umull	r3, r2, r3, r4
 8014522:	fb04 2205 	mla	r2, r4, r5, r2
 8014526:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801452a:	43dd      	mvns	r5, r3
 801452c:	1a8c      	subs	r4, r1, r2
 801452e:	4285      	cmp	r5, r0
 8014530:	41b4      	sbcs	r4, r6
 8014532:	d30c      	bcc.n	801454e <rmw_time_total_nsec+0x4e>
 8014534:	1818      	adds	r0, r3, r0
 8014536:	eb42 0106 	adc.w	r1, r2, r6
 801453a:	b005      	add	sp, #20
 801453c:	bc70      	pop	{r4, r5, r6}
 801453e:	4770      	bx	lr
 8014540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014548:	b005      	add	sp, #20
 801454a:	bc70      	pop	{r4, r5, r6}
 801454c:	4770      	bx	lr
 801454e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014552:	b005      	add	sp, #20
 8014554:	bc70      	pop	{r4, r5, r6}
 8014556:	4770      	bx	lr
 8014558:	25c17d04 	.word	0x25c17d04
 801455c:	3b9aca00 	.word	0x3b9aca00

08014560 <rmw_get_zero_initialized_message_info>:
 8014560:	b510      	push	{r4, lr}
 8014562:	2240      	movs	r2, #64	@ 0x40
 8014564:	4604      	mov	r4, r0
 8014566:	2100      	movs	r1, #0
 8014568:	f002 fd54 	bl	8017014 <memset>
 801456c:	4620      	mov	r0, r4
 801456e:	bd10      	pop	{r4, pc}

08014570 <rmw_validate_full_topic_name>:
 8014570:	2800      	cmp	r0, #0
 8014572:	d057      	beq.n	8014624 <rmw_validate_full_topic_name+0xb4>
 8014574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014578:	460d      	mov	r5, r1
 801457a:	2900      	cmp	r1, #0
 801457c:	d054      	beq.n	8014628 <rmw_validate_full_topic_name+0xb8>
 801457e:	4616      	mov	r6, r2
 8014580:	4604      	mov	r4, r0
 8014582:	f7eb fe57 	bl	8000234 <strlen>
 8014586:	b148      	cbz	r0, 801459c <rmw_validate_full_topic_name+0x2c>
 8014588:	7823      	ldrb	r3, [r4, #0]
 801458a:	2b2f      	cmp	r3, #47	@ 0x2f
 801458c:	d00d      	beq.n	80145aa <rmw_validate_full_topic_name+0x3a>
 801458e:	2302      	movs	r3, #2
 8014590:	602b      	str	r3, [r5, #0]
 8014592:	b13e      	cbz	r6, 80145a4 <rmw_validate_full_topic_name+0x34>
 8014594:	2000      	movs	r0, #0
 8014596:	6030      	str	r0, [r6, #0]
 8014598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801459c:	2301      	movs	r3, #1
 801459e:	602b      	str	r3, [r5, #0]
 80145a0:	2e00      	cmp	r6, #0
 80145a2:	d1f7      	bne.n	8014594 <rmw_validate_full_topic_name+0x24>
 80145a4:	2000      	movs	r0, #0
 80145a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145aa:	1e43      	subs	r3, r0, #1
 80145ac:	5ce2      	ldrb	r2, [r4, r3]
 80145ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80145b0:	d03c      	beq.n	801462c <rmw_validate_full_topic_name+0xbc>
 80145b2:	1e63      	subs	r3, r4, #1
 80145b4:	eb03 0800 	add.w	r8, r3, r0
 80145b8:	f1c4 0e01 	rsb	lr, r4, #1
 80145bc:	eb0e 0703 	add.w	r7, lr, r3
 80145c0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80145c4:	f021 0220 	bic.w	r2, r1, #32
 80145c8:	3a41      	subs	r2, #65	@ 0x41
 80145ca:	2a19      	cmp	r2, #25
 80145cc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80145d0:	d90b      	bls.n	80145ea <rmw_validate_full_topic_name+0x7a>
 80145d2:	295f      	cmp	r1, #95	@ 0x5f
 80145d4:	d009      	beq.n	80145ea <rmw_validate_full_topic_name+0x7a>
 80145d6:	f1bc 0f0a 	cmp.w	ip, #10
 80145da:	d906      	bls.n	80145ea <rmw_validate_full_topic_name+0x7a>
 80145dc:	2304      	movs	r3, #4
 80145de:	602b      	str	r3, [r5, #0]
 80145e0:	2e00      	cmp	r6, #0
 80145e2:	d0df      	beq.n	80145a4 <rmw_validate_full_topic_name+0x34>
 80145e4:	6037      	str	r7, [r6, #0]
 80145e6:	2000      	movs	r0, #0
 80145e8:	e7d6      	b.n	8014598 <rmw_validate_full_topic_name+0x28>
 80145ea:	4543      	cmp	r3, r8
 80145ec:	d1e6      	bne.n	80145bc <rmw_validate_full_topic_name+0x4c>
 80145ee:	4f1a      	ldr	r7, [pc, #104]	@ (8014658 <rmw_validate_full_topic_name+0xe8>)
 80145f0:	2301      	movs	r3, #1
 80145f2:	e004      	b.n	80145fe <rmw_validate_full_topic_name+0x8e>
 80145f4:	4298      	cmp	r0, r3
 80145f6:	f104 0401 	add.w	r4, r4, #1
 80145fa:	d91c      	bls.n	8014636 <rmw_validate_full_topic_name+0xc6>
 80145fc:	4613      	mov	r3, r2
 80145fe:	4298      	cmp	r0, r3
 8014600:	f103 0201 	add.w	r2, r3, #1
 8014604:	d0f6      	beq.n	80145f4 <rmw_validate_full_topic_name+0x84>
 8014606:	7821      	ldrb	r1, [r4, #0]
 8014608:	292f      	cmp	r1, #47	@ 0x2f
 801460a:	d1f3      	bne.n	80145f4 <rmw_validate_full_topic_name+0x84>
 801460c:	7861      	ldrb	r1, [r4, #1]
 801460e:	292f      	cmp	r1, #47	@ 0x2f
 8014610:	d01c      	beq.n	801464c <rmw_validate_full_topic_name+0xdc>
 8014612:	5dc9      	ldrb	r1, [r1, r7]
 8014614:	0749      	lsls	r1, r1, #29
 8014616:	d5ed      	bpl.n	80145f4 <rmw_validate_full_topic_name+0x84>
 8014618:	2206      	movs	r2, #6
 801461a:	602a      	str	r2, [r5, #0]
 801461c:	2e00      	cmp	r6, #0
 801461e:	d0c1      	beq.n	80145a4 <rmw_validate_full_topic_name+0x34>
 8014620:	6033      	str	r3, [r6, #0]
 8014622:	e7bf      	b.n	80145a4 <rmw_validate_full_topic_name+0x34>
 8014624:	200b      	movs	r0, #11
 8014626:	4770      	bx	lr
 8014628:	200b      	movs	r0, #11
 801462a:	e7b5      	b.n	8014598 <rmw_validate_full_topic_name+0x28>
 801462c:	2203      	movs	r2, #3
 801462e:	602a      	str	r2, [r5, #0]
 8014630:	2e00      	cmp	r6, #0
 8014632:	d1f5      	bne.n	8014620 <rmw_validate_full_topic_name+0xb0>
 8014634:	e7b6      	b.n	80145a4 <rmw_validate_full_topic_name+0x34>
 8014636:	28f7      	cmp	r0, #247	@ 0xf7
 8014638:	d802      	bhi.n	8014640 <rmw_validate_full_topic_name+0xd0>
 801463a:	2000      	movs	r0, #0
 801463c:	6028      	str	r0, [r5, #0]
 801463e:	e7ab      	b.n	8014598 <rmw_validate_full_topic_name+0x28>
 8014640:	2307      	movs	r3, #7
 8014642:	602b      	str	r3, [r5, #0]
 8014644:	2e00      	cmp	r6, #0
 8014646:	d0ad      	beq.n	80145a4 <rmw_validate_full_topic_name+0x34>
 8014648:	23f6      	movs	r3, #246	@ 0xf6
 801464a:	e7e9      	b.n	8014620 <rmw_validate_full_topic_name+0xb0>
 801464c:	2205      	movs	r2, #5
 801464e:	602a      	str	r2, [r5, #0]
 8014650:	2e00      	cmp	r6, #0
 8014652:	d1e5      	bne.n	8014620 <rmw_validate_full_topic_name+0xb0>
 8014654:	e7a6      	b.n	80145a4 <rmw_validate_full_topic_name+0x34>
 8014656:	bf00      	nop
 8014658:	08018baf 	.word	0x08018baf

0801465c <rmw_validate_namespace_with_size>:
 801465c:	b340      	cbz	r0, 80146b0 <rmw_validate_namespace_with_size+0x54>
 801465e:	b570      	push	{r4, r5, r6, lr}
 8014660:	4614      	mov	r4, r2
 8014662:	b0c2      	sub	sp, #264	@ 0x108
 8014664:	b332      	cbz	r2, 80146b4 <rmw_validate_namespace_with_size+0x58>
 8014666:	2901      	cmp	r1, #1
 8014668:	460d      	mov	r5, r1
 801466a:	461e      	mov	r6, r3
 801466c:	d102      	bne.n	8014674 <rmw_validate_namespace_with_size+0x18>
 801466e:	7803      	ldrb	r3, [r0, #0]
 8014670:	2b2f      	cmp	r3, #47	@ 0x2f
 8014672:	d012      	beq.n	801469a <rmw_validate_namespace_with_size+0x3e>
 8014674:	aa01      	add	r2, sp, #4
 8014676:	4669      	mov	r1, sp
 8014678:	f7ff ff7a 	bl	8014570 <rmw_validate_full_topic_name>
 801467c:	b978      	cbnz	r0, 801469e <rmw_validate_namespace_with_size+0x42>
 801467e:	9b00      	ldr	r3, [sp, #0]
 8014680:	b14b      	cbz	r3, 8014696 <rmw_validate_namespace_with_size+0x3a>
 8014682:	2b07      	cmp	r3, #7
 8014684:	d007      	beq.n	8014696 <rmw_validate_namespace_with_size+0x3a>
 8014686:	1e5a      	subs	r2, r3, #1
 8014688:	2a05      	cmp	r2, #5
 801468a:	d82b      	bhi.n	80146e4 <rmw_validate_namespace_with_size+0x88>
 801468c:	e8df f002 	tbb	[pc, r2]
 8014690:	1e212427 	.word	0x1e212427
 8014694:	141b      	.short	0x141b
 8014696:	2df5      	cmp	r5, #245	@ 0xf5
 8014698:	d803      	bhi.n	80146a2 <rmw_validate_namespace_with_size+0x46>
 801469a:	2000      	movs	r0, #0
 801469c:	6020      	str	r0, [r4, #0]
 801469e:	b042      	add	sp, #264	@ 0x108
 80146a0:	bd70      	pop	{r4, r5, r6, pc}
 80146a2:	2307      	movs	r3, #7
 80146a4:	6023      	str	r3, [r4, #0]
 80146a6:	2e00      	cmp	r6, #0
 80146a8:	d0f9      	beq.n	801469e <rmw_validate_namespace_with_size+0x42>
 80146aa:	23f4      	movs	r3, #244	@ 0xf4
 80146ac:	6033      	str	r3, [r6, #0]
 80146ae:	e7f6      	b.n	801469e <rmw_validate_namespace_with_size+0x42>
 80146b0:	200b      	movs	r0, #11
 80146b2:	4770      	bx	lr
 80146b4:	200b      	movs	r0, #11
 80146b6:	e7f2      	b.n	801469e <rmw_validate_namespace_with_size+0x42>
 80146b8:	2306      	movs	r3, #6
 80146ba:	6023      	str	r3, [r4, #0]
 80146bc:	2e00      	cmp	r6, #0
 80146be:	d0ee      	beq.n	801469e <rmw_validate_namespace_with_size+0x42>
 80146c0:	9b01      	ldr	r3, [sp, #4]
 80146c2:	6033      	str	r3, [r6, #0]
 80146c4:	e7eb      	b.n	801469e <rmw_validate_namespace_with_size+0x42>
 80146c6:	2305      	movs	r3, #5
 80146c8:	6023      	str	r3, [r4, #0]
 80146ca:	e7f7      	b.n	80146bc <rmw_validate_namespace_with_size+0x60>
 80146cc:	2304      	movs	r3, #4
 80146ce:	6023      	str	r3, [r4, #0]
 80146d0:	e7f4      	b.n	80146bc <rmw_validate_namespace_with_size+0x60>
 80146d2:	2303      	movs	r3, #3
 80146d4:	6023      	str	r3, [r4, #0]
 80146d6:	e7f1      	b.n	80146bc <rmw_validate_namespace_with_size+0x60>
 80146d8:	2302      	movs	r3, #2
 80146da:	6023      	str	r3, [r4, #0]
 80146dc:	e7ee      	b.n	80146bc <rmw_validate_namespace_with_size+0x60>
 80146de:	2301      	movs	r3, #1
 80146e0:	6023      	str	r3, [r4, #0]
 80146e2:	e7eb      	b.n	80146bc <rmw_validate_namespace_with_size+0x60>
 80146e4:	4a03      	ldr	r2, [pc, #12]	@ (80146f4 <rmw_validate_namespace_with_size+0x98>)
 80146e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80146ea:	a802      	add	r0, sp, #8
 80146ec:	f7ff fcee 	bl	80140cc <rcutils_snprintf>
 80146f0:	2001      	movs	r0, #1
 80146f2:	e7d4      	b.n	801469e <rmw_validate_namespace_with_size+0x42>
 80146f4:	080183b8 	.word	0x080183b8

080146f8 <rmw_validate_namespace>:
 80146f8:	b168      	cbz	r0, 8014716 <rmw_validate_namespace+0x1e>
 80146fa:	b570      	push	{r4, r5, r6, lr}
 80146fc:	460d      	mov	r5, r1
 80146fe:	4616      	mov	r6, r2
 8014700:	4604      	mov	r4, r0
 8014702:	f7eb fd97 	bl	8000234 <strlen>
 8014706:	4633      	mov	r3, r6
 8014708:	4601      	mov	r1, r0
 801470a:	462a      	mov	r2, r5
 801470c:	4620      	mov	r0, r4
 801470e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014712:	f7ff bfa3 	b.w	801465c <rmw_validate_namespace_with_size>
 8014716:	200b      	movs	r0, #11
 8014718:	4770      	bx	lr
 801471a:	bf00      	nop

0801471c <rmw_namespace_validation_result_string>:
 801471c:	2807      	cmp	r0, #7
 801471e:	bf9a      	itte	ls
 8014720:	4b02      	ldrls	r3, [pc, #8]	@ (801472c <rmw_namespace_validation_result_string+0x10>)
 8014722:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014726:	4802      	ldrhi	r0, [pc, #8]	@ (8014730 <rmw_namespace_validation_result_string+0x14>)
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop
 801472c:	08018a90 	.word	0x08018a90
 8014730:	08018408 	.word	0x08018408

08014734 <rmw_validate_node_name>:
 8014734:	2800      	cmp	r0, #0
 8014736:	d03b      	beq.n	80147b0 <rmw_validate_node_name+0x7c>
 8014738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801473c:	460d      	mov	r5, r1
 801473e:	2900      	cmp	r1, #0
 8014740:	d038      	beq.n	80147b4 <rmw_validate_node_name+0x80>
 8014742:	4616      	mov	r6, r2
 8014744:	4604      	mov	r4, r0
 8014746:	f7eb fd75 	bl	8000234 <strlen>
 801474a:	b1e0      	cbz	r0, 8014786 <rmw_validate_node_name+0x52>
 801474c:	1e63      	subs	r3, r4, #1
 801474e:	eb03 0800 	add.w	r8, r3, r0
 8014752:	f1c4 0101 	rsb	r1, r4, #1
 8014756:	18cf      	adds	r7, r1, r3
 8014758:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801475c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014760:	f02e 0c20 	bic.w	ip, lr, #32
 8014764:	2a09      	cmp	r2, #9
 8014766:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801476a:	d914      	bls.n	8014796 <rmw_validate_node_name+0x62>
 801476c:	f1bc 0f19 	cmp.w	ip, #25
 8014770:	d911      	bls.n	8014796 <rmw_validate_node_name+0x62>
 8014772:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014776:	d00e      	beq.n	8014796 <rmw_validate_node_name+0x62>
 8014778:	2302      	movs	r3, #2
 801477a:	602b      	str	r3, [r5, #0]
 801477c:	b106      	cbz	r6, 8014780 <rmw_validate_node_name+0x4c>
 801477e:	6037      	str	r7, [r6, #0]
 8014780:	2000      	movs	r0, #0
 8014782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014786:	2301      	movs	r3, #1
 8014788:	602b      	str	r3, [r5, #0]
 801478a:	2e00      	cmp	r6, #0
 801478c:	d0f8      	beq.n	8014780 <rmw_validate_node_name+0x4c>
 801478e:	2000      	movs	r0, #0
 8014790:	6030      	str	r0, [r6, #0]
 8014792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014796:	4543      	cmp	r3, r8
 8014798:	d1dd      	bne.n	8014756 <rmw_validate_node_name+0x22>
 801479a:	7822      	ldrb	r2, [r4, #0]
 801479c:	4b0d      	ldr	r3, [pc, #52]	@ (80147d4 <rmw_validate_node_name+0xa0>)
 801479e:	5cd3      	ldrb	r3, [r2, r3]
 80147a0:	f013 0304 	ands.w	r3, r3, #4
 80147a4:	d110      	bne.n	80147c8 <rmw_validate_node_name+0x94>
 80147a6:	28ff      	cmp	r0, #255	@ 0xff
 80147a8:	d806      	bhi.n	80147b8 <rmw_validate_node_name+0x84>
 80147aa:	602b      	str	r3, [r5, #0]
 80147ac:	4618      	mov	r0, r3
 80147ae:	e7e8      	b.n	8014782 <rmw_validate_node_name+0x4e>
 80147b0:	200b      	movs	r0, #11
 80147b2:	4770      	bx	lr
 80147b4:	200b      	movs	r0, #11
 80147b6:	e7e4      	b.n	8014782 <rmw_validate_node_name+0x4e>
 80147b8:	2204      	movs	r2, #4
 80147ba:	602a      	str	r2, [r5, #0]
 80147bc:	2e00      	cmp	r6, #0
 80147be:	d0df      	beq.n	8014780 <rmw_validate_node_name+0x4c>
 80147c0:	22fe      	movs	r2, #254	@ 0xfe
 80147c2:	6032      	str	r2, [r6, #0]
 80147c4:	4618      	mov	r0, r3
 80147c6:	e7dc      	b.n	8014782 <rmw_validate_node_name+0x4e>
 80147c8:	2303      	movs	r3, #3
 80147ca:	602b      	str	r3, [r5, #0]
 80147cc:	2e00      	cmp	r6, #0
 80147ce:	d1de      	bne.n	801478e <rmw_validate_node_name+0x5a>
 80147d0:	e7d6      	b.n	8014780 <rmw_validate_node_name+0x4c>
 80147d2:	bf00      	nop
 80147d4:	08018baf 	.word	0x08018baf

080147d8 <rmw_node_name_validation_result_string>:
 80147d8:	2804      	cmp	r0, #4
 80147da:	bf9a      	itte	ls
 80147dc:	4b02      	ldrls	r3, [pc, #8]	@ (80147e8 <rmw_node_name_validation_result_string+0x10>)
 80147de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80147e2:	4802      	ldrhi	r0, [pc, #8]	@ (80147ec <rmw_node_name_validation_result_string+0x14>)
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	08018ab0 	.word	0x08018ab0
 80147ec:	080185b0 	.word	0x080185b0

080147f0 <on_status>:
 80147f0:	b082      	sub	sp, #8
 80147f2:	b002      	add	sp, #8
 80147f4:	4770      	bx	lr
 80147f6:	bf00      	nop

080147f8 <on_topic>:
 80147f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147fc:	4a22      	ldr	r2, [pc, #136]	@ (8014888 <on_topic+0x90>)
 80147fe:	b094      	sub	sp, #80	@ 0x50
 8014800:	6812      	ldr	r2, [r2, #0]
 8014802:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8014804:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014808:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801480c:	b3c2      	cbz	r2, 8014880 <on_topic+0x88>
 801480e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014812:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014816:	e001      	b.n	801481c <on_topic+0x24>
 8014818:	6852      	ldr	r2, [r2, #4]
 801481a:	b38a      	cbz	r2, 8014880 <on_topic+0x88>
 801481c:	6894      	ldr	r4, [r2, #8]
 801481e:	8aa3      	ldrh	r3, [r4, #20]
 8014820:	428b      	cmp	r3, r1
 8014822:	d1f9      	bne.n	8014818 <on_topic+0x20>
 8014824:	7da3      	ldrb	r3, [r4, #22]
 8014826:	4283      	cmp	r3, r0
 8014828:	d1f6      	bne.n	8014818 <on_topic+0x20>
 801482a:	2248      	movs	r2, #72	@ 0x48
 801482c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014830:	4668      	mov	r0, sp
 8014832:	f002 fcb8 	bl	80171a6 <memcpy>
 8014836:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801483a:	cb0c      	ldmia	r3, {r2, r3}
 801483c:	4620      	mov	r0, r4
 801483e:	f7f7 fe43 	bl	800c4c8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014842:	4607      	mov	r7, r0
 8014844:	b1e0      	cbz	r0, 8014880 <on_topic+0x88>
 8014846:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801484a:	4632      	mov	r2, r6
 801484c:	4628      	mov	r0, r5
 801484e:	f108 0110 	add.w	r1, r8, #16
 8014852:	f000 fddb 	bl	801540c <ucdr_deserialize_array_uint8_t>
 8014856:	b930      	cbnz	r0, 8014866 <on_topic+0x6e>
 8014858:	480c      	ldr	r0, [pc, #48]	@ (801488c <on_topic+0x94>)
 801485a:	4639      	mov	r1, r7
 801485c:	b014      	add	sp, #80	@ 0x50
 801485e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014862:	f000 b8bd 	b.w	80149e0 <put_memory>
 8014866:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801486a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801486e:	f000 fcc3 	bl	80151f8 <rmw_uros_epoch_nanos>
 8014872:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8014876:	2305      	movs	r3, #5
 8014878:	e942 0102 	strd	r0, r1, [r2, #-8]
 801487c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014880:	b014      	add	sp, #80	@ 0x50
 8014882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014886:	bf00      	nop
 8014888:	2000ac6c 	.word	0x2000ac6c
 801488c:	2000ac5c 	.word	0x2000ac5c

08014890 <on_request>:
 8014890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014894:	4823      	ldr	r0, [pc, #140]	@ (8014924 <on_request+0x94>)
 8014896:	b094      	sub	sp, #80	@ 0x50
 8014898:	6800      	ldr	r0, [r0, #0]
 801489a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801489c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80148a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d03b      	beq.n	801491e <on_request+0x8e>
 80148a6:	461d      	mov	r5, r3
 80148a8:	e001      	b.n	80148ae <on_request+0x1e>
 80148aa:	6840      	ldr	r0, [r0, #4]
 80148ac:	b3b8      	cbz	r0, 801491e <on_request+0x8e>
 80148ae:	6884      	ldr	r4, [r0, #8]
 80148b0:	8b21      	ldrh	r1, [r4, #24]
 80148b2:	4291      	cmp	r1, r2
 80148b4:	d1f9      	bne.n	80148aa <on_request+0x1a>
 80148b6:	2248      	movs	r2, #72	@ 0x48
 80148b8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80148bc:	4668      	mov	r0, sp
 80148be:	f002 fc72 	bl	80171a6 <memcpy>
 80148c2:	f104 0320 	add.w	r3, r4, #32
 80148c6:	cb0c      	ldmia	r3, {r2, r3}
 80148c8:	4620      	mov	r0, r4
 80148ca:	f7f7 fdfd 	bl	800c4c8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80148ce:	4680      	mov	r8, r0
 80148d0:	b328      	cbz	r0, 801491e <on_request+0x8e>
 80148d2:	4638      	mov	r0, r7
 80148d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80148d8:	4632      	mov	r2, r6
 80148da:	f107 0110 	add.w	r1, r7, #16
 80148de:	f000 fd95 	bl	801540c <ucdr_deserialize_array_uint8_t>
 80148e2:	b930      	cbnz	r0, 80148f2 <on_request+0x62>
 80148e4:	4810      	ldr	r0, [pc, #64]	@ (8014928 <on_request+0x98>)
 80148e6:	4641      	mov	r1, r8
 80148e8:	b014      	add	sp, #80	@ 0x50
 80148ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148ee:	f000 b877 	b.w	80149e0 <put_memory>
 80148f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148f4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80148f8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80148fc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014900:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014908:	e88c 0003 	stmia.w	ip, {r0, r1}
 801490c:	f000 fc74 	bl	80151f8 <rmw_uros_epoch_nanos>
 8014910:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014914:	2303      	movs	r3, #3
 8014916:	e942 0102 	strd	r0, r1, [r2, #-8]
 801491a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801491e:	b014      	add	sp, #80	@ 0x50
 8014920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014924:	2000ac3c 	.word	0x2000ac3c
 8014928:	2000ac5c 	.word	0x2000ac5c

0801492c <on_reply>:
 801492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014930:	4821      	ldr	r0, [pc, #132]	@ (80149b8 <on_reply+0x8c>)
 8014932:	b094      	sub	sp, #80	@ 0x50
 8014934:	6800      	ldr	r0, [r0, #0]
 8014936:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014938:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801493c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801493e:	b3b8      	cbz	r0, 80149b0 <on_reply+0x84>
 8014940:	461d      	mov	r5, r3
 8014942:	e001      	b.n	8014948 <on_reply+0x1c>
 8014944:	6840      	ldr	r0, [r0, #4]
 8014946:	b398      	cbz	r0, 80149b0 <on_reply+0x84>
 8014948:	6884      	ldr	r4, [r0, #8]
 801494a:	8b21      	ldrh	r1, [r4, #24]
 801494c:	4291      	cmp	r1, r2
 801494e:	d1f9      	bne.n	8014944 <on_reply+0x18>
 8014950:	2248      	movs	r2, #72	@ 0x48
 8014952:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014956:	4668      	mov	r0, sp
 8014958:	f002 fc25 	bl	80171a6 <memcpy>
 801495c:	f104 0320 	add.w	r3, r4, #32
 8014960:	cb0c      	ldmia	r3, {r2, r3}
 8014962:	4620      	mov	r0, r4
 8014964:	f7f7 fdb0 	bl	800c4c8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014968:	4680      	mov	r8, r0
 801496a:	b308      	cbz	r0, 80149b0 <on_reply+0x84>
 801496c:	4638      	mov	r0, r7
 801496e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014972:	4632      	mov	r2, r6
 8014974:	f107 0110 	add.w	r1, r7, #16
 8014978:	f000 fd48 	bl	801540c <ucdr_deserialize_array_uint8_t>
 801497c:	b930      	cbnz	r0, 801498c <on_reply+0x60>
 801497e:	480f      	ldr	r0, [pc, #60]	@ (80149bc <on_reply+0x90>)
 8014980:	4641      	mov	r1, r8
 8014982:	b014      	add	sp, #80	@ 0x50
 8014984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014988:	f000 b82a 	b.w	80149e0 <put_memory>
 801498c:	2200      	movs	r2, #0
 801498e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8014992:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014996:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801499a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801499e:	f000 fc2b 	bl	80151f8 <rmw_uros_epoch_nanos>
 80149a2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80149a6:	2304      	movs	r3, #4
 80149a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80149ac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80149b0:	b014      	add	sp, #80	@ 0x50
 80149b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b6:	bf00      	nop
 80149b8:	2000634c 	.word	0x2000634c
 80149bc:	2000ac5c 	.word	0x2000ac5c

080149c0 <get_memory>:
 80149c0:	4603      	mov	r3, r0
 80149c2:	6840      	ldr	r0, [r0, #4]
 80149c4:	b158      	cbz	r0, 80149de <get_memory+0x1e>
 80149c6:	6842      	ldr	r2, [r0, #4]
 80149c8:	605a      	str	r2, [r3, #4]
 80149ca:	b10a      	cbz	r2, 80149d0 <get_memory+0x10>
 80149cc:	2100      	movs	r1, #0
 80149ce:	6011      	str	r1, [r2, #0]
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	6042      	str	r2, [r0, #4]
 80149d4:	b102      	cbz	r2, 80149d8 <get_memory+0x18>
 80149d6:	6010      	str	r0, [r2, #0]
 80149d8:	2200      	movs	r2, #0
 80149da:	6002      	str	r2, [r0, #0]
 80149dc:	6018      	str	r0, [r3, #0]
 80149de:	4770      	bx	lr

080149e0 <put_memory>:
 80149e0:	680b      	ldr	r3, [r1, #0]
 80149e2:	b10b      	cbz	r3, 80149e8 <put_memory+0x8>
 80149e4:	684a      	ldr	r2, [r1, #4]
 80149e6:	605a      	str	r2, [r3, #4]
 80149e8:	684a      	ldr	r2, [r1, #4]
 80149ea:	b102      	cbz	r2, 80149ee <put_memory+0xe>
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	6803      	ldr	r3, [r0, #0]
 80149f0:	428b      	cmp	r3, r1
 80149f2:	6843      	ldr	r3, [r0, #4]
 80149f4:	bf08      	it	eq
 80149f6:	6002      	streq	r2, [r0, #0]
 80149f8:	604b      	str	r3, [r1, #4]
 80149fa:	b103      	cbz	r3, 80149fe <put_memory+0x1e>
 80149fc:	6019      	str	r1, [r3, #0]
 80149fe:	2300      	movs	r3, #0
 8014a00:	600b      	str	r3, [r1, #0]
 8014a02:	6041      	str	r1, [r0, #4]
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop

08014a08 <rmw_destroy_client>:
 8014a08:	b570      	push	{r4, r5, r6, lr}
 8014a0a:	b128      	cbz	r0, 8014a18 <rmw_destroy_client+0x10>
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	6800      	ldr	r0, [r0, #0]
 8014a10:	460d      	mov	r5, r1
 8014a12:	f7f7 fecf 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 8014a16:	b910      	cbnz	r0, 8014a1e <rmw_destroy_client+0x16>
 8014a18:	2401      	movs	r4, #1
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	bd70      	pop	{r4, r5, r6, pc}
 8014a1e:	6863      	ldr	r3, [r4, #4]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d0f9      	beq.n	8014a18 <rmw_destroy_client+0x10>
 8014a24:	2d00      	cmp	r5, #0
 8014a26:	d0f7      	beq.n	8014a18 <rmw_destroy_client+0x10>
 8014a28:	6828      	ldr	r0, [r5, #0]
 8014a2a:	f7f7 fec3 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d0f2      	beq.n	8014a18 <rmw_destroy_client+0x10>
 8014a32:	686e      	ldr	r6, [r5, #4]
 8014a34:	2e00      	cmp	r6, #0
 8014a36:	d0ef      	beq.n	8014a18 <rmw_destroy_client+0x10>
 8014a38:	6864      	ldr	r4, [r4, #4]
 8014a3a:	6932      	ldr	r2, [r6, #16]
 8014a3c:	6920      	ldr	r0, [r4, #16]
 8014a3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014a42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a46:	6819      	ldr	r1, [r3, #0]
 8014a48:	f7f9 fa9e 	bl	800df88 <uxr_buffer_cancel_data>
 8014a4c:	4602      	mov	r2, r0
 8014a4e:	6920      	ldr	r0, [r4, #16]
 8014a50:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014a54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014a58:	f7f7 fe2c 	bl	800c6b4 <run_xrce_session>
 8014a5c:	6920      	ldr	r0, [r4, #16]
 8014a5e:	6932      	ldr	r2, [r6, #16]
 8014a60:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014a64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a68:	6819      	ldr	r1, [r3, #0]
 8014a6a:	f7f8 ff5f 	bl	800d92c <uxr_buffer_delete_entity>
 8014a6e:	4602      	mov	r2, r0
 8014a70:	6920      	ldr	r0, [r4, #16]
 8014a72:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014a76:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014a7a:	f7f7 fe1b 	bl	800c6b4 <run_xrce_session>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	4628      	mov	r0, r5
 8014a82:	bf14      	ite	ne
 8014a84:	2400      	movne	r4, #0
 8014a86:	2402      	moveq	r4, #2
 8014a88:	f7f7 fcfc 	bl	800c484 <rmw_uxrce_fini_client_memory>
 8014a8c:	e7c5      	b.n	8014a1a <rmw_destroy_client+0x12>
 8014a8e:	bf00      	nop

08014a90 <rmw_get_implementation_identifier>:
 8014a90:	4b01      	ldr	r3, [pc, #4]	@ (8014a98 <rmw_get_implementation_identifier+0x8>)
 8014a92:	6818      	ldr	r0, [r3, #0]
 8014a94:	4770      	bx	lr
 8014a96:	bf00      	nop
 8014a98:	08018ac4 	.word	0x08018ac4

08014a9c <create_topic>:
 8014a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa0:	4605      	mov	r5, r0
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	4822      	ldr	r0, [pc, #136]	@ (8014b30 <create_topic+0x94>)
 8014aa6:	460f      	mov	r7, r1
 8014aa8:	4616      	mov	r6, r2
 8014aaa:	f7ff ff89 	bl	80149c0 <get_memory>
 8014aae:	4604      	mov	r4, r0
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	d039      	beq.n	8014b28 <create_topic+0x8c>
 8014ab4:	692b      	ldr	r3, [r5, #16]
 8014ab6:	6884      	ldr	r4, [r0, #8]
 8014ab8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8014b38 <create_topic+0x9c>
 8014abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014ac0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014ac4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014ac8:	1c42      	adds	r2, r0, #1
 8014aca:	2102      	movs	r1, #2
 8014acc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014ad0:	f7f9 f9f0 	bl	800deb4 <uxr_object_id>
 8014ad4:	223c      	movs	r2, #60	@ 0x3c
 8014ad6:	6120      	str	r0, [r4, #16]
 8014ad8:	4641      	mov	r1, r8
 8014ada:	4638      	mov	r0, r7
 8014adc:	f7f7 fe50 	bl	800c780 <generate_topic_name>
 8014ae0:	b1f0      	cbz	r0, 8014b20 <create_topic+0x84>
 8014ae2:	4f14      	ldr	r7, [pc, #80]	@ (8014b34 <create_topic+0x98>)
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	2264      	movs	r2, #100	@ 0x64
 8014ae8:	4639      	mov	r1, r7
 8014aea:	f7f7 fe19 	bl	800c720 <generate_type_name>
 8014aee:	b1b8      	cbz	r0, 8014b20 <create_topic+0x84>
 8014af0:	6928      	ldr	r0, [r5, #16]
 8014af2:	2306      	movs	r3, #6
 8014af4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014af8:	f8cd 8000 	str.w	r8, [sp]
 8014afc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014b00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b04:	6811      	ldr	r1, [r2, #0]
 8014b06:	696b      	ldr	r3, [r5, #20]
 8014b08:	6922      	ldr	r2, [r4, #16]
 8014b0a:	f7f8 ff8d 	bl	800da28 <uxr_buffer_create_topic_bin>
 8014b0e:	4602      	mov	r2, r0
 8014b10:	6928      	ldr	r0, [r5, #16]
 8014b12:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014b16:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014b1a:	f7f7 fdcb 	bl	800c6b4 <run_xrce_session>
 8014b1e:	b918      	cbnz	r0, 8014b28 <create_topic+0x8c>
 8014b20:	4620      	mov	r0, r4
 8014b22:	f7f7 fcc5 	bl	800c4b0 <rmw_uxrce_fini_topic_memory>
 8014b26:	2400      	movs	r4, #0
 8014b28:	4620      	mov	r0, r4
 8014b2a:	b004      	add	sp, #16
 8014b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b30:	2000ac7c 	.word	0x2000ac7c
 8014b34:	2000ad70 	.word	0x2000ad70
 8014b38:	2000ad34 	.word	0x2000ad34

08014b3c <destroy_topic>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	6985      	ldr	r5, [r0, #24]
 8014b40:	b1d5      	cbz	r5, 8014b78 <destroy_topic+0x3c>
 8014b42:	4604      	mov	r4, r0
 8014b44:	6928      	ldr	r0, [r5, #16]
 8014b46:	6922      	ldr	r2, [r4, #16]
 8014b48:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014b4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b50:	6819      	ldr	r1, [r3, #0]
 8014b52:	f7f8 feeb 	bl	800d92c <uxr_buffer_delete_entity>
 8014b56:	4602      	mov	r2, r0
 8014b58:	6928      	ldr	r0, [r5, #16]
 8014b5a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014b5e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014b62:	f7f7 fda7 	bl	800c6b4 <run_xrce_session>
 8014b66:	2800      	cmp	r0, #0
 8014b68:	4620      	mov	r0, r4
 8014b6a:	bf14      	ite	ne
 8014b6c:	2400      	movne	r4, #0
 8014b6e:	2402      	moveq	r4, #2
 8014b70:	f7f7 fc9e 	bl	800c4b0 <rmw_uxrce_fini_topic_memory>
 8014b74:	4620      	mov	r0, r4
 8014b76:	bd38      	pop	{r3, r4, r5, pc}
 8014b78:	2401      	movs	r4, #1
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	bd38      	pop	{r3, r4, r5, pc}
 8014b7e:	bf00      	nop

08014b80 <rmw_send_request>:
 8014b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b84:	4604      	mov	r4, r0
 8014b86:	6800      	ldr	r0, [r0, #0]
 8014b88:	b08b      	sub	sp, #44	@ 0x2c
 8014b8a:	460e      	mov	r6, r1
 8014b8c:	4615      	mov	r5, r2
 8014b8e:	b128      	cbz	r0, 8014b9c <rmw_send_request+0x1c>
 8014b90:	4b21      	ldr	r3, [pc, #132]	@ (8014c18 <rmw_send_request+0x98>)
 8014b92:	6819      	ldr	r1, [r3, #0]
 8014b94:	f7eb fb44 	bl	8000220 <strcmp>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d139      	bne.n	8014c10 <rmw_send_request+0x90>
 8014b9c:	6864      	ldr	r4, [r4, #4]
 8014b9e:	6963      	ldr	r3, [r4, #20]
 8014ba0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8014ba4:	689b      	ldr	r3, [r3, #8]
 8014ba6:	4798      	blx	r3
 8014ba8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014bac:	4630      	mov	r0, r6
 8014bae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014bb2:	4798      	blx	r3
 8014bb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014bb8:	9000      	str	r0, [sp, #0]
 8014bba:	6922      	ldr	r2, [r4, #16]
 8014bbc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014bbe:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014bc2:	ab02      	add	r3, sp, #8
 8014bc4:	f7fb fa32 	bl	801002c <uxr_prepare_output_stream>
 8014bc8:	2700      	movs	r7, #0
 8014bca:	6028      	str	r0, [r5, #0]
 8014bcc:	606f      	str	r7, [r5, #4]
 8014bce:	b198      	cbz	r0, 8014bf8 <rmw_send_request+0x78>
 8014bd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014bd4:	a902      	add	r1, sp, #8
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	4798      	blx	r3
 8014bda:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014bde:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d00c      	beq.n	8014c00 <rmw_send_request+0x80>
 8014be6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014be8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014bec:	f7f9 ffa0 	bl	800eb30 <uxr_run_session_until_confirm_delivery>
 8014bf0:	4638      	mov	r0, r7
 8014bf2:	b00b      	add	sp, #44	@ 0x2c
 8014bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bf8:	2001      	movs	r0, #1
 8014bfa:	b00b      	add	sp, #44	@ 0x2c
 8014bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c04:	f7f9 fbd4 	bl	800e3b0 <uxr_flash_output_streams>
 8014c08:	4638      	mov	r0, r7
 8014c0a:	b00b      	add	sp, #44	@ 0x2c
 8014c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c10:	200c      	movs	r0, #12
 8014c12:	b00b      	add	sp, #44	@ 0x2c
 8014c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c18:	08018ac4 	.word	0x08018ac4

08014c1c <rmw_take_request>:
 8014c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c20:	4605      	mov	r5, r0
 8014c22:	6800      	ldr	r0, [r0, #0]
 8014c24:	b089      	sub	sp, #36	@ 0x24
 8014c26:	460c      	mov	r4, r1
 8014c28:	4690      	mov	r8, r2
 8014c2a:	461e      	mov	r6, r3
 8014c2c:	b128      	cbz	r0, 8014c3a <rmw_take_request+0x1e>
 8014c2e:	4b28      	ldr	r3, [pc, #160]	@ (8014cd0 <rmw_take_request+0xb4>)
 8014c30:	6819      	ldr	r1, [r3, #0]
 8014c32:	f7eb faf5 	bl	8000220 <strcmp>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d146      	bne.n	8014cc8 <rmw_take_request+0xac>
 8014c3a:	b10e      	cbz	r6, 8014c40 <rmw_take_request+0x24>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	7033      	strb	r3, [r6, #0]
 8014c40:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014c44:	f7f7 fcb8 	bl	800c5b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014c48:	4648      	mov	r0, r9
 8014c4a:	f7f7 fc8d 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014c4e:	4607      	mov	r7, r0
 8014c50:	b3b0      	cbz	r0, 8014cc0 <rmw_take_request+0xa4>
 8014c52:	6885      	ldr	r5, [r0, #8]
 8014c54:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014c58:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014c5c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014c60:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014c64:	7423      	strb	r3, [r4, #16]
 8014c66:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014c6a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014c6e:	74e2      	strb	r2, [r4, #19]
 8014c70:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014c74:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014c78:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014c7c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014c80:	61e1      	str	r1, [r4, #28]
 8014c82:	6162      	str	r2, [r4, #20]
 8014c84:	61a3      	str	r3, [r4, #24]
 8014c86:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014c8a:	689b      	ldr	r3, [r3, #8]
 8014c8c:	4798      	blx	r3
 8014c8e:	6844      	ldr	r4, [r0, #4]
 8014c90:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014c94:	f105 0110 	add.w	r1, r5, #16
 8014c98:	4668      	mov	r0, sp
 8014c9a:	f7f8 fdd7 	bl	800d84c <ucdr_init_buffer>
 8014c9e:	68e3      	ldr	r3, [r4, #12]
 8014ca0:	4641      	mov	r1, r8
 8014ca2:	4668      	mov	r0, sp
 8014ca4:	4798      	blx	r3
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	4604      	mov	r4, r0
 8014caa:	480a      	ldr	r0, [pc, #40]	@ (8014cd4 <rmw_take_request+0xb8>)
 8014cac:	f7ff fe98 	bl	80149e0 <put_memory>
 8014cb0:	b106      	cbz	r6, 8014cb4 <rmw_take_request+0x98>
 8014cb2:	7034      	strb	r4, [r6, #0]
 8014cb4:	f084 0001 	eor.w	r0, r4, #1
 8014cb8:	b2c0      	uxtb	r0, r0
 8014cba:	b009      	add	sp, #36	@ 0x24
 8014cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cc0:	2001      	movs	r0, #1
 8014cc2:	b009      	add	sp, #36	@ 0x24
 8014cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cc8:	200c      	movs	r0, #12
 8014cca:	b009      	add	sp, #36	@ 0x24
 8014ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cd0:	08018ac4 	.word	0x08018ac4
 8014cd4:	2000ac5c 	.word	0x2000ac5c

08014cd8 <rmw_send_response>:
 8014cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cda:	4605      	mov	r5, r0
 8014cdc:	6800      	ldr	r0, [r0, #0]
 8014cde:	b091      	sub	sp, #68	@ 0x44
 8014ce0:	460c      	mov	r4, r1
 8014ce2:	4616      	mov	r6, r2
 8014ce4:	b128      	cbz	r0, 8014cf2 <rmw_send_response+0x1a>
 8014ce6:	4b29      	ldr	r3, [pc, #164]	@ (8014d8c <rmw_send_response+0xb4>)
 8014ce8:	6819      	ldr	r1, [r3, #0]
 8014cea:	f7eb fa99 	bl	8000220 <strcmp>
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	d141      	bne.n	8014d76 <rmw_send_response+0x9e>
 8014cf2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014cf6:	9306      	str	r3, [sp, #24]
 8014cf8:	4623      	mov	r3, r4
 8014cfa:	9207      	str	r2, [sp, #28]
 8014cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d00:	686d      	ldr	r5, [r5, #4]
 8014d02:	789b      	ldrb	r3, [r3, #2]
 8014d04:	68a1      	ldr	r1, [r4, #8]
 8014d06:	f88d 2017 	strb.w	r2, [sp, #23]
 8014d0a:	f88d 3016 	strb.w	r3, [sp, #22]
 8014d0e:	68e2      	ldr	r2, [r4, #12]
 8014d10:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014d14:	6860      	ldr	r0, [r4, #4]
 8014d16:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014d1a:	ab02      	add	r3, sp, #8
 8014d1c:	c307      	stmia	r3!, {r0, r1, r2}
 8014d1e:	696b      	ldr	r3, [r5, #20]
 8014d20:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014d22:	68db      	ldr	r3, [r3, #12]
 8014d24:	4798      	blx	r3
 8014d26:	6844      	ldr	r4, [r0, #4]
 8014d28:	4630      	mov	r0, r6
 8014d2a:	6923      	ldr	r3, [r4, #16]
 8014d2c:	4798      	blx	r3
 8014d2e:	f100 0318 	add.w	r3, r0, #24
 8014d32:	6938      	ldr	r0, [r7, #16]
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	692a      	ldr	r2, [r5, #16]
 8014d38:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014d3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d3e:	ab08      	add	r3, sp, #32
 8014d40:	f7fb f974 	bl	801002c <uxr_prepare_output_stream>
 8014d44:	b910      	cbnz	r0, 8014d4c <rmw_send_response+0x74>
 8014d46:	2001      	movs	r0, #1
 8014d48:	b011      	add	sp, #68	@ 0x44
 8014d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d4c:	a902      	add	r1, sp, #8
 8014d4e:	a808      	add	r0, sp, #32
 8014d50:	f7fc faa4 	bl	801129c <uxr_serialize_SampleIdentity>
 8014d54:	68a3      	ldr	r3, [r4, #8]
 8014d56:	a908      	add	r1, sp, #32
 8014d58:	4630      	mov	r0, r6
 8014d5a:	4798      	blx	r3
 8014d5c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014d60:	6938      	ldr	r0, [r7, #16]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d00a      	beq.n	8014d7c <rmw_send_response+0xa4>
 8014d66:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014d68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d6c:	f7f9 fee0 	bl	800eb30 <uxr_run_session_until_confirm_delivery>
 8014d70:	2000      	movs	r0, #0
 8014d72:	b011      	add	sp, #68	@ 0x44
 8014d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d76:	200c      	movs	r0, #12
 8014d78:	b011      	add	sp, #68	@ 0x44
 8014d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d80:	f7f9 fb16 	bl	800e3b0 <uxr_flash_output_streams>
 8014d84:	2000      	movs	r0, #0
 8014d86:	b011      	add	sp, #68	@ 0x44
 8014d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	08018ac4 	.word	0x08018ac4

08014d90 <rmw_take_response>:
 8014d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d94:	4604      	mov	r4, r0
 8014d96:	6800      	ldr	r0, [r0, #0]
 8014d98:	b088      	sub	sp, #32
 8014d9a:	4688      	mov	r8, r1
 8014d9c:	4617      	mov	r7, r2
 8014d9e:	461d      	mov	r5, r3
 8014da0:	b120      	cbz	r0, 8014dac <rmw_take_response+0x1c>
 8014da2:	4b1e      	ldr	r3, [pc, #120]	@ (8014e1c <rmw_take_response+0x8c>)
 8014da4:	6819      	ldr	r1, [r3, #0]
 8014da6:	f7eb fa3b 	bl	8000220 <strcmp>
 8014daa:	bb78      	cbnz	r0, 8014e0c <rmw_take_response+0x7c>
 8014dac:	b10d      	cbz	r5, 8014db2 <rmw_take_response+0x22>
 8014dae:	2300      	movs	r3, #0
 8014db0:	702b      	strb	r3, [r5, #0]
 8014db2:	6864      	ldr	r4, [r4, #4]
 8014db4:	f7f7 fc00 	bl	800c5b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014db8:	4620      	mov	r0, r4
 8014dba:	f7f7 fbd5 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014dbe:	4606      	mov	r6, r0
 8014dc0:	b340      	cbz	r0, 8014e14 <rmw_take_response+0x84>
 8014dc2:	6963      	ldr	r3, [r4, #20]
 8014dc4:	6884      	ldr	r4, [r0, #8]
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014dcc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014dd0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014dd4:	4798      	blx	r3
 8014dd6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014dda:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014dde:	f104 0110 	add.w	r1, r4, #16
 8014de2:	4668      	mov	r0, sp
 8014de4:	f7f8 fd32 	bl	800d84c <ucdr_init_buffer>
 8014de8:	4639      	mov	r1, r7
 8014dea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014dee:	4668      	mov	r0, sp
 8014df0:	4798      	blx	r3
 8014df2:	4631      	mov	r1, r6
 8014df4:	4604      	mov	r4, r0
 8014df6:	480a      	ldr	r0, [pc, #40]	@ (8014e20 <rmw_take_response+0x90>)
 8014df8:	f7ff fdf2 	bl	80149e0 <put_memory>
 8014dfc:	b105      	cbz	r5, 8014e00 <rmw_take_response+0x70>
 8014dfe:	702c      	strb	r4, [r5, #0]
 8014e00:	f084 0001 	eor.w	r0, r4, #1
 8014e04:	b2c0      	uxtb	r0, r0
 8014e06:	b008      	add	sp, #32
 8014e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e0c:	200c      	movs	r0, #12
 8014e0e:	b008      	add	sp, #32
 8014e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e14:	2001      	movs	r0, #1
 8014e16:	b008      	add	sp, #32
 8014e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e1c:	08018ac4 	.word	0x08018ac4
 8014e20:	2000ac5c 	.word	0x2000ac5c

08014e24 <rmw_take_with_info>:
 8014e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e26:	4604      	mov	r4, r0
 8014e28:	6800      	ldr	r0, [r0, #0]
 8014e2a:	b089      	sub	sp, #36	@ 0x24
 8014e2c:	460f      	mov	r7, r1
 8014e2e:	4615      	mov	r5, r2
 8014e30:	b128      	cbz	r0, 8014e3e <rmw_take_with_info+0x1a>
 8014e32:	4b24      	ldr	r3, [pc, #144]	@ (8014ec4 <rmw_take_with_info+0xa0>)
 8014e34:	6819      	ldr	r1, [r3, #0]
 8014e36:	f7eb f9f3 	bl	8000220 <strcmp>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	d13e      	bne.n	8014ebc <rmw_take_with_info+0x98>
 8014e3e:	b305      	cbz	r5, 8014e82 <rmw_take_with_info+0x5e>
 8014e40:	6864      	ldr	r4, [r4, #4]
 8014e42:	2300      	movs	r3, #0
 8014e44:	702b      	strb	r3, [r5, #0]
 8014e46:	f7f7 fbb7 	bl	800c5b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	f7f7 fb8c 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e50:	4606      	mov	r6, r0
 8014e52:	b1f0      	cbz	r0, 8014e92 <rmw_take_with_info+0x6e>
 8014e54:	6881      	ldr	r1, [r0, #8]
 8014e56:	4668      	mov	r0, sp
 8014e58:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014e5c:	3110      	adds	r1, #16
 8014e5e:	f7f8 fcf5 	bl	800d84c <ucdr_init_buffer>
 8014e62:	69a3      	ldr	r3, [r4, #24]
 8014e64:	4639      	mov	r1, r7
 8014e66:	68db      	ldr	r3, [r3, #12]
 8014e68:	4668      	mov	r0, sp
 8014e6a:	4798      	blx	r3
 8014e6c:	4631      	mov	r1, r6
 8014e6e:	4604      	mov	r4, r0
 8014e70:	4815      	ldr	r0, [pc, #84]	@ (8014ec8 <rmw_take_with_info+0xa4>)
 8014e72:	f7ff fdb5 	bl	80149e0 <put_memory>
 8014e76:	702c      	strb	r4, [r5, #0]
 8014e78:	f084 0001 	eor.w	r0, r4, #1
 8014e7c:	b2c0      	uxtb	r0, r0
 8014e7e:	b009      	add	sp, #36	@ 0x24
 8014e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e82:	6864      	ldr	r4, [r4, #4]
 8014e84:	f7f7 fb98 	bl	800c5b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f7f7 fb6d 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e8e:	4605      	mov	r5, r0
 8014e90:	b910      	cbnz	r0, 8014e98 <rmw_take_with_info+0x74>
 8014e92:	2001      	movs	r0, #1
 8014e94:	b009      	add	sp, #36	@ 0x24
 8014e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e98:	68a9      	ldr	r1, [r5, #8]
 8014e9a:	4668      	mov	r0, sp
 8014e9c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014ea0:	3110      	adds	r1, #16
 8014ea2:	f7f8 fcd3 	bl	800d84c <ucdr_init_buffer>
 8014ea6:	69a3      	ldr	r3, [r4, #24]
 8014ea8:	4639      	mov	r1, r7
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	4668      	mov	r0, sp
 8014eae:	4798      	blx	r3
 8014eb0:	4629      	mov	r1, r5
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	4804      	ldr	r0, [pc, #16]	@ (8014ec8 <rmw_take_with_info+0xa4>)
 8014eb6:	f7ff fd93 	bl	80149e0 <put_memory>
 8014eba:	e7dd      	b.n	8014e78 <rmw_take_with_info+0x54>
 8014ebc:	200c      	movs	r0, #12
 8014ebe:	b009      	add	sp, #36	@ 0x24
 8014ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	08018ac4 	.word	0x08018ac4
 8014ec8:	2000ac5c 	.word	0x2000ac5c

08014ecc <rmw_wait>:
 8014ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ed0:	b089      	sub	sp, #36	@ 0x24
 8014ed2:	4605      	mov	r5, r0
 8014ed4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8014ed6:	460e      	mov	r6, r1
 8014ed8:	4698      	mov	r8, r3
 8014eda:	4691      	mov	r9, r2
 8014edc:	2a00      	cmp	r2, #0
 8014ede:	f000 810a 	beq.w	80150f6 <rmw_wait+0x22a>
 8014ee2:	b16c      	cbz	r4, 8014f00 <rmw_wait+0x34>
 8014ee4:	4bae      	ldr	r3, [pc, #696]	@ (80151a0 <rmw_wait+0x2d4>)
 8014ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ee8:	af04      	add	r7, sp, #16
 8014eea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014eee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014ef2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014ef6:	f7ff faaf 	bl	8014458 <rmw_time_equal>
 8014efa:	2800      	cmp	r0, #0
 8014efc:	f000 8127 	beq.w	801514e <rmw_wait+0x282>
 8014f00:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014f04:	f7f7 fb58 	bl	800c5b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014f08:	4ba6      	ldr	r3, [pc, #664]	@ (80151a4 <rmw_wait+0x2d8>)
 8014f0a:	681c      	ldr	r4, [r3, #0]
 8014f0c:	b14c      	cbz	r4, 8014f22 <rmw_wait+0x56>
 8014f0e:	4623      	mov	r3, r4
 8014f10:	2100      	movs	r1, #0
 8014f12:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014f16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f1a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d1f7      	bne.n	8014f12 <rmw_wait+0x46>
 8014f22:	f1b9 0f00 	cmp.w	r9, #0
 8014f26:	d011      	beq.n	8014f4c <rmw_wait+0x80>
 8014f28:	f8d9 1000 	ldr.w	r1, [r9]
 8014f2c:	b171      	cbz	r1, 8014f4c <rmw_wait+0x80>
 8014f2e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014f32:	2300      	movs	r3, #0
 8014f34:	2001      	movs	r0, #1
 8014f36:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f3a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014f3c:	6912      	ldr	r2, [r2, #16]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f44:	4299      	cmp	r1, r3
 8014f46:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f4a:	d1f4      	bne.n	8014f36 <rmw_wait+0x6a>
 8014f4c:	f1b8 0f00 	cmp.w	r8, #0
 8014f50:	d011      	beq.n	8014f76 <rmw_wait+0xaa>
 8014f52:	f8d8 1000 	ldr.w	r1, [r8]
 8014f56:	b171      	cbz	r1, 8014f76 <rmw_wait+0xaa>
 8014f58:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	2001      	movs	r0, #1
 8014f60:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f64:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014f66:	6912      	ldr	r2, [r2, #16]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f6e:	4299      	cmp	r1, r3
 8014f70:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f74:	d1f4      	bne.n	8014f60 <rmw_wait+0x94>
 8014f76:	b185      	cbz	r5, 8014f9a <rmw_wait+0xce>
 8014f78:	6829      	ldr	r1, [r5, #0]
 8014f7a:	b171      	cbz	r1, 8014f9a <rmw_wait+0xce>
 8014f7c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014f80:	2300      	movs	r3, #0
 8014f82:	2001      	movs	r0, #1
 8014f84:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f88:	6a12      	ldr	r2, [r2, #32]
 8014f8a:	6912      	ldr	r2, [r2, #16]
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f92:	4299      	cmp	r1, r3
 8014f94:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f98:	d1f4      	bne.n	8014f84 <rmw_wait+0xb8>
 8014f9a:	b34c      	cbz	r4, 8014ff0 <rmw_wait+0x124>
 8014f9c:	4622      	mov	r2, r4
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014fa4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014fa8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014fac:	440b      	add	r3, r1
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	2a00      	cmp	r2, #0
 8014fb2:	d1f5      	bne.n	8014fa0 <rmw_wait+0xd4>
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f000 8084 	beq.w	80150c2 <rmw_wait+0x1f6>
 8014fba:	1c7a      	adds	r2, r7, #1
 8014fbc:	d00d      	beq.n	8014fda <rmw_wait+0x10e>
 8014fbe:	ee07 7a90 	vmov	s15, r7
 8014fc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014fc6:	ee07 3a90 	vmov	s15, r3
 8014fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014fd2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014fd6:	ee17 7a90 	vmov	r7, s15
 8014fda:	68a0      	ldr	r0, [r4, #8]
 8014fdc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014fe0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	f040 8090 	bne.w	801510a <rmw_wait+0x23e>
 8014fea:	6864      	ldr	r4, [r4, #4]
 8014fec:	2c00      	cmp	r4, #0
 8014fee:	d1f4      	bne.n	8014fda <rmw_wait+0x10e>
 8014ff0:	f1b9 0f00 	cmp.w	r9, #0
 8014ff4:	f000 80bc 	beq.w	8015170 <rmw_wait+0x2a4>
 8014ff8:	f8d9 7000 	ldr.w	r7, [r9]
 8014ffc:	2f00      	cmp	r7, #0
 8014ffe:	f000 808e 	beq.w	801511e <rmw_wait+0x252>
 8015002:	2400      	movs	r4, #0
 8015004:	4627      	mov	r7, r4
 8015006:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801500a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801500e:	f7f7 faab 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015012:	2800      	cmp	r0, #0
 8015014:	d05f      	beq.n	80150d6 <rmw_wait+0x20a>
 8015016:	f8d9 3000 	ldr.w	r3, [r9]
 801501a:	3401      	adds	r4, #1
 801501c:	42a3      	cmp	r3, r4
 801501e:	f04f 0701 	mov.w	r7, #1
 8015022:	d8f0      	bhi.n	8015006 <rmw_wait+0x13a>
 8015024:	f1b8 0f00 	cmp.w	r8, #0
 8015028:	d012      	beq.n	8015050 <rmw_wait+0x184>
 801502a:	f8d8 3000 	ldr.w	r3, [r8]
 801502e:	b17b      	cbz	r3, 8015050 <rmw_wait+0x184>
 8015030:	2400      	movs	r4, #0
 8015032:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015036:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801503a:	f7f7 fa95 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 801503e:	2800      	cmp	r0, #0
 8015040:	d051      	beq.n	80150e6 <rmw_wait+0x21a>
 8015042:	f8d8 3000 	ldr.w	r3, [r8]
 8015046:	3401      	adds	r4, #1
 8015048:	42a3      	cmp	r3, r4
 801504a:	f04f 0701 	mov.w	r7, #1
 801504e:	d8f0      	bhi.n	8015032 <rmw_wait+0x166>
 8015050:	b1dd      	cbz	r5, 801508a <rmw_wait+0x1be>
 8015052:	682b      	ldr	r3, [r5, #0]
 8015054:	b1cb      	cbz	r3, 801508a <rmw_wait+0x1be>
 8015056:	2400      	movs	r4, #0
 8015058:	686b      	ldr	r3, [r5, #4]
 801505a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801505e:	f7f7 fa83 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015062:	b158      	cbz	r0, 801507c <rmw_wait+0x1b0>
 8015064:	682b      	ldr	r3, [r5, #0]
 8015066:	3401      	adds	r4, #1
 8015068:	42a3      	cmp	r3, r4
 801506a:	d969      	bls.n	8015140 <rmw_wait+0x274>
 801506c:	686b      	ldr	r3, [r5, #4]
 801506e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015072:	2701      	movs	r7, #1
 8015074:	f7f7 fa78 	bl	800c568 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015078:	2800      	cmp	r0, #0
 801507a:	d1f3      	bne.n	8015064 <rmw_wait+0x198>
 801507c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015080:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015084:	3401      	adds	r4, #1
 8015086:	42a3      	cmp	r3, r4
 8015088:	d8e6      	bhi.n	8015058 <rmw_wait+0x18c>
 801508a:	b1a6      	cbz	r6, 80150b6 <rmw_wait+0x1ea>
 801508c:	6834      	ldr	r4, [r6, #0]
 801508e:	b194      	cbz	r4, 80150b6 <rmw_wait+0x1ea>
 8015090:	2300      	movs	r3, #0
 8015092:	461d      	mov	r5, r3
 8015094:	e004      	b.n	80150a0 <rmw_wait+0x1d4>
 8015096:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801509a:	3301      	adds	r3, #1
 801509c:	42a3      	cmp	r3, r4
 801509e:	d00a      	beq.n	80150b6 <rmw_wait+0x1ea>
 80150a0:	6870      	ldr	r0, [r6, #4]
 80150a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80150a6:	7c0a      	ldrb	r2, [r1, #16]
 80150a8:	2a00      	cmp	r2, #0
 80150aa:	d0f4      	beq.n	8015096 <rmw_wait+0x1ca>
 80150ac:	3301      	adds	r3, #1
 80150ae:	42a3      	cmp	r3, r4
 80150b0:	740d      	strb	r5, [r1, #16]
 80150b2:	4617      	mov	r7, r2
 80150b4:	d1f4      	bne.n	80150a0 <rmw_wait+0x1d4>
 80150b6:	2f00      	cmp	r7, #0
 80150b8:	d03e      	beq.n	8015138 <rmw_wait+0x26c>
 80150ba:	2000      	movs	r0, #0
 80150bc:	b009      	add	sp, #36	@ 0x24
 80150be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150c2:	68a0      	ldr	r0, [r4, #8]
 80150c4:	2100      	movs	r1, #0
 80150c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150ca:	f7f9 fcf7 	bl	800eabc <uxr_run_session_timeout>
 80150ce:	6864      	ldr	r4, [r4, #4]
 80150d0:	2c00      	cmp	r4, #0
 80150d2:	d1f6      	bne.n	80150c2 <rmw_wait+0x1f6>
 80150d4:	e78c      	b.n	8014ff0 <rmw_wait+0x124>
 80150d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80150da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80150de:	3401      	adds	r4, #1
 80150e0:	42a3      	cmp	r3, r4
 80150e2:	d890      	bhi.n	8015006 <rmw_wait+0x13a>
 80150e4:	e79e      	b.n	8015024 <rmw_wait+0x158>
 80150e6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80150ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80150ee:	3401      	adds	r4, #1
 80150f0:	429c      	cmp	r4, r3
 80150f2:	d39e      	bcc.n	8015032 <rmw_wait+0x166>
 80150f4:	e7ac      	b.n	8015050 <rmw_wait+0x184>
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f47f aef3 	bne.w	8014ee2 <rmw_wait+0x16>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	f47f aef0 	bne.w	8014ee2 <rmw_wait+0x16>
 8015102:	2900      	cmp	r1, #0
 8015104:	f47f aeed 	bne.w	8014ee2 <rmw_wait+0x16>
 8015108:	e7d7      	b.n	80150ba <rmw_wait+0x1ee>
 801510a:	4639      	mov	r1, r7
 801510c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015110:	f7f9 fcee 	bl	800eaf0 <uxr_run_session_until_data>
 8015114:	6864      	ldr	r4, [r4, #4]
 8015116:	2c00      	cmp	r4, #0
 8015118:	f47f af5f 	bne.w	8014fda <rmw_wait+0x10e>
 801511c:	e768      	b.n	8014ff0 <rmw_wait+0x124>
 801511e:	f1b8 0f00 	cmp.w	r8, #0
 8015122:	d032      	beq.n	801518a <rmw_wait+0x2be>
 8015124:	f8d8 3000 	ldr.w	r3, [r8]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d181      	bne.n	8015030 <rmw_wait+0x164>
 801512c:	461f      	mov	r7, r3
 801512e:	2d00      	cmp	r5, #0
 8015130:	d18f      	bne.n	8015052 <rmw_wait+0x186>
 8015132:	462f      	mov	r7, r5
 8015134:	2e00      	cmp	r6, #0
 8015136:	d1a9      	bne.n	801508c <rmw_wait+0x1c0>
 8015138:	2002      	movs	r0, #2
 801513a:	b009      	add	sp, #36	@ 0x24
 801513c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015140:	2e00      	cmp	r6, #0
 8015142:	d0ba      	beq.n	80150ba <rmw_wait+0x1ee>
 8015144:	6834      	ldr	r4, [r6, #0]
 8015146:	2701      	movs	r7, #1
 8015148:	2c00      	cmp	r4, #0
 801514a:	d1a1      	bne.n	8015090 <rmw_wait+0x1c4>
 801514c:	e7b5      	b.n	80150ba <rmw_wait+0x1ee>
 801514e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015152:	f7ff f9d5 	bl	8014500 <rmw_time_total_nsec>
 8015156:	2300      	movs	r3, #0
 8015158:	4a13      	ldr	r2, [pc, #76]	@ (80151a8 <rmw_wait+0x2dc>)
 801515a:	f7eb f919 	bl	8000390 <__aeabi_uldivmod>
 801515e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015162:	f171 0300 	sbcs.w	r3, r1, #0
 8015166:	4607      	mov	r7, r0
 8015168:	bfa8      	it	ge
 801516a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801516e:	e6c9      	b.n	8014f04 <rmw_wait+0x38>
 8015170:	f1b8 0f00 	cmp.w	r8, #0
 8015174:	d009      	beq.n	801518a <rmw_wait+0x2be>
 8015176:	f8d8 3000 	ldr.w	r3, [r8]
 801517a:	464f      	mov	r7, r9
 801517c:	2b00      	cmp	r3, #0
 801517e:	f47f af57 	bne.w	8015030 <rmw_wait+0x164>
 8015182:	2d00      	cmp	r5, #0
 8015184:	f47f af65 	bne.w	8015052 <rmw_wait+0x186>
 8015188:	e7d3      	b.n	8015132 <rmw_wait+0x266>
 801518a:	b17d      	cbz	r5, 80151ac <rmw_wait+0x2e0>
 801518c:	682b      	ldr	r3, [r5, #0]
 801518e:	4647      	mov	r7, r8
 8015190:	2b00      	cmp	r3, #0
 8015192:	f47f af60 	bne.w	8015056 <rmw_wait+0x18a>
 8015196:	2e00      	cmp	r6, #0
 8015198:	f47f af78 	bne.w	801508c <rmw_wait+0x1c0>
 801519c:	e7cc      	b.n	8015138 <rmw_wait+0x26c>
 801519e:	bf00      	nop
 80151a0:	08017ff8 	.word	0x08017ff8
 80151a4:	2000ac4c 	.word	0x2000ac4c
 80151a8:	000f4240 	.word	0x000f4240
 80151ac:	2e00      	cmp	r6, #0
 80151ae:	d0c3      	beq.n	8015138 <rmw_wait+0x26c>
 80151b0:	6834      	ldr	r4, [r6, #0]
 80151b2:	462f      	mov	r7, r5
 80151b4:	2c00      	cmp	r4, #0
 80151b6:	f47f af6b 	bne.w	8015090 <rmw_wait+0x1c4>
 80151ba:	e7bd      	b.n	8015138 <rmw_wait+0x26c>

080151bc <rmw_create_wait_set>:
 80151bc:	b508      	push	{r3, lr}
 80151be:	4803      	ldr	r0, [pc, #12]	@ (80151cc <rmw_create_wait_set+0x10>)
 80151c0:	f7ff fbfe 	bl	80149c0 <get_memory>
 80151c4:	b108      	cbz	r0, 80151ca <rmw_create_wait_set+0xe>
 80151c6:	6880      	ldr	r0, [r0, #8]
 80151c8:	3010      	adds	r0, #16
 80151ca:	bd08      	pop	{r3, pc}
 80151cc:	2000ac8c 	.word	0x2000ac8c

080151d0 <rmw_destroy_wait_set>:
 80151d0:	b508      	push	{r3, lr}
 80151d2:	4b08      	ldr	r3, [pc, #32]	@ (80151f4 <rmw_destroy_wait_set+0x24>)
 80151d4:	6819      	ldr	r1, [r3, #0]
 80151d6:	b911      	cbnz	r1, 80151de <rmw_destroy_wait_set+0xe>
 80151d8:	e00a      	b.n	80151f0 <rmw_destroy_wait_set+0x20>
 80151da:	6849      	ldr	r1, [r1, #4]
 80151dc:	b141      	cbz	r1, 80151f0 <rmw_destroy_wait_set+0x20>
 80151de:	688b      	ldr	r3, [r1, #8]
 80151e0:	3310      	adds	r3, #16
 80151e2:	4298      	cmp	r0, r3
 80151e4:	d1f9      	bne.n	80151da <rmw_destroy_wait_set+0xa>
 80151e6:	4803      	ldr	r0, [pc, #12]	@ (80151f4 <rmw_destroy_wait_set+0x24>)
 80151e8:	f7ff fbfa 	bl	80149e0 <put_memory>
 80151ec:	2000      	movs	r0, #0
 80151ee:	bd08      	pop	{r3, pc}
 80151f0:	2001      	movs	r0, #1
 80151f2:	bd08      	pop	{r3, pc}
 80151f4:	2000ac8c 	.word	0x2000ac8c

080151f8 <rmw_uros_epoch_nanos>:
 80151f8:	4b05      	ldr	r3, [pc, #20]	@ (8015210 <rmw_uros_epoch_nanos+0x18>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	b123      	cbz	r3, 8015208 <rmw_uros_epoch_nanos+0x10>
 80151fe:	6898      	ldr	r0, [r3, #8]
 8015200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015204:	f7f9 b8ca 	b.w	800e39c <uxr_epoch_nanos>
 8015208:	2000      	movs	r0, #0
 801520a:	2100      	movs	r1, #0
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	2000ac4c 	.word	0x2000ac4c

08015214 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015218:	6805      	ldr	r5, [r0, #0]
 801521a:	4604      	mov	r4, r0
 801521c:	4628      	mov	r0, r5
 801521e:	460e      	mov	r6, r1
 8015220:	f7ea fffe 	bl	8000220 <strcmp>
 8015224:	b1c8      	cbz	r0, 801525a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015226:	4b11      	ldr	r3, [pc, #68]	@ (801526c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	429d      	cmp	r5, r3
 801522c:	d112      	bne.n	8015254 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801522e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015232:	f8d8 4000 	ldr.w	r4, [r8]
 8015236:	b16c      	cbz	r4, 8015254 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015238:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801523c:	2700      	movs	r7, #0
 801523e:	3d04      	subs	r5, #4
 8015240:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015244:	4631      	mov	r1, r6
 8015246:	f7ea ffeb 	bl	8000220 <strcmp>
 801524a:	00bb      	lsls	r3, r7, #2
 801524c:	b140      	cbz	r0, 8015260 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801524e:	3701      	adds	r7, #1
 8015250:	42bc      	cmp	r4, r7
 8015252:	d1f5      	bne.n	8015240 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015254:	2000      	movs	r0, #0
 8015256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801525a:	4620      	mov	r0, r4
 801525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015260:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015268:	58d3      	ldr	r3, [r2, r3]
 801526a:	4718      	bx	r3
 801526c:	200000b0 	.word	0x200000b0

08015270 <std_msgs__msg__Int32__init>:
 8015270:	3800      	subs	r0, #0
 8015272:	bf18      	it	ne
 8015274:	2001      	movne	r0, #1
 8015276:	4770      	bx	lr

08015278 <std_msgs__msg__Int32__fini>:
 8015278:	4770      	bx	lr
 801527a:	bf00      	nop

0801527c <ucdr_serialize_endian_array_char>:
 801527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015280:	4619      	mov	r1, r3
 8015282:	461f      	mov	r7, r3
 8015284:	4605      	mov	r5, r0
 8015286:	4690      	mov	r8, r2
 8015288:	f7f8 fa8c 	bl	800d7a4 <ucdr_check_buffer_available_for>
 801528c:	b9e0      	cbnz	r0, 80152c8 <ucdr_serialize_endian_array_char+0x4c>
 801528e:	463e      	mov	r6, r7
 8015290:	e009      	b.n	80152a6 <ucdr_serialize_endian_array_char+0x2a>
 8015292:	68a8      	ldr	r0, [r5, #8]
 8015294:	f001 ff87 	bl	80171a6 <memcpy>
 8015298:	68ab      	ldr	r3, [r5, #8]
 801529a:	6928      	ldr	r0, [r5, #16]
 801529c:	4423      	add	r3, r4
 801529e:	4420      	add	r0, r4
 80152a0:	1b36      	subs	r6, r6, r4
 80152a2:	60ab      	str	r3, [r5, #8]
 80152a4:	6128      	str	r0, [r5, #16]
 80152a6:	4631      	mov	r1, r6
 80152a8:	2201      	movs	r2, #1
 80152aa:	4628      	mov	r0, r5
 80152ac:	f7f8 fb02 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 80152b0:	1bb9      	subs	r1, r7, r6
 80152b2:	4441      	add	r1, r8
 80152b4:	4604      	mov	r4, r0
 80152b6:	4602      	mov	r2, r0
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d1ea      	bne.n	8015292 <ucdr_serialize_endian_array_char+0x16>
 80152bc:	2301      	movs	r3, #1
 80152be:	7da8      	ldrb	r0, [r5, #22]
 80152c0:	756b      	strb	r3, [r5, #21]
 80152c2:	4058      	eors	r0, r3
 80152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c8:	463a      	mov	r2, r7
 80152ca:	68a8      	ldr	r0, [r5, #8]
 80152cc:	4641      	mov	r1, r8
 80152ce:	f001 ff6a 	bl	80171a6 <memcpy>
 80152d2:	68aa      	ldr	r2, [r5, #8]
 80152d4:	692b      	ldr	r3, [r5, #16]
 80152d6:	443a      	add	r2, r7
 80152d8:	443b      	add	r3, r7
 80152da:	60aa      	str	r2, [r5, #8]
 80152dc:	612b      	str	r3, [r5, #16]
 80152de:	e7ed      	b.n	80152bc <ucdr_serialize_endian_array_char+0x40>

080152e0 <ucdr_deserialize_endian_array_char>:
 80152e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152e4:	4619      	mov	r1, r3
 80152e6:	461f      	mov	r7, r3
 80152e8:	4605      	mov	r5, r0
 80152ea:	4690      	mov	r8, r2
 80152ec:	f7f8 fa5a 	bl	800d7a4 <ucdr_check_buffer_available_for>
 80152f0:	b9e0      	cbnz	r0, 801532c <ucdr_deserialize_endian_array_char+0x4c>
 80152f2:	463e      	mov	r6, r7
 80152f4:	e009      	b.n	801530a <ucdr_deserialize_endian_array_char+0x2a>
 80152f6:	68a9      	ldr	r1, [r5, #8]
 80152f8:	f001 ff55 	bl	80171a6 <memcpy>
 80152fc:	68ab      	ldr	r3, [r5, #8]
 80152fe:	6928      	ldr	r0, [r5, #16]
 8015300:	4423      	add	r3, r4
 8015302:	4420      	add	r0, r4
 8015304:	1b36      	subs	r6, r6, r4
 8015306:	60ab      	str	r3, [r5, #8]
 8015308:	6128      	str	r0, [r5, #16]
 801530a:	2201      	movs	r2, #1
 801530c:	4631      	mov	r1, r6
 801530e:	4628      	mov	r0, r5
 8015310:	f7f8 fad0 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 8015314:	4604      	mov	r4, r0
 8015316:	1bb8      	subs	r0, r7, r6
 8015318:	4440      	add	r0, r8
 801531a:	4622      	mov	r2, r4
 801531c:	2c00      	cmp	r4, #0
 801531e:	d1ea      	bne.n	80152f6 <ucdr_deserialize_endian_array_char+0x16>
 8015320:	2301      	movs	r3, #1
 8015322:	7da8      	ldrb	r0, [r5, #22]
 8015324:	756b      	strb	r3, [r5, #21]
 8015326:	4058      	eors	r0, r3
 8015328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801532c:	463a      	mov	r2, r7
 801532e:	68a9      	ldr	r1, [r5, #8]
 8015330:	4640      	mov	r0, r8
 8015332:	f001 ff38 	bl	80171a6 <memcpy>
 8015336:	68aa      	ldr	r2, [r5, #8]
 8015338:	692b      	ldr	r3, [r5, #16]
 801533a:	443a      	add	r2, r7
 801533c:	443b      	add	r3, r7
 801533e:	60aa      	str	r2, [r5, #8]
 8015340:	612b      	str	r3, [r5, #16]
 8015342:	e7ed      	b.n	8015320 <ucdr_deserialize_endian_array_char+0x40>

08015344 <ucdr_serialize_array_uint8_t>:
 8015344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015348:	4688      	mov	r8, r1
 801534a:	4611      	mov	r1, r2
 801534c:	4617      	mov	r7, r2
 801534e:	4605      	mov	r5, r0
 8015350:	f7f8 fa28 	bl	800d7a4 <ucdr_check_buffer_available_for>
 8015354:	b9e0      	cbnz	r0, 8015390 <ucdr_serialize_array_uint8_t+0x4c>
 8015356:	463e      	mov	r6, r7
 8015358:	e009      	b.n	801536e <ucdr_serialize_array_uint8_t+0x2a>
 801535a:	68a8      	ldr	r0, [r5, #8]
 801535c:	f001 ff23 	bl	80171a6 <memcpy>
 8015360:	68aa      	ldr	r2, [r5, #8]
 8015362:	692b      	ldr	r3, [r5, #16]
 8015364:	4422      	add	r2, r4
 8015366:	4423      	add	r3, r4
 8015368:	1b36      	subs	r6, r6, r4
 801536a:	60aa      	str	r2, [r5, #8]
 801536c:	612b      	str	r3, [r5, #16]
 801536e:	4631      	mov	r1, r6
 8015370:	2201      	movs	r2, #1
 8015372:	4628      	mov	r0, r5
 8015374:	f7f8 fa9e 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 8015378:	1bb9      	subs	r1, r7, r6
 801537a:	4441      	add	r1, r8
 801537c:	4604      	mov	r4, r0
 801537e:	4602      	mov	r2, r0
 8015380:	2800      	cmp	r0, #0
 8015382:	d1ea      	bne.n	801535a <ucdr_serialize_array_uint8_t+0x16>
 8015384:	2301      	movs	r3, #1
 8015386:	7da8      	ldrb	r0, [r5, #22]
 8015388:	756b      	strb	r3, [r5, #21]
 801538a:	4058      	eors	r0, r3
 801538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015390:	463a      	mov	r2, r7
 8015392:	68a8      	ldr	r0, [r5, #8]
 8015394:	4641      	mov	r1, r8
 8015396:	f001 ff06 	bl	80171a6 <memcpy>
 801539a:	68aa      	ldr	r2, [r5, #8]
 801539c:	692b      	ldr	r3, [r5, #16]
 801539e:	443a      	add	r2, r7
 80153a0:	443b      	add	r3, r7
 80153a2:	60aa      	str	r2, [r5, #8]
 80153a4:	612b      	str	r3, [r5, #16]
 80153a6:	e7ed      	b.n	8015384 <ucdr_serialize_array_uint8_t+0x40>

080153a8 <ucdr_serialize_endian_array_uint8_t>:
 80153a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ac:	4619      	mov	r1, r3
 80153ae:	461f      	mov	r7, r3
 80153b0:	4605      	mov	r5, r0
 80153b2:	4690      	mov	r8, r2
 80153b4:	f7f8 f9f6 	bl	800d7a4 <ucdr_check_buffer_available_for>
 80153b8:	b9e0      	cbnz	r0, 80153f4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80153ba:	463e      	mov	r6, r7
 80153bc:	e009      	b.n	80153d2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80153be:	68a8      	ldr	r0, [r5, #8]
 80153c0:	f001 fef1 	bl	80171a6 <memcpy>
 80153c4:	68ab      	ldr	r3, [r5, #8]
 80153c6:	6928      	ldr	r0, [r5, #16]
 80153c8:	4423      	add	r3, r4
 80153ca:	4420      	add	r0, r4
 80153cc:	1b36      	subs	r6, r6, r4
 80153ce:	60ab      	str	r3, [r5, #8]
 80153d0:	6128      	str	r0, [r5, #16]
 80153d2:	4631      	mov	r1, r6
 80153d4:	2201      	movs	r2, #1
 80153d6:	4628      	mov	r0, r5
 80153d8:	f7f8 fa6c 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 80153dc:	1bb9      	subs	r1, r7, r6
 80153de:	4441      	add	r1, r8
 80153e0:	4604      	mov	r4, r0
 80153e2:	4602      	mov	r2, r0
 80153e4:	2800      	cmp	r0, #0
 80153e6:	d1ea      	bne.n	80153be <ucdr_serialize_endian_array_uint8_t+0x16>
 80153e8:	2301      	movs	r3, #1
 80153ea:	7da8      	ldrb	r0, [r5, #22]
 80153ec:	756b      	strb	r3, [r5, #21]
 80153ee:	4058      	eors	r0, r3
 80153f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153f4:	463a      	mov	r2, r7
 80153f6:	68a8      	ldr	r0, [r5, #8]
 80153f8:	4641      	mov	r1, r8
 80153fa:	f001 fed4 	bl	80171a6 <memcpy>
 80153fe:	68aa      	ldr	r2, [r5, #8]
 8015400:	692b      	ldr	r3, [r5, #16]
 8015402:	443a      	add	r2, r7
 8015404:	443b      	add	r3, r7
 8015406:	60aa      	str	r2, [r5, #8]
 8015408:	612b      	str	r3, [r5, #16]
 801540a:	e7ed      	b.n	80153e8 <ucdr_serialize_endian_array_uint8_t+0x40>

0801540c <ucdr_deserialize_array_uint8_t>:
 801540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015410:	4688      	mov	r8, r1
 8015412:	4611      	mov	r1, r2
 8015414:	4617      	mov	r7, r2
 8015416:	4605      	mov	r5, r0
 8015418:	f7f8 f9c4 	bl	800d7a4 <ucdr_check_buffer_available_for>
 801541c:	b9e0      	cbnz	r0, 8015458 <ucdr_deserialize_array_uint8_t+0x4c>
 801541e:	463e      	mov	r6, r7
 8015420:	e009      	b.n	8015436 <ucdr_deserialize_array_uint8_t+0x2a>
 8015422:	68a9      	ldr	r1, [r5, #8]
 8015424:	f001 febf 	bl	80171a6 <memcpy>
 8015428:	68aa      	ldr	r2, [r5, #8]
 801542a:	692b      	ldr	r3, [r5, #16]
 801542c:	4422      	add	r2, r4
 801542e:	4423      	add	r3, r4
 8015430:	1b36      	subs	r6, r6, r4
 8015432:	60aa      	str	r2, [r5, #8]
 8015434:	612b      	str	r3, [r5, #16]
 8015436:	2201      	movs	r2, #1
 8015438:	4631      	mov	r1, r6
 801543a:	4628      	mov	r0, r5
 801543c:	f7f8 fa3a 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 8015440:	4604      	mov	r4, r0
 8015442:	1bb8      	subs	r0, r7, r6
 8015444:	4440      	add	r0, r8
 8015446:	4622      	mov	r2, r4
 8015448:	2c00      	cmp	r4, #0
 801544a:	d1ea      	bne.n	8015422 <ucdr_deserialize_array_uint8_t+0x16>
 801544c:	2301      	movs	r3, #1
 801544e:	7da8      	ldrb	r0, [r5, #22]
 8015450:	756b      	strb	r3, [r5, #21]
 8015452:	4058      	eors	r0, r3
 8015454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015458:	463a      	mov	r2, r7
 801545a:	68a9      	ldr	r1, [r5, #8]
 801545c:	4640      	mov	r0, r8
 801545e:	f001 fea2 	bl	80171a6 <memcpy>
 8015462:	68aa      	ldr	r2, [r5, #8]
 8015464:	692b      	ldr	r3, [r5, #16]
 8015466:	443a      	add	r2, r7
 8015468:	443b      	add	r3, r7
 801546a:	60aa      	str	r2, [r5, #8]
 801546c:	612b      	str	r3, [r5, #16]
 801546e:	e7ed      	b.n	801544c <ucdr_deserialize_array_uint8_t+0x40>

08015470 <ucdr_deserialize_endian_array_uint8_t>:
 8015470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015474:	4619      	mov	r1, r3
 8015476:	461f      	mov	r7, r3
 8015478:	4605      	mov	r5, r0
 801547a:	4690      	mov	r8, r2
 801547c:	f7f8 f992 	bl	800d7a4 <ucdr_check_buffer_available_for>
 8015480:	b9e0      	cbnz	r0, 80154bc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015482:	463e      	mov	r6, r7
 8015484:	e009      	b.n	801549a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015486:	68a9      	ldr	r1, [r5, #8]
 8015488:	f001 fe8d 	bl	80171a6 <memcpy>
 801548c:	68ab      	ldr	r3, [r5, #8]
 801548e:	6928      	ldr	r0, [r5, #16]
 8015490:	4423      	add	r3, r4
 8015492:	4420      	add	r0, r4
 8015494:	1b36      	subs	r6, r6, r4
 8015496:	60ab      	str	r3, [r5, #8]
 8015498:	6128      	str	r0, [r5, #16]
 801549a:	2201      	movs	r2, #1
 801549c:	4631      	mov	r1, r6
 801549e:	4628      	mov	r0, r5
 80154a0:	f7f8 fa08 	bl	800d8b4 <ucdr_check_final_buffer_behavior_array>
 80154a4:	4604      	mov	r4, r0
 80154a6:	1bb8      	subs	r0, r7, r6
 80154a8:	4440      	add	r0, r8
 80154aa:	4622      	mov	r2, r4
 80154ac:	2c00      	cmp	r4, #0
 80154ae:	d1ea      	bne.n	8015486 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80154b0:	2301      	movs	r3, #1
 80154b2:	7da8      	ldrb	r0, [r5, #22]
 80154b4:	756b      	strb	r3, [r5, #21]
 80154b6:	4058      	eors	r0, r3
 80154b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154bc:	463a      	mov	r2, r7
 80154be:	68a9      	ldr	r1, [r5, #8]
 80154c0:	4640      	mov	r0, r8
 80154c2:	f001 fe70 	bl	80171a6 <memcpy>
 80154c6:	68aa      	ldr	r2, [r5, #8]
 80154c8:	692b      	ldr	r3, [r5, #16]
 80154ca:	443a      	add	r2, r7
 80154cc:	443b      	add	r3, r7
 80154ce:	60aa      	str	r2, [r5, #8]
 80154d0:	612b      	str	r3, [r5, #16]
 80154d2:	e7ed      	b.n	80154b0 <ucdr_deserialize_endian_array_uint8_t+0x40>

080154d4 <ucdr_serialize_sequence_char>:
 80154d4:	b570      	push	{r4, r5, r6, lr}
 80154d6:	4615      	mov	r5, r2
 80154d8:	460e      	mov	r6, r1
 80154da:	7d01      	ldrb	r1, [r0, #20]
 80154dc:	4604      	mov	r4, r0
 80154de:	f7f7 fcb7 	bl	800ce50 <ucdr_serialize_endian_uint32_t>
 80154e2:	b90d      	cbnz	r5, 80154e8 <ucdr_serialize_sequence_char+0x14>
 80154e4:	2001      	movs	r0, #1
 80154e6:	bd70      	pop	{r4, r5, r6, pc}
 80154e8:	7d21      	ldrb	r1, [r4, #20]
 80154ea:	462b      	mov	r3, r5
 80154ec:	4632      	mov	r2, r6
 80154ee:	4620      	mov	r0, r4
 80154f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154f4:	f7ff bec2 	b.w	801527c <ucdr_serialize_endian_array_char>

080154f8 <ucdr_deserialize_sequence_char>:
 80154f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fc:	461d      	mov	r5, r3
 80154fe:	4616      	mov	r6, r2
 8015500:	460f      	mov	r7, r1
 8015502:	461a      	mov	r2, r3
 8015504:	7d01      	ldrb	r1, [r0, #20]
 8015506:	4604      	mov	r4, r0
 8015508:	f7f7 fdca 	bl	800d0a0 <ucdr_deserialize_endian_uint32_t>
 801550c:	682b      	ldr	r3, [r5, #0]
 801550e:	429e      	cmp	r6, r3
 8015510:	bf3c      	itt	cc
 8015512:	2201      	movcc	r2, #1
 8015514:	75a2      	strbcc	r2, [r4, #22]
 8015516:	b913      	cbnz	r3, 801551e <ucdr_deserialize_sequence_char+0x26>
 8015518:	2001      	movs	r0, #1
 801551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551e:	7d21      	ldrb	r1, [r4, #20]
 8015520:	463a      	mov	r2, r7
 8015522:	4620      	mov	r0, r4
 8015524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015528:	f7ff beda 	b.w	80152e0 <ucdr_deserialize_endian_array_char>

0801552c <ucdr_serialize_sequence_uint8_t>:
 801552c:	b570      	push	{r4, r5, r6, lr}
 801552e:	4615      	mov	r5, r2
 8015530:	460e      	mov	r6, r1
 8015532:	7d01      	ldrb	r1, [r0, #20]
 8015534:	4604      	mov	r4, r0
 8015536:	f7f7 fc8b 	bl	800ce50 <ucdr_serialize_endian_uint32_t>
 801553a:	b90d      	cbnz	r5, 8015540 <ucdr_serialize_sequence_uint8_t+0x14>
 801553c:	2001      	movs	r0, #1
 801553e:	bd70      	pop	{r4, r5, r6, pc}
 8015540:	7d21      	ldrb	r1, [r4, #20]
 8015542:	462b      	mov	r3, r5
 8015544:	4632      	mov	r2, r6
 8015546:	4620      	mov	r0, r4
 8015548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801554c:	f7ff bf2c 	b.w	80153a8 <ucdr_serialize_endian_array_uint8_t>

08015550 <ucdr_deserialize_sequence_uint8_t>:
 8015550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015554:	461d      	mov	r5, r3
 8015556:	4616      	mov	r6, r2
 8015558:	460f      	mov	r7, r1
 801555a:	461a      	mov	r2, r3
 801555c:	7d01      	ldrb	r1, [r0, #20]
 801555e:	4604      	mov	r4, r0
 8015560:	f7f7 fd9e 	bl	800d0a0 <ucdr_deserialize_endian_uint32_t>
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	429e      	cmp	r6, r3
 8015568:	bf3c      	itt	cc
 801556a:	2201      	movcc	r2, #1
 801556c:	75a2      	strbcc	r2, [r4, #22]
 801556e:	b913      	cbnz	r3, 8015576 <ucdr_deserialize_sequence_uint8_t+0x26>
 8015570:	2001      	movs	r0, #1
 8015572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015576:	7d21      	ldrb	r1, [r4, #20]
 8015578:	463a      	mov	r2, r7
 801557a:	4620      	mov	r0, r4
 801557c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015580:	f7ff bf76 	b.w	8015470 <ucdr_deserialize_endian_array_uint8_t>

08015584 <ucdr_serialize_string>:
 8015584:	b510      	push	{r4, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	4604      	mov	r4, r0
 801558a:	4608      	mov	r0, r1
 801558c:	9101      	str	r1, [sp, #4]
 801558e:	f7ea fe51 	bl	8000234 <strlen>
 8015592:	9901      	ldr	r1, [sp, #4]
 8015594:	1c42      	adds	r2, r0, #1
 8015596:	4620      	mov	r0, r4
 8015598:	b002      	add	sp, #8
 801559a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801559e:	f7ff bf99 	b.w	80154d4 <ucdr_serialize_sequence_char>
 80155a2:	bf00      	nop

080155a4 <ucdr_deserialize_string>:
 80155a4:	b500      	push	{lr}
 80155a6:	b083      	sub	sp, #12
 80155a8:	ab01      	add	r3, sp, #4
 80155aa:	f7ff ffa5 	bl	80154f8 <ucdr_deserialize_sequence_char>
 80155ae:	b003      	add	sp, #12
 80155b0:	f85d fb04 	ldr.w	pc, [sp], #4

080155b4 <uxr_init_input_best_effort_stream>:
 80155b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80155b8:	8003      	strh	r3, [r0, #0]
 80155ba:	4770      	bx	lr

080155bc <uxr_reset_input_best_effort_stream>:
 80155bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80155c0:	8003      	strh	r3, [r0, #0]
 80155c2:	4770      	bx	lr

080155c4 <uxr_receive_best_effort_message>:
 80155c4:	b538      	push	{r3, r4, r5, lr}
 80155c6:	4604      	mov	r4, r0
 80155c8:	8800      	ldrh	r0, [r0, #0]
 80155ca:	460d      	mov	r5, r1
 80155cc:	f000 fd42 	bl	8016054 <uxr_seq_num_cmp>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80155d8:	bfb8      	it	lt
 80155da:	8025      	strhlt	r5, [r4, #0]
 80155dc:	bd38      	pop	{r3, r4, r5, pc}
 80155de:	bf00      	nop

080155e0 <on_full_input_buffer>:
 80155e0:	b570      	push	{r4, r5, r6, lr}
 80155e2:	4605      	mov	r5, r0
 80155e4:	460c      	mov	r4, r1
 80155e6:	682b      	ldr	r3, [r5, #0]
 80155e8:	6809      	ldr	r1, [r1, #0]
 80155ea:	8920      	ldrh	r0, [r4, #8]
 80155ec:	6862      	ldr	r2, [r4, #4]
 80155ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80155f2:	eba3 0c01 	sub.w	ip, r3, r1
 80155f6:	fbbc fcf2 	udiv	ip, ip, r2
 80155fa:	f10c 0c01 	add.w	ip, ip, #1
 80155fe:	fa1f f38c 	uxth.w	r3, ip
 8015602:	fbb3 f6f0 	udiv	r6, r3, r0
 8015606:	fb00 3316 	mls	r3, r0, r6, r3
 801560a:	b29b      	uxth	r3, r3
 801560c:	fb02 f303 	mul.w	r3, r2, r3
 8015610:	1d18      	adds	r0, r3, #4
 8015612:	4408      	add	r0, r1
 8015614:	7d26      	ldrb	r6, [r4, #20]
 8015616:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801561a:	b116      	cbz	r6, 8015622 <on_full_input_buffer+0x42>
 801561c:	2600      	movs	r6, #0
 801561e:	f840 6c04 	str.w	r6, [r0, #-4]
 8015622:	2a03      	cmp	r2, #3
 8015624:	d801      	bhi.n	801562a <on_full_input_buffer+0x4a>
 8015626:	2001      	movs	r0, #1
 8015628:	bd70      	pop	{r4, r5, r6, pc}
 801562a:	3308      	adds	r3, #8
 801562c:	4419      	add	r1, r3
 801562e:	4628      	mov	r0, r5
 8015630:	692b      	ldr	r3, [r5, #16]
 8015632:	3a04      	subs	r2, #4
 8015634:	f7f8 f902 	bl	800d83c <ucdr_init_buffer_origin>
 8015638:	4628      	mov	r0, r5
 801563a:	4903      	ldr	r1, [pc, #12]	@ (8015648 <on_full_input_buffer+0x68>)
 801563c:	4622      	mov	r2, r4
 801563e:	f7f8 f8d9 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 8015642:	2000      	movs	r0, #0
 8015644:	bd70      	pop	{r4, r5, r6, pc}
 8015646:	bf00      	nop
 8015648:	080155e1 	.word	0x080155e1

0801564c <uxr_init_input_reliable_stream>:
 801564c:	b500      	push	{lr}
 801564e:	e9c0 1200 	strd	r1, r2, [r0]
 8015652:	f04f 0e00 	mov.w	lr, #0
 8015656:	9a01      	ldr	r2, [sp, #4]
 8015658:	8103      	strh	r3, [r0, #8]
 801565a:	6102      	str	r2, [r0, #16]
 801565c:	f880 e014 	strb.w	lr, [r0, #20]
 8015660:	b1d3      	cbz	r3, 8015698 <uxr_init_input_reliable_stream+0x4c>
 8015662:	f8c1 e000 	str.w	lr, [r1]
 8015666:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801566a:	f1bc 0f01 	cmp.w	ip, #1
 801566e:	d913      	bls.n	8015698 <uxr_init_input_reliable_stream+0x4c>
 8015670:	2301      	movs	r3, #1
 8015672:	fbb3 f1fc 	udiv	r1, r3, ip
 8015676:	fb0c 3111 	mls	r1, ip, r1, r3
 801567a:	b289      	uxth	r1, r1
 801567c:	6842      	ldr	r2, [r0, #4]
 801567e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015682:	fb01 f202 	mul.w	r2, r1, r2
 8015686:	6801      	ldr	r1, [r0, #0]
 8015688:	f841 e002 	str.w	lr, [r1, r2]
 801568c:	3301      	adds	r3, #1
 801568e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015692:	b29b      	uxth	r3, r3
 8015694:	459c      	cmp	ip, r3
 8015696:	d8ec      	bhi.n	8015672 <uxr_init_input_reliable_stream+0x26>
 8015698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801569c:	60c3      	str	r3, [r0, #12]
 801569e:	f85d fb04 	ldr.w	pc, [sp], #4
 80156a2:	bf00      	nop

080156a4 <uxr_reset_input_reliable_stream>:
 80156a4:	8901      	ldrh	r1, [r0, #8]
 80156a6:	b1e9      	cbz	r1, 80156e4 <uxr_reset_input_reliable_stream+0x40>
 80156a8:	f04f 0c00 	mov.w	ip, #0
 80156ac:	b500      	push	{lr}
 80156ae:	4663      	mov	r3, ip
 80156b0:	46e6      	mov	lr, ip
 80156b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80156b6:	fb01 3312 	mls	r3, r1, r2, r3
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	6842      	ldr	r2, [r0, #4]
 80156be:	fbb2 f2f1 	udiv	r2, r2, r1
 80156c2:	fb02 f303 	mul.w	r3, r2, r3
 80156c6:	6802      	ldr	r2, [r0, #0]
 80156c8:	f842 e003 	str.w	lr, [r2, r3]
 80156cc:	f10c 0c01 	add.w	ip, ip, #1
 80156d0:	8901      	ldrh	r1, [r0, #8]
 80156d2:	fa1f f38c 	uxth.w	r3, ip
 80156d6:	4299      	cmp	r1, r3
 80156d8:	d8eb      	bhi.n	80156b2 <uxr_reset_input_reliable_stream+0xe>
 80156da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80156de:	60c3      	str	r3, [r0, #12]
 80156e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80156e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80156e8:	60c3      	str	r3, [r0, #12]
 80156ea:	4770      	bx	lr

080156ec <uxr_receive_reliable_message>:
 80156ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156f0:	4604      	mov	r4, r0
 80156f2:	460d      	mov	r5, r1
 80156f4:	8901      	ldrh	r1, [r0, #8]
 80156f6:	8980      	ldrh	r0, [r0, #12]
 80156f8:	4690      	mov	r8, r2
 80156fa:	461f      	mov	r7, r3
 80156fc:	f000 fca2 	bl	8016044 <uxr_seq_num_add>
 8015700:	4629      	mov	r1, r5
 8015702:	4606      	mov	r6, r0
 8015704:	89a0      	ldrh	r0, [r4, #12]
 8015706:	f000 fca5 	bl	8016054 <uxr_seq_num_cmp>
 801570a:	2800      	cmp	r0, #0
 801570c:	db0a      	blt.n	8015724 <uxr_receive_reliable_message+0x38>
 801570e:	2600      	movs	r6, #0
 8015710:	89e0      	ldrh	r0, [r4, #14]
 8015712:	4629      	mov	r1, r5
 8015714:	f000 fc9e 	bl	8016054 <uxr_seq_num_cmp>
 8015718:	2800      	cmp	r0, #0
 801571a:	da00      	bge.n	801571e <uxr_receive_reliable_message+0x32>
 801571c:	81e5      	strh	r5, [r4, #14]
 801571e:	4630      	mov	r0, r6
 8015720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015724:	4630      	mov	r0, r6
 8015726:	4629      	mov	r1, r5
 8015728:	f000 fc94 	bl	8016054 <uxr_seq_num_cmp>
 801572c:	2800      	cmp	r0, #0
 801572e:	dbee      	blt.n	801570e <uxr_receive_reliable_message+0x22>
 8015730:	6923      	ldr	r3, [r4, #16]
 8015732:	4640      	mov	r0, r8
 8015734:	4798      	blx	r3
 8015736:	2101      	movs	r1, #1
 8015738:	4681      	mov	r9, r0
 801573a:	89a0      	ldrh	r0, [r4, #12]
 801573c:	f000 fc82 	bl	8016044 <uxr_seq_num_add>
 8015740:	f1b9 0f00 	cmp.w	r9, #0
 8015744:	d101      	bne.n	801574a <uxr_receive_reliable_message+0x5e>
 8015746:	4285      	cmp	r5, r0
 8015748:	d047      	beq.n	80157da <uxr_receive_reliable_message+0xee>
 801574a:	8922      	ldrh	r2, [r4, #8]
 801574c:	fbb5 f0f2 	udiv	r0, r5, r2
 8015750:	fb02 5010 	mls	r0, r2, r0, r5
 8015754:	b280      	uxth	r0, r0
 8015756:	6863      	ldr	r3, [r4, #4]
 8015758:	fbb3 f3f2 	udiv	r3, r3, r2
 801575c:	fb00 f303 	mul.w	r3, r0, r3
 8015760:	6820      	ldr	r0, [r4, #0]
 8015762:	3304      	adds	r3, #4
 8015764:	4418      	add	r0, r3
 8015766:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d1cf      	bne.n	801570e <uxr_receive_reliable_message+0x22>
 801576e:	4641      	mov	r1, r8
 8015770:	463a      	mov	r2, r7
 8015772:	f001 fd18 	bl	80171a6 <memcpy>
 8015776:	8921      	ldrh	r1, [r4, #8]
 8015778:	fbb5 f2f1 	udiv	r2, r5, r1
 801577c:	fb01 5212 	mls	r2, r1, r2, r5
 8015780:	b292      	uxth	r2, r2
 8015782:	6863      	ldr	r3, [r4, #4]
 8015784:	fbb3 f3f1 	udiv	r3, r3, r1
 8015788:	fb02 f303 	mul.w	r3, r2, r3
 801578c:	6822      	ldr	r2, [r4, #0]
 801578e:	50d7      	str	r7, [r2, r3]
 8015790:	9a08      	ldr	r2, [sp, #32]
 8015792:	2301      	movs	r3, #1
 8015794:	7013      	strb	r3, [r2, #0]
 8015796:	f1b9 0f00 	cmp.w	r9, #0
 801579a:	d0b8      	beq.n	801570e <uxr_receive_reliable_message+0x22>
 801579c:	89a6      	ldrh	r6, [r4, #12]
 801579e:	4630      	mov	r0, r6
 80157a0:	2101      	movs	r1, #1
 80157a2:	f000 fc4f 	bl	8016044 <uxr_seq_num_add>
 80157a6:	8922      	ldrh	r2, [r4, #8]
 80157a8:	6863      	ldr	r3, [r4, #4]
 80157aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80157ae:	4606      	mov	r6, r0
 80157b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80157b4:	fb02 6010 	mls	r0, r2, r0, r6
 80157b8:	b280      	uxth	r0, r0
 80157ba:	fb00 f303 	mul.w	r3, r0, r3
 80157be:	6820      	ldr	r0, [r4, #0]
 80157c0:	3304      	adds	r3, #4
 80157c2:	4418      	add	r0, r3
 80157c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d0a0      	beq.n	801570e <uxr_receive_reliable_message+0x22>
 80157cc:	6923      	ldr	r3, [r4, #16]
 80157ce:	4798      	blx	r3
 80157d0:	2802      	cmp	r0, #2
 80157d2:	d008      	beq.n	80157e6 <uxr_receive_reliable_message+0xfa>
 80157d4:	2801      	cmp	r0, #1
 80157d6:	d0e2      	beq.n	801579e <uxr_receive_reliable_message+0xb2>
 80157d8:	e799      	b.n	801570e <uxr_receive_reliable_message+0x22>
 80157da:	9b08      	ldr	r3, [sp, #32]
 80157dc:	81a5      	strh	r5, [r4, #12]
 80157de:	2601      	movs	r6, #1
 80157e0:	f883 9000 	strb.w	r9, [r3]
 80157e4:	e794      	b.n	8015710 <uxr_receive_reliable_message+0x24>
 80157e6:	2601      	movs	r6, #1
 80157e8:	e792      	b.n	8015710 <uxr_receive_reliable_message+0x24>
 80157ea:	bf00      	nop

080157ec <uxr_next_input_reliable_buffer_available>:
 80157ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157f0:	4604      	mov	r4, r0
 80157f2:	460f      	mov	r7, r1
 80157f4:	8980      	ldrh	r0, [r0, #12]
 80157f6:	2101      	movs	r1, #1
 80157f8:	4690      	mov	r8, r2
 80157fa:	f000 fc23 	bl	8016044 <uxr_seq_num_add>
 80157fe:	8922      	ldrh	r2, [r4, #8]
 8015800:	fbb0 f6f2 	udiv	r6, r0, r2
 8015804:	fb02 0616 	mls	r6, r2, r6, r0
 8015808:	b2b6      	uxth	r6, r6
 801580a:	6863      	ldr	r3, [r4, #4]
 801580c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015810:	fb06 f303 	mul.w	r3, r6, r3
 8015814:	6826      	ldr	r6, [r4, #0]
 8015816:	3304      	adds	r3, #4
 8015818:	441e      	add	r6, r3
 801581a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801581e:	f1b9 0f00 	cmp.w	r9, #0
 8015822:	d023      	beq.n	801586c <uxr_next_input_reliable_buffer_available+0x80>
 8015824:	6923      	ldr	r3, [r4, #16]
 8015826:	4605      	mov	r5, r0
 8015828:	4630      	mov	r0, r6
 801582a:	4798      	blx	r3
 801582c:	4682      	mov	sl, r0
 801582e:	b300      	cbz	r0, 8015872 <uxr_next_input_reliable_buffer_available+0x86>
 8015830:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015834:	2101      	movs	r1, #1
 8015836:	4650      	mov	r0, sl
 8015838:	f000 fc04 	bl	8016044 <uxr_seq_num_add>
 801583c:	8921      	ldrh	r1, [r4, #8]
 801583e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015842:	4682      	mov	sl, r0
 8015844:	fb01 0212 	mls	r2, r1, r2, r0
 8015848:	e9d4 0300 	ldrd	r0, r3, [r4]
 801584c:	b292      	uxth	r2, r2
 801584e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015852:	fb02 f303 	mul.w	r3, r2, r3
 8015856:	3304      	adds	r3, #4
 8015858:	4418      	add	r0, r3
 801585a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801585e:	b12b      	cbz	r3, 801586c <uxr_next_input_reliable_buffer_available+0x80>
 8015860:	6923      	ldr	r3, [r4, #16]
 8015862:	4798      	blx	r3
 8015864:	2802      	cmp	r0, #2
 8015866:	d01b      	beq.n	80158a0 <uxr_next_input_reliable_buffer_available+0xb4>
 8015868:	2801      	cmp	r0, #1
 801586a:	d0e3      	beq.n	8015834 <uxr_next_input_reliable_buffer_available+0x48>
 801586c:	2000      	movs	r0, #0
 801586e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015872:	464a      	mov	r2, r9
 8015874:	4631      	mov	r1, r6
 8015876:	4638      	mov	r0, r7
 8015878:	f7f7 ffe8 	bl	800d84c <ucdr_init_buffer>
 801587c:	8921      	ldrh	r1, [r4, #8]
 801587e:	fbb5 f2f1 	udiv	r2, r5, r1
 8015882:	fb01 5212 	mls	r2, r1, r2, r5
 8015886:	b292      	uxth	r2, r2
 8015888:	6863      	ldr	r3, [r4, #4]
 801588a:	fbb3 f3f1 	udiv	r3, r3, r1
 801588e:	fb02 f303 	mul.w	r3, r2, r3
 8015892:	6822      	ldr	r2, [r4, #0]
 8015894:	f842 a003 	str.w	sl, [r2, r3]
 8015898:	2001      	movs	r0, #1
 801589a:	81a5      	strh	r5, [r4, #12]
 801589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158a0:	8920      	ldrh	r0, [r4, #8]
 80158a2:	fbb5 f3f0 	udiv	r3, r5, r0
 80158a6:	fb00 5513 	mls	r5, r0, r3, r5
 80158aa:	b2ad      	uxth	r5, r5
 80158ac:	6863      	ldr	r3, [r4, #4]
 80158ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80158b2:	fb03 f505 	mul.w	r5, r3, r5
 80158b6:	6823      	ldr	r3, [r4, #0]
 80158b8:	2000      	movs	r0, #0
 80158ba:	5158      	str	r0, [r3, r5]
 80158bc:	eb06 0108 	add.w	r1, r6, r8
 80158c0:	eba9 0208 	sub.w	r2, r9, r8
 80158c4:	4638      	mov	r0, r7
 80158c6:	f7f7 ffc1 	bl	800d84c <ucdr_init_buffer>
 80158ca:	4638      	mov	r0, r7
 80158cc:	4903      	ldr	r1, [pc, #12]	@ (80158dc <uxr_next_input_reliable_buffer_available+0xf0>)
 80158ce:	4622      	mov	r2, r4
 80158d0:	f7f7 ff90 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 80158d4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80158d8:	2001      	movs	r0, #1
 80158da:	e7c8      	b.n	801586e <uxr_next_input_reliable_buffer_available+0x82>
 80158dc:	080155e1 	.word	0x080155e1

080158e0 <uxr_process_heartbeat>:
 80158e0:	b538      	push	{r3, r4, r5, lr}
 80158e2:	4611      	mov	r1, r2
 80158e4:	4604      	mov	r4, r0
 80158e6:	89c0      	ldrh	r0, [r0, #14]
 80158e8:	4615      	mov	r5, r2
 80158ea:	f000 fbb3 	bl	8016054 <uxr_seq_num_cmp>
 80158ee:	2800      	cmp	r0, #0
 80158f0:	bfb8      	it	lt
 80158f2:	81e5      	strhlt	r5, [r4, #14]
 80158f4:	bd38      	pop	{r3, r4, r5, pc}
 80158f6:	bf00      	nop

080158f8 <uxr_compute_acknack>:
 80158f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158fc:	8903      	ldrh	r3, [r0, #8]
 80158fe:	8985      	ldrh	r5, [r0, #12]
 8015900:	4604      	mov	r4, r0
 8015902:	460e      	mov	r6, r1
 8015904:	b1d3      	cbz	r3, 801593c <uxr_compute_acknack+0x44>
 8015906:	4628      	mov	r0, r5
 8015908:	2701      	movs	r7, #1
 801590a:	e003      	b.n	8015914 <uxr_compute_acknack+0x1c>
 801590c:	4567      	cmp	r7, ip
 801590e:	d215      	bcs.n	801593c <uxr_compute_acknack+0x44>
 8015910:	89a0      	ldrh	r0, [r4, #12]
 8015912:	3701      	adds	r7, #1
 8015914:	b2b9      	uxth	r1, r7
 8015916:	f000 fb95 	bl	8016044 <uxr_seq_num_add>
 801591a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801591e:	fbb0 f3fc 	udiv	r3, r0, ip
 8015922:	fb0c 0313 	mls	r3, ip, r3, r0
 8015926:	b29a      	uxth	r2, r3
 8015928:	e9d4 1300 	ldrd	r1, r3, [r4]
 801592c:	fbb3 f3fc 	udiv	r3, r3, ip
 8015930:	fb02 f303 	mul.w	r3, r2, r3
 8015934:	58cb      	ldr	r3, [r1, r3]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d1e8      	bne.n	801590c <uxr_compute_acknack+0x14>
 801593a:	4605      	mov	r5, r0
 801593c:	8035      	strh	r5, [r6, #0]
 801593e:	2101      	movs	r1, #1
 8015940:	4628      	mov	r0, r5
 8015942:	89e7      	ldrh	r7, [r4, #14]
 8015944:	f000 fb82 	bl	801604c <uxr_seq_num_sub>
 8015948:	4601      	mov	r1, r0
 801594a:	4638      	mov	r0, r7
 801594c:	f000 fb7e 	bl	801604c <uxr_seq_num_sub>
 8015950:	4605      	mov	r5, r0
 8015952:	b318      	cbz	r0, 801599c <uxr_compute_acknack+0xa4>
 8015954:	f04f 0900 	mov.w	r9, #0
 8015958:	464f      	mov	r7, r9
 801595a:	f04f 0801 	mov.w	r8, #1
 801595e:	fa1f f189 	uxth.w	r1, r9
 8015962:	8830      	ldrh	r0, [r6, #0]
 8015964:	f000 fb6e 	bl	8016044 <uxr_seq_num_add>
 8015968:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801596c:	fbb0 f3fc 	udiv	r3, r0, ip
 8015970:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015974:	fb03 001c 	mls	r0, r3, ip, r0
 8015978:	b283      	uxth	r3, r0
 801597a:	fbb2 f2fc 	udiv	r2, r2, ip
 801597e:	fb02 f303 	mul.w	r3, r2, r3
 8015982:	fa08 f209 	lsl.w	r2, r8, r9
 8015986:	58cb      	ldr	r3, [r1, r3]
 8015988:	f109 0901 	add.w	r9, r9, #1
 801598c:	b90b      	cbnz	r3, 8015992 <uxr_compute_acknack+0x9a>
 801598e:	4317      	orrs	r7, r2
 8015990:	b2bf      	uxth	r7, r7
 8015992:	454d      	cmp	r5, r9
 8015994:	d1e3      	bne.n	801595e <uxr_compute_acknack+0x66>
 8015996:	4638      	mov	r0, r7
 8015998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801599c:	4607      	mov	r7, r0
 801599e:	4638      	mov	r0, r7
 80159a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080159a4 <uxr_init_output_best_effort_stream>:
 80159a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80159a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80159ac:	6001      	str	r1, [r0, #0]
 80159ae:	7303      	strb	r3, [r0, #12]
 80159b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80159b4:	4770      	bx	lr
 80159b6:	bf00      	nop

080159b8 <uxr_reset_output_best_effort_stream>:
 80159b8:	7b02      	ldrb	r2, [r0, #12]
 80159ba:	6042      	str	r2, [r0, #4]
 80159bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80159c0:	81c3      	strh	r3, [r0, #14]
 80159c2:	4770      	bx	lr

080159c4 <uxr_prepare_best_effort_buffer_to_write>:
 80159c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159c6:	4604      	mov	r4, r0
 80159c8:	b083      	sub	sp, #12
 80159ca:	6840      	ldr	r0, [r0, #4]
 80159cc:	460d      	mov	r5, r1
 80159ce:	4616      	mov	r6, r2
 80159d0:	f7fa fa6c 	bl	800feac <uxr_submessage_padding>
 80159d4:	6863      	ldr	r3, [r4, #4]
 80159d6:	4418      	add	r0, r3
 80159d8:	68a3      	ldr	r3, [r4, #8]
 80159da:	1942      	adds	r2, r0, r5
 80159dc:	4293      	cmp	r3, r2
 80159de:	bf2c      	ite	cs
 80159e0:	2701      	movcs	r7, #1
 80159e2:	2700      	movcc	r7, #0
 80159e4:	d202      	bcs.n	80159ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80159e6:	4638      	mov	r0, r7
 80159e8:	b003      	add	sp, #12
 80159ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159ec:	9000      	str	r0, [sp, #0]
 80159ee:	6821      	ldr	r1, [r4, #0]
 80159f0:	4630      	mov	r0, r6
 80159f2:	2300      	movs	r3, #0
 80159f4:	f7f7 ff18 	bl	800d828 <ucdr_init_buffer_origin_offset>
 80159f8:	6861      	ldr	r1, [r4, #4]
 80159fa:	4638      	mov	r0, r7
 80159fc:	4429      	add	r1, r5
 80159fe:	6061      	str	r1, [r4, #4]
 8015a00:	b003      	add	sp, #12
 8015a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a04 <uxr_prepare_best_effort_buffer_to_send>:
 8015a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a08:	4604      	mov	r4, r0
 8015a0a:	461d      	mov	r5, r3
 8015a0c:	6840      	ldr	r0, [r0, #4]
 8015a0e:	7b23      	ldrb	r3, [r4, #12]
 8015a10:	4298      	cmp	r0, r3
 8015a12:	bf8c      	ite	hi
 8015a14:	2601      	movhi	r6, #1
 8015a16:	2600      	movls	r6, #0
 8015a18:	d802      	bhi.n	8015a20 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a20:	4688      	mov	r8, r1
 8015a22:	89e0      	ldrh	r0, [r4, #14]
 8015a24:	2101      	movs	r1, #1
 8015a26:	4617      	mov	r7, r2
 8015a28:	f000 fb0c 	bl	8016044 <uxr_seq_num_add>
 8015a2c:	6823      	ldr	r3, [r4, #0]
 8015a2e:	81e0      	strh	r0, [r4, #14]
 8015a30:	8028      	strh	r0, [r5, #0]
 8015a32:	f8c8 3000 	str.w	r3, [r8]
 8015a36:	6863      	ldr	r3, [r4, #4]
 8015a38:	603b      	str	r3, [r7, #0]
 8015a3a:	7b23      	ldrb	r3, [r4, #12]
 8015a3c:	6063      	str	r3, [r4, #4]
 8015a3e:	4630      	mov	r0, r6
 8015a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a44 <on_full_output_buffer>:
 8015a44:	b538      	push	{r3, r4, r5, lr}
 8015a46:	6802      	ldr	r2, [r0, #0]
 8015a48:	460c      	mov	r4, r1
 8015a4a:	6809      	ldr	r1, [r1, #0]
 8015a4c:	8923      	ldrh	r3, [r4, #8]
 8015a4e:	eba2 0c01 	sub.w	ip, r2, r1
 8015a52:	6862      	ldr	r2, [r4, #4]
 8015a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8015a58:	fbbc fcf2 	udiv	ip, ip, r2
 8015a5c:	f10c 0c01 	add.w	ip, ip, #1
 8015a60:	fa1f fc8c 	uxth.w	ip, ip
 8015a64:	fbbc fef3 	udiv	lr, ip, r3
 8015a68:	fb03 c31e 	mls	r3, r3, lr, ip
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	fb02 f303 	mul.w	r3, r2, r3
 8015a72:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015a76:	58ca      	ldr	r2, [r1, r3]
 8015a78:	4463      	add	r3, ip
 8015a7a:	eba2 020c 	sub.w	r2, r2, ip
 8015a7e:	3308      	adds	r3, #8
 8015a80:	4605      	mov	r5, r0
 8015a82:	4419      	add	r1, r3
 8015a84:	3a04      	subs	r2, #4
 8015a86:	6903      	ldr	r3, [r0, #16]
 8015a88:	f7f7 fed8 	bl	800d83c <ucdr_init_buffer_origin>
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	4903      	ldr	r1, [pc, #12]	@ (8015a9c <on_full_output_buffer+0x58>)
 8015a90:	4622      	mov	r2, r4
 8015a92:	f7f7 feaf 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 8015a96:	2000      	movs	r0, #0
 8015a98:	bd38      	pop	{r3, r4, r5, pc}
 8015a9a:	bf00      	nop
 8015a9c:	08015a45 	.word	0x08015a45

08015aa0 <uxr_init_output_reliable_stream>:
 8015aa0:	b410      	push	{r4}
 8015aa2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015aa6:	8103      	strh	r3, [r0, #8]
 8015aa8:	e9c0 1200 	strd	r1, r2, [r0]
 8015aac:	f880 c00c 	strb.w	ip, [r0, #12]
 8015ab0:	b1d3      	cbz	r3, 8015ae8 <uxr_init_output_reliable_stream+0x48>
 8015ab2:	f8c1 c000 	str.w	ip, [r1]
 8015ab6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015aba:	f1bc 0f01 	cmp.w	ip, #1
 8015abe:	d913      	bls.n	8015ae8 <uxr_init_output_reliable_stream+0x48>
 8015ac0:	2301      	movs	r3, #1
 8015ac2:	fbb3 f1fc 	udiv	r1, r3, ip
 8015ac6:	fb0c 3111 	mls	r1, ip, r1, r3
 8015aca:	b289      	uxth	r1, r1
 8015acc:	6842      	ldr	r2, [r0, #4]
 8015ace:	6804      	ldr	r4, [r0, #0]
 8015ad0:	fbb2 f2fc 	udiv	r2, r2, ip
 8015ad4:	fb01 f202 	mul.w	r2, r1, r2
 8015ad8:	7b01      	ldrb	r1, [r0, #12]
 8015ada:	50a1      	str	r1, [r4, r2]
 8015adc:	3301      	adds	r3, #1
 8015ade:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	459c      	cmp	ip, r3
 8015ae6:	d8ec      	bhi.n	8015ac2 <uxr_init_output_reliable_stream+0x22>
 8015ae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015aec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015af0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015af4:	4905      	ldr	r1, [pc, #20]	@ (8015b0c <uxr_init_output_reliable_stream+0x6c>)
 8015af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015afa:	f8c0 100e 	str.w	r1, [r0, #14]
 8015afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b02:	2300      	movs	r3, #0
 8015b04:	8242      	strh	r2, [r0, #18]
 8015b06:	8403      	strh	r3, [r0, #32]
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop
 8015b0c:	ffff0000 	.word	0xffff0000

08015b10 <uxr_reset_output_reliable_stream>:
 8015b10:	8901      	ldrh	r1, [r0, #8]
 8015b12:	b1b1      	cbz	r1, 8015b42 <uxr_reset_output_reliable_stream+0x32>
 8015b14:	f04f 0c00 	mov.w	ip, #0
 8015b18:	4663      	mov	r3, ip
 8015b1a:	fbb3 f2f1 	udiv	r2, r3, r1
 8015b1e:	fb01 3312 	mls	r3, r1, r2, r3
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	6842      	ldr	r2, [r0, #4]
 8015b26:	fbb2 f2f1 	udiv	r2, r2, r1
 8015b2a:	6801      	ldr	r1, [r0, #0]
 8015b2c:	fb02 f303 	mul.w	r3, r2, r3
 8015b30:	7b02      	ldrb	r2, [r0, #12]
 8015b32:	50ca      	str	r2, [r1, r3]
 8015b34:	f10c 0c01 	add.w	ip, ip, #1
 8015b38:	8901      	ldrh	r1, [r0, #8]
 8015b3a:	fa1f f38c 	uxth.w	r3, ip
 8015b3e:	4299      	cmp	r1, r3
 8015b40:	d8eb      	bhi.n	8015b1a <uxr_reset_output_reliable_stream+0xa>
 8015b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015b46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015b4a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015b4e:	4904      	ldr	r1, [pc, #16]	@ (8015b60 <uxr_reset_output_reliable_stream+0x50>)
 8015b50:	f8c0 100e 	str.w	r1, [r0, #14]
 8015b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b58:	2300      	movs	r3, #0
 8015b5a:	8242      	strh	r2, [r0, #18]
 8015b5c:	8403      	strh	r3, [r0, #32]
 8015b5e:	4770      	bx	lr
 8015b60:	ffff0000 	.word	0xffff0000

08015b64 <uxr_prepare_reliable_buffer_to_write>:
 8015b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b68:	4604      	mov	r4, r0
 8015b6a:	b091      	sub	sp, #68	@ 0x44
 8015b6c:	8900      	ldrh	r0, [r0, #8]
 8015b6e:	89e6      	ldrh	r6, [r4, #14]
 8015b70:	6823      	ldr	r3, [r4, #0]
 8015b72:	9204      	str	r2, [sp, #16]
 8015b74:	fbb6 f2f0 	udiv	r2, r6, r0
 8015b78:	fb00 6212 	mls	r2, r0, r2, r6
 8015b7c:	b292      	uxth	r2, r2
 8015b7e:	6865      	ldr	r5, [r4, #4]
 8015b80:	fbb5 f5f0 	udiv	r5, r5, r0
 8015b84:	fb05 3202 	mla	r2, r5, r2, r3
 8015b88:	3204      	adds	r2, #4
 8015b8a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015b8e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015b92:	9203      	str	r2, [sp, #12]
 8015b94:	468b      	mov	fp, r1
 8015b96:	1f2f      	subs	r7, r5, #4
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	f000 814c 	beq.w	8015e36 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015b9e:	f04f 0c00 	mov.w	ip, #0
 8015ba2:	46e2      	mov	sl, ip
 8015ba4:	4661      	mov	r1, ip
 8015ba6:	fbb1 f2f0 	udiv	r2, r1, r0
 8015baa:	fb00 1212 	mls	r2, r0, r2, r1
 8015bae:	b292      	uxth	r2, r2
 8015bb0:	fb05 f202 	mul.w	r2, r5, r2
 8015bb4:	f10c 0c01 	add.w	ip, ip, #1
 8015bb8:	589a      	ldr	r2, [r3, r2]
 8015bba:	454a      	cmp	r2, r9
 8015bbc:	bf08      	it	eq
 8015bbe:	f10a 0a01 	addeq.w	sl, sl, #1
 8015bc2:	fa1f f18c 	uxth.w	r1, ip
 8015bc6:	bf08      	it	eq
 8015bc8:	fa1f fa8a 	uxtheq.w	sl, sl
 8015bcc:	4281      	cmp	r1, r0
 8015bce:	d3ea      	bcc.n	8015ba6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8015bd0:	4640      	mov	r0, r8
 8015bd2:	2104      	movs	r1, #4
 8015bd4:	f8cd a014 	str.w	sl, [sp, #20]
 8015bd8:	f7f7 fe3c 	bl	800d854 <ucdr_alignment>
 8015bdc:	4480      	add	r8, r0
 8015bde:	eb08 020b 	add.w	r2, r8, fp
 8015be2:	42ba      	cmp	r2, r7
 8015be4:	f240 80cd 	bls.w	8015d82 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015be8:	7b22      	ldrb	r2, [r4, #12]
 8015bea:	445a      	add	r2, fp
 8015bec:	42ba      	cmp	r2, r7
 8015bee:	f240 80b5 	bls.w	8015d5c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8015bf2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015bf6:	33fc      	adds	r3, #252	@ 0xfc
 8015bf8:	b2ba      	uxth	r2, r7
 8015bfa:	4413      	add	r3, r2
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	fb0a f903 	mul.w	r9, sl, r3
 8015c02:	45d9      	cmp	r9, fp
 8015c04:	9305      	str	r3, [sp, #20]
 8015c06:	9306      	str	r3, [sp, #24]
 8015c08:	f0c0 80b7 	bcc.w	8015d7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8015c0c:	f108 0304 	add.w	r3, r8, #4
 8015c10:	42bb      	cmp	r3, r7
 8015c12:	f080 80db 	bcs.w	8015dcc <uxr_prepare_reliable_buffer_to_write+0x268>
 8015c16:	f1a2 0904 	sub.w	r9, r2, #4
 8015c1a:	eba9 0908 	sub.w	r9, r9, r8
 8015c1e:	9b05      	ldr	r3, [sp, #20]
 8015c20:	fa1f f989 	uxth.w	r9, r9
 8015c24:	ebab 0b09 	sub.w	fp, fp, r9
 8015c28:	fbbb f2f3 	udiv	r2, fp, r3
 8015c2c:	fb03 b312 	mls	r3, r3, r2, fp
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	f000 80c8 	beq.w	8015dc6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015c36:	3201      	adds	r2, #1
 8015c38:	b292      	uxth	r2, r2
 8015c3a:	9306      	str	r3, [sp, #24]
 8015c3c:	4552      	cmp	r2, sl
 8015c3e:	f200 809c 	bhi.w	8015d7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8015c42:	f10d 0b20 	add.w	fp, sp, #32
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	d042      	beq.n	8015cd0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015c4a:	f8cd 801c 	str.w	r8, [sp, #28]
 8015c4e:	f04f 0a00 	mov.w	sl, #0
 8015c52:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015c56:	9505      	str	r5, [sp, #20]
 8015c58:	f10d 0b20 	add.w	fp, sp, #32
 8015c5c:	4615      	mov	r5, r2
 8015c5e:	e000      	b.n	8015c62 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015c60:	46c1      	mov	r9, r8
 8015c62:	8920      	ldrh	r0, [r4, #8]
 8015c64:	fbb6 f2f0 	udiv	r2, r6, r0
 8015c68:	fb00 6112 	mls	r1, r0, r2, r6
 8015c6c:	b28a      	uxth	r2, r1
 8015c6e:	6863      	ldr	r3, [r4, #4]
 8015c70:	fbb3 f1f0 	udiv	r1, r3, r0
 8015c74:	6823      	ldr	r3, [r4, #0]
 8015c76:	fb02 f101 	mul.w	r1, r2, r1
 8015c7a:	3104      	adds	r1, #4
 8015c7c:	4419      	add	r1, r3
 8015c7e:	4658      	mov	r0, fp
 8015c80:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015c84:	9200      	str	r2, [sp, #0]
 8015c86:	2300      	movs	r3, #0
 8015c88:	463a      	mov	r2, r7
 8015c8a:	f7f7 fdcd 	bl	800d828 <ucdr_init_buffer_origin_offset>
 8015c8e:	464a      	mov	r2, r9
 8015c90:	2300      	movs	r3, #0
 8015c92:	210d      	movs	r1, #13
 8015c94:	4658      	mov	r0, fp
 8015c96:	f7fa f8c9 	bl	800fe2c <uxr_buffer_submessage_header>
 8015c9a:	8921      	ldrh	r1, [r4, #8]
 8015c9c:	fbb6 f2f1 	udiv	r2, r6, r1
 8015ca0:	fb01 6212 	mls	r2, r1, r2, r6
 8015ca4:	b292      	uxth	r2, r2
 8015ca6:	6863      	ldr	r3, [r4, #4]
 8015ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8015cac:	fb02 f303 	mul.w	r3, r2, r3
 8015cb0:	6822      	ldr	r2, [r4, #0]
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	50d7      	str	r7, [r2, r3]
 8015cb6:	2101      	movs	r1, #1
 8015cb8:	f000 f9c4 	bl	8016044 <uxr_seq_num_add>
 8015cbc:	f10a 0a01 	add.w	sl, sl, #1
 8015cc0:	fa1f f38a 	uxth.w	r3, sl
 8015cc4:	429d      	cmp	r5, r3
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	d8ca      	bhi.n	8015c60 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015cca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015cce:	9d05      	ldr	r5, [sp, #20]
 8015cd0:	8920      	ldrh	r0, [r4, #8]
 8015cd2:	fbb6 f3f0 	udiv	r3, r6, r0
 8015cd6:	fb00 6313 	mls	r3, r0, r3, r6
 8015cda:	b299      	uxth	r1, r3
 8015cdc:	6863      	ldr	r3, [r4, #4]
 8015cde:	fbb3 f3f0 	udiv	r3, r3, r0
 8015ce2:	fb01 f303 	mul.w	r3, r1, r3
 8015ce6:	6821      	ldr	r1, [r4, #0]
 8015ce8:	3304      	adds	r3, #4
 8015cea:	4419      	add	r1, r3
 8015cec:	463a      	mov	r2, r7
 8015cee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015cf2:	9000      	str	r0, [sp, #0]
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	4658      	mov	r0, fp
 8015cf8:	f7f7 fd96 	bl	800d828 <ucdr_init_buffer_origin_offset>
 8015cfc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015d00:	4658      	mov	r0, fp
 8015d02:	fa1f f289 	uxth.w	r2, r9
 8015d06:	2302      	movs	r3, #2
 8015d08:	210d      	movs	r1, #13
 8015d0a:	f7fa f88f 	bl	800fe2c <uxr_buffer_submessage_header>
 8015d0e:	9b03      	ldr	r3, [sp, #12]
 8015d10:	8927      	ldrh	r7, [r4, #8]
 8015d12:	7b20      	ldrb	r0, [r4, #12]
 8015d14:	f108 0104 	add.w	r1, r8, #4
 8015d18:	440b      	add	r3, r1
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	fbb6 f3f7 	udiv	r3, r6, r7
 8015d20:	fb07 6313 	mls	r3, r7, r3, r6
 8015d24:	f1a5 0208 	sub.w	r2, r5, #8
 8015d28:	b29d      	uxth	r5, r3
 8015d2a:	3004      	adds	r0, #4
 8015d2c:	6863      	ldr	r3, [r4, #4]
 8015d2e:	fbb3 f3f7 	udiv	r3, r3, r7
 8015d32:	fb05 f303 	mul.w	r3, r5, r3
 8015d36:	6825      	ldr	r5, [r4, #0]
 8015d38:	4448      	add	r0, r9
 8015d3a:	50e8      	str	r0, [r5, r3]
 8015d3c:	9d04      	ldr	r5, [sp, #16]
 8015d3e:	eba2 0208 	sub.w	r2, r2, r8
 8015d42:	4628      	mov	r0, r5
 8015d44:	f7f7 fd82 	bl	800d84c <ucdr_init_buffer>
 8015d48:	4628      	mov	r0, r5
 8015d4a:	493c      	ldr	r1, [pc, #240]	@ (8015e3c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015d4c:	4622      	mov	r2, r4
 8015d4e:	f7f7 fd51 	bl	800d7f4 <ucdr_set_on_full_buffer_callback>
 8015d52:	2001      	movs	r0, #1
 8015d54:	81e6      	strh	r6, [r4, #14]
 8015d56:	b011      	add	sp, #68	@ 0x44
 8015d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5c:	2101      	movs	r1, #1
 8015d5e:	89e0      	ldrh	r0, [r4, #14]
 8015d60:	f000 f970 	bl	8016044 <uxr_seq_num_add>
 8015d64:	8921      	ldrh	r1, [r4, #8]
 8015d66:	4605      	mov	r5, r0
 8015d68:	8a60      	ldrh	r0, [r4, #18]
 8015d6a:	f000 f96b 	bl	8016044 <uxr_seq_num_add>
 8015d6e:	4601      	mov	r1, r0
 8015d70:	4628      	mov	r0, r5
 8015d72:	f000 f96f 	bl	8016054 <uxr_seq_num_cmp>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	dd42      	ble.n	8015e00 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	b011      	add	sp, #68	@ 0x44
 8015d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d82:	8921      	ldrh	r1, [r4, #8]
 8015d84:	8a60      	ldrh	r0, [r4, #18]
 8015d86:	9205      	str	r2, [sp, #20]
 8015d88:	f000 f95c 	bl	8016044 <uxr_seq_num_add>
 8015d8c:	4601      	mov	r1, r0
 8015d8e:	4630      	mov	r0, r6
 8015d90:	f000 f960 	bl	8016054 <uxr_seq_num_cmp>
 8015d94:	2800      	cmp	r0, #0
 8015d96:	9a05      	ldr	r2, [sp, #20]
 8015d98:	dcef      	bgt.n	8015d7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8015d9a:	8927      	ldrh	r7, [r4, #8]
 8015d9c:	fbb6 f3f7 	udiv	r3, r6, r7
 8015da0:	fb07 6313 	mls	r3, r7, r3, r6
 8015da4:	b29d      	uxth	r5, r3
 8015da6:	6863      	ldr	r3, [r4, #4]
 8015da8:	6824      	ldr	r4, [r4, #0]
 8015daa:	fbb3 f3f7 	udiv	r3, r3, r7
 8015dae:	fb05 f303 	mul.w	r3, r5, r3
 8015db2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015db6:	50e2      	str	r2, [r4, r3]
 8015db8:	2300      	movs	r3, #0
 8015dba:	f8cd 8000 	str.w	r8, [sp]
 8015dbe:	f7f7 fd33 	bl	800d828 <ucdr_init_buffer_origin_offset>
 8015dc2:	2001      	movs	r0, #1
 8015dc4:	e7da      	b.n	8015d7c <uxr_prepare_reliable_buffer_to_write+0x218>
 8015dc6:	b293      	uxth	r3, r2
 8015dc8:	461a      	mov	r2, r3
 8015dca:	e737      	b.n	8015c3c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015dcc:	4630      	mov	r0, r6
 8015dce:	2101      	movs	r1, #1
 8015dd0:	9207      	str	r2, [sp, #28]
 8015dd2:	f000 f937 	bl	8016044 <uxr_seq_num_add>
 8015dd6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015dda:	fbb0 f1fc 	udiv	r1, r0, ip
 8015dde:	fb0c 0111 	mls	r1, ip, r1, r0
 8015de2:	4606      	mov	r6, r0
 8015de4:	b288      	uxth	r0, r1
 8015de6:	6863      	ldr	r3, [r4, #4]
 8015de8:	fbb3 f1fc 	udiv	r1, r3, ip
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	9a07      	ldr	r2, [sp, #28]
 8015df0:	fb00 f101 	mul.w	r1, r0, r1
 8015df4:	3104      	adds	r1, #4
 8015df6:	440b      	add	r3, r1
 8015df8:	9303      	str	r3, [sp, #12]
 8015dfa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015dfe:	e70a      	b.n	8015c16 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015e00:	8921      	ldrh	r1, [r4, #8]
 8015e02:	fbb5 f3f1 	udiv	r3, r5, r1
 8015e06:	fb01 5313 	mls	r3, r1, r3, r5
 8015e0a:	b29a      	uxth	r2, r3
 8015e0c:	6863      	ldr	r3, [r4, #4]
 8015e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e12:	6821      	ldr	r1, [r4, #0]
 8015e14:	9804      	ldr	r0, [sp, #16]
 8015e16:	fb02 f303 	mul.w	r3, r2, r3
 8015e1a:	3304      	adds	r3, #4
 8015e1c:	7b22      	ldrb	r2, [r4, #12]
 8015e1e:	4419      	add	r1, r3
 8015e20:	445a      	add	r2, fp
 8015e22:	f841 2c04 	str.w	r2, [r1, #-4]
 8015e26:	7b23      	ldrb	r3, [r4, #12]
 8015e28:	9300      	str	r3, [sp, #0]
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	f7f7 fcfc 	bl	800d828 <ucdr_init_buffer_origin_offset>
 8015e30:	81e5      	strh	r5, [r4, #14]
 8015e32:	2001      	movs	r0, #1
 8015e34:	e7a2      	b.n	8015d7c <uxr_prepare_reliable_buffer_to_write+0x218>
 8015e36:	4682      	mov	sl, r0
 8015e38:	e6ca      	b.n	8015bd0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015e3a:	bf00      	nop
 8015e3c:	08015a45 	.word	0x08015a45

08015e40 <uxr_prepare_next_reliable_buffer_to_send>:
 8015e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e42:	4604      	mov	r4, r0
 8015e44:	460f      	mov	r7, r1
 8015e46:	8a00      	ldrh	r0, [r0, #16]
 8015e48:	2101      	movs	r1, #1
 8015e4a:	4616      	mov	r6, r2
 8015e4c:	461d      	mov	r5, r3
 8015e4e:	f000 f8f9 	bl	8016044 <uxr_seq_num_add>
 8015e52:	8028      	strh	r0, [r5, #0]
 8015e54:	8922      	ldrh	r2, [r4, #8]
 8015e56:	fbb0 f3f2 	udiv	r3, r0, r2
 8015e5a:	fb02 0c13 	mls	ip, r2, r3, r0
 8015e5e:	fa1f fc8c 	uxth.w	ip, ip
 8015e62:	6863      	ldr	r3, [r4, #4]
 8015e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e68:	fb0c fc03 	mul.w	ip, ip, r3
 8015e6c:	6823      	ldr	r3, [r4, #0]
 8015e6e:	89e1      	ldrh	r1, [r4, #14]
 8015e70:	f10c 0c04 	add.w	ip, ip, #4
 8015e74:	4463      	add	r3, ip
 8015e76:	603b      	str	r3, [r7, #0]
 8015e78:	6823      	ldr	r3, [r4, #0]
 8015e7a:	449c      	add	ip, r3
 8015e7c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015e80:	6033      	str	r3, [r6, #0]
 8015e82:	f000 f8e7 	bl	8016054 <uxr_seq_num_cmp>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	dd01      	ble.n	8015e8e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e8e:	7b23      	ldrb	r3, [r4, #12]
 8015e90:	6832      	ldr	r2, [r6, #0]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d9f9      	bls.n	8015e8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015e96:	8a61      	ldrh	r1, [r4, #18]
 8015e98:	8a20      	ldrh	r0, [r4, #16]
 8015e9a:	f000 f8d7 	bl	801604c <uxr_seq_num_sub>
 8015e9e:	8923      	ldrh	r3, [r4, #8]
 8015ea0:	4283      	cmp	r3, r0
 8015ea2:	d0f2      	beq.n	8015e8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015ea4:	8828      	ldrh	r0, [r5, #0]
 8015ea6:	89e3      	ldrh	r3, [r4, #14]
 8015ea8:	8220      	strh	r0, [r4, #16]
 8015eaa:	4298      	cmp	r0, r3
 8015eac:	d001      	beq.n	8015eb2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015eae:	2001      	movs	r0, #1
 8015eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	f000 f8c6 	bl	8016044 <uxr_seq_num_add>
 8015eb8:	81e0      	strh	r0, [r4, #14]
 8015eba:	2001      	movs	r0, #1
 8015ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ebe:	bf00      	nop

08015ec0 <uxr_update_output_stream_heartbeat_timestamp>:
 8015ec0:	b570      	push	{r4, r5, r6, lr}
 8015ec2:	8a01      	ldrh	r1, [r0, #16]
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	8a40      	ldrh	r0, [r0, #18]
 8015ec8:	4615      	mov	r5, r2
 8015eca:	461e      	mov	r6, r3
 8015ecc:	f000 f8c2 	bl	8016054 <uxr_seq_num_cmp>
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	db07      	blt.n	8015ee4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015ed8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015edc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015ee0:	2000      	movs	r0, #0
 8015ee2:	bd70      	pop	{r4, r5, r6, pc}
 8015ee4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015ee8:	b940      	cbnz	r0, 8015efc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015eea:	2301      	movs	r3, #1
 8015eec:	f884 3020 	strb.w	r3, [r4, #32]
 8015ef0:	3564      	adds	r5, #100	@ 0x64
 8015ef2:	f146 0600 	adc.w	r6, r6, #0
 8015ef6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015efa:	bd70      	pop	{r4, r5, r6, pc}
 8015efc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015f00:	4295      	cmp	r5, r2
 8015f02:	eb76 0303 	sbcs.w	r3, r6, r3
 8015f06:	bfa5      	ittet	ge
 8015f08:	3001      	addge	r0, #1
 8015f0a:	f884 0020 	strbge.w	r0, [r4, #32]
 8015f0e:	2000      	movlt	r0, #0
 8015f10:	2001      	movge	r0, #1
 8015f12:	e7ed      	b.n	8015ef0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015f14 <uxr_begin_output_nack_buffer_it>:
 8015f14:	8a40      	ldrh	r0, [r0, #18]
 8015f16:	4770      	bx	lr

08015f18 <uxr_next_reliable_nack_buffer_to_send>:
 8015f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015f20:	b082      	sub	sp, #8
 8015f22:	f1b8 0f00 	cmp.w	r8, #0
 8015f26:	d011      	beq.n	8015f4c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015f28:	4604      	mov	r4, r0
 8015f2a:	8818      	ldrh	r0, [r3, #0]
 8015f2c:	460e      	mov	r6, r1
 8015f2e:	4617      	mov	r7, r2
 8015f30:	461d      	mov	r5, r3
 8015f32:	2101      	movs	r1, #1
 8015f34:	f000 f886 	bl	8016044 <uxr_seq_num_add>
 8015f38:	8028      	strh	r0, [r5, #0]
 8015f3a:	8a21      	ldrh	r1, [r4, #16]
 8015f3c:	f000 f88a 	bl	8016054 <uxr_seq_num_cmp>
 8015f40:	2800      	cmp	r0, #0
 8015f42:	dd07      	ble.n	8015f54 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015f44:	f04f 0800 	mov.w	r8, #0
 8015f48:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015f4c:	4640      	mov	r0, r8
 8015f4e:	b002      	add	sp, #8
 8015f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f54:	8921      	ldrh	r1, [r4, #8]
 8015f56:	8828      	ldrh	r0, [r5, #0]
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	fbb0 f2f1 	udiv	r2, r0, r1
 8015f5e:	fb01 0c12 	mls	ip, r1, r2, r0
 8015f62:	fa1f f28c 	uxth.w	r2, ip
 8015f66:	9301      	str	r3, [sp, #4]
 8015f68:	6863      	ldr	r3, [r4, #4]
 8015f6a:	fbb3 fcf1 	udiv	ip, r3, r1
 8015f6e:	9b01      	ldr	r3, [sp, #4]
 8015f70:	fb02 fc0c 	mul.w	ip, r2, ip
 8015f74:	f10c 0c04 	add.w	ip, ip, #4
 8015f78:	4463      	add	r3, ip
 8015f7a:	6033      	str	r3, [r6, #0]
 8015f7c:	6823      	ldr	r3, [r4, #0]
 8015f7e:	4463      	add	r3, ip
 8015f80:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015f84:	603b      	str	r3, [r7, #0]
 8015f86:	7b22      	ldrb	r2, [r4, #12]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	d0d2      	beq.n	8015f32 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015f8c:	4640      	mov	r0, r8
 8015f8e:	b002      	add	sp, #8
 8015f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f94 <uxr_process_acknack>:
 8015f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f96:	4604      	mov	r4, r0
 8015f98:	460e      	mov	r6, r1
 8015f9a:	4610      	mov	r0, r2
 8015f9c:	2101      	movs	r1, #1
 8015f9e:	f000 f855 	bl	801604c <uxr_seq_num_sub>
 8015fa2:	8a61      	ldrh	r1, [r4, #18]
 8015fa4:	f000 f852 	bl	801604c <uxr_seq_num_sub>
 8015fa8:	b1c0      	cbz	r0, 8015fdc <uxr_process_acknack+0x48>
 8015faa:	4605      	mov	r5, r0
 8015fac:	2700      	movs	r7, #0
 8015fae:	2101      	movs	r1, #1
 8015fb0:	8a60      	ldrh	r0, [r4, #18]
 8015fb2:	f000 f847 	bl	8016044 <uxr_seq_num_add>
 8015fb6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015fba:	fbb0 f1fc 	udiv	r1, r0, ip
 8015fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015fc2:	fb0c 0111 	mls	r1, ip, r1, r0
 8015fc6:	b289      	uxth	r1, r1
 8015fc8:	3701      	adds	r7, #1
 8015fca:	fbb3 f3fc 	udiv	r3, r3, ip
 8015fce:	fb01 f303 	mul.w	r3, r1, r3
 8015fd2:	42bd      	cmp	r5, r7
 8015fd4:	7b21      	ldrb	r1, [r4, #12]
 8015fd6:	8260      	strh	r0, [r4, #18]
 8015fd8:	50d1      	str	r1, [r2, r3]
 8015fda:	d1e8      	bne.n	8015fae <uxr_process_acknack+0x1a>
 8015fdc:	3e00      	subs	r6, #0
 8015fde:	f04f 0300 	mov.w	r3, #0
 8015fe2:	bf18      	it	ne
 8015fe4:	2601      	movne	r6, #1
 8015fe6:	f884 3020 	strb.w	r3, [r4, #32]
 8015fea:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ff0 <uxr_is_output_up_to_date>:
 8015ff0:	8a01      	ldrh	r1, [r0, #16]
 8015ff2:	8a40      	ldrh	r0, [r0, #18]
 8015ff4:	b508      	push	{r3, lr}
 8015ff6:	f000 f82d 	bl	8016054 <uxr_seq_num_cmp>
 8015ffa:	fab0 f080 	clz	r0, r0
 8015ffe:	0940      	lsrs	r0, r0, #5
 8016000:	bd08      	pop	{r3, pc}
 8016002:	bf00      	nop

08016004 <get_available_free_slots>:
 8016004:	8902      	ldrh	r2, [r0, #8]
 8016006:	b1da      	cbz	r2, 8016040 <get_available_free_slots+0x3c>
 8016008:	b530      	push	{r4, r5, lr}
 801600a:	2100      	movs	r1, #0
 801600c:	6843      	ldr	r3, [r0, #4]
 801600e:	6805      	ldr	r5, [r0, #0]
 8016010:	7b04      	ldrb	r4, [r0, #12]
 8016012:	fbb3 fef2 	udiv	lr, r3, r2
 8016016:	4608      	mov	r0, r1
 8016018:	460b      	mov	r3, r1
 801601a:	fbb3 fcf2 	udiv	ip, r3, r2
 801601e:	fb02 331c 	mls	r3, r2, ip, r3
 8016022:	b29b      	uxth	r3, r3
 8016024:	fb0e f303 	mul.w	r3, lr, r3
 8016028:	3101      	adds	r1, #1
 801602a:	f855 c003 	ldr.w	ip, [r5, r3]
 801602e:	4564      	cmp	r4, ip
 8016030:	bf08      	it	eq
 8016032:	3001      	addeq	r0, #1
 8016034:	b28b      	uxth	r3, r1
 8016036:	bf08      	it	eq
 8016038:	b280      	uxtheq	r0, r0
 801603a:	4293      	cmp	r3, r2
 801603c:	d3ed      	bcc.n	801601a <get_available_free_slots+0x16>
 801603e:	bd30      	pop	{r4, r5, pc}
 8016040:	4610      	mov	r0, r2
 8016042:	4770      	bx	lr

08016044 <uxr_seq_num_add>:
 8016044:	4408      	add	r0, r1
 8016046:	b280      	uxth	r0, r0
 8016048:	4770      	bx	lr
 801604a:	bf00      	nop

0801604c <uxr_seq_num_sub>:
 801604c:	1a40      	subs	r0, r0, r1
 801604e:	b280      	uxth	r0, r0
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop

08016054 <uxr_seq_num_cmp>:
 8016054:	4288      	cmp	r0, r1
 8016056:	d011      	beq.n	801607c <uxr_seq_num_cmp+0x28>
 8016058:	d309      	bcc.n	801606e <uxr_seq_num_cmp+0x1a>
 801605a:	4288      	cmp	r0, r1
 801605c:	d910      	bls.n	8016080 <uxr_seq_num_cmp+0x2c>
 801605e:	1a40      	subs	r0, r0, r1
 8016060:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016064:	bfd4      	ite	le
 8016066:	2001      	movle	r0, #1
 8016068:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801606c:	4770      	bx	lr
 801606e:	1a0b      	subs	r3, r1, r0
 8016070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016074:	daf1      	bge.n	801605a <uxr_seq_num_cmp+0x6>
 8016076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801607a:	4770      	bx	lr
 801607c:	2000      	movs	r0, #0
 801607e:	4770      	bx	lr
 8016080:	2001      	movs	r0, #1
 8016082:	4770      	bx	lr

08016084 <rcl_get_default_domain_id>:
 8016084:	b530      	push	{r4, r5, lr}
 8016086:	b083      	sub	sp, #12
 8016088:	2300      	movs	r3, #0
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	b1d0      	cbz	r0, 80160c4 <rcl_get_default_domain_id+0x40>
 801608e:	4604      	mov	r4, r0
 8016090:	4669      	mov	r1, sp
 8016092:	4815      	ldr	r0, [pc, #84]	@ (80160e8 <rcl_get_default_domain_id+0x64>)
 8016094:	f7fd ff14 	bl	8013ec0 <rcutils_get_env>
 8016098:	4602      	mov	r2, r0
 801609a:	b110      	cbz	r0, 80160a2 <rcl_get_default_domain_id+0x1e>
 801609c:	2001      	movs	r0, #1
 801609e:	b003      	add	sp, #12
 80160a0:	bd30      	pop	{r4, r5, pc}
 80160a2:	9b00      	ldr	r3, [sp, #0]
 80160a4:	b18b      	cbz	r3, 80160ca <rcl_get_default_domain_id+0x46>
 80160a6:	7818      	ldrb	r0, [r3, #0]
 80160a8:	2800      	cmp	r0, #0
 80160aa:	d0f8      	beq.n	801609e <rcl_get_default_domain_id+0x1a>
 80160ac:	a901      	add	r1, sp, #4
 80160ae:	4618      	mov	r0, r3
 80160b0:	9201      	str	r2, [sp, #4]
 80160b2:	f000 fdf1 	bl	8016c98 <strtoul>
 80160b6:	4605      	mov	r5, r0
 80160b8:	b150      	cbz	r0, 80160d0 <rcl_get_default_domain_id+0x4c>
 80160ba:	1c43      	adds	r3, r0, #1
 80160bc:	d00d      	beq.n	80160da <rcl_get_default_domain_id+0x56>
 80160be:	6025      	str	r5, [r4, #0]
 80160c0:	2000      	movs	r0, #0
 80160c2:	e7ec      	b.n	801609e <rcl_get_default_domain_id+0x1a>
 80160c4:	200b      	movs	r0, #11
 80160c6:	b003      	add	sp, #12
 80160c8:	bd30      	pop	{r4, r5, pc}
 80160ca:	4618      	mov	r0, r3
 80160cc:	b003      	add	sp, #12
 80160ce:	bd30      	pop	{r4, r5, pc}
 80160d0:	9b01      	ldr	r3, [sp, #4]
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d0f2      	beq.n	80160be <rcl_get_default_domain_id+0x3a>
 80160d8:	e7e0      	b.n	801609c <rcl_get_default_domain_id+0x18>
 80160da:	f001 f82f 	bl	801713c <__errno>
 80160de:	6803      	ldr	r3, [r0, #0]
 80160e0:	2b22      	cmp	r3, #34	@ 0x22
 80160e2:	d1ec      	bne.n	80160be <rcl_get_default_domain_id+0x3a>
 80160e4:	e7da      	b.n	801609c <rcl_get_default_domain_id+0x18>
 80160e6:	bf00      	nop
 80160e8:	080186cc 	.word	0x080186cc

080160ec <rcl_expand_topic_name>:
 80160ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f0:	b08b      	sub	sp, #44	@ 0x2c
 80160f2:	9306      	str	r3, [sp, #24]
 80160f4:	2800      	cmp	r0, #0
 80160f6:	f000 80ad 	beq.w	8016254 <rcl_expand_topic_name+0x168>
 80160fa:	460e      	mov	r6, r1
 80160fc:	2900      	cmp	r1, #0
 80160fe:	f000 80a9 	beq.w	8016254 <rcl_expand_topic_name+0x168>
 8016102:	4617      	mov	r7, r2
 8016104:	2a00      	cmp	r2, #0
 8016106:	f000 80a5 	beq.w	8016254 <rcl_expand_topic_name+0x168>
 801610a:	2b00      	cmp	r3, #0
 801610c:	f000 80a2 	beq.w	8016254 <rcl_expand_topic_name+0x168>
 8016110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016112:	2b00      	cmp	r3, #0
 8016114:	f000 809e 	beq.w	8016254 <rcl_expand_topic_name+0x168>
 8016118:	2200      	movs	r2, #0
 801611a:	a909      	add	r1, sp, #36	@ 0x24
 801611c:	4680      	mov	r8, r0
 801611e:	f000 fa57 	bl	80165d0 <rcl_validate_topic_name>
 8016122:	4604      	mov	r4, r0
 8016124:	2800      	cmp	r0, #0
 8016126:	f040 8096 	bne.w	8016256 <rcl_expand_topic_name+0x16a>
 801612a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801612c:	2b00      	cmp	r3, #0
 801612e:	f040 809a 	bne.w	8016266 <rcl_expand_topic_name+0x17a>
 8016132:	4602      	mov	r2, r0
 8016134:	a909      	add	r1, sp, #36	@ 0x24
 8016136:	4630      	mov	r0, r6
 8016138:	f7fe fafc 	bl	8014734 <rmw_validate_node_name>
 801613c:	2800      	cmp	r0, #0
 801613e:	f040 808e 	bne.w	801625e <rcl_expand_topic_name+0x172>
 8016142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016144:	2a00      	cmp	r2, #0
 8016146:	f040 8093 	bne.w	8016270 <rcl_expand_topic_name+0x184>
 801614a:	a909      	add	r1, sp, #36	@ 0x24
 801614c:	4638      	mov	r0, r7
 801614e:	f7fe fad3 	bl	80146f8 <rmw_validate_namespace>
 8016152:	2800      	cmp	r0, #0
 8016154:	f040 8083 	bne.w	801625e <rcl_expand_topic_name+0x172>
 8016158:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801615a:	2c00      	cmp	r4, #0
 801615c:	f040 80ed 	bne.w	801633a <rcl_expand_topic_name+0x24e>
 8016160:	217b      	movs	r1, #123	@ 0x7b
 8016162:	4640      	mov	r0, r8
 8016164:	f000 ff5e 	bl	8017024 <strchr>
 8016168:	f898 3000 	ldrb.w	r3, [r8]
 801616c:	2b2f      	cmp	r3, #47	@ 0x2f
 801616e:	4605      	mov	r5, r0
 8016170:	f000 809e 	beq.w	80162b0 <rcl_expand_topic_name+0x1c4>
 8016174:	2b7e      	cmp	r3, #126	@ 0x7e
 8016176:	f040 80a2 	bne.w	80162be <rcl_expand_topic_name+0x1d2>
 801617a:	4638      	mov	r0, r7
 801617c:	f7ea f85a 	bl	8000234 <strlen>
 8016180:	4a82      	ldr	r2, [pc, #520]	@ (801638c <rcl_expand_topic_name+0x2a0>)
 8016182:	4b83      	ldr	r3, [pc, #524]	@ (8016390 <rcl_expand_topic_name+0x2a4>)
 8016184:	2801      	cmp	r0, #1
 8016186:	bf18      	it	ne
 8016188:	4613      	movne	r3, r2
 801618a:	9302      	str	r3, [sp, #8]
 801618c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016194:	f108 0301 	add.w	r3, r8, #1
 8016198:	9305      	str	r3, [sp, #20]
 801619a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801619e:	9301      	str	r3, [sp, #4]
 80161a0:	ab14      	add	r3, sp, #80	@ 0x50
 80161a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80161a4:	f7fd fea4 	bl	8013ef0 <rcutils_format_string_limit>
 80161a8:	4682      	mov	sl, r0
 80161aa:	2800      	cmp	r0, #0
 80161ac:	f000 80c7 	beq.w	801633e <rcl_expand_topic_name+0x252>
 80161b0:	2d00      	cmp	r5, #0
 80161b2:	f000 80a2 	beq.w	80162fa <rcl_expand_topic_name+0x20e>
 80161b6:	217b      	movs	r1, #123	@ 0x7b
 80161b8:	f000 ff34 	bl	8017024 <strchr>
 80161bc:	46d1      	mov	r9, sl
 80161be:	4605      	mov	r5, r0
 80161c0:	9407      	str	r4, [sp, #28]
 80161c2:	46d3      	mov	fp, sl
 80161c4:	464c      	mov	r4, r9
 80161c6:	2d00      	cmp	r5, #0
 80161c8:	f000 80be 	beq.w	8016348 <rcl_expand_topic_name+0x25c>
 80161cc:	217d      	movs	r1, #125	@ 0x7d
 80161ce:	4620      	mov	r0, r4
 80161d0:	f000 ff28 	bl	8017024 <strchr>
 80161d4:	eba0 0905 	sub.w	r9, r0, r5
 80161d8:	f109 0a01 	add.w	sl, r9, #1
 80161dc:	486d      	ldr	r0, [pc, #436]	@ (8016394 <rcl_expand_topic_name+0x2a8>)
 80161de:	4652      	mov	r2, sl
 80161e0:	4629      	mov	r1, r5
 80161e2:	f000 ff2c 	bl	801703e <strncmp>
 80161e6:	2800      	cmp	r0, #0
 80161e8:	d067      	beq.n	80162ba <rcl_expand_topic_name+0x1ce>
 80161ea:	486b      	ldr	r0, [pc, #428]	@ (8016398 <rcl_expand_topic_name+0x2ac>)
 80161ec:	4652      	mov	r2, sl
 80161ee:	4629      	mov	r1, r5
 80161f0:	f000 ff25 	bl	801703e <strncmp>
 80161f4:	b130      	cbz	r0, 8016204 <rcl_expand_topic_name+0x118>
 80161f6:	4869      	ldr	r0, [pc, #420]	@ (801639c <rcl_expand_topic_name+0x2b0>)
 80161f8:	4652      	mov	r2, sl
 80161fa:	4629      	mov	r1, r5
 80161fc:	f000 ff1f 	bl	801703e <strncmp>
 8016200:	2800      	cmp	r0, #0
 8016202:	d137      	bne.n	8016274 <rcl_expand_topic_name+0x188>
 8016204:	46b9      	mov	r9, r7
 8016206:	ab16      	add	r3, sp, #88	@ 0x58
 8016208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801620c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016210:	ab14      	add	r3, sp, #80	@ 0x50
 8016212:	4628      	mov	r0, r5
 8016214:	cb0c      	ldmia	r3, {r2, r3}
 8016216:	4651      	mov	r1, sl
 8016218:	f7fd ffa6 	bl	8014168 <rcutils_strndup>
 801621c:	4605      	mov	r5, r0
 801621e:	2800      	cmp	r0, #0
 8016220:	f000 809c 	beq.w	801635c <rcl_expand_topic_name+0x270>
 8016224:	464a      	mov	r2, r9
 8016226:	4620      	mov	r0, r4
 8016228:	ab14      	add	r3, sp, #80	@ 0x50
 801622a:	4629      	mov	r1, r5
 801622c:	f7fd fe9a 	bl	8013f64 <rcutils_repl_str>
 8016230:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016232:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016234:	4604      	mov	r4, r0
 8016236:	4628      	mov	r0, r5
 8016238:	4798      	blx	r3
 801623a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801623c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801623e:	4658      	mov	r0, fp
 8016240:	4798      	blx	r3
 8016242:	2c00      	cmp	r4, #0
 8016244:	d07b      	beq.n	801633e <rcl_expand_topic_name+0x252>
 8016246:	217b      	movs	r1, #123	@ 0x7b
 8016248:	4620      	mov	r0, r4
 801624a:	f000 feeb 	bl	8017024 <strchr>
 801624e:	46a3      	mov	fp, r4
 8016250:	4605      	mov	r5, r0
 8016252:	e7b8      	b.n	80161c6 <rcl_expand_topic_name+0xda>
 8016254:	240b      	movs	r4, #11
 8016256:	4620      	mov	r0, r4
 8016258:	b00b      	add	sp, #44	@ 0x2c
 801625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625e:	f7fb f8fd 	bl	801145c <rcl_convert_rmw_ret_to_rcl_ret>
 8016262:	4604      	mov	r4, r0
 8016264:	e7f7      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 8016266:	2467      	movs	r4, #103	@ 0x67
 8016268:	4620      	mov	r0, r4
 801626a:	b00b      	add	sp, #44	@ 0x2c
 801626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016270:	24c9      	movs	r4, #201	@ 0xc9
 8016272:	e7f0      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 8016274:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016278:	9806      	ldr	r0, [sp, #24]
 801627a:	1c69      	adds	r1, r5, #1
 801627c:	f7fe f88e 	bl	801439c <rcutils_string_map_getn>
 8016280:	4681      	mov	r9, r0
 8016282:	2800      	cmp	r0, #0
 8016284:	d1bf      	bne.n	8016206 <rcl_expand_topic_name+0x11a>
 8016286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016288:	aa16      	add	r2, sp, #88	@ 0x58
 801628a:	6018      	str	r0, [r3, #0]
 801628c:	ca07      	ldmia	r2, {r0, r1, r2}
 801628e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016292:	ab14      	add	r3, sp, #80	@ 0x50
 8016294:	cb0c      	ldmia	r3, {r2, r3}
 8016296:	4651      	mov	r1, sl
 8016298:	4628      	mov	r0, r5
 801629a:	f7fd ff65 	bl	8014168 <rcutils_strndup>
 801629e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80162a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80162a2:	4798      	blx	r3
 80162a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80162a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80162a8:	4658      	mov	r0, fp
 80162aa:	2469      	movs	r4, #105	@ 0x69
 80162ac:	4798      	blx	r3
 80162ae:	e7d2      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d05b      	beq.n	801636c <rcl_expand_topic_name+0x280>
 80162b4:	46c1      	mov	r9, r8
 80162b6:	46a2      	mov	sl, r4
 80162b8:	e782      	b.n	80161c0 <rcl_expand_topic_name+0xd4>
 80162ba:	46b1      	mov	r9, r6
 80162bc:	e7a3      	b.n	8016206 <rcl_expand_topic_name+0x11a>
 80162be:	2800      	cmp	r0, #0
 80162c0:	d1f8      	bne.n	80162b4 <rcl_expand_topic_name+0x1c8>
 80162c2:	4638      	mov	r0, r7
 80162c4:	f7e9 ffb6 	bl	8000234 <strlen>
 80162c8:	4a35      	ldr	r2, [pc, #212]	@ (80163a0 <rcl_expand_topic_name+0x2b4>)
 80162ca:	4b36      	ldr	r3, [pc, #216]	@ (80163a4 <rcl_expand_topic_name+0x2b8>)
 80162cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80162d0:	2801      	cmp	r0, #1
 80162d2:	bf18      	it	ne
 80162d4:	4613      	movne	r3, r2
 80162d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80162da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80162de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80162e0:	9703      	str	r7, [sp, #12]
 80162e2:	9200      	str	r2, [sp, #0]
 80162e4:	ab14      	add	r3, sp, #80	@ 0x50
 80162e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162e8:	f7fd fe02 	bl	8013ef0 <rcutils_format_string_limit>
 80162ec:	4682      	mov	sl, r0
 80162ee:	4653      	mov	r3, sl
 80162f0:	b32b      	cbz	r3, 801633e <rcl_expand_topic_name+0x252>
 80162f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80162f4:	f8c3 a000 	str.w	sl, [r3]
 80162f8:	e7ad      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 80162fa:	f89a 3000 	ldrb.w	r3, [sl]
 80162fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8016300:	d0f7      	beq.n	80162f2 <rcl_expand_topic_name+0x206>
 8016302:	4638      	mov	r0, r7
 8016304:	f7e9 ff96 	bl	8000234 <strlen>
 8016308:	4a25      	ldr	r2, [pc, #148]	@ (80163a0 <rcl_expand_topic_name+0x2b4>)
 801630a:	4b26      	ldr	r3, [pc, #152]	@ (80163a4 <rcl_expand_topic_name+0x2b8>)
 801630c:	f8cd a010 	str.w	sl, [sp, #16]
 8016310:	2801      	cmp	r0, #1
 8016312:	bf18      	it	ne
 8016314:	4613      	movne	r3, r2
 8016316:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801631a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801631e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016320:	9703      	str	r7, [sp, #12]
 8016322:	9200      	str	r2, [sp, #0]
 8016324:	ab14      	add	r3, sp, #80	@ 0x50
 8016326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016328:	f7fd fde2 	bl	8013ef0 <rcutils_format_string_limit>
 801632c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801632e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016330:	4605      	mov	r5, r0
 8016332:	4650      	mov	r0, sl
 8016334:	4798      	blx	r3
 8016336:	46aa      	mov	sl, r5
 8016338:	e7d9      	b.n	80162ee <rcl_expand_topic_name+0x202>
 801633a:	24ca      	movs	r4, #202	@ 0xca
 801633c:	e78b      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 801633e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016340:	2300      	movs	r3, #0
 8016342:	6013      	str	r3, [r2, #0]
 8016344:	240a      	movs	r4, #10
 8016346:	e786      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 8016348:	465b      	mov	r3, fp
 801634a:	9c07      	ldr	r4, [sp, #28]
 801634c:	46da      	mov	sl, fp
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1d3      	bne.n	80162fa <rcl_expand_topic_name+0x20e>
 8016352:	f898 3000 	ldrb.w	r3, [r8]
 8016356:	2b2f      	cmp	r3, #47	@ 0x2f
 8016358:	d0cb      	beq.n	80162f2 <rcl_expand_topic_name+0x206>
 801635a:	e7b2      	b.n	80162c2 <rcl_expand_topic_name+0x1d6>
 801635c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016360:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016362:	6015      	str	r5, [r2, #0]
 8016364:	4658      	mov	r0, fp
 8016366:	4798      	blx	r3
 8016368:	240a      	movs	r4, #10
 801636a:	e774      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 801636c:	ab17      	add	r3, sp, #92	@ 0x5c
 801636e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016372:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016376:	ab14      	add	r3, sp, #80	@ 0x50
 8016378:	cb0e      	ldmia	r3, {r1, r2, r3}
 801637a:	4640      	mov	r0, r8
 801637c:	f7fd fed2 	bl	8014124 <rcutils_strdup>
 8016380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016382:	2800      	cmp	r0, #0
 8016384:	6018      	str	r0, [r3, #0]
 8016386:	bf08      	it	eq
 8016388:	240a      	moveq	r4, #10
 801638a:	e764      	b.n	8016256 <rcl_expand_topic_name+0x16a>
 801638c:	080186dc 	.word	0x080186dc
 8016390:	08018238 	.word	0x08018238
 8016394:	080186e4 	.word	0x080186e4
 8016398:	080186ec 	.word	0x080186ec
 801639c:	080186f4 	.word	0x080186f4
 80163a0:	08018200 	.word	0x08018200
 80163a4:	08018248 	.word	0x08018248

080163a8 <rcl_get_default_topic_name_substitutions>:
 80163a8:	2800      	cmp	r0, #0
 80163aa:	bf0c      	ite	eq
 80163ac:	200b      	moveq	r0, #11
 80163ae:	2000      	movne	r0, #0
 80163b0:	4770      	bx	lr
 80163b2:	bf00      	nop

080163b4 <rcl_get_zero_initialized_guard_condition>:
 80163b4:	4a03      	ldr	r2, [pc, #12]	@ (80163c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80163b6:	4603      	mov	r3, r0
 80163b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80163bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80163c0:	4618      	mov	r0, r3
 80163c2:	4770      	bx	lr
 80163c4:	08018ac8 	.word	0x08018ac8

080163c8 <rcl_guard_condition_init>:
 80163c8:	b082      	sub	sp, #8
 80163ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163cc:	b087      	sub	sp, #28
 80163ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80163d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80163d4:	46a6      	mov	lr, r4
 80163d6:	460d      	mov	r5, r1
 80163d8:	4604      	mov	r4, r0
 80163da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163de:	f10d 0c04 	add.w	ip, sp, #4
 80163e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163e6:	f8de 3000 	ldr.w	r3, [lr]
 80163ea:	f8cc 3000 	str.w	r3, [ip]
 80163ee:	a801      	add	r0, sp, #4
 80163f0:	f7f4 fed8 	bl	800b1a4 <rcutils_allocator_is_valid>
 80163f4:	b338      	cbz	r0, 8016446 <rcl_guard_condition_init+0x7e>
 80163f6:	b334      	cbz	r4, 8016446 <rcl_guard_condition_init+0x7e>
 80163f8:	6866      	ldr	r6, [r4, #4]
 80163fa:	b9ee      	cbnz	r6, 8016438 <rcl_guard_condition_init+0x70>
 80163fc:	b31d      	cbz	r5, 8016446 <rcl_guard_condition_init+0x7e>
 80163fe:	4628      	mov	r0, r5
 8016400:	f7fb f84a 	bl	8011498 <rcl_context_is_valid>
 8016404:	b308      	cbz	r0, 801644a <rcl_guard_condition_init+0x82>
 8016406:	9b01      	ldr	r3, [sp, #4]
 8016408:	9905      	ldr	r1, [sp, #20]
 801640a:	201c      	movs	r0, #28
 801640c:	4798      	blx	r3
 801640e:	4607      	mov	r7, r0
 8016410:	6060      	str	r0, [r4, #4]
 8016412:	b310      	cbz	r0, 801645a <rcl_guard_condition_init+0x92>
 8016414:	6828      	ldr	r0, [r5, #0]
 8016416:	3028      	adds	r0, #40	@ 0x28
 8016418:	f000 f9d4 	bl	80167c4 <rmw_create_guard_condition>
 801641c:	6038      	str	r0, [r7, #0]
 801641e:	6860      	ldr	r0, [r4, #4]
 8016420:	6805      	ldr	r5, [r0, #0]
 8016422:	b1a5      	cbz	r5, 801644e <rcl_guard_condition_init+0x86>
 8016424:	2301      	movs	r3, #1
 8016426:	ac01      	add	r4, sp, #4
 8016428:	7103      	strb	r3, [r0, #4]
 801642a:	f100 0708 	add.w	r7, r0, #8
 801642e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016430:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016432:	6823      	ldr	r3, [r4, #0]
 8016434:	603b      	str	r3, [r7, #0]
 8016436:	e000      	b.n	801643a <rcl_guard_condition_init+0x72>
 8016438:	2664      	movs	r6, #100	@ 0x64
 801643a:	4630      	mov	r0, r6
 801643c:	b007      	add	sp, #28
 801643e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016442:	b002      	add	sp, #8
 8016444:	4770      	bx	lr
 8016446:	260b      	movs	r6, #11
 8016448:	e7f7      	b.n	801643a <rcl_guard_condition_init+0x72>
 801644a:	2665      	movs	r6, #101	@ 0x65
 801644c:	e7f5      	b.n	801643a <rcl_guard_condition_init+0x72>
 801644e:	9b02      	ldr	r3, [sp, #8]
 8016450:	9905      	ldr	r1, [sp, #20]
 8016452:	4798      	blx	r3
 8016454:	2601      	movs	r6, #1
 8016456:	6065      	str	r5, [r4, #4]
 8016458:	e7ef      	b.n	801643a <rcl_guard_condition_init+0x72>
 801645a:	260a      	movs	r6, #10
 801645c:	e7ed      	b.n	801643a <rcl_guard_condition_init+0x72>
 801645e:	bf00      	nop

08016460 <rcl_guard_condition_init_from_rmw>:
 8016460:	b082      	sub	sp, #8
 8016462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016466:	b086      	sub	sp, #24
 8016468:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801646c:	4604      	mov	r4, r0
 801646e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016472:	460e      	mov	r6, r1
 8016474:	4617      	mov	r7, r2
 8016476:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801647a:	f10d 0e04 	add.w	lr, sp, #4
 801647e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016482:	f8dc 3000 	ldr.w	r3, [ip]
 8016486:	f8ce 3000 	str.w	r3, [lr]
 801648a:	a801      	add	r0, sp, #4
 801648c:	f7f4 fe8a 	bl	800b1a4 <rcutils_allocator_is_valid>
 8016490:	b350      	cbz	r0, 80164e8 <rcl_guard_condition_init_from_rmw+0x88>
 8016492:	b34c      	cbz	r4, 80164e8 <rcl_guard_condition_init_from_rmw+0x88>
 8016494:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016498:	f1b8 0f00 	cmp.w	r8, #0
 801649c:	d11e      	bne.n	80164dc <rcl_guard_condition_init_from_rmw+0x7c>
 801649e:	b31f      	cbz	r7, 80164e8 <rcl_guard_condition_init_from_rmw+0x88>
 80164a0:	4638      	mov	r0, r7
 80164a2:	f7fa fff9 	bl	8011498 <rcl_context_is_valid>
 80164a6:	b328      	cbz	r0, 80164f4 <rcl_guard_condition_init_from_rmw+0x94>
 80164a8:	9b01      	ldr	r3, [sp, #4]
 80164aa:	9905      	ldr	r1, [sp, #20]
 80164ac:	201c      	movs	r0, #28
 80164ae:	4798      	blx	r3
 80164b0:	4605      	mov	r5, r0
 80164b2:	6060      	str	r0, [r4, #4]
 80164b4:	b358      	cbz	r0, 801650e <rcl_guard_condition_init_from_rmw+0xae>
 80164b6:	b1fe      	cbz	r6, 80164f8 <rcl_guard_condition_init_from_rmw+0x98>
 80164b8:	6006      	str	r6, [r0, #0]
 80164ba:	f880 8004 	strb.w	r8, [r0, #4]
 80164be:	ac01      	add	r4, sp, #4
 80164c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164c2:	f105 0c08 	add.w	ip, r5, #8
 80164c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164ca:	6823      	ldr	r3, [r4, #0]
 80164cc:	f8cc 3000 	str.w	r3, [ip]
 80164d0:	2000      	movs	r0, #0
 80164d2:	b006      	add	sp, #24
 80164d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164d8:	b002      	add	sp, #8
 80164da:	4770      	bx	lr
 80164dc:	2064      	movs	r0, #100	@ 0x64
 80164de:	b006      	add	sp, #24
 80164e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164e4:	b002      	add	sp, #8
 80164e6:	4770      	bx	lr
 80164e8:	200b      	movs	r0, #11
 80164ea:	b006      	add	sp, #24
 80164ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164f0:	b002      	add	sp, #8
 80164f2:	4770      	bx	lr
 80164f4:	2065      	movs	r0, #101	@ 0x65
 80164f6:	e7f2      	b.n	80164de <rcl_guard_condition_init_from_rmw+0x7e>
 80164f8:	6838      	ldr	r0, [r7, #0]
 80164fa:	3028      	adds	r0, #40	@ 0x28
 80164fc:	f000 f962 	bl	80167c4 <rmw_create_guard_condition>
 8016500:	6028      	str	r0, [r5, #0]
 8016502:	6865      	ldr	r5, [r4, #4]
 8016504:	682e      	ldr	r6, [r5, #0]
 8016506:	b126      	cbz	r6, 8016512 <rcl_guard_condition_init_from_rmw+0xb2>
 8016508:	2301      	movs	r3, #1
 801650a:	712b      	strb	r3, [r5, #4]
 801650c:	e7d7      	b.n	80164be <rcl_guard_condition_init_from_rmw+0x5e>
 801650e:	200a      	movs	r0, #10
 8016510:	e7e5      	b.n	80164de <rcl_guard_condition_init_from_rmw+0x7e>
 8016512:	4628      	mov	r0, r5
 8016514:	9b02      	ldr	r3, [sp, #8]
 8016516:	9905      	ldr	r1, [sp, #20]
 8016518:	4798      	blx	r3
 801651a:	6066      	str	r6, [r4, #4]
 801651c:	2001      	movs	r0, #1
 801651e:	e7de      	b.n	80164de <rcl_guard_condition_init_from_rmw+0x7e>

08016520 <rcl_guard_condition_fini>:
 8016520:	b570      	push	{r4, r5, r6, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	b1f0      	cbz	r0, 8016564 <rcl_guard_condition_fini+0x44>
 8016526:	6843      	ldr	r3, [r0, #4]
 8016528:	4604      	mov	r4, r0
 801652a:	b163      	cbz	r3, 8016546 <rcl_guard_condition_fini+0x26>
 801652c:	6818      	ldr	r0, [r3, #0]
 801652e:	68de      	ldr	r6, [r3, #12]
 8016530:	6999      	ldr	r1, [r3, #24]
 8016532:	b160      	cbz	r0, 801654e <rcl_guard_condition_fini+0x2e>
 8016534:	791d      	ldrb	r5, [r3, #4]
 8016536:	b965      	cbnz	r5, 8016552 <rcl_guard_condition_fini+0x32>
 8016538:	4618      	mov	r0, r3
 801653a:	47b0      	blx	r6
 801653c:	2300      	movs	r3, #0
 801653e:	4628      	mov	r0, r5
 8016540:	6063      	str	r3, [r4, #4]
 8016542:	b002      	add	sp, #8
 8016544:	bd70      	pop	{r4, r5, r6, pc}
 8016546:	461d      	mov	r5, r3
 8016548:	4628      	mov	r0, r5
 801654a:	b002      	add	sp, #8
 801654c:	bd70      	pop	{r4, r5, r6, pc}
 801654e:	4605      	mov	r5, r0
 8016550:	e7f2      	b.n	8016538 <rcl_guard_condition_fini+0x18>
 8016552:	9101      	str	r1, [sp, #4]
 8016554:	f000 f94a 	bl	80167ec <rmw_destroy_guard_condition>
 8016558:	1e05      	subs	r5, r0, #0
 801655a:	6863      	ldr	r3, [r4, #4]
 801655c:	9901      	ldr	r1, [sp, #4]
 801655e:	bf18      	it	ne
 8016560:	2501      	movne	r5, #1
 8016562:	e7e9      	b.n	8016538 <rcl_guard_condition_fini+0x18>
 8016564:	250b      	movs	r5, #11
 8016566:	4628      	mov	r0, r5
 8016568:	b002      	add	sp, #8
 801656a:	bd70      	pop	{r4, r5, r6, pc}

0801656c <rcl_guard_condition_get_default_options>:
 801656c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801656e:	b087      	sub	sp, #28
 8016570:	4606      	mov	r6, r0
 8016572:	4668      	mov	r0, sp
 8016574:	f7f4 fe08 	bl	800b188 <rcutils_get_default_allocator>
 8016578:	4b09      	ldr	r3, [pc, #36]	@ (80165a0 <rcl_guard_condition_get_default_options+0x34>)
 801657a:	46ee      	mov	lr, sp
 801657c:	469c      	mov	ip, r3
 801657e:	461d      	mov	r5, r3
 8016580:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801658a:	4634      	mov	r4, r6
 801658c:	f8de 7000 	ldr.w	r7, [lr]
 8016590:	f8cc 7000 	str.w	r7, [ip]
 8016594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016596:	4630      	mov	r0, r6
 8016598:	6027      	str	r7, [r4, #0]
 801659a:	b007      	add	sp, #28
 801659c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801659e:	bf00      	nop
 80165a0:	2000add4 	.word	0x2000add4

080165a4 <rcl_trigger_guard_condition>:
 80165a4:	b148      	cbz	r0, 80165ba <rcl_trigger_guard_condition+0x16>
 80165a6:	b508      	push	{r3, lr}
 80165a8:	6843      	ldr	r3, [r0, #4]
 80165aa:	b143      	cbz	r3, 80165be <rcl_trigger_guard_condition+0x1a>
 80165ac:	6818      	ldr	r0, [r3, #0]
 80165ae:	f000 f931 	bl	8016814 <rmw_trigger_guard_condition>
 80165b2:	3800      	subs	r0, #0
 80165b4:	bf18      	it	ne
 80165b6:	2001      	movne	r0, #1
 80165b8:	bd08      	pop	{r3, pc}
 80165ba:	200b      	movs	r0, #11
 80165bc:	4770      	bx	lr
 80165be:	200b      	movs	r0, #11
 80165c0:	bd08      	pop	{r3, pc}
 80165c2:	bf00      	nop

080165c4 <rcl_guard_condition_get_rmw_handle>:
 80165c4:	b110      	cbz	r0, 80165cc <rcl_guard_condition_get_rmw_handle+0x8>
 80165c6:	6840      	ldr	r0, [r0, #4]
 80165c8:	b100      	cbz	r0, 80165cc <rcl_guard_condition_get_rmw_handle+0x8>
 80165ca:	6800      	ldr	r0, [r0, #0]
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop

080165d0 <rcl_validate_topic_name>:
 80165d0:	2800      	cmp	r0, #0
 80165d2:	d07a      	beq.n	80166ca <rcl_validate_topic_name+0xfa>
 80165d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d8:	460e      	mov	r6, r1
 80165da:	2900      	cmp	r1, #0
 80165dc:	d07c      	beq.n	80166d8 <rcl_validate_topic_name+0x108>
 80165de:	4617      	mov	r7, r2
 80165e0:	4605      	mov	r5, r0
 80165e2:	f7e9 fe27 	bl	8000234 <strlen>
 80165e6:	b1b0      	cbz	r0, 8016616 <rcl_validate_topic_name+0x46>
 80165e8:	f895 9000 	ldrb.w	r9, [r5]
 80165ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016770 <rcl_validate_topic_name+0x1a0>
 80165f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80165f4:	f013 0304 	ands.w	r3, r3, #4
 80165f8:	d169      	bne.n	80166ce <rcl_validate_topic_name+0xfe>
 80165fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80165fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016602:	2a2f      	cmp	r2, #47	@ 0x2f
 8016604:	d10e      	bne.n	8016624 <rcl_validate_topic_name+0x54>
 8016606:	2202      	movs	r2, #2
 8016608:	6032      	str	r2, [r6, #0]
 801660a:	b36f      	cbz	r7, 8016668 <rcl_validate_topic_name+0x98>
 801660c:	f8c7 8000 	str.w	r8, [r7]
 8016610:	4618      	mov	r0, r3
 8016612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016616:	2301      	movs	r3, #1
 8016618:	6033      	str	r3, [r6, #0]
 801661a:	b32f      	cbz	r7, 8016668 <rcl_validate_topic_name+0x98>
 801661c:	2000      	movs	r0, #0
 801661e:	6038      	str	r0, [r7, #0]
 8016620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016624:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016628:	461c      	mov	r4, r3
 801662a:	4619      	mov	r1, r3
 801662c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016630:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016634:	f1be 0f09 	cmp.w	lr, #9
 8016638:	d919      	bls.n	801666e <rcl_validate_topic_name+0x9e>
 801663a:	f022 0e20 	bic.w	lr, r2, #32
 801663e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016642:	f1be 0f19 	cmp.w	lr, #25
 8016646:	d912      	bls.n	801666e <rcl_validate_topic_name+0x9e>
 8016648:	2a5f      	cmp	r2, #95	@ 0x5f
 801664a:	d019      	beq.n	8016680 <rcl_validate_topic_name+0xb0>
 801664c:	2a2f      	cmp	r2, #47	@ 0x2f
 801664e:	d051      	beq.n	80166f4 <rcl_validate_topic_name+0x124>
 8016650:	2a7e      	cmp	r2, #126	@ 0x7e
 8016652:	d048      	beq.n	80166e6 <rcl_validate_topic_name+0x116>
 8016654:	2a7b      	cmp	r2, #123	@ 0x7b
 8016656:	d054      	beq.n	8016702 <rcl_validate_topic_name+0x132>
 8016658:	2a7d      	cmp	r2, #125	@ 0x7d
 801665a:	d161      	bne.n	8016720 <rcl_validate_topic_name+0x150>
 801665c:	2c00      	cmp	r4, #0
 801665e:	d155      	bne.n	801670c <rcl_validate_topic_name+0x13c>
 8016660:	2305      	movs	r3, #5
 8016662:	6033      	str	r3, [r6, #0]
 8016664:	b107      	cbz	r7, 8016668 <rcl_validate_topic_name+0x98>
 8016666:	6039      	str	r1, [r7, #0]
 8016668:	2000      	movs	r0, #0
 801666a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801666e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016672:	0752      	lsls	r2, r2, #29
 8016674:	d504      	bpl.n	8016680 <rcl_validate_topic_name+0xb0>
 8016676:	b11c      	cbz	r4, 8016680 <rcl_validate_topic_name+0xb0>
 8016678:	b111      	cbz	r1, 8016680 <rcl_validate_topic_name+0xb0>
 801667a:	1e4a      	subs	r2, r1, #1
 801667c:	429a      	cmp	r2, r3
 801667e:	d02d      	beq.n	80166dc <rcl_validate_topic_name+0x10c>
 8016680:	3101      	adds	r1, #1
 8016682:	4288      	cmp	r0, r1
 8016684:	d1d2      	bne.n	801662c <rcl_validate_topic_name+0x5c>
 8016686:	2c00      	cmp	r4, #0
 8016688:	d145      	bne.n	8016716 <rcl_validate_topic_name+0x146>
 801668a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801668e:	d04f      	beq.n	8016730 <rcl_validate_topic_name+0x160>
 8016690:	4620      	mov	r0, r4
 8016692:	2301      	movs	r3, #1
 8016694:	e006      	b.n	80166a4 <rcl_validate_topic_name+0xd4>
 8016696:	428b      	cmp	r3, r1
 8016698:	f105 0501 	add.w	r5, r5, #1
 801669c:	f103 0201 	add.w	r2, r3, #1
 80166a0:	d236      	bcs.n	8016710 <rcl_validate_topic_name+0x140>
 80166a2:	4613      	mov	r3, r2
 80166a4:	4580      	cmp	r8, r0
 80166a6:	f100 0001 	add.w	r0, r0, #1
 80166aa:	d0f4      	beq.n	8016696 <rcl_validate_topic_name+0xc6>
 80166ac:	782a      	ldrb	r2, [r5, #0]
 80166ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80166b0:	d1f1      	bne.n	8016696 <rcl_validate_topic_name+0xc6>
 80166b2:	786a      	ldrb	r2, [r5, #1]
 80166b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80166b8:	0754      	lsls	r4, r2, #29
 80166ba:	d5ec      	bpl.n	8016696 <rcl_validate_topic_name+0xc6>
 80166bc:	2204      	movs	r2, #4
 80166be:	6032      	str	r2, [r6, #0]
 80166c0:	2f00      	cmp	r7, #0
 80166c2:	d0d1      	beq.n	8016668 <rcl_validate_topic_name+0x98>
 80166c4:	603b      	str	r3, [r7, #0]
 80166c6:	2000      	movs	r0, #0
 80166c8:	e7aa      	b.n	8016620 <rcl_validate_topic_name+0x50>
 80166ca:	200b      	movs	r0, #11
 80166cc:	4770      	bx	lr
 80166ce:	2304      	movs	r3, #4
 80166d0:	6033      	str	r3, [r6, #0]
 80166d2:	2f00      	cmp	r7, #0
 80166d4:	d1a2      	bne.n	801661c <rcl_validate_topic_name+0x4c>
 80166d6:	e7c7      	b.n	8016668 <rcl_validate_topic_name+0x98>
 80166d8:	200b      	movs	r0, #11
 80166da:	e7a1      	b.n	8016620 <rcl_validate_topic_name+0x50>
 80166dc:	2309      	movs	r3, #9
 80166de:	6033      	str	r3, [r6, #0]
 80166e0:	2f00      	cmp	r7, #0
 80166e2:	d1c0      	bne.n	8016666 <rcl_validate_topic_name+0x96>
 80166e4:	e7c0      	b.n	8016668 <rcl_validate_topic_name+0x98>
 80166e6:	2900      	cmp	r1, #0
 80166e8:	d0ca      	beq.n	8016680 <rcl_validate_topic_name+0xb0>
 80166ea:	2306      	movs	r3, #6
 80166ec:	6033      	str	r3, [r6, #0]
 80166ee:	2f00      	cmp	r7, #0
 80166f0:	d1b9      	bne.n	8016666 <rcl_validate_topic_name+0x96>
 80166f2:	e7b9      	b.n	8016668 <rcl_validate_topic_name+0x98>
 80166f4:	2c00      	cmp	r4, #0
 80166f6:	d0c3      	beq.n	8016680 <rcl_validate_topic_name+0xb0>
 80166f8:	2308      	movs	r3, #8
 80166fa:	6033      	str	r3, [r6, #0]
 80166fc:	2f00      	cmp	r7, #0
 80166fe:	d1b2      	bne.n	8016666 <rcl_validate_topic_name+0x96>
 8016700:	e7b2      	b.n	8016668 <rcl_validate_topic_name+0x98>
 8016702:	2c00      	cmp	r4, #0
 8016704:	d1f8      	bne.n	80166f8 <rcl_validate_topic_name+0x128>
 8016706:	460b      	mov	r3, r1
 8016708:	2401      	movs	r4, #1
 801670a:	e7b9      	b.n	8016680 <rcl_validate_topic_name+0xb0>
 801670c:	2400      	movs	r4, #0
 801670e:	e7b7      	b.n	8016680 <rcl_validate_topic_name+0xb0>
 8016710:	2000      	movs	r0, #0
 8016712:	6030      	str	r0, [r6, #0]
 8016714:	e784      	b.n	8016620 <rcl_validate_topic_name+0x50>
 8016716:	2205      	movs	r2, #5
 8016718:	6032      	str	r2, [r6, #0]
 801671a:	2f00      	cmp	r7, #0
 801671c:	d1d2      	bne.n	80166c4 <rcl_validate_topic_name+0xf4>
 801671e:	e7a3      	b.n	8016668 <rcl_validate_topic_name+0x98>
 8016720:	2c00      	cmp	r4, #0
 8016722:	bf14      	ite	ne
 8016724:	2308      	movne	r3, #8
 8016726:	2303      	moveq	r3, #3
 8016728:	6033      	str	r3, [r6, #0]
 801672a:	2f00      	cmp	r7, #0
 801672c:	d19b      	bne.n	8016666 <rcl_validate_topic_name+0x96>
 801672e:	e79b      	b.n	8016668 <rcl_validate_topic_name+0x98>
 8016730:	2301      	movs	r3, #1
 8016732:	e00a      	b.n	801674a <rcl_validate_topic_name+0x17a>
 8016734:	2c01      	cmp	r4, #1
 8016736:	d013      	beq.n	8016760 <rcl_validate_topic_name+0x190>
 8016738:	4299      	cmp	r1, r3
 801673a:	f104 0401 	add.w	r4, r4, #1
 801673e:	f105 0501 	add.w	r5, r5, #1
 8016742:	f103 0201 	add.w	r2, r3, #1
 8016746:	d9e3      	bls.n	8016710 <rcl_validate_topic_name+0x140>
 8016748:	4613      	mov	r3, r2
 801674a:	45a0      	cmp	r8, r4
 801674c:	d0f4      	beq.n	8016738 <rcl_validate_topic_name+0x168>
 801674e:	782a      	ldrb	r2, [r5, #0]
 8016750:	2a2f      	cmp	r2, #47	@ 0x2f
 8016752:	d1ef      	bne.n	8016734 <rcl_validate_topic_name+0x164>
 8016754:	786a      	ldrb	r2, [r5, #1]
 8016756:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801675a:	0752      	lsls	r2, r2, #29
 801675c:	d5ec      	bpl.n	8016738 <rcl_validate_topic_name+0x168>
 801675e:	e7ad      	b.n	80166bc <rcl_validate_topic_name+0xec>
 8016760:	2307      	movs	r3, #7
 8016762:	6033      	str	r3, [r6, #0]
 8016764:	2f00      	cmp	r7, #0
 8016766:	f43f af7f 	beq.w	8016668 <rcl_validate_topic_name+0x98>
 801676a:	603c      	str	r4, [r7, #0]
 801676c:	2000      	movs	r0, #0
 801676e:	e757      	b.n	8016620 <rcl_validate_topic_name+0x50>
 8016770:	08018baf 	.word	0x08018baf

08016774 <rcutils_string_array_fini>:
 8016774:	b320      	cbz	r0, 80167c0 <rcutils_string_array_fini+0x4c>
 8016776:	b570      	push	{r4, r5, r6, lr}
 8016778:	4604      	mov	r4, r0
 801677a:	6840      	ldr	r0, [r0, #4]
 801677c:	b1d8      	cbz	r0, 80167b6 <rcutils_string_array_fini+0x42>
 801677e:	f104 0008 	add.w	r0, r4, #8
 8016782:	f7f4 fd0f 	bl	800b1a4 <rcutils_allocator_is_valid>
 8016786:	b1b8      	cbz	r0, 80167b8 <rcutils_string_array_fini+0x44>
 8016788:	6823      	ldr	r3, [r4, #0]
 801678a:	b1bb      	cbz	r3, 80167bc <rcutils_string_array_fini+0x48>
 801678c:	2500      	movs	r5, #0
 801678e:	6860      	ldr	r0, [r4, #4]
 8016790:	462e      	mov	r6, r5
 8016792:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016796:	68e3      	ldr	r3, [r4, #12]
 8016798:	69a1      	ldr	r1, [r4, #24]
 801679a:	4798      	blx	r3
 801679c:	e9d4 3000 	ldrd	r3, r0, [r4]
 80167a0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80167a4:	3501      	adds	r5, #1
 80167a6:	429d      	cmp	r5, r3
 80167a8:	d3f3      	bcc.n	8016792 <rcutils_string_array_fini+0x1e>
 80167aa:	68e3      	ldr	r3, [r4, #12]
 80167ac:	69a1      	ldr	r1, [r4, #24]
 80167ae:	4798      	blx	r3
 80167b0:	2000      	movs	r0, #0
 80167b2:	e9c4 0000 	strd	r0, r0, [r4]
 80167b6:	bd70      	pop	{r4, r5, r6, pc}
 80167b8:	200b      	movs	r0, #11
 80167ba:	bd70      	pop	{r4, r5, r6, pc}
 80167bc:	6860      	ldr	r0, [r4, #4]
 80167be:	e7f4      	b.n	80167aa <rcutils_string_array_fini+0x36>
 80167c0:	200b      	movs	r0, #11
 80167c2:	4770      	bx	lr

080167c4 <rmw_create_guard_condition>:
 80167c4:	b538      	push	{r3, r4, r5, lr}
 80167c6:	4605      	mov	r5, r0
 80167c8:	4807      	ldr	r0, [pc, #28]	@ (80167e8 <rmw_create_guard_condition+0x24>)
 80167ca:	f7fe f8f9 	bl	80149c0 <get_memory>
 80167ce:	b148      	cbz	r0, 80167e4 <rmw_create_guard_condition+0x20>
 80167d0:	6884      	ldr	r4, [r0, #8]
 80167d2:	2300      	movs	r3, #0
 80167d4:	7423      	strb	r3, [r4, #16]
 80167d6:	61e5      	str	r5, [r4, #28]
 80167d8:	f7fe f95a 	bl	8014a90 <rmw_get_implementation_identifier>
 80167dc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80167e0:	f104 0014 	add.w	r0, r4, #20
 80167e4:	bd38      	pop	{r3, r4, r5, pc}
 80167e6:	bf00      	nop
 80167e8:	2000abfc 	.word	0x2000abfc

080167ec <rmw_destroy_guard_condition>:
 80167ec:	b508      	push	{r3, lr}
 80167ee:	4b08      	ldr	r3, [pc, #32]	@ (8016810 <rmw_destroy_guard_condition+0x24>)
 80167f0:	6819      	ldr	r1, [r3, #0]
 80167f2:	b911      	cbnz	r1, 80167fa <rmw_destroy_guard_condition+0xe>
 80167f4:	e00a      	b.n	801680c <rmw_destroy_guard_condition+0x20>
 80167f6:	6849      	ldr	r1, [r1, #4]
 80167f8:	b141      	cbz	r1, 801680c <rmw_destroy_guard_condition+0x20>
 80167fa:	688b      	ldr	r3, [r1, #8]
 80167fc:	3314      	adds	r3, #20
 80167fe:	4298      	cmp	r0, r3
 8016800:	d1f9      	bne.n	80167f6 <rmw_destroy_guard_condition+0xa>
 8016802:	4803      	ldr	r0, [pc, #12]	@ (8016810 <rmw_destroy_guard_condition+0x24>)
 8016804:	f7fe f8ec 	bl	80149e0 <put_memory>
 8016808:	2000      	movs	r0, #0
 801680a:	bd08      	pop	{r3, pc}
 801680c:	2001      	movs	r0, #1
 801680e:	bd08      	pop	{r3, pc}
 8016810:	2000abfc 	.word	0x2000abfc

08016814 <rmw_trigger_guard_condition>:
 8016814:	b160      	cbz	r0, 8016830 <rmw_trigger_guard_condition+0x1c>
 8016816:	b510      	push	{r4, lr}
 8016818:	4604      	mov	r4, r0
 801681a:	6800      	ldr	r0, [r0, #0]
 801681c:	f7f5 ffca 	bl	800c7b4 <is_uxrce_rmw_identifier_valid>
 8016820:	b908      	cbnz	r0, 8016826 <rmw_trigger_guard_condition+0x12>
 8016822:	2001      	movs	r0, #1
 8016824:	bd10      	pop	{r4, pc}
 8016826:	6863      	ldr	r3, [r4, #4]
 8016828:	2201      	movs	r2, #1
 801682a:	741a      	strb	r2, [r3, #16]
 801682c:	2000      	movs	r0, #0
 801682e:	bd10      	pop	{r4, pc}
 8016830:	2001      	movs	r0, #1
 8016832:	4770      	bx	lr

08016834 <calloc>:
 8016834:	4b02      	ldr	r3, [pc, #8]	@ (8016840 <calloc+0xc>)
 8016836:	460a      	mov	r2, r1
 8016838:	4601      	mov	r1, r0
 801683a:	6818      	ldr	r0, [r3, #0]
 801683c:	f000 b802 	b.w	8016844 <_calloc_r>
 8016840:	200000c4 	.word	0x200000c4

08016844 <_calloc_r>:
 8016844:	b570      	push	{r4, r5, r6, lr}
 8016846:	fba1 5402 	umull	r5, r4, r1, r2
 801684a:	b934      	cbnz	r4, 801685a <_calloc_r+0x16>
 801684c:	4629      	mov	r1, r5
 801684e:	f000 f887 	bl	8016960 <_malloc_r>
 8016852:	4606      	mov	r6, r0
 8016854:	b928      	cbnz	r0, 8016862 <_calloc_r+0x1e>
 8016856:	4630      	mov	r0, r6
 8016858:	bd70      	pop	{r4, r5, r6, pc}
 801685a:	220c      	movs	r2, #12
 801685c:	6002      	str	r2, [r0, #0]
 801685e:	2600      	movs	r6, #0
 8016860:	e7f9      	b.n	8016856 <_calloc_r+0x12>
 8016862:	462a      	mov	r2, r5
 8016864:	4621      	mov	r1, r4
 8016866:	f000 fbd5 	bl	8017014 <memset>
 801686a:	e7f4      	b.n	8016856 <_calloc_r+0x12>

0801686c <getenv>:
 801686c:	b507      	push	{r0, r1, r2, lr}
 801686e:	4b04      	ldr	r3, [pc, #16]	@ (8016880 <getenv+0x14>)
 8016870:	4601      	mov	r1, r0
 8016872:	aa01      	add	r2, sp, #4
 8016874:	6818      	ldr	r0, [r3, #0]
 8016876:	f000 f805 	bl	8016884 <_findenv_r>
 801687a:	b003      	add	sp, #12
 801687c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016880:	200000c4 	.word	0x200000c4

08016884 <_findenv_r>:
 8016884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016888:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80168f8 <_findenv_r+0x74>
 801688c:	4606      	mov	r6, r0
 801688e:	4689      	mov	r9, r1
 8016890:	4617      	mov	r7, r2
 8016892:	f000 fcb5 	bl	8017200 <__env_lock>
 8016896:	f8da 4000 	ldr.w	r4, [sl]
 801689a:	b134      	cbz	r4, 80168aa <_findenv_r+0x26>
 801689c:	464b      	mov	r3, r9
 801689e:	4698      	mov	r8, r3
 80168a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168a4:	b13a      	cbz	r2, 80168b6 <_findenv_r+0x32>
 80168a6:	2a3d      	cmp	r2, #61	@ 0x3d
 80168a8:	d1f9      	bne.n	801689e <_findenv_r+0x1a>
 80168aa:	4630      	mov	r0, r6
 80168ac:	f000 fcae 	bl	801720c <__env_unlock>
 80168b0:	2000      	movs	r0, #0
 80168b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b6:	eba8 0809 	sub.w	r8, r8, r9
 80168ba:	46a3      	mov	fp, r4
 80168bc:	f854 0b04 	ldr.w	r0, [r4], #4
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d0f2      	beq.n	80168aa <_findenv_r+0x26>
 80168c4:	4642      	mov	r2, r8
 80168c6:	4649      	mov	r1, r9
 80168c8:	f000 fbb9 	bl	801703e <strncmp>
 80168cc:	2800      	cmp	r0, #0
 80168ce:	d1f4      	bne.n	80168ba <_findenv_r+0x36>
 80168d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80168d4:	eb03 0508 	add.w	r5, r3, r8
 80168d8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80168dc:	2b3d      	cmp	r3, #61	@ 0x3d
 80168de:	d1ec      	bne.n	80168ba <_findenv_r+0x36>
 80168e0:	f8da 3000 	ldr.w	r3, [sl]
 80168e4:	ebab 0303 	sub.w	r3, fp, r3
 80168e8:	109b      	asrs	r3, r3, #2
 80168ea:	4630      	mov	r0, r6
 80168ec:	603b      	str	r3, [r7, #0]
 80168ee:	f000 fc8d 	bl	801720c <__env_unlock>
 80168f2:	1c68      	adds	r0, r5, #1
 80168f4:	e7dd      	b.n	80168b2 <_findenv_r+0x2e>
 80168f6:	bf00      	nop
 80168f8:	20000004 	.word	0x20000004

080168fc <malloc>:
 80168fc:	4b02      	ldr	r3, [pc, #8]	@ (8016908 <malloc+0xc>)
 80168fe:	4601      	mov	r1, r0
 8016900:	6818      	ldr	r0, [r3, #0]
 8016902:	f000 b82d 	b.w	8016960 <_malloc_r>
 8016906:	bf00      	nop
 8016908:	200000c4 	.word	0x200000c4

0801690c <free>:
 801690c:	4b02      	ldr	r3, [pc, #8]	@ (8016918 <free+0xc>)
 801690e:	4601      	mov	r1, r0
 8016910:	6818      	ldr	r0, [r3, #0]
 8016912:	f000 bc81 	b.w	8017218 <_free_r>
 8016916:	bf00      	nop
 8016918:	200000c4 	.word	0x200000c4

0801691c <sbrk_aligned>:
 801691c:	b570      	push	{r4, r5, r6, lr}
 801691e:	4e0f      	ldr	r6, [pc, #60]	@ (801695c <sbrk_aligned+0x40>)
 8016920:	460c      	mov	r4, r1
 8016922:	6831      	ldr	r1, [r6, #0]
 8016924:	4605      	mov	r5, r0
 8016926:	b911      	cbnz	r1, 801692e <sbrk_aligned+0x12>
 8016928:	f000 fbe6 	bl	80170f8 <_sbrk_r>
 801692c:	6030      	str	r0, [r6, #0]
 801692e:	4621      	mov	r1, r4
 8016930:	4628      	mov	r0, r5
 8016932:	f000 fbe1 	bl	80170f8 <_sbrk_r>
 8016936:	1c43      	adds	r3, r0, #1
 8016938:	d103      	bne.n	8016942 <sbrk_aligned+0x26>
 801693a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801693e:	4620      	mov	r0, r4
 8016940:	bd70      	pop	{r4, r5, r6, pc}
 8016942:	1cc4      	adds	r4, r0, #3
 8016944:	f024 0403 	bic.w	r4, r4, #3
 8016948:	42a0      	cmp	r0, r4
 801694a:	d0f8      	beq.n	801693e <sbrk_aligned+0x22>
 801694c:	1a21      	subs	r1, r4, r0
 801694e:	4628      	mov	r0, r5
 8016950:	f000 fbd2 	bl	80170f8 <_sbrk_r>
 8016954:	3001      	adds	r0, #1
 8016956:	d1f2      	bne.n	801693e <sbrk_aligned+0x22>
 8016958:	e7ef      	b.n	801693a <sbrk_aligned+0x1e>
 801695a:	bf00      	nop
 801695c:	2000ade8 	.word	0x2000ade8

08016960 <_malloc_r>:
 8016960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016964:	1ccd      	adds	r5, r1, #3
 8016966:	f025 0503 	bic.w	r5, r5, #3
 801696a:	3508      	adds	r5, #8
 801696c:	2d0c      	cmp	r5, #12
 801696e:	bf38      	it	cc
 8016970:	250c      	movcc	r5, #12
 8016972:	2d00      	cmp	r5, #0
 8016974:	4606      	mov	r6, r0
 8016976:	db01      	blt.n	801697c <_malloc_r+0x1c>
 8016978:	42a9      	cmp	r1, r5
 801697a:	d904      	bls.n	8016986 <_malloc_r+0x26>
 801697c:	230c      	movs	r3, #12
 801697e:	6033      	str	r3, [r6, #0]
 8016980:	2000      	movs	r0, #0
 8016982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016a5c <_malloc_r+0xfc>
 801698a:	f000 f869 	bl	8016a60 <__malloc_lock>
 801698e:	f8d8 3000 	ldr.w	r3, [r8]
 8016992:	461c      	mov	r4, r3
 8016994:	bb44      	cbnz	r4, 80169e8 <_malloc_r+0x88>
 8016996:	4629      	mov	r1, r5
 8016998:	4630      	mov	r0, r6
 801699a:	f7ff ffbf 	bl	801691c <sbrk_aligned>
 801699e:	1c43      	adds	r3, r0, #1
 80169a0:	4604      	mov	r4, r0
 80169a2:	d158      	bne.n	8016a56 <_malloc_r+0xf6>
 80169a4:	f8d8 4000 	ldr.w	r4, [r8]
 80169a8:	4627      	mov	r7, r4
 80169aa:	2f00      	cmp	r7, #0
 80169ac:	d143      	bne.n	8016a36 <_malloc_r+0xd6>
 80169ae:	2c00      	cmp	r4, #0
 80169b0:	d04b      	beq.n	8016a4a <_malloc_r+0xea>
 80169b2:	6823      	ldr	r3, [r4, #0]
 80169b4:	4639      	mov	r1, r7
 80169b6:	4630      	mov	r0, r6
 80169b8:	eb04 0903 	add.w	r9, r4, r3
 80169bc:	f000 fb9c 	bl	80170f8 <_sbrk_r>
 80169c0:	4581      	cmp	r9, r0
 80169c2:	d142      	bne.n	8016a4a <_malloc_r+0xea>
 80169c4:	6821      	ldr	r1, [r4, #0]
 80169c6:	1a6d      	subs	r5, r5, r1
 80169c8:	4629      	mov	r1, r5
 80169ca:	4630      	mov	r0, r6
 80169cc:	f7ff ffa6 	bl	801691c <sbrk_aligned>
 80169d0:	3001      	adds	r0, #1
 80169d2:	d03a      	beq.n	8016a4a <_malloc_r+0xea>
 80169d4:	6823      	ldr	r3, [r4, #0]
 80169d6:	442b      	add	r3, r5
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	f8d8 3000 	ldr.w	r3, [r8]
 80169de:	685a      	ldr	r2, [r3, #4]
 80169e0:	bb62      	cbnz	r2, 8016a3c <_malloc_r+0xdc>
 80169e2:	f8c8 7000 	str.w	r7, [r8]
 80169e6:	e00f      	b.n	8016a08 <_malloc_r+0xa8>
 80169e8:	6822      	ldr	r2, [r4, #0]
 80169ea:	1b52      	subs	r2, r2, r5
 80169ec:	d420      	bmi.n	8016a30 <_malloc_r+0xd0>
 80169ee:	2a0b      	cmp	r2, #11
 80169f0:	d917      	bls.n	8016a22 <_malloc_r+0xc2>
 80169f2:	1961      	adds	r1, r4, r5
 80169f4:	42a3      	cmp	r3, r4
 80169f6:	6025      	str	r5, [r4, #0]
 80169f8:	bf18      	it	ne
 80169fa:	6059      	strne	r1, [r3, #4]
 80169fc:	6863      	ldr	r3, [r4, #4]
 80169fe:	bf08      	it	eq
 8016a00:	f8c8 1000 	streq.w	r1, [r8]
 8016a04:	5162      	str	r2, [r4, r5]
 8016a06:	604b      	str	r3, [r1, #4]
 8016a08:	4630      	mov	r0, r6
 8016a0a:	f000 f82f 	bl	8016a6c <__malloc_unlock>
 8016a0e:	f104 000b 	add.w	r0, r4, #11
 8016a12:	1d23      	adds	r3, r4, #4
 8016a14:	f020 0007 	bic.w	r0, r0, #7
 8016a18:	1ac2      	subs	r2, r0, r3
 8016a1a:	bf1c      	itt	ne
 8016a1c:	1a1b      	subne	r3, r3, r0
 8016a1e:	50a3      	strne	r3, [r4, r2]
 8016a20:	e7af      	b.n	8016982 <_malloc_r+0x22>
 8016a22:	6862      	ldr	r2, [r4, #4]
 8016a24:	42a3      	cmp	r3, r4
 8016a26:	bf0c      	ite	eq
 8016a28:	f8c8 2000 	streq.w	r2, [r8]
 8016a2c:	605a      	strne	r2, [r3, #4]
 8016a2e:	e7eb      	b.n	8016a08 <_malloc_r+0xa8>
 8016a30:	4623      	mov	r3, r4
 8016a32:	6864      	ldr	r4, [r4, #4]
 8016a34:	e7ae      	b.n	8016994 <_malloc_r+0x34>
 8016a36:	463c      	mov	r4, r7
 8016a38:	687f      	ldr	r7, [r7, #4]
 8016a3a:	e7b6      	b.n	80169aa <_malloc_r+0x4a>
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	685b      	ldr	r3, [r3, #4]
 8016a40:	42a3      	cmp	r3, r4
 8016a42:	d1fb      	bne.n	8016a3c <_malloc_r+0xdc>
 8016a44:	2300      	movs	r3, #0
 8016a46:	6053      	str	r3, [r2, #4]
 8016a48:	e7de      	b.n	8016a08 <_malloc_r+0xa8>
 8016a4a:	230c      	movs	r3, #12
 8016a4c:	6033      	str	r3, [r6, #0]
 8016a4e:	4630      	mov	r0, r6
 8016a50:	f000 f80c 	bl	8016a6c <__malloc_unlock>
 8016a54:	e794      	b.n	8016980 <_malloc_r+0x20>
 8016a56:	6005      	str	r5, [r0, #0]
 8016a58:	e7d6      	b.n	8016a08 <_malloc_r+0xa8>
 8016a5a:	bf00      	nop
 8016a5c:	2000adec 	.word	0x2000adec

08016a60 <__malloc_lock>:
 8016a60:	4801      	ldr	r0, [pc, #4]	@ (8016a68 <__malloc_lock+0x8>)
 8016a62:	f000 bb96 	b.w	8017192 <__retarget_lock_acquire_recursive>
 8016a66:	bf00      	nop
 8016a68:	2000af31 	.word	0x2000af31

08016a6c <__malloc_unlock>:
 8016a6c:	4801      	ldr	r0, [pc, #4]	@ (8016a74 <__malloc_unlock+0x8>)
 8016a6e:	f000 bb91 	b.w	8017194 <__retarget_lock_release_recursive>
 8016a72:	bf00      	nop
 8016a74:	2000af31 	.word	0x2000af31

08016a78 <srand>:
 8016a78:	b538      	push	{r3, r4, r5, lr}
 8016a7a:	4b10      	ldr	r3, [pc, #64]	@ (8016abc <srand+0x44>)
 8016a7c:	681d      	ldr	r5, [r3, #0]
 8016a7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016a80:	4604      	mov	r4, r0
 8016a82:	b9b3      	cbnz	r3, 8016ab2 <srand+0x3a>
 8016a84:	2018      	movs	r0, #24
 8016a86:	f7ff ff39 	bl	80168fc <malloc>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	6328      	str	r0, [r5, #48]	@ 0x30
 8016a8e:	b920      	cbnz	r0, 8016a9a <srand+0x22>
 8016a90:	4b0b      	ldr	r3, [pc, #44]	@ (8016ac0 <srand+0x48>)
 8016a92:	480c      	ldr	r0, [pc, #48]	@ (8016ac4 <srand+0x4c>)
 8016a94:	2146      	movs	r1, #70	@ 0x46
 8016a96:	f000 fb95 	bl	80171c4 <__assert_func>
 8016a9a:	490b      	ldr	r1, [pc, #44]	@ (8016ac8 <srand+0x50>)
 8016a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8016acc <srand+0x54>)
 8016a9e:	e9c0 1300 	strd	r1, r3, [r0]
 8016aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8016ad0 <srand+0x58>)
 8016aa4:	6083      	str	r3, [r0, #8]
 8016aa6:	230b      	movs	r3, #11
 8016aa8:	8183      	strh	r3, [r0, #12]
 8016aaa:	2100      	movs	r1, #0
 8016aac:	2001      	movs	r0, #1
 8016aae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016ab2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	611c      	str	r4, [r3, #16]
 8016ab8:	615a      	str	r2, [r3, #20]
 8016aba:	bd38      	pop	{r3, r4, r5, pc}
 8016abc:	200000c4 	.word	0x200000c4
 8016ac0:	08018ad0 	.word	0x08018ad0
 8016ac4:	08018ae7 	.word	0x08018ae7
 8016ac8:	abcd330e 	.word	0xabcd330e
 8016acc:	e66d1234 	.word	0xe66d1234
 8016ad0:	0005deec 	.word	0x0005deec

08016ad4 <rand>:
 8016ad4:	4b16      	ldr	r3, [pc, #88]	@ (8016b30 <rand+0x5c>)
 8016ad6:	b510      	push	{r4, lr}
 8016ad8:	681c      	ldr	r4, [r3, #0]
 8016ada:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016adc:	b9b3      	cbnz	r3, 8016b0c <rand+0x38>
 8016ade:	2018      	movs	r0, #24
 8016ae0:	f7ff ff0c 	bl	80168fc <malloc>
 8016ae4:	4602      	mov	r2, r0
 8016ae6:	6320      	str	r0, [r4, #48]	@ 0x30
 8016ae8:	b920      	cbnz	r0, 8016af4 <rand+0x20>
 8016aea:	4b12      	ldr	r3, [pc, #72]	@ (8016b34 <rand+0x60>)
 8016aec:	4812      	ldr	r0, [pc, #72]	@ (8016b38 <rand+0x64>)
 8016aee:	2152      	movs	r1, #82	@ 0x52
 8016af0:	f000 fb68 	bl	80171c4 <__assert_func>
 8016af4:	4911      	ldr	r1, [pc, #68]	@ (8016b3c <rand+0x68>)
 8016af6:	4b12      	ldr	r3, [pc, #72]	@ (8016b40 <rand+0x6c>)
 8016af8:	e9c0 1300 	strd	r1, r3, [r0]
 8016afc:	4b11      	ldr	r3, [pc, #68]	@ (8016b44 <rand+0x70>)
 8016afe:	6083      	str	r3, [r0, #8]
 8016b00:	230b      	movs	r3, #11
 8016b02:	8183      	strh	r3, [r0, #12]
 8016b04:	2100      	movs	r1, #0
 8016b06:	2001      	movs	r0, #1
 8016b08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b0e:	480e      	ldr	r0, [pc, #56]	@ (8016b48 <rand+0x74>)
 8016b10:	690b      	ldr	r3, [r1, #16]
 8016b12:	694c      	ldr	r4, [r1, #20]
 8016b14:	4a0d      	ldr	r2, [pc, #52]	@ (8016b4c <rand+0x78>)
 8016b16:	4358      	muls	r0, r3
 8016b18:	fb02 0004 	mla	r0, r2, r4, r0
 8016b1c:	fba3 3202 	umull	r3, r2, r3, r2
 8016b20:	3301      	adds	r3, #1
 8016b22:	eb40 0002 	adc.w	r0, r0, r2
 8016b26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b2e:	bd10      	pop	{r4, pc}
 8016b30:	200000c4 	.word	0x200000c4
 8016b34:	08018ad0 	.word	0x08018ad0
 8016b38:	08018ae7 	.word	0x08018ae7
 8016b3c:	abcd330e 	.word	0xabcd330e
 8016b40:	e66d1234 	.word	0xe66d1234
 8016b44:	0005deec 	.word	0x0005deec
 8016b48:	5851f42d 	.word	0x5851f42d
 8016b4c:	4c957f2d 	.word	0x4c957f2d

08016b50 <realloc>:
 8016b50:	4b02      	ldr	r3, [pc, #8]	@ (8016b5c <realloc+0xc>)
 8016b52:	460a      	mov	r2, r1
 8016b54:	4601      	mov	r1, r0
 8016b56:	6818      	ldr	r0, [r3, #0]
 8016b58:	f000 b802 	b.w	8016b60 <_realloc_r>
 8016b5c:	200000c4 	.word	0x200000c4

08016b60 <_realloc_r>:
 8016b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b64:	4607      	mov	r7, r0
 8016b66:	4614      	mov	r4, r2
 8016b68:	460d      	mov	r5, r1
 8016b6a:	b921      	cbnz	r1, 8016b76 <_realloc_r+0x16>
 8016b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b70:	4611      	mov	r1, r2
 8016b72:	f7ff bef5 	b.w	8016960 <_malloc_r>
 8016b76:	b92a      	cbnz	r2, 8016b84 <_realloc_r+0x24>
 8016b78:	f000 fb4e 	bl	8017218 <_free_r>
 8016b7c:	4625      	mov	r5, r4
 8016b7e:	4628      	mov	r0, r5
 8016b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b84:	f000 fb92 	bl	80172ac <_malloc_usable_size_r>
 8016b88:	4284      	cmp	r4, r0
 8016b8a:	4606      	mov	r6, r0
 8016b8c:	d802      	bhi.n	8016b94 <_realloc_r+0x34>
 8016b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016b92:	d8f4      	bhi.n	8016b7e <_realloc_r+0x1e>
 8016b94:	4621      	mov	r1, r4
 8016b96:	4638      	mov	r0, r7
 8016b98:	f7ff fee2 	bl	8016960 <_malloc_r>
 8016b9c:	4680      	mov	r8, r0
 8016b9e:	b908      	cbnz	r0, 8016ba4 <_realloc_r+0x44>
 8016ba0:	4645      	mov	r5, r8
 8016ba2:	e7ec      	b.n	8016b7e <_realloc_r+0x1e>
 8016ba4:	42b4      	cmp	r4, r6
 8016ba6:	4622      	mov	r2, r4
 8016ba8:	4629      	mov	r1, r5
 8016baa:	bf28      	it	cs
 8016bac:	4632      	movcs	r2, r6
 8016bae:	f000 fafa 	bl	80171a6 <memcpy>
 8016bb2:	4629      	mov	r1, r5
 8016bb4:	4638      	mov	r0, r7
 8016bb6:	f000 fb2f 	bl	8017218 <_free_r>
 8016bba:	e7f1      	b.n	8016ba0 <_realloc_r+0x40>

08016bbc <_strtoul_l.isra.0>:
 8016bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bc0:	4e34      	ldr	r6, [pc, #208]	@ (8016c94 <_strtoul_l.isra.0+0xd8>)
 8016bc2:	4686      	mov	lr, r0
 8016bc4:	460d      	mov	r5, r1
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bcc:	5d37      	ldrb	r7, [r6, r4]
 8016bce:	f017 0708 	ands.w	r7, r7, #8
 8016bd2:	d1f8      	bne.n	8016bc6 <_strtoul_l.isra.0+0xa>
 8016bd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016bd6:	d110      	bne.n	8016bfa <_strtoul_l.isra.0+0x3e>
 8016bd8:	782c      	ldrb	r4, [r5, #0]
 8016bda:	2701      	movs	r7, #1
 8016bdc:	1c85      	adds	r5, r0, #2
 8016bde:	f033 0010 	bics.w	r0, r3, #16
 8016be2:	d115      	bne.n	8016c10 <_strtoul_l.isra.0+0x54>
 8016be4:	2c30      	cmp	r4, #48	@ 0x30
 8016be6:	d10d      	bne.n	8016c04 <_strtoul_l.isra.0+0x48>
 8016be8:	7828      	ldrb	r0, [r5, #0]
 8016bea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016bee:	2858      	cmp	r0, #88	@ 0x58
 8016bf0:	d108      	bne.n	8016c04 <_strtoul_l.isra.0+0x48>
 8016bf2:	786c      	ldrb	r4, [r5, #1]
 8016bf4:	3502      	adds	r5, #2
 8016bf6:	2310      	movs	r3, #16
 8016bf8:	e00a      	b.n	8016c10 <_strtoul_l.isra.0+0x54>
 8016bfa:	2c2b      	cmp	r4, #43	@ 0x2b
 8016bfc:	bf04      	itt	eq
 8016bfe:	782c      	ldrbeq	r4, [r5, #0]
 8016c00:	1c85      	addeq	r5, r0, #2
 8016c02:	e7ec      	b.n	8016bde <_strtoul_l.isra.0+0x22>
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d1f6      	bne.n	8016bf6 <_strtoul_l.isra.0+0x3a>
 8016c08:	2c30      	cmp	r4, #48	@ 0x30
 8016c0a:	bf14      	ite	ne
 8016c0c:	230a      	movne	r3, #10
 8016c0e:	2308      	moveq	r3, #8
 8016c10:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016c14:	2600      	movs	r6, #0
 8016c16:	fbb8 f8f3 	udiv	r8, r8, r3
 8016c1a:	fb03 f908 	mul.w	r9, r3, r8
 8016c1e:	ea6f 0909 	mvn.w	r9, r9
 8016c22:	4630      	mov	r0, r6
 8016c24:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016c28:	f1bc 0f09 	cmp.w	ip, #9
 8016c2c:	d810      	bhi.n	8016c50 <_strtoul_l.isra.0+0x94>
 8016c2e:	4664      	mov	r4, ip
 8016c30:	42a3      	cmp	r3, r4
 8016c32:	dd1e      	ble.n	8016c72 <_strtoul_l.isra.0+0xb6>
 8016c34:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016c38:	d007      	beq.n	8016c4a <_strtoul_l.isra.0+0x8e>
 8016c3a:	4580      	cmp	r8, r0
 8016c3c:	d316      	bcc.n	8016c6c <_strtoul_l.isra.0+0xb0>
 8016c3e:	d101      	bne.n	8016c44 <_strtoul_l.isra.0+0x88>
 8016c40:	45a1      	cmp	r9, r4
 8016c42:	db13      	blt.n	8016c6c <_strtoul_l.isra.0+0xb0>
 8016c44:	fb00 4003 	mla	r0, r0, r3, r4
 8016c48:	2601      	movs	r6, #1
 8016c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c4e:	e7e9      	b.n	8016c24 <_strtoul_l.isra.0+0x68>
 8016c50:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016c54:	f1bc 0f19 	cmp.w	ip, #25
 8016c58:	d801      	bhi.n	8016c5e <_strtoul_l.isra.0+0xa2>
 8016c5a:	3c37      	subs	r4, #55	@ 0x37
 8016c5c:	e7e8      	b.n	8016c30 <_strtoul_l.isra.0+0x74>
 8016c5e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016c62:	f1bc 0f19 	cmp.w	ip, #25
 8016c66:	d804      	bhi.n	8016c72 <_strtoul_l.isra.0+0xb6>
 8016c68:	3c57      	subs	r4, #87	@ 0x57
 8016c6a:	e7e1      	b.n	8016c30 <_strtoul_l.isra.0+0x74>
 8016c6c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016c70:	e7eb      	b.n	8016c4a <_strtoul_l.isra.0+0x8e>
 8016c72:	1c73      	adds	r3, r6, #1
 8016c74:	d106      	bne.n	8016c84 <_strtoul_l.isra.0+0xc8>
 8016c76:	2322      	movs	r3, #34	@ 0x22
 8016c78:	f8ce 3000 	str.w	r3, [lr]
 8016c7c:	4630      	mov	r0, r6
 8016c7e:	b932      	cbnz	r2, 8016c8e <_strtoul_l.isra.0+0xd2>
 8016c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c84:	b107      	cbz	r7, 8016c88 <_strtoul_l.isra.0+0xcc>
 8016c86:	4240      	negs	r0, r0
 8016c88:	2a00      	cmp	r2, #0
 8016c8a:	d0f9      	beq.n	8016c80 <_strtoul_l.isra.0+0xc4>
 8016c8c:	b106      	cbz	r6, 8016c90 <_strtoul_l.isra.0+0xd4>
 8016c8e:	1e69      	subs	r1, r5, #1
 8016c90:	6011      	str	r1, [r2, #0]
 8016c92:	e7f5      	b.n	8016c80 <_strtoul_l.isra.0+0xc4>
 8016c94:	08018baf 	.word	0x08018baf

08016c98 <strtoul>:
 8016c98:	4613      	mov	r3, r2
 8016c9a:	460a      	mov	r2, r1
 8016c9c:	4601      	mov	r1, r0
 8016c9e:	4802      	ldr	r0, [pc, #8]	@ (8016ca8 <strtoul+0x10>)
 8016ca0:	6800      	ldr	r0, [r0, #0]
 8016ca2:	f7ff bf8b 	b.w	8016bbc <_strtoul_l.isra.0>
 8016ca6:	bf00      	nop
 8016ca8:	200000c4 	.word	0x200000c4

08016cac <std>:
 8016cac:	2300      	movs	r3, #0
 8016cae:	b510      	push	{r4, lr}
 8016cb0:	4604      	mov	r4, r0
 8016cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8016cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cba:	6083      	str	r3, [r0, #8]
 8016cbc:	8181      	strh	r1, [r0, #12]
 8016cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8016cc0:	81c2      	strh	r2, [r0, #14]
 8016cc2:	6183      	str	r3, [r0, #24]
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	2208      	movs	r2, #8
 8016cc8:	305c      	adds	r0, #92	@ 0x5c
 8016cca:	f000 f9a3 	bl	8017014 <memset>
 8016cce:	4b0d      	ldr	r3, [pc, #52]	@ (8016d04 <std+0x58>)
 8016cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8016d08 <std+0x5c>)
 8016cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8016d0c <std+0x60>)
 8016cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cda:	4b0d      	ldr	r3, [pc, #52]	@ (8016d10 <std+0x64>)
 8016cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8016cde:	4b0d      	ldr	r3, [pc, #52]	@ (8016d14 <std+0x68>)
 8016ce0:	6224      	str	r4, [r4, #32]
 8016ce2:	429c      	cmp	r4, r3
 8016ce4:	d006      	beq.n	8016cf4 <std+0x48>
 8016ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016cea:	4294      	cmp	r4, r2
 8016cec:	d002      	beq.n	8016cf4 <std+0x48>
 8016cee:	33d0      	adds	r3, #208	@ 0xd0
 8016cf0:	429c      	cmp	r4, r3
 8016cf2:	d105      	bne.n	8016d00 <std+0x54>
 8016cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cfc:	f000 ba48 	b.w	8017190 <__retarget_lock_init_recursive>
 8016d00:	bd10      	pop	{r4, pc}
 8016d02:	bf00      	nop
 8016d04:	08016ec1 	.word	0x08016ec1
 8016d08:	08016ee3 	.word	0x08016ee3
 8016d0c:	08016f1b 	.word	0x08016f1b
 8016d10:	08016f3f 	.word	0x08016f3f
 8016d14:	2000adf0 	.word	0x2000adf0

08016d18 <stdio_exit_handler>:
 8016d18:	4a02      	ldr	r2, [pc, #8]	@ (8016d24 <stdio_exit_handler+0xc>)
 8016d1a:	4903      	ldr	r1, [pc, #12]	@ (8016d28 <stdio_exit_handler+0x10>)
 8016d1c:	4803      	ldr	r0, [pc, #12]	@ (8016d2c <stdio_exit_handler+0x14>)
 8016d1e:	f000 b869 	b.w	8016df4 <_fwalk_sglue>
 8016d22:	bf00      	nop
 8016d24:	200000b8 	.word	0x200000b8
 8016d28:	08017c11 	.word	0x08017c11
 8016d2c:	200000c8 	.word	0x200000c8

08016d30 <cleanup_stdio>:
 8016d30:	6841      	ldr	r1, [r0, #4]
 8016d32:	4b0c      	ldr	r3, [pc, #48]	@ (8016d64 <cleanup_stdio+0x34>)
 8016d34:	4299      	cmp	r1, r3
 8016d36:	b510      	push	{r4, lr}
 8016d38:	4604      	mov	r4, r0
 8016d3a:	d001      	beq.n	8016d40 <cleanup_stdio+0x10>
 8016d3c:	f000 ff68 	bl	8017c10 <_fflush_r>
 8016d40:	68a1      	ldr	r1, [r4, #8]
 8016d42:	4b09      	ldr	r3, [pc, #36]	@ (8016d68 <cleanup_stdio+0x38>)
 8016d44:	4299      	cmp	r1, r3
 8016d46:	d002      	beq.n	8016d4e <cleanup_stdio+0x1e>
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f000 ff61 	bl	8017c10 <_fflush_r>
 8016d4e:	68e1      	ldr	r1, [r4, #12]
 8016d50:	4b06      	ldr	r3, [pc, #24]	@ (8016d6c <cleanup_stdio+0x3c>)
 8016d52:	4299      	cmp	r1, r3
 8016d54:	d004      	beq.n	8016d60 <cleanup_stdio+0x30>
 8016d56:	4620      	mov	r0, r4
 8016d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d5c:	f000 bf58 	b.w	8017c10 <_fflush_r>
 8016d60:	bd10      	pop	{r4, pc}
 8016d62:	bf00      	nop
 8016d64:	2000adf0 	.word	0x2000adf0
 8016d68:	2000ae58 	.word	0x2000ae58
 8016d6c:	2000aec0 	.word	0x2000aec0

08016d70 <global_stdio_init.part.0>:
 8016d70:	b510      	push	{r4, lr}
 8016d72:	4b0b      	ldr	r3, [pc, #44]	@ (8016da0 <global_stdio_init.part.0+0x30>)
 8016d74:	4c0b      	ldr	r4, [pc, #44]	@ (8016da4 <global_stdio_init.part.0+0x34>)
 8016d76:	4a0c      	ldr	r2, [pc, #48]	@ (8016da8 <global_stdio_init.part.0+0x38>)
 8016d78:	601a      	str	r2, [r3, #0]
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	2104      	movs	r1, #4
 8016d80:	f7ff ff94 	bl	8016cac <std>
 8016d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016d88:	2201      	movs	r2, #1
 8016d8a:	2109      	movs	r1, #9
 8016d8c:	f7ff ff8e 	bl	8016cac <std>
 8016d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016d94:	2202      	movs	r2, #2
 8016d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d9a:	2112      	movs	r1, #18
 8016d9c:	f7ff bf86 	b.w	8016cac <std>
 8016da0:	2000af28 	.word	0x2000af28
 8016da4:	2000adf0 	.word	0x2000adf0
 8016da8:	08016d19 	.word	0x08016d19

08016dac <__sfp_lock_acquire>:
 8016dac:	4801      	ldr	r0, [pc, #4]	@ (8016db4 <__sfp_lock_acquire+0x8>)
 8016dae:	f000 b9f0 	b.w	8017192 <__retarget_lock_acquire_recursive>
 8016db2:	bf00      	nop
 8016db4:	2000af32 	.word	0x2000af32

08016db8 <__sfp_lock_release>:
 8016db8:	4801      	ldr	r0, [pc, #4]	@ (8016dc0 <__sfp_lock_release+0x8>)
 8016dba:	f000 b9eb 	b.w	8017194 <__retarget_lock_release_recursive>
 8016dbe:	bf00      	nop
 8016dc0:	2000af32 	.word	0x2000af32

08016dc4 <__sinit>:
 8016dc4:	b510      	push	{r4, lr}
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	f7ff fff0 	bl	8016dac <__sfp_lock_acquire>
 8016dcc:	6a23      	ldr	r3, [r4, #32]
 8016dce:	b11b      	cbz	r3, 8016dd8 <__sinit+0x14>
 8016dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dd4:	f7ff bff0 	b.w	8016db8 <__sfp_lock_release>
 8016dd8:	4b04      	ldr	r3, [pc, #16]	@ (8016dec <__sinit+0x28>)
 8016dda:	6223      	str	r3, [r4, #32]
 8016ddc:	4b04      	ldr	r3, [pc, #16]	@ (8016df0 <__sinit+0x2c>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d1f5      	bne.n	8016dd0 <__sinit+0xc>
 8016de4:	f7ff ffc4 	bl	8016d70 <global_stdio_init.part.0>
 8016de8:	e7f2      	b.n	8016dd0 <__sinit+0xc>
 8016dea:	bf00      	nop
 8016dec:	08016d31 	.word	0x08016d31
 8016df0:	2000af28 	.word	0x2000af28

08016df4 <_fwalk_sglue>:
 8016df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016df8:	4607      	mov	r7, r0
 8016dfa:	4688      	mov	r8, r1
 8016dfc:	4614      	mov	r4, r2
 8016dfe:	2600      	movs	r6, #0
 8016e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e04:	f1b9 0901 	subs.w	r9, r9, #1
 8016e08:	d505      	bpl.n	8016e16 <_fwalk_sglue+0x22>
 8016e0a:	6824      	ldr	r4, [r4, #0]
 8016e0c:	2c00      	cmp	r4, #0
 8016e0e:	d1f7      	bne.n	8016e00 <_fwalk_sglue+0xc>
 8016e10:	4630      	mov	r0, r6
 8016e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e16:	89ab      	ldrh	r3, [r5, #12]
 8016e18:	2b01      	cmp	r3, #1
 8016e1a:	d907      	bls.n	8016e2c <_fwalk_sglue+0x38>
 8016e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e20:	3301      	adds	r3, #1
 8016e22:	d003      	beq.n	8016e2c <_fwalk_sglue+0x38>
 8016e24:	4629      	mov	r1, r5
 8016e26:	4638      	mov	r0, r7
 8016e28:	47c0      	blx	r8
 8016e2a:	4306      	orrs	r6, r0
 8016e2c:	3568      	adds	r5, #104	@ 0x68
 8016e2e:	e7e9      	b.n	8016e04 <_fwalk_sglue+0x10>

08016e30 <iprintf>:
 8016e30:	b40f      	push	{r0, r1, r2, r3}
 8016e32:	b507      	push	{r0, r1, r2, lr}
 8016e34:	4906      	ldr	r1, [pc, #24]	@ (8016e50 <iprintf+0x20>)
 8016e36:	ab04      	add	r3, sp, #16
 8016e38:	6808      	ldr	r0, [r1, #0]
 8016e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e3e:	6881      	ldr	r1, [r0, #8]
 8016e40:	9301      	str	r3, [sp, #4]
 8016e42:	f000 fbbd 	bl	80175c0 <_vfiprintf_r>
 8016e46:	b003      	add	sp, #12
 8016e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e4c:	b004      	add	sp, #16
 8016e4e:	4770      	bx	lr
 8016e50:	200000c4 	.word	0x200000c4

08016e54 <sniprintf>:
 8016e54:	b40c      	push	{r2, r3}
 8016e56:	b530      	push	{r4, r5, lr}
 8016e58:	4b18      	ldr	r3, [pc, #96]	@ (8016ebc <sniprintf+0x68>)
 8016e5a:	1e0c      	subs	r4, r1, #0
 8016e5c:	681d      	ldr	r5, [r3, #0]
 8016e5e:	b09d      	sub	sp, #116	@ 0x74
 8016e60:	da08      	bge.n	8016e74 <sniprintf+0x20>
 8016e62:	238b      	movs	r3, #139	@ 0x8b
 8016e64:	602b      	str	r3, [r5, #0]
 8016e66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e6a:	b01d      	add	sp, #116	@ 0x74
 8016e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e70:	b002      	add	sp, #8
 8016e72:	4770      	bx	lr
 8016e74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016e78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e7c:	f04f 0300 	mov.w	r3, #0
 8016e80:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016e82:	bf14      	ite	ne
 8016e84:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016e88:	4623      	moveq	r3, r4
 8016e8a:	9304      	str	r3, [sp, #16]
 8016e8c:	9307      	str	r3, [sp, #28]
 8016e8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e92:	9002      	str	r0, [sp, #8]
 8016e94:	9006      	str	r0, [sp, #24]
 8016e96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016e9c:	ab21      	add	r3, sp, #132	@ 0x84
 8016e9e:	a902      	add	r1, sp, #8
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	9301      	str	r3, [sp, #4]
 8016ea4:	f000 fa66 	bl	8017374 <_svfiprintf_r>
 8016ea8:	1c43      	adds	r3, r0, #1
 8016eaa:	bfbc      	itt	lt
 8016eac:	238b      	movlt	r3, #139	@ 0x8b
 8016eae:	602b      	strlt	r3, [r5, #0]
 8016eb0:	2c00      	cmp	r4, #0
 8016eb2:	d0da      	beq.n	8016e6a <sniprintf+0x16>
 8016eb4:	9b02      	ldr	r3, [sp, #8]
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	701a      	strb	r2, [r3, #0]
 8016eba:	e7d6      	b.n	8016e6a <sniprintf+0x16>
 8016ebc:	200000c4 	.word	0x200000c4

08016ec0 <__sread>:
 8016ec0:	b510      	push	{r4, lr}
 8016ec2:	460c      	mov	r4, r1
 8016ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ec8:	f000 f904 	bl	80170d4 <_read_r>
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	bfab      	itete	ge
 8016ed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8016ed4:	181b      	addge	r3, r3, r0
 8016ed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016eda:	bfac      	ite	ge
 8016edc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016ede:	81a3      	strhlt	r3, [r4, #12]
 8016ee0:	bd10      	pop	{r4, pc}

08016ee2 <__swrite>:
 8016ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ee6:	461f      	mov	r7, r3
 8016ee8:	898b      	ldrh	r3, [r1, #12]
 8016eea:	05db      	lsls	r3, r3, #23
 8016eec:	4605      	mov	r5, r0
 8016eee:	460c      	mov	r4, r1
 8016ef0:	4616      	mov	r6, r2
 8016ef2:	d505      	bpl.n	8016f00 <__swrite+0x1e>
 8016ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ef8:	2302      	movs	r3, #2
 8016efa:	2200      	movs	r2, #0
 8016efc:	f000 f8d8 	bl	80170b0 <_lseek_r>
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f0a:	81a3      	strh	r3, [r4, #12]
 8016f0c:	4632      	mov	r2, r6
 8016f0e:	463b      	mov	r3, r7
 8016f10:	4628      	mov	r0, r5
 8016f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f16:	f000 b8ff 	b.w	8017118 <_write_r>

08016f1a <__sseek>:
 8016f1a:	b510      	push	{r4, lr}
 8016f1c:	460c      	mov	r4, r1
 8016f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f22:	f000 f8c5 	bl	80170b0 <_lseek_r>
 8016f26:	1c43      	adds	r3, r0, #1
 8016f28:	89a3      	ldrh	r3, [r4, #12]
 8016f2a:	bf15      	itete	ne
 8016f2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016f2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016f32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016f36:	81a3      	strheq	r3, [r4, #12]
 8016f38:	bf18      	it	ne
 8016f3a:	81a3      	strhne	r3, [r4, #12]
 8016f3c:	bd10      	pop	{r4, pc}

08016f3e <__sclose>:
 8016f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f42:	f000 b8a5 	b.w	8017090 <_close_r>

08016f46 <_vsniprintf_r>:
 8016f46:	b530      	push	{r4, r5, lr}
 8016f48:	4614      	mov	r4, r2
 8016f4a:	2c00      	cmp	r4, #0
 8016f4c:	b09b      	sub	sp, #108	@ 0x6c
 8016f4e:	4605      	mov	r5, r0
 8016f50:	461a      	mov	r2, r3
 8016f52:	da05      	bge.n	8016f60 <_vsniprintf_r+0x1a>
 8016f54:	238b      	movs	r3, #139	@ 0x8b
 8016f56:	6003      	str	r3, [r0, #0]
 8016f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f5c:	b01b      	add	sp, #108	@ 0x6c
 8016f5e:	bd30      	pop	{r4, r5, pc}
 8016f60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f68:	f04f 0300 	mov.w	r3, #0
 8016f6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f6e:	bf14      	ite	ne
 8016f70:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016f74:	4623      	moveq	r3, r4
 8016f76:	9302      	str	r3, [sp, #8]
 8016f78:	9305      	str	r3, [sp, #20]
 8016f7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f7e:	9100      	str	r1, [sp, #0]
 8016f80:	9104      	str	r1, [sp, #16]
 8016f82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016f86:	4669      	mov	r1, sp
 8016f88:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016f8a:	f000 f9f3 	bl	8017374 <_svfiprintf_r>
 8016f8e:	1c43      	adds	r3, r0, #1
 8016f90:	bfbc      	itt	lt
 8016f92:	238b      	movlt	r3, #139	@ 0x8b
 8016f94:	602b      	strlt	r3, [r5, #0]
 8016f96:	2c00      	cmp	r4, #0
 8016f98:	d0e0      	beq.n	8016f5c <_vsniprintf_r+0x16>
 8016f9a:	9b00      	ldr	r3, [sp, #0]
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	701a      	strb	r2, [r3, #0]
 8016fa0:	e7dc      	b.n	8016f5c <_vsniprintf_r+0x16>
	...

08016fa4 <vsniprintf>:
 8016fa4:	b507      	push	{r0, r1, r2, lr}
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	4613      	mov	r3, r2
 8016faa:	460a      	mov	r2, r1
 8016fac:	4601      	mov	r1, r0
 8016fae:	4803      	ldr	r0, [pc, #12]	@ (8016fbc <vsniprintf+0x18>)
 8016fb0:	6800      	ldr	r0, [r0, #0]
 8016fb2:	f7ff ffc8 	bl	8016f46 <_vsniprintf_r>
 8016fb6:	b003      	add	sp, #12
 8016fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fbc:	200000c4 	.word	0x200000c4

08016fc0 <memcmp>:
 8016fc0:	b510      	push	{r4, lr}
 8016fc2:	3901      	subs	r1, #1
 8016fc4:	4402      	add	r2, r0
 8016fc6:	4290      	cmp	r0, r2
 8016fc8:	d101      	bne.n	8016fce <memcmp+0xe>
 8016fca:	2000      	movs	r0, #0
 8016fcc:	e005      	b.n	8016fda <memcmp+0x1a>
 8016fce:	7803      	ldrb	r3, [r0, #0]
 8016fd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016fd4:	42a3      	cmp	r3, r4
 8016fd6:	d001      	beq.n	8016fdc <memcmp+0x1c>
 8016fd8:	1b18      	subs	r0, r3, r4
 8016fda:	bd10      	pop	{r4, pc}
 8016fdc:	3001      	adds	r0, #1
 8016fde:	e7f2      	b.n	8016fc6 <memcmp+0x6>

08016fe0 <memmove>:
 8016fe0:	4288      	cmp	r0, r1
 8016fe2:	b510      	push	{r4, lr}
 8016fe4:	eb01 0402 	add.w	r4, r1, r2
 8016fe8:	d902      	bls.n	8016ff0 <memmove+0x10>
 8016fea:	4284      	cmp	r4, r0
 8016fec:	4623      	mov	r3, r4
 8016fee:	d807      	bhi.n	8017000 <memmove+0x20>
 8016ff0:	1e43      	subs	r3, r0, #1
 8016ff2:	42a1      	cmp	r1, r4
 8016ff4:	d008      	beq.n	8017008 <memmove+0x28>
 8016ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ffe:	e7f8      	b.n	8016ff2 <memmove+0x12>
 8017000:	4402      	add	r2, r0
 8017002:	4601      	mov	r1, r0
 8017004:	428a      	cmp	r2, r1
 8017006:	d100      	bne.n	801700a <memmove+0x2a>
 8017008:	bd10      	pop	{r4, pc}
 801700a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801700e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017012:	e7f7      	b.n	8017004 <memmove+0x24>

08017014 <memset>:
 8017014:	4402      	add	r2, r0
 8017016:	4603      	mov	r3, r0
 8017018:	4293      	cmp	r3, r2
 801701a:	d100      	bne.n	801701e <memset+0xa>
 801701c:	4770      	bx	lr
 801701e:	f803 1b01 	strb.w	r1, [r3], #1
 8017022:	e7f9      	b.n	8017018 <memset+0x4>

08017024 <strchr>:
 8017024:	b2c9      	uxtb	r1, r1
 8017026:	4603      	mov	r3, r0
 8017028:	4618      	mov	r0, r3
 801702a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801702e:	b112      	cbz	r2, 8017036 <strchr+0x12>
 8017030:	428a      	cmp	r2, r1
 8017032:	d1f9      	bne.n	8017028 <strchr+0x4>
 8017034:	4770      	bx	lr
 8017036:	2900      	cmp	r1, #0
 8017038:	bf18      	it	ne
 801703a:	2000      	movne	r0, #0
 801703c:	4770      	bx	lr

0801703e <strncmp>:
 801703e:	b510      	push	{r4, lr}
 8017040:	b16a      	cbz	r2, 801705e <strncmp+0x20>
 8017042:	3901      	subs	r1, #1
 8017044:	1884      	adds	r4, r0, r2
 8017046:	f810 2b01 	ldrb.w	r2, [r0], #1
 801704a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801704e:	429a      	cmp	r2, r3
 8017050:	d103      	bne.n	801705a <strncmp+0x1c>
 8017052:	42a0      	cmp	r0, r4
 8017054:	d001      	beq.n	801705a <strncmp+0x1c>
 8017056:	2a00      	cmp	r2, #0
 8017058:	d1f5      	bne.n	8017046 <strncmp+0x8>
 801705a:	1ad0      	subs	r0, r2, r3
 801705c:	bd10      	pop	{r4, pc}
 801705e:	4610      	mov	r0, r2
 8017060:	e7fc      	b.n	801705c <strncmp+0x1e>

08017062 <strstr>:
 8017062:	780a      	ldrb	r2, [r1, #0]
 8017064:	b570      	push	{r4, r5, r6, lr}
 8017066:	b96a      	cbnz	r2, 8017084 <strstr+0x22>
 8017068:	bd70      	pop	{r4, r5, r6, pc}
 801706a:	429a      	cmp	r2, r3
 801706c:	d109      	bne.n	8017082 <strstr+0x20>
 801706e:	460c      	mov	r4, r1
 8017070:	4605      	mov	r5, r0
 8017072:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017076:	2b00      	cmp	r3, #0
 8017078:	d0f6      	beq.n	8017068 <strstr+0x6>
 801707a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801707e:	429e      	cmp	r6, r3
 8017080:	d0f7      	beq.n	8017072 <strstr+0x10>
 8017082:	3001      	adds	r0, #1
 8017084:	7803      	ldrb	r3, [r0, #0]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d1ef      	bne.n	801706a <strstr+0x8>
 801708a:	4618      	mov	r0, r3
 801708c:	e7ec      	b.n	8017068 <strstr+0x6>
	...

08017090 <_close_r>:
 8017090:	b538      	push	{r3, r4, r5, lr}
 8017092:	4d06      	ldr	r5, [pc, #24]	@ (80170ac <_close_r+0x1c>)
 8017094:	2300      	movs	r3, #0
 8017096:	4604      	mov	r4, r0
 8017098:	4608      	mov	r0, r1
 801709a:	602b      	str	r3, [r5, #0]
 801709c:	f7ea fb50 	bl	8001740 <_close>
 80170a0:	1c43      	adds	r3, r0, #1
 80170a2:	d102      	bne.n	80170aa <_close_r+0x1a>
 80170a4:	682b      	ldr	r3, [r5, #0]
 80170a6:	b103      	cbz	r3, 80170aa <_close_r+0x1a>
 80170a8:	6023      	str	r3, [r4, #0]
 80170aa:	bd38      	pop	{r3, r4, r5, pc}
 80170ac:	2000af2c 	.word	0x2000af2c

080170b0 <_lseek_r>:
 80170b0:	b538      	push	{r3, r4, r5, lr}
 80170b2:	4d07      	ldr	r5, [pc, #28]	@ (80170d0 <_lseek_r+0x20>)
 80170b4:	4604      	mov	r4, r0
 80170b6:	4608      	mov	r0, r1
 80170b8:	4611      	mov	r1, r2
 80170ba:	2200      	movs	r2, #0
 80170bc:	602a      	str	r2, [r5, #0]
 80170be:	461a      	mov	r2, r3
 80170c0:	f7ea fb65 	bl	800178e <_lseek>
 80170c4:	1c43      	adds	r3, r0, #1
 80170c6:	d102      	bne.n	80170ce <_lseek_r+0x1e>
 80170c8:	682b      	ldr	r3, [r5, #0]
 80170ca:	b103      	cbz	r3, 80170ce <_lseek_r+0x1e>
 80170cc:	6023      	str	r3, [r4, #0]
 80170ce:	bd38      	pop	{r3, r4, r5, pc}
 80170d0:	2000af2c 	.word	0x2000af2c

080170d4 <_read_r>:
 80170d4:	b538      	push	{r3, r4, r5, lr}
 80170d6:	4d07      	ldr	r5, [pc, #28]	@ (80170f4 <_read_r+0x20>)
 80170d8:	4604      	mov	r4, r0
 80170da:	4608      	mov	r0, r1
 80170dc:	4611      	mov	r1, r2
 80170de:	2200      	movs	r2, #0
 80170e0:	602a      	str	r2, [r5, #0]
 80170e2:	461a      	mov	r2, r3
 80170e4:	f7ea faf3 	bl	80016ce <_read>
 80170e8:	1c43      	adds	r3, r0, #1
 80170ea:	d102      	bne.n	80170f2 <_read_r+0x1e>
 80170ec:	682b      	ldr	r3, [r5, #0]
 80170ee:	b103      	cbz	r3, 80170f2 <_read_r+0x1e>
 80170f0:	6023      	str	r3, [r4, #0]
 80170f2:	bd38      	pop	{r3, r4, r5, pc}
 80170f4:	2000af2c 	.word	0x2000af2c

080170f8 <_sbrk_r>:
 80170f8:	b538      	push	{r3, r4, r5, lr}
 80170fa:	4d06      	ldr	r5, [pc, #24]	@ (8017114 <_sbrk_r+0x1c>)
 80170fc:	2300      	movs	r3, #0
 80170fe:	4604      	mov	r4, r0
 8017100:	4608      	mov	r0, r1
 8017102:	602b      	str	r3, [r5, #0]
 8017104:	f7ea fb50 	bl	80017a8 <_sbrk>
 8017108:	1c43      	adds	r3, r0, #1
 801710a:	d102      	bne.n	8017112 <_sbrk_r+0x1a>
 801710c:	682b      	ldr	r3, [r5, #0]
 801710e:	b103      	cbz	r3, 8017112 <_sbrk_r+0x1a>
 8017110:	6023      	str	r3, [r4, #0]
 8017112:	bd38      	pop	{r3, r4, r5, pc}
 8017114:	2000af2c 	.word	0x2000af2c

08017118 <_write_r>:
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4d07      	ldr	r5, [pc, #28]	@ (8017138 <_write_r+0x20>)
 801711c:	4604      	mov	r4, r0
 801711e:	4608      	mov	r0, r1
 8017120:	4611      	mov	r1, r2
 8017122:	2200      	movs	r2, #0
 8017124:	602a      	str	r2, [r5, #0]
 8017126:	461a      	mov	r2, r3
 8017128:	f7ea faee 	bl	8001708 <_write>
 801712c:	1c43      	adds	r3, r0, #1
 801712e:	d102      	bne.n	8017136 <_write_r+0x1e>
 8017130:	682b      	ldr	r3, [r5, #0]
 8017132:	b103      	cbz	r3, 8017136 <_write_r+0x1e>
 8017134:	6023      	str	r3, [r4, #0]
 8017136:	bd38      	pop	{r3, r4, r5, pc}
 8017138:	2000af2c 	.word	0x2000af2c

0801713c <__errno>:
 801713c:	4b01      	ldr	r3, [pc, #4]	@ (8017144 <__errno+0x8>)
 801713e:	6818      	ldr	r0, [r3, #0]
 8017140:	4770      	bx	lr
 8017142:	bf00      	nop
 8017144:	200000c4 	.word	0x200000c4

08017148 <__libc_init_array>:
 8017148:	b570      	push	{r4, r5, r6, lr}
 801714a:	4d0d      	ldr	r5, [pc, #52]	@ (8017180 <__libc_init_array+0x38>)
 801714c:	4c0d      	ldr	r4, [pc, #52]	@ (8017184 <__libc_init_array+0x3c>)
 801714e:	1b64      	subs	r4, r4, r5
 8017150:	10a4      	asrs	r4, r4, #2
 8017152:	2600      	movs	r6, #0
 8017154:	42a6      	cmp	r6, r4
 8017156:	d109      	bne.n	801716c <__libc_init_array+0x24>
 8017158:	4d0b      	ldr	r5, [pc, #44]	@ (8017188 <__libc_init_array+0x40>)
 801715a:	4c0c      	ldr	r4, [pc, #48]	@ (801718c <__libc_init_array+0x44>)
 801715c:	f000 fef6 	bl	8017f4c <_init>
 8017160:	1b64      	subs	r4, r4, r5
 8017162:	10a4      	asrs	r4, r4, #2
 8017164:	2600      	movs	r6, #0
 8017166:	42a6      	cmp	r6, r4
 8017168:	d105      	bne.n	8017176 <__libc_init_array+0x2e>
 801716a:	bd70      	pop	{r4, r5, r6, pc}
 801716c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017170:	4798      	blx	r3
 8017172:	3601      	adds	r6, #1
 8017174:	e7ee      	b.n	8017154 <__libc_init_array+0xc>
 8017176:	f855 3b04 	ldr.w	r3, [r5], #4
 801717a:	4798      	blx	r3
 801717c:	3601      	adds	r6, #1
 801717e:	e7f2      	b.n	8017166 <__libc_init_array+0x1e>
 8017180:	08018cb8 	.word	0x08018cb8
 8017184:	08018cb8 	.word	0x08018cb8
 8017188:	08018cb8 	.word	0x08018cb8
 801718c:	08018cc0 	.word	0x08018cc0

08017190 <__retarget_lock_init_recursive>:
 8017190:	4770      	bx	lr

08017192 <__retarget_lock_acquire_recursive>:
 8017192:	4770      	bx	lr

08017194 <__retarget_lock_release_recursive>:
 8017194:	4770      	bx	lr

08017196 <strcpy>:
 8017196:	4603      	mov	r3, r0
 8017198:	f811 2b01 	ldrb.w	r2, [r1], #1
 801719c:	f803 2b01 	strb.w	r2, [r3], #1
 80171a0:	2a00      	cmp	r2, #0
 80171a2:	d1f9      	bne.n	8017198 <strcpy+0x2>
 80171a4:	4770      	bx	lr

080171a6 <memcpy>:
 80171a6:	440a      	add	r2, r1
 80171a8:	4291      	cmp	r1, r2
 80171aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80171ae:	d100      	bne.n	80171b2 <memcpy+0xc>
 80171b0:	4770      	bx	lr
 80171b2:	b510      	push	{r4, lr}
 80171b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171bc:	4291      	cmp	r1, r2
 80171be:	d1f9      	bne.n	80171b4 <memcpy+0xe>
 80171c0:	bd10      	pop	{r4, pc}
	...

080171c4 <__assert_func>:
 80171c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171c6:	4614      	mov	r4, r2
 80171c8:	461a      	mov	r2, r3
 80171ca:	4b09      	ldr	r3, [pc, #36]	@ (80171f0 <__assert_func+0x2c>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	4605      	mov	r5, r0
 80171d0:	68d8      	ldr	r0, [r3, #12]
 80171d2:	b14c      	cbz	r4, 80171e8 <__assert_func+0x24>
 80171d4:	4b07      	ldr	r3, [pc, #28]	@ (80171f4 <__assert_func+0x30>)
 80171d6:	9100      	str	r1, [sp, #0]
 80171d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171dc:	4906      	ldr	r1, [pc, #24]	@ (80171f8 <__assert_func+0x34>)
 80171de:	462b      	mov	r3, r5
 80171e0:	f000 fd3e 	bl	8017c60 <fiprintf>
 80171e4:	f000 fde2 	bl	8017dac <abort>
 80171e8:	4b04      	ldr	r3, [pc, #16]	@ (80171fc <__assert_func+0x38>)
 80171ea:	461c      	mov	r4, r3
 80171ec:	e7f3      	b.n	80171d6 <__assert_func+0x12>
 80171ee:	bf00      	nop
 80171f0:	200000c4 	.word	0x200000c4
 80171f4:	08018b3f 	.word	0x08018b3f
 80171f8:	08018b4c 	.word	0x08018b4c
 80171fc:	08018b7a 	.word	0x08018b7a

08017200 <__env_lock>:
 8017200:	4801      	ldr	r0, [pc, #4]	@ (8017208 <__env_lock+0x8>)
 8017202:	f7ff bfc6 	b.w	8017192 <__retarget_lock_acquire_recursive>
 8017206:	bf00      	nop
 8017208:	2000af30 	.word	0x2000af30

0801720c <__env_unlock>:
 801720c:	4801      	ldr	r0, [pc, #4]	@ (8017214 <__env_unlock+0x8>)
 801720e:	f7ff bfc1 	b.w	8017194 <__retarget_lock_release_recursive>
 8017212:	bf00      	nop
 8017214:	2000af30 	.word	0x2000af30

08017218 <_free_r>:
 8017218:	b538      	push	{r3, r4, r5, lr}
 801721a:	4605      	mov	r5, r0
 801721c:	2900      	cmp	r1, #0
 801721e:	d041      	beq.n	80172a4 <_free_r+0x8c>
 8017220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017224:	1f0c      	subs	r4, r1, #4
 8017226:	2b00      	cmp	r3, #0
 8017228:	bfb8      	it	lt
 801722a:	18e4      	addlt	r4, r4, r3
 801722c:	f7ff fc18 	bl	8016a60 <__malloc_lock>
 8017230:	4a1d      	ldr	r2, [pc, #116]	@ (80172a8 <_free_r+0x90>)
 8017232:	6813      	ldr	r3, [r2, #0]
 8017234:	b933      	cbnz	r3, 8017244 <_free_r+0x2c>
 8017236:	6063      	str	r3, [r4, #4]
 8017238:	6014      	str	r4, [r2, #0]
 801723a:	4628      	mov	r0, r5
 801723c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017240:	f7ff bc14 	b.w	8016a6c <__malloc_unlock>
 8017244:	42a3      	cmp	r3, r4
 8017246:	d908      	bls.n	801725a <_free_r+0x42>
 8017248:	6820      	ldr	r0, [r4, #0]
 801724a:	1821      	adds	r1, r4, r0
 801724c:	428b      	cmp	r3, r1
 801724e:	bf01      	itttt	eq
 8017250:	6819      	ldreq	r1, [r3, #0]
 8017252:	685b      	ldreq	r3, [r3, #4]
 8017254:	1809      	addeq	r1, r1, r0
 8017256:	6021      	streq	r1, [r4, #0]
 8017258:	e7ed      	b.n	8017236 <_free_r+0x1e>
 801725a:	461a      	mov	r2, r3
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	b10b      	cbz	r3, 8017264 <_free_r+0x4c>
 8017260:	42a3      	cmp	r3, r4
 8017262:	d9fa      	bls.n	801725a <_free_r+0x42>
 8017264:	6811      	ldr	r1, [r2, #0]
 8017266:	1850      	adds	r0, r2, r1
 8017268:	42a0      	cmp	r0, r4
 801726a:	d10b      	bne.n	8017284 <_free_r+0x6c>
 801726c:	6820      	ldr	r0, [r4, #0]
 801726e:	4401      	add	r1, r0
 8017270:	1850      	adds	r0, r2, r1
 8017272:	4283      	cmp	r3, r0
 8017274:	6011      	str	r1, [r2, #0]
 8017276:	d1e0      	bne.n	801723a <_free_r+0x22>
 8017278:	6818      	ldr	r0, [r3, #0]
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	6053      	str	r3, [r2, #4]
 801727e:	4408      	add	r0, r1
 8017280:	6010      	str	r0, [r2, #0]
 8017282:	e7da      	b.n	801723a <_free_r+0x22>
 8017284:	d902      	bls.n	801728c <_free_r+0x74>
 8017286:	230c      	movs	r3, #12
 8017288:	602b      	str	r3, [r5, #0]
 801728a:	e7d6      	b.n	801723a <_free_r+0x22>
 801728c:	6820      	ldr	r0, [r4, #0]
 801728e:	1821      	adds	r1, r4, r0
 8017290:	428b      	cmp	r3, r1
 8017292:	bf04      	itt	eq
 8017294:	6819      	ldreq	r1, [r3, #0]
 8017296:	685b      	ldreq	r3, [r3, #4]
 8017298:	6063      	str	r3, [r4, #4]
 801729a:	bf04      	itt	eq
 801729c:	1809      	addeq	r1, r1, r0
 801729e:	6021      	streq	r1, [r4, #0]
 80172a0:	6054      	str	r4, [r2, #4]
 80172a2:	e7ca      	b.n	801723a <_free_r+0x22>
 80172a4:	bd38      	pop	{r3, r4, r5, pc}
 80172a6:	bf00      	nop
 80172a8:	2000adec 	.word	0x2000adec

080172ac <_malloc_usable_size_r>:
 80172ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172b0:	1f18      	subs	r0, r3, #4
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	bfbc      	itt	lt
 80172b6:	580b      	ldrlt	r3, [r1, r0]
 80172b8:	18c0      	addlt	r0, r0, r3
 80172ba:	4770      	bx	lr

080172bc <__ssputs_r>:
 80172bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172c0:	688e      	ldr	r6, [r1, #8]
 80172c2:	461f      	mov	r7, r3
 80172c4:	42be      	cmp	r6, r7
 80172c6:	680b      	ldr	r3, [r1, #0]
 80172c8:	4682      	mov	sl, r0
 80172ca:	460c      	mov	r4, r1
 80172cc:	4690      	mov	r8, r2
 80172ce:	d82d      	bhi.n	801732c <__ssputs_r+0x70>
 80172d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80172d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80172d8:	d026      	beq.n	8017328 <__ssputs_r+0x6c>
 80172da:	6965      	ldr	r5, [r4, #20]
 80172dc:	6909      	ldr	r1, [r1, #16]
 80172de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172e2:	eba3 0901 	sub.w	r9, r3, r1
 80172e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172ea:	1c7b      	adds	r3, r7, #1
 80172ec:	444b      	add	r3, r9
 80172ee:	106d      	asrs	r5, r5, #1
 80172f0:	429d      	cmp	r5, r3
 80172f2:	bf38      	it	cc
 80172f4:	461d      	movcc	r5, r3
 80172f6:	0553      	lsls	r3, r2, #21
 80172f8:	d527      	bpl.n	801734a <__ssputs_r+0x8e>
 80172fa:	4629      	mov	r1, r5
 80172fc:	f7ff fb30 	bl	8016960 <_malloc_r>
 8017300:	4606      	mov	r6, r0
 8017302:	b360      	cbz	r0, 801735e <__ssputs_r+0xa2>
 8017304:	6921      	ldr	r1, [r4, #16]
 8017306:	464a      	mov	r2, r9
 8017308:	f7ff ff4d 	bl	80171a6 <memcpy>
 801730c:	89a3      	ldrh	r3, [r4, #12]
 801730e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017316:	81a3      	strh	r3, [r4, #12]
 8017318:	6126      	str	r6, [r4, #16]
 801731a:	6165      	str	r5, [r4, #20]
 801731c:	444e      	add	r6, r9
 801731e:	eba5 0509 	sub.w	r5, r5, r9
 8017322:	6026      	str	r6, [r4, #0]
 8017324:	60a5      	str	r5, [r4, #8]
 8017326:	463e      	mov	r6, r7
 8017328:	42be      	cmp	r6, r7
 801732a:	d900      	bls.n	801732e <__ssputs_r+0x72>
 801732c:	463e      	mov	r6, r7
 801732e:	6820      	ldr	r0, [r4, #0]
 8017330:	4632      	mov	r2, r6
 8017332:	4641      	mov	r1, r8
 8017334:	f7ff fe54 	bl	8016fe0 <memmove>
 8017338:	68a3      	ldr	r3, [r4, #8]
 801733a:	1b9b      	subs	r3, r3, r6
 801733c:	60a3      	str	r3, [r4, #8]
 801733e:	6823      	ldr	r3, [r4, #0]
 8017340:	4433      	add	r3, r6
 8017342:	6023      	str	r3, [r4, #0]
 8017344:	2000      	movs	r0, #0
 8017346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801734a:	462a      	mov	r2, r5
 801734c:	f7ff fc08 	bl	8016b60 <_realloc_r>
 8017350:	4606      	mov	r6, r0
 8017352:	2800      	cmp	r0, #0
 8017354:	d1e0      	bne.n	8017318 <__ssputs_r+0x5c>
 8017356:	6921      	ldr	r1, [r4, #16]
 8017358:	4650      	mov	r0, sl
 801735a:	f7ff ff5d 	bl	8017218 <_free_r>
 801735e:	230c      	movs	r3, #12
 8017360:	f8ca 3000 	str.w	r3, [sl]
 8017364:	89a3      	ldrh	r3, [r4, #12]
 8017366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801736a:	81a3      	strh	r3, [r4, #12]
 801736c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017370:	e7e9      	b.n	8017346 <__ssputs_r+0x8a>
	...

08017374 <_svfiprintf_r>:
 8017374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017378:	4698      	mov	r8, r3
 801737a:	898b      	ldrh	r3, [r1, #12]
 801737c:	061b      	lsls	r3, r3, #24
 801737e:	b09d      	sub	sp, #116	@ 0x74
 8017380:	4607      	mov	r7, r0
 8017382:	460d      	mov	r5, r1
 8017384:	4614      	mov	r4, r2
 8017386:	d510      	bpl.n	80173aa <_svfiprintf_r+0x36>
 8017388:	690b      	ldr	r3, [r1, #16]
 801738a:	b973      	cbnz	r3, 80173aa <_svfiprintf_r+0x36>
 801738c:	2140      	movs	r1, #64	@ 0x40
 801738e:	f7ff fae7 	bl	8016960 <_malloc_r>
 8017392:	6028      	str	r0, [r5, #0]
 8017394:	6128      	str	r0, [r5, #16]
 8017396:	b930      	cbnz	r0, 80173a6 <_svfiprintf_r+0x32>
 8017398:	230c      	movs	r3, #12
 801739a:	603b      	str	r3, [r7, #0]
 801739c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173a0:	b01d      	add	sp, #116	@ 0x74
 80173a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a6:	2340      	movs	r3, #64	@ 0x40
 80173a8:	616b      	str	r3, [r5, #20]
 80173aa:	2300      	movs	r3, #0
 80173ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80173ae:	2320      	movs	r3, #32
 80173b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80173b8:	2330      	movs	r3, #48	@ 0x30
 80173ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017558 <_svfiprintf_r+0x1e4>
 80173be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80173c2:	f04f 0901 	mov.w	r9, #1
 80173c6:	4623      	mov	r3, r4
 80173c8:	469a      	mov	sl, r3
 80173ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173ce:	b10a      	cbz	r2, 80173d4 <_svfiprintf_r+0x60>
 80173d0:	2a25      	cmp	r2, #37	@ 0x25
 80173d2:	d1f9      	bne.n	80173c8 <_svfiprintf_r+0x54>
 80173d4:	ebba 0b04 	subs.w	fp, sl, r4
 80173d8:	d00b      	beq.n	80173f2 <_svfiprintf_r+0x7e>
 80173da:	465b      	mov	r3, fp
 80173dc:	4622      	mov	r2, r4
 80173de:	4629      	mov	r1, r5
 80173e0:	4638      	mov	r0, r7
 80173e2:	f7ff ff6b 	bl	80172bc <__ssputs_r>
 80173e6:	3001      	adds	r0, #1
 80173e8:	f000 80a7 	beq.w	801753a <_svfiprintf_r+0x1c6>
 80173ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173ee:	445a      	add	r2, fp
 80173f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80173f2:	f89a 3000 	ldrb.w	r3, [sl]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	f000 809f 	beq.w	801753a <_svfiprintf_r+0x1c6>
 80173fc:	2300      	movs	r3, #0
 80173fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017406:	f10a 0a01 	add.w	sl, sl, #1
 801740a:	9304      	str	r3, [sp, #16]
 801740c:	9307      	str	r3, [sp, #28]
 801740e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017412:	931a      	str	r3, [sp, #104]	@ 0x68
 8017414:	4654      	mov	r4, sl
 8017416:	2205      	movs	r2, #5
 8017418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801741c:	484e      	ldr	r0, [pc, #312]	@ (8017558 <_svfiprintf_r+0x1e4>)
 801741e:	f7e8 ff17 	bl	8000250 <memchr>
 8017422:	9a04      	ldr	r2, [sp, #16]
 8017424:	b9d8      	cbnz	r0, 801745e <_svfiprintf_r+0xea>
 8017426:	06d0      	lsls	r0, r2, #27
 8017428:	bf44      	itt	mi
 801742a:	2320      	movmi	r3, #32
 801742c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017430:	0711      	lsls	r1, r2, #28
 8017432:	bf44      	itt	mi
 8017434:	232b      	movmi	r3, #43	@ 0x2b
 8017436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801743a:	f89a 3000 	ldrb.w	r3, [sl]
 801743e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017440:	d015      	beq.n	801746e <_svfiprintf_r+0xfa>
 8017442:	9a07      	ldr	r2, [sp, #28]
 8017444:	4654      	mov	r4, sl
 8017446:	2000      	movs	r0, #0
 8017448:	f04f 0c0a 	mov.w	ip, #10
 801744c:	4621      	mov	r1, r4
 801744e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017452:	3b30      	subs	r3, #48	@ 0x30
 8017454:	2b09      	cmp	r3, #9
 8017456:	d94b      	bls.n	80174f0 <_svfiprintf_r+0x17c>
 8017458:	b1b0      	cbz	r0, 8017488 <_svfiprintf_r+0x114>
 801745a:	9207      	str	r2, [sp, #28]
 801745c:	e014      	b.n	8017488 <_svfiprintf_r+0x114>
 801745e:	eba0 0308 	sub.w	r3, r0, r8
 8017462:	fa09 f303 	lsl.w	r3, r9, r3
 8017466:	4313      	orrs	r3, r2
 8017468:	9304      	str	r3, [sp, #16]
 801746a:	46a2      	mov	sl, r4
 801746c:	e7d2      	b.n	8017414 <_svfiprintf_r+0xa0>
 801746e:	9b03      	ldr	r3, [sp, #12]
 8017470:	1d19      	adds	r1, r3, #4
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	9103      	str	r1, [sp, #12]
 8017476:	2b00      	cmp	r3, #0
 8017478:	bfbb      	ittet	lt
 801747a:	425b      	neglt	r3, r3
 801747c:	f042 0202 	orrlt.w	r2, r2, #2
 8017480:	9307      	strge	r3, [sp, #28]
 8017482:	9307      	strlt	r3, [sp, #28]
 8017484:	bfb8      	it	lt
 8017486:	9204      	strlt	r2, [sp, #16]
 8017488:	7823      	ldrb	r3, [r4, #0]
 801748a:	2b2e      	cmp	r3, #46	@ 0x2e
 801748c:	d10a      	bne.n	80174a4 <_svfiprintf_r+0x130>
 801748e:	7863      	ldrb	r3, [r4, #1]
 8017490:	2b2a      	cmp	r3, #42	@ 0x2a
 8017492:	d132      	bne.n	80174fa <_svfiprintf_r+0x186>
 8017494:	9b03      	ldr	r3, [sp, #12]
 8017496:	1d1a      	adds	r2, r3, #4
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	9203      	str	r2, [sp, #12]
 801749c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174a0:	3402      	adds	r4, #2
 80174a2:	9305      	str	r3, [sp, #20]
 80174a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017568 <_svfiprintf_r+0x1f4>
 80174a8:	7821      	ldrb	r1, [r4, #0]
 80174aa:	2203      	movs	r2, #3
 80174ac:	4650      	mov	r0, sl
 80174ae:	f7e8 fecf 	bl	8000250 <memchr>
 80174b2:	b138      	cbz	r0, 80174c4 <_svfiprintf_r+0x150>
 80174b4:	9b04      	ldr	r3, [sp, #16]
 80174b6:	eba0 000a 	sub.w	r0, r0, sl
 80174ba:	2240      	movs	r2, #64	@ 0x40
 80174bc:	4082      	lsls	r2, r0
 80174be:	4313      	orrs	r3, r2
 80174c0:	3401      	adds	r4, #1
 80174c2:	9304      	str	r3, [sp, #16]
 80174c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174c8:	4824      	ldr	r0, [pc, #144]	@ (801755c <_svfiprintf_r+0x1e8>)
 80174ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80174ce:	2206      	movs	r2, #6
 80174d0:	f7e8 febe 	bl	8000250 <memchr>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	d036      	beq.n	8017546 <_svfiprintf_r+0x1d2>
 80174d8:	4b21      	ldr	r3, [pc, #132]	@ (8017560 <_svfiprintf_r+0x1ec>)
 80174da:	bb1b      	cbnz	r3, 8017524 <_svfiprintf_r+0x1b0>
 80174dc:	9b03      	ldr	r3, [sp, #12]
 80174de:	3307      	adds	r3, #7
 80174e0:	f023 0307 	bic.w	r3, r3, #7
 80174e4:	3308      	adds	r3, #8
 80174e6:	9303      	str	r3, [sp, #12]
 80174e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174ea:	4433      	add	r3, r6
 80174ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80174ee:	e76a      	b.n	80173c6 <_svfiprintf_r+0x52>
 80174f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80174f4:	460c      	mov	r4, r1
 80174f6:	2001      	movs	r0, #1
 80174f8:	e7a8      	b.n	801744c <_svfiprintf_r+0xd8>
 80174fa:	2300      	movs	r3, #0
 80174fc:	3401      	adds	r4, #1
 80174fe:	9305      	str	r3, [sp, #20]
 8017500:	4619      	mov	r1, r3
 8017502:	f04f 0c0a 	mov.w	ip, #10
 8017506:	4620      	mov	r0, r4
 8017508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801750c:	3a30      	subs	r2, #48	@ 0x30
 801750e:	2a09      	cmp	r2, #9
 8017510:	d903      	bls.n	801751a <_svfiprintf_r+0x1a6>
 8017512:	2b00      	cmp	r3, #0
 8017514:	d0c6      	beq.n	80174a4 <_svfiprintf_r+0x130>
 8017516:	9105      	str	r1, [sp, #20]
 8017518:	e7c4      	b.n	80174a4 <_svfiprintf_r+0x130>
 801751a:	fb0c 2101 	mla	r1, ip, r1, r2
 801751e:	4604      	mov	r4, r0
 8017520:	2301      	movs	r3, #1
 8017522:	e7f0      	b.n	8017506 <_svfiprintf_r+0x192>
 8017524:	ab03      	add	r3, sp, #12
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	462a      	mov	r2, r5
 801752a:	4b0e      	ldr	r3, [pc, #56]	@ (8017564 <_svfiprintf_r+0x1f0>)
 801752c:	a904      	add	r1, sp, #16
 801752e:	4638      	mov	r0, r7
 8017530:	f3af 8000 	nop.w
 8017534:	1c42      	adds	r2, r0, #1
 8017536:	4606      	mov	r6, r0
 8017538:	d1d6      	bne.n	80174e8 <_svfiprintf_r+0x174>
 801753a:	89ab      	ldrh	r3, [r5, #12]
 801753c:	065b      	lsls	r3, r3, #25
 801753e:	f53f af2d 	bmi.w	801739c <_svfiprintf_r+0x28>
 8017542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017544:	e72c      	b.n	80173a0 <_svfiprintf_r+0x2c>
 8017546:	ab03      	add	r3, sp, #12
 8017548:	9300      	str	r3, [sp, #0]
 801754a:	462a      	mov	r2, r5
 801754c:	4b05      	ldr	r3, [pc, #20]	@ (8017564 <_svfiprintf_r+0x1f0>)
 801754e:	a904      	add	r1, sp, #16
 8017550:	4638      	mov	r0, r7
 8017552:	f000 f9bb 	bl	80178cc <_printf_i>
 8017556:	e7ed      	b.n	8017534 <_svfiprintf_r+0x1c0>
 8017558:	08018b7b 	.word	0x08018b7b
 801755c:	08018b85 	.word	0x08018b85
 8017560:	00000000 	.word	0x00000000
 8017564:	080172bd 	.word	0x080172bd
 8017568:	08018b81 	.word	0x08018b81

0801756c <__sfputc_r>:
 801756c:	6893      	ldr	r3, [r2, #8]
 801756e:	3b01      	subs	r3, #1
 8017570:	2b00      	cmp	r3, #0
 8017572:	b410      	push	{r4}
 8017574:	6093      	str	r3, [r2, #8]
 8017576:	da08      	bge.n	801758a <__sfputc_r+0x1e>
 8017578:	6994      	ldr	r4, [r2, #24]
 801757a:	42a3      	cmp	r3, r4
 801757c:	db01      	blt.n	8017582 <__sfputc_r+0x16>
 801757e:	290a      	cmp	r1, #10
 8017580:	d103      	bne.n	801758a <__sfputc_r+0x1e>
 8017582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017586:	f000 bb7d 	b.w	8017c84 <__swbuf_r>
 801758a:	6813      	ldr	r3, [r2, #0]
 801758c:	1c58      	adds	r0, r3, #1
 801758e:	6010      	str	r0, [r2, #0]
 8017590:	7019      	strb	r1, [r3, #0]
 8017592:	4608      	mov	r0, r1
 8017594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017598:	4770      	bx	lr

0801759a <__sfputs_r>:
 801759a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759c:	4606      	mov	r6, r0
 801759e:	460f      	mov	r7, r1
 80175a0:	4614      	mov	r4, r2
 80175a2:	18d5      	adds	r5, r2, r3
 80175a4:	42ac      	cmp	r4, r5
 80175a6:	d101      	bne.n	80175ac <__sfputs_r+0x12>
 80175a8:	2000      	movs	r0, #0
 80175aa:	e007      	b.n	80175bc <__sfputs_r+0x22>
 80175ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175b0:	463a      	mov	r2, r7
 80175b2:	4630      	mov	r0, r6
 80175b4:	f7ff ffda 	bl	801756c <__sfputc_r>
 80175b8:	1c43      	adds	r3, r0, #1
 80175ba:	d1f3      	bne.n	80175a4 <__sfputs_r+0xa>
 80175bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175c0 <_vfiprintf_r>:
 80175c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c4:	460d      	mov	r5, r1
 80175c6:	b09d      	sub	sp, #116	@ 0x74
 80175c8:	4614      	mov	r4, r2
 80175ca:	4698      	mov	r8, r3
 80175cc:	4606      	mov	r6, r0
 80175ce:	b118      	cbz	r0, 80175d8 <_vfiprintf_r+0x18>
 80175d0:	6a03      	ldr	r3, [r0, #32]
 80175d2:	b90b      	cbnz	r3, 80175d8 <_vfiprintf_r+0x18>
 80175d4:	f7ff fbf6 	bl	8016dc4 <__sinit>
 80175d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80175da:	07d9      	lsls	r1, r3, #31
 80175dc:	d405      	bmi.n	80175ea <_vfiprintf_r+0x2a>
 80175de:	89ab      	ldrh	r3, [r5, #12]
 80175e0:	059a      	lsls	r2, r3, #22
 80175e2:	d402      	bmi.n	80175ea <_vfiprintf_r+0x2a>
 80175e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80175e6:	f7ff fdd4 	bl	8017192 <__retarget_lock_acquire_recursive>
 80175ea:	89ab      	ldrh	r3, [r5, #12]
 80175ec:	071b      	lsls	r3, r3, #28
 80175ee:	d501      	bpl.n	80175f4 <_vfiprintf_r+0x34>
 80175f0:	692b      	ldr	r3, [r5, #16]
 80175f2:	b99b      	cbnz	r3, 801761c <_vfiprintf_r+0x5c>
 80175f4:	4629      	mov	r1, r5
 80175f6:	4630      	mov	r0, r6
 80175f8:	f000 fb82 	bl	8017d00 <__swsetup_r>
 80175fc:	b170      	cbz	r0, 801761c <_vfiprintf_r+0x5c>
 80175fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017600:	07dc      	lsls	r4, r3, #31
 8017602:	d504      	bpl.n	801760e <_vfiprintf_r+0x4e>
 8017604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017608:	b01d      	add	sp, #116	@ 0x74
 801760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801760e:	89ab      	ldrh	r3, [r5, #12]
 8017610:	0598      	lsls	r0, r3, #22
 8017612:	d4f7      	bmi.n	8017604 <_vfiprintf_r+0x44>
 8017614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017616:	f7ff fdbd 	bl	8017194 <__retarget_lock_release_recursive>
 801761a:	e7f3      	b.n	8017604 <_vfiprintf_r+0x44>
 801761c:	2300      	movs	r3, #0
 801761e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017620:	2320      	movs	r3, #32
 8017622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017626:	f8cd 800c 	str.w	r8, [sp, #12]
 801762a:	2330      	movs	r3, #48	@ 0x30
 801762c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80177dc <_vfiprintf_r+0x21c>
 8017630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017634:	f04f 0901 	mov.w	r9, #1
 8017638:	4623      	mov	r3, r4
 801763a:	469a      	mov	sl, r3
 801763c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017640:	b10a      	cbz	r2, 8017646 <_vfiprintf_r+0x86>
 8017642:	2a25      	cmp	r2, #37	@ 0x25
 8017644:	d1f9      	bne.n	801763a <_vfiprintf_r+0x7a>
 8017646:	ebba 0b04 	subs.w	fp, sl, r4
 801764a:	d00b      	beq.n	8017664 <_vfiprintf_r+0xa4>
 801764c:	465b      	mov	r3, fp
 801764e:	4622      	mov	r2, r4
 8017650:	4629      	mov	r1, r5
 8017652:	4630      	mov	r0, r6
 8017654:	f7ff ffa1 	bl	801759a <__sfputs_r>
 8017658:	3001      	adds	r0, #1
 801765a:	f000 80a7 	beq.w	80177ac <_vfiprintf_r+0x1ec>
 801765e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017660:	445a      	add	r2, fp
 8017662:	9209      	str	r2, [sp, #36]	@ 0x24
 8017664:	f89a 3000 	ldrb.w	r3, [sl]
 8017668:	2b00      	cmp	r3, #0
 801766a:	f000 809f 	beq.w	80177ac <_vfiprintf_r+0x1ec>
 801766e:	2300      	movs	r3, #0
 8017670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017678:	f10a 0a01 	add.w	sl, sl, #1
 801767c:	9304      	str	r3, [sp, #16]
 801767e:	9307      	str	r3, [sp, #28]
 8017680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017684:	931a      	str	r3, [sp, #104]	@ 0x68
 8017686:	4654      	mov	r4, sl
 8017688:	2205      	movs	r2, #5
 801768a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801768e:	4853      	ldr	r0, [pc, #332]	@ (80177dc <_vfiprintf_r+0x21c>)
 8017690:	f7e8 fdde 	bl	8000250 <memchr>
 8017694:	9a04      	ldr	r2, [sp, #16]
 8017696:	b9d8      	cbnz	r0, 80176d0 <_vfiprintf_r+0x110>
 8017698:	06d1      	lsls	r1, r2, #27
 801769a:	bf44      	itt	mi
 801769c:	2320      	movmi	r3, #32
 801769e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80176a2:	0713      	lsls	r3, r2, #28
 80176a4:	bf44      	itt	mi
 80176a6:	232b      	movmi	r3, #43	@ 0x2b
 80176a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80176ac:	f89a 3000 	ldrb.w	r3, [sl]
 80176b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80176b2:	d015      	beq.n	80176e0 <_vfiprintf_r+0x120>
 80176b4:	9a07      	ldr	r2, [sp, #28]
 80176b6:	4654      	mov	r4, sl
 80176b8:	2000      	movs	r0, #0
 80176ba:	f04f 0c0a 	mov.w	ip, #10
 80176be:	4621      	mov	r1, r4
 80176c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176c4:	3b30      	subs	r3, #48	@ 0x30
 80176c6:	2b09      	cmp	r3, #9
 80176c8:	d94b      	bls.n	8017762 <_vfiprintf_r+0x1a2>
 80176ca:	b1b0      	cbz	r0, 80176fa <_vfiprintf_r+0x13a>
 80176cc:	9207      	str	r2, [sp, #28]
 80176ce:	e014      	b.n	80176fa <_vfiprintf_r+0x13a>
 80176d0:	eba0 0308 	sub.w	r3, r0, r8
 80176d4:	fa09 f303 	lsl.w	r3, r9, r3
 80176d8:	4313      	orrs	r3, r2
 80176da:	9304      	str	r3, [sp, #16]
 80176dc:	46a2      	mov	sl, r4
 80176de:	e7d2      	b.n	8017686 <_vfiprintf_r+0xc6>
 80176e0:	9b03      	ldr	r3, [sp, #12]
 80176e2:	1d19      	adds	r1, r3, #4
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	9103      	str	r1, [sp, #12]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	bfbb      	ittet	lt
 80176ec:	425b      	neglt	r3, r3
 80176ee:	f042 0202 	orrlt.w	r2, r2, #2
 80176f2:	9307      	strge	r3, [sp, #28]
 80176f4:	9307      	strlt	r3, [sp, #28]
 80176f6:	bfb8      	it	lt
 80176f8:	9204      	strlt	r2, [sp, #16]
 80176fa:	7823      	ldrb	r3, [r4, #0]
 80176fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80176fe:	d10a      	bne.n	8017716 <_vfiprintf_r+0x156>
 8017700:	7863      	ldrb	r3, [r4, #1]
 8017702:	2b2a      	cmp	r3, #42	@ 0x2a
 8017704:	d132      	bne.n	801776c <_vfiprintf_r+0x1ac>
 8017706:	9b03      	ldr	r3, [sp, #12]
 8017708:	1d1a      	adds	r2, r3, #4
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	9203      	str	r2, [sp, #12]
 801770e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017712:	3402      	adds	r4, #2
 8017714:	9305      	str	r3, [sp, #20]
 8017716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80177ec <_vfiprintf_r+0x22c>
 801771a:	7821      	ldrb	r1, [r4, #0]
 801771c:	2203      	movs	r2, #3
 801771e:	4650      	mov	r0, sl
 8017720:	f7e8 fd96 	bl	8000250 <memchr>
 8017724:	b138      	cbz	r0, 8017736 <_vfiprintf_r+0x176>
 8017726:	9b04      	ldr	r3, [sp, #16]
 8017728:	eba0 000a 	sub.w	r0, r0, sl
 801772c:	2240      	movs	r2, #64	@ 0x40
 801772e:	4082      	lsls	r2, r0
 8017730:	4313      	orrs	r3, r2
 8017732:	3401      	adds	r4, #1
 8017734:	9304      	str	r3, [sp, #16]
 8017736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801773a:	4829      	ldr	r0, [pc, #164]	@ (80177e0 <_vfiprintf_r+0x220>)
 801773c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017740:	2206      	movs	r2, #6
 8017742:	f7e8 fd85 	bl	8000250 <memchr>
 8017746:	2800      	cmp	r0, #0
 8017748:	d03f      	beq.n	80177ca <_vfiprintf_r+0x20a>
 801774a:	4b26      	ldr	r3, [pc, #152]	@ (80177e4 <_vfiprintf_r+0x224>)
 801774c:	bb1b      	cbnz	r3, 8017796 <_vfiprintf_r+0x1d6>
 801774e:	9b03      	ldr	r3, [sp, #12]
 8017750:	3307      	adds	r3, #7
 8017752:	f023 0307 	bic.w	r3, r3, #7
 8017756:	3308      	adds	r3, #8
 8017758:	9303      	str	r3, [sp, #12]
 801775a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801775c:	443b      	add	r3, r7
 801775e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017760:	e76a      	b.n	8017638 <_vfiprintf_r+0x78>
 8017762:	fb0c 3202 	mla	r2, ip, r2, r3
 8017766:	460c      	mov	r4, r1
 8017768:	2001      	movs	r0, #1
 801776a:	e7a8      	b.n	80176be <_vfiprintf_r+0xfe>
 801776c:	2300      	movs	r3, #0
 801776e:	3401      	adds	r4, #1
 8017770:	9305      	str	r3, [sp, #20]
 8017772:	4619      	mov	r1, r3
 8017774:	f04f 0c0a 	mov.w	ip, #10
 8017778:	4620      	mov	r0, r4
 801777a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801777e:	3a30      	subs	r2, #48	@ 0x30
 8017780:	2a09      	cmp	r2, #9
 8017782:	d903      	bls.n	801778c <_vfiprintf_r+0x1cc>
 8017784:	2b00      	cmp	r3, #0
 8017786:	d0c6      	beq.n	8017716 <_vfiprintf_r+0x156>
 8017788:	9105      	str	r1, [sp, #20]
 801778a:	e7c4      	b.n	8017716 <_vfiprintf_r+0x156>
 801778c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017790:	4604      	mov	r4, r0
 8017792:	2301      	movs	r3, #1
 8017794:	e7f0      	b.n	8017778 <_vfiprintf_r+0x1b8>
 8017796:	ab03      	add	r3, sp, #12
 8017798:	9300      	str	r3, [sp, #0]
 801779a:	462a      	mov	r2, r5
 801779c:	4b12      	ldr	r3, [pc, #72]	@ (80177e8 <_vfiprintf_r+0x228>)
 801779e:	a904      	add	r1, sp, #16
 80177a0:	4630      	mov	r0, r6
 80177a2:	f3af 8000 	nop.w
 80177a6:	4607      	mov	r7, r0
 80177a8:	1c78      	adds	r0, r7, #1
 80177aa:	d1d6      	bne.n	801775a <_vfiprintf_r+0x19a>
 80177ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177ae:	07d9      	lsls	r1, r3, #31
 80177b0:	d405      	bmi.n	80177be <_vfiprintf_r+0x1fe>
 80177b2:	89ab      	ldrh	r3, [r5, #12]
 80177b4:	059a      	lsls	r2, r3, #22
 80177b6:	d402      	bmi.n	80177be <_vfiprintf_r+0x1fe>
 80177b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177ba:	f7ff fceb 	bl	8017194 <__retarget_lock_release_recursive>
 80177be:	89ab      	ldrh	r3, [r5, #12]
 80177c0:	065b      	lsls	r3, r3, #25
 80177c2:	f53f af1f 	bmi.w	8017604 <_vfiprintf_r+0x44>
 80177c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177c8:	e71e      	b.n	8017608 <_vfiprintf_r+0x48>
 80177ca:	ab03      	add	r3, sp, #12
 80177cc:	9300      	str	r3, [sp, #0]
 80177ce:	462a      	mov	r2, r5
 80177d0:	4b05      	ldr	r3, [pc, #20]	@ (80177e8 <_vfiprintf_r+0x228>)
 80177d2:	a904      	add	r1, sp, #16
 80177d4:	4630      	mov	r0, r6
 80177d6:	f000 f879 	bl	80178cc <_printf_i>
 80177da:	e7e4      	b.n	80177a6 <_vfiprintf_r+0x1e6>
 80177dc:	08018b7b 	.word	0x08018b7b
 80177e0:	08018b85 	.word	0x08018b85
 80177e4:	00000000 	.word	0x00000000
 80177e8:	0801759b 	.word	0x0801759b
 80177ec:	08018b81 	.word	0x08018b81

080177f0 <_printf_common>:
 80177f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177f4:	4616      	mov	r6, r2
 80177f6:	4698      	mov	r8, r3
 80177f8:	688a      	ldr	r2, [r1, #8]
 80177fa:	690b      	ldr	r3, [r1, #16]
 80177fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017800:	4293      	cmp	r3, r2
 8017802:	bfb8      	it	lt
 8017804:	4613      	movlt	r3, r2
 8017806:	6033      	str	r3, [r6, #0]
 8017808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801780c:	4607      	mov	r7, r0
 801780e:	460c      	mov	r4, r1
 8017810:	b10a      	cbz	r2, 8017816 <_printf_common+0x26>
 8017812:	3301      	adds	r3, #1
 8017814:	6033      	str	r3, [r6, #0]
 8017816:	6823      	ldr	r3, [r4, #0]
 8017818:	0699      	lsls	r1, r3, #26
 801781a:	bf42      	ittt	mi
 801781c:	6833      	ldrmi	r3, [r6, #0]
 801781e:	3302      	addmi	r3, #2
 8017820:	6033      	strmi	r3, [r6, #0]
 8017822:	6825      	ldr	r5, [r4, #0]
 8017824:	f015 0506 	ands.w	r5, r5, #6
 8017828:	d106      	bne.n	8017838 <_printf_common+0x48>
 801782a:	f104 0a19 	add.w	sl, r4, #25
 801782e:	68e3      	ldr	r3, [r4, #12]
 8017830:	6832      	ldr	r2, [r6, #0]
 8017832:	1a9b      	subs	r3, r3, r2
 8017834:	42ab      	cmp	r3, r5
 8017836:	dc26      	bgt.n	8017886 <_printf_common+0x96>
 8017838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801783c:	6822      	ldr	r2, [r4, #0]
 801783e:	3b00      	subs	r3, #0
 8017840:	bf18      	it	ne
 8017842:	2301      	movne	r3, #1
 8017844:	0692      	lsls	r2, r2, #26
 8017846:	d42b      	bmi.n	80178a0 <_printf_common+0xb0>
 8017848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801784c:	4641      	mov	r1, r8
 801784e:	4638      	mov	r0, r7
 8017850:	47c8      	blx	r9
 8017852:	3001      	adds	r0, #1
 8017854:	d01e      	beq.n	8017894 <_printf_common+0xa4>
 8017856:	6823      	ldr	r3, [r4, #0]
 8017858:	6922      	ldr	r2, [r4, #16]
 801785a:	f003 0306 	and.w	r3, r3, #6
 801785e:	2b04      	cmp	r3, #4
 8017860:	bf02      	ittt	eq
 8017862:	68e5      	ldreq	r5, [r4, #12]
 8017864:	6833      	ldreq	r3, [r6, #0]
 8017866:	1aed      	subeq	r5, r5, r3
 8017868:	68a3      	ldr	r3, [r4, #8]
 801786a:	bf0c      	ite	eq
 801786c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017870:	2500      	movne	r5, #0
 8017872:	4293      	cmp	r3, r2
 8017874:	bfc4      	itt	gt
 8017876:	1a9b      	subgt	r3, r3, r2
 8017878:	18ed      	addgt	r5, r5, r3
 801787a:	2600      	movs	r6, #0
 801787c:	341a      	adds	r4, #26
 801787e:	42b5      	cmp	r5, r6
 8017880:	d11a      	bne.n	80178b8 <_printf_common+0xc8>
 8017882:	2000      	movs	r0, #0
 8017884:	e008      	b.n	8017898 <_printf_common+0xa8>
 8017886:	2301      	movs	r3, #1
 8017888:	4652      	mov	r2, sl
 801788a:	4641      	mov	r1, r8
 801788c:	4638      	mov	r0, r7
 801788e:	47c8      	blx	r9
 8017890:	3001      	adds	r0, #1
 8017892:	d103      	bne.n	801789c <_printf_common+0xac>
 8017894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801789c:	3501      	adds	r5, #1
 801789e:	e7c6      	b.n	801782e <_printf_common+0x3e>
 80178a0:	18e1      	adds	r1, r4, r3
 80178a2:	1c5a      	adds	r2, r3, #1
 80178a4:	2030      	movs	r0, #48	@ 0x30
 80178a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80178aa:	4422      	add	r2, r4
 80178ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80178b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80178b4:	3302      	adds	r3, #2
 80178b6:	e7c7      	b.n	8017848 <_printf_common+0x58>
 80178b8:	2301      	movs	r3, #1
 80178ba:	4622      	mov	r2, r4
 80178bc:	4641      	mov	r1, r8
 80178be:	4638      	mov	r0, r7
 80178c0:	47c8      	blx	r9
 80178c2:	3001      	adds	r0, #1
 80178c4:	d0e6      	beq.n	8017894 <_printf_common+0xa4>
 80178c6:	3601      	adds	r6, #1
 80178c8:	e7d9      	b.n	801787e <_printf_common+0x8e>
	...

080178cc <_printf_i>:
 80178cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178d0:	7e0f      	ldrb	r7, [r1, #24]
 80178d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80178d4:	2f78      	cmp	r7, #120	@ 0x78
 80178d6:	4691      	mov	r9, r2
 80178d8:	4680      	mov	r8, r0
 80178da:	460c      	mov	r4, r1
 80178dc:	469a      	mov	sl, r3
 80178de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80178e2:	d807      	bhi.n	80178f4 <_printf_i+0x28>
 80178e4:	2f62      	cmp	r7, #98	@ 0x62
 80178e6:	d80a      	bhi.n	80178fe <_printf_i+0x32>
 80178e8:	2f00      	cmp	r7, #0
 80178ea:	f000 80d1 	beq.w	8017a90 <_printf_i+0x1c4>
 80178ee:	2f58      	cmp	r7, #88	@ 0x58
 80178f0:	f000 80b8 	beq.w	8017a64 <_printf_i+0x198>
 80178f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80178fc:	e03a      	b.n	8017974 <_printf_i+0xa8>
 80178fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017902:	2b15      	cmp	r3, #21
 8017904:	d8f6      	bhi.n	80178f4 <_printf_i+0x28>
 8017906:	a101      	add	r1, pc, #4	@ (adr r1, 801790c <_printf_i+0x40>)
 8017908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801790c:	08017965 	.word	0x08017965
 8017910:	08017979 	.word	0x08017979
 8017914:	080178f5 	.word	0x080178f5
 8017918:	080178f5 	.word	0x080178f5
 801791c:	080178f5 	.word	0x080178f5
 8017920:	080178f5 	.word	0x080178f5
 8017924:	08017979 	.word	0x08017979
 8017928:	080178f5 	.word	0x080178f5
 801792c:	080178f5 	.word	0x080178f5
 8017930:	080178f5 	.word	0x080178f5
 8017934:	080178f5 	.word	0x080178f5
 8017938:	08017a77 	.word	0x08017a77
 801793c:	080179a3 	.word	0x080179a3
 8017940:	08017a31 	.word	0x08017a31
 8017944:	080178f5 	.word	0x080178f5
 8017948:	080178f5 	.word	0x080178f5
 801794c:	08017a99 	.word	0x08017a99
 8017950:	080178f5 	.word	0x080178f5
 8017954:	080179a3 	.word	0x080179a3
 8017958:	080178f5 	.word	0x080178f5
 801795c:	080178f5 	.word	0x080178f5
 8017960:	08017a39 	.word	0x08017a39
 8017964:	6833      	ldr	r3, [r6, #0]
 8017966:	1d1a      	adds	r2, r3, #4
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	6032      	str	r2, [r6, #0]
 801796c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017974:	2301      	movs	r3, #1
 8017976:	e09c      	b.n	8017ab2 <_printf_i+0x1e6>
 8017978:	6833      	ldr	r3, [r6, #0]
 801797a:	6820      	ldr	r0, [r4, #0]
 801797c:	1d19      	adds	r1, r3, #4
 801797e:	6031      	str	r1, [r6, #0]
 8017980:	0606      	lsls	r6, r0, #24
 8017982:	d501      	bpl.n	8017988 <_printf_i+0xbc>
 8017984:	681d      	ldr	r5, [r3, #0]
 8017986:	e003      	b.n	8017990 <_printf_i+0xc4>
 8017988:	0645      	lsls	r5, r0, #25
 801798a:	d5fb      	bpl.n	8017984 <_printf_i+0xb8>
 801798c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017990:	2d00      	cmp	r5, #0
 8017992:	da03      	bge.n	801799c <_printf_i+0xd0>
 8017994:	232d      	movs	r3, #45	@ 0x2d
 8017996:	426d      	negs	r5, r5
 8017998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801799c:	4858      	ldr	r0, [pc, #352]	@ (8017b00 <_printf_i+0x234>)
 801799e:	230a      	movs	r3, #10
 80179a0:	e011      	b.n	80179c6 <_printf_i+0xfa>
 80179a2:	6821      	ldr	r1, [r4, #0]
 80179a4:	6833      	ldr	r3, [r6, #0]
 80179a6:	0608      	lsls	r0, r1, #24
 80179a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80179ac:	d402      	bmi.n	80179b4 <_printf_i+0xe8>
 80179ae:	0649      	lsls	r1, r1, #25
 80179b0:	bf48      	it	mi
 80179b2:	b2ad      	uxthmi	r5, r5
 80179b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80179b6:	4852      	ldr	r0, [pc, #328]	@ (8017b00 <_printf_i+0x234>)
 80179b8:	6033      	str	r3, [r6, #0]
 80179ba:	bf14      	ite	ne
 80179bc:	230a      	movne	r3, #10
 80179be:	2308      	moveq	r3, #8
 80179c0:	2100      	movs	r1, #0
 80179c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80179c6:	6866      	ldr	r6, [r4, #4]
 80179c8:	60a6      	str	r6, [r4, #8]
 80179ca:	2e00      	cmp	r6, #0
 80179cc:	db05      	blt.n	80179da <_printf_i+0x10e>
 80179ce:	6821      	ldr	r1, [r4, #0]
 80179d0:	432e      	orrs	r6, r5
 80179d2:	f021 0104 	bic.w	r1, r1, #4
 80179d6:	6021      	str	r1, [r4, #0]
 80179d8:	d04b      	beq.n	8017a72 <_printf_i+0x1a6>
 80179da:	4616      	mov	r6, r2
 80179dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80179e0:	fb03 5711 	mls	r7, r3, r1, r5
 80179e4:	5dc7      	ldrb	r7, [r0, r7]
 80179e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80179ea:	462f      	mov	r7, r5
 80179ec:	42bb      	cmp	r3, r7
 80179ee:	460d      	mov	r5, r1
 80179f0:	d9f4      	bls.n	80179dc <_printf_i+0x110>
 80179f2:	2b08      	cmp	r3, #8
 80179f4:	d10b      	bne.n	8017a0e <_printf_i+0x142>
 80179f6:	6823      	ldr	r3, [r4, #0]
 80179f8:	07df      	lsls	r7, r3, #31
 80179fa:	d508      	bpl.n	8017a0e <_printf_i+0x142>
 80179fc:	6923      	ldr	r3, [r4, #16]
 80179fe:	6861      	ldr	r1, [r4, #4]
 8017a00:	4299      	cmp	r1, r3
 8017a02:	bfde      	ittt	le
 8017a04:	2330      	movle	r3, #48	@ 0x30
 8017a06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a0a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017a0e:	1b92      	subs	r2, r2, r6
 8017a10:	6122      	str	r2, [r4, #16]
 8017a12:	f8cd a000 	str.w	sl, [sp]
 8017a16:	464b      	mov	r3, r9
 8017a18:	aa03      	add	r2, sp, #12
 8017a1a:	4621      	mov	r1, r4
 8017a1c:	4640      	mov	r0, r8
 8017a1e:	f7ff fee7 	bl	80177f0 <_printf_common>
 8017a22:	3001      	adds	r0, #1
 8017a24:	d14a      	bne.n	8017abc <_printf_i+0x1f0>
 8017a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a2a:	b004      	add	sp, #16
 8017a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a30:	6823      	ldr	r3, [r4, #0]
 8017a32:	f043 0320 	orr.w	r3, r3, #32
 8017a36:	6023      	str	r3, [r4, #0]
 8017a38:	4832      	ldr	r0, [pc, #200]	@ (8017b04 <_printf_i+0x238>)
 8017a3a:	2778      	movs	r7, #120	@ 0x78
 8017a3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017a40:	6823      	ldr	r3, [r4, #0]
 8017a42:	6831      	ldr	r1, [r6, #0]
 8017a44:	061f      	lsls	r7, r3, #24
 8017a46:	f851 5b04 	ldr.w	r5, [r1], #4
 8017a4a:	d402      	bmi.n	8017a52 <_printf_i+0x186>
 8017a4c:	065f      	lsls	r7, r3, #25
 8017a4e:	bf48      	it	mi
 8017a50:	b2ad      	uxthmi	r5, r5
 8017a52:	6031      	str	r1, [r6, #0]
 8017a54:	07d9      	lsls	r1, r3, #31
 8017a56:	bf44      	itt	mi
 8017a58:	f043 0320 	orrmi.w	r3, r3, #32
 8017a5c:	6023      	strmi	r3, [r4, #0]
 8017a5e:	b11d      	cbz	r5, 8017a68 <_printf_i+0x19c>
 8017a60:	2310      	movs	r3, #16
 8017a62:	e7ad      	b.n	80179c0 <_printf_i+0xf4>
 8017a64:	4826      	ldr	r0, [pc, #152]	@ (8017b00 <_printf_i+0x234>)
 8017a66:	e7e9      	b.n	8017a3c <_printf_i+0x170>
 8017a68:	6823      	ldr	r3, [r4, #0]
 8017a6a:	f023 0320 	bic.w	r3, r3, #32
 8017a6e:	6023      	str	r3, [r4, #0]
 8017a70:	e7f6      	b.n	8017a60 <_printf_i+0x194>
 8017a72:	4616      	mov	r6, r2
 8017a74:	e7bd      	b.n	80179f2 <_printf_i+0x126>
 8017a76:	6833      	ldr	r3, [r6, #0]
 8017a78:	6825      	ldr	r5, [r4, #0]
 8017a7a:	6961      	ldr	r1, [r4, #20]
 8017a7c:	1d18      	adds	r0, r3, #4
 8017a7e:	6030      	str	r0, [r6, #0]
 8017a80:	062e      	lsls	r6, r5, #24
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	d501      	bpl.n	8017a8a <_printf_i+0x1be>
 8017a86:	6019      	str	r1, [r3, #0]
 8017a88:	e002      	b.n	8017a90 <_printf_i+0x1c4>
 8017a8a:	0668      	lsls	r0, r5, #25
 8017a8c:	d5fb      	bpl.n	8017a86 <_printf_i+0x1ba>
 8017a8e:	8019      	strh	r1, [r3, #0]
 8017a90:	2300      	movs	r3, #0
 8017a92:	6123      	str	r3, [r4, #16]
 8017a94:	4616      	mov	r6, r2
 8017a96:	e7bc      	b.n	8017a12 <_printf_i+0x146>
 8017a98:	6833      	ldr	r3, [r6, #0]
 8017a9a:	1d1a      	adds	r2, r3, #4
 8017a9c:	6032      	str	r2, [r6, #0]
 8017a9e:	681e      	ldr	r6, [r3, #0]
 8017aa0:	6862      	ldr	r2, [r4, #4]
 8017aa2:	2100      	movs	r1, #0
 8017aa4:	4630      	mov	r0, r6
 8017aa6:	f7e8 fbd3 	bl	8000250 <memchr>
 8017aaa:	b108      	cbz	r0, 8017ab0 <_printf_i+0x1e4>
 8017aac:	1b80      	subs	r0, r0, r6
 8017aae:	6060      	str	r0, [r4, #4]
 8017ab0:	6863      	ldr	r3, [r4, #4]
 8017ab2:	6123      	str	r3, [r4, #16]
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017aba:	e7aa      	b.n	8017a12 <_printf_i+0x146>
 8017abc:	6923      	ldr	r3, [r4, #16]
 8017abe:	4632      	mov	r2, r6
 8017ac0:	4649      	mov	r1, r9
 8017ac2:	4640      	mov	r0, r8
 8017ac4:	47d0      	blx	sl
 8017ac6:	3001      	adds	r0, #1
 8017ac8:	d0ad      	beq.n	8017a26 <_printf_i+0x15a>
 8017aca:	6823      	ldr	r3, [r4, #0]
 8017acc:	079b      	lsls	r3, r3, #30
 8017ace:	d413      	bmi.n	8017af8 <_printf_i+0x22c>
 8017ad0:	68e0      	ldr	r0, [r4, #12]
 8017ad2:	9b03      	ldr	r3, [sp, #12]
 8017ad4:	4298      	cmp	r0, r3
 8017ad6:	bfb8      	it	lt
 8017ad8:	4618      	movlt	r0, r3
 8017ada:	e7a6      	b.n	8017a2a <_printf_i+0x15e>
 8017adc:	2301      	movs	r3, #1
 8017ade:	4632      	mov	r2, r6
 8017ae0:	4649      	mov	r1, r9
 8017ae2:	4640      	mov	r0, r8
 8017ae4:	47d0      	blx	sl
 8017ae6:	3001      	adds	r0, #1
 8017ae8:	d09d      	beq.n	8017a26 <_printf_i+0x15a>
 8017aea:	3501      	adds	r5, #1
 8017aec:	68e3      	ldr	r3, [r4, #12]
 8017aee:	9903      	ldr	r1, [sp, #12]
 8017af0:	1a5b      	subs	r3, r3, r1
 8017af2:	42ab      	cmp	r3, r5
 8017af4:	dcf2      	bgt.n	8017adc <_printf_i+0x210>
 8017af6:	e7eb      	b.n	8017ad0 <_printf_i+0x204>
 8017af8:	2500      	movs	r5, #0
 8017afa:	f104 0619 	add.w	r6, r4, #25
 8017afe:	e7f5      	b.n	8017aec <_printf_i+0x220>
 8017b00:	08018b8c 	.word	0x08018b8c
 8017b04:	08018b9d 	.word	0x08018b9d

08017b08 <__sflush_r>:
 8017b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b10:	0716      	lsls	r6, r2, #28
 8017b12:	4605      	mov	r5, r0
 8017b14:	460c      	mov	r4, r1
 8017b16:	d454      	bmi.n	8017bc2 <__sflush_r+0xba>
 8017b18:	684b      	ldr	r3, [r1, #4]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	dc02      	bgt.n	8017b24 <__sflush_r+0x1c>
 8017b1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	dd48      	ble.n	8017bb6 <__sflush_r+0xae>
 8017b24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b26:	2e00      	cmp	r6, #0
 8017b28:	d045      	beq.n	8017bb6 <__sflush_r+0xae>
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017b30:	682f      	ldr	r7, [r5, #0]
 8017b32:	6a21      	ldr	r1, [r4, #32]
 8017b34:	602b      	str	r3, [r5, #0]
 8017b36:	d030      	beq.n	8017b9a <__sflush_r+0x92>
 8017b38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017b3a:	89a3      	ldrh	r3, [r4, #12]
 8017b3c:	0759      	lsls	r1, r3, #29
 8017b3e:	d505      	bpl.n	8017b4c <__sflush_r+0x44>
 8017b40:	6863      	ldr	r3, [r4, #4]
 8017b42:	1ad2      	subs	r2, r2, r3
 8017b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b46:	b10b      	cbz	r3, 8017b4c <__sflush_r+0x44>
 8017b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017b4a:	1ad2      	subs	r2, r2, r3
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b50:	6a21      	ldr	r1, [r4, #32]
 8017b52:	4628      	mov	r0, r5
 8017b54:	47b0      	blx	r6
 8017b56:	1c43      	adds	r3, r0, #1
 8017b58:	89a3      	ldrh	r3, [r4, #12]
 8017b5a:	d106      	bne.n	8017b6a <__sflush_r+0x62>
 8017b5c:	6829      	ldr	r1, [r5, #0]
 8017b5e:	291d      	cmp	r1, #29
 8017b60:	d82b      	bhi.n	8017bba <__sflush_r+0xb2>
 8017b62:	4a2a      	ldr	r2, [pc, #168]	@ (8017c0c <__sflush_r+0x104>)
 8017b64:	40ca      	lsrs	r2, r1
 8017b66:	07d6      	lsls	r6, r2, #31
 8017b68:	d527      	bpl.n	8017bba <__sflush_r+0xb2>
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	6062      	str	r2, [r4, #4]
 8017b6e:	04d9      	lsls	r1, r3, #19
 8017b70:	6922      	ldr	r2, [r4, #16]
 8017b72:	6022      	str	r2, [r4, #0]
 8017b74:	d504      	bpl.n	8017b80 <__sflush_r+0x78>
 8017b76:	1c42      	adds	r2, r0, #1
 8017b78:	d101      	bne.n	8017b7e <__sflush_r+0x76>
 8017b7a:	682b      	ldr	r3, [r5, #0]
 8017b7c:	b903      	cbnz	r3, 8017b80 <__sflush_r+0x78>
 8017b7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b82:	602f      	str	r7, [r5, #0]
 8017b84:	b1b9      	cbz	r1, 8017bb6 <__sflush_r+0xae>
 8017b86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b8a:	4299      	cmp	r1, r3
 8017b8c:	d002      	beq.n	8017b94 <__sflush_r+0x8c>
 8017b8e:	4628      	mov	r0, r5
 8017b90:	f7ff fb42 	bl	8017218 <_free_r>
 8017b94:	2300      	movs	r3, #0
 8017b96:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b98:	e00d      	b.n	8017bb6 <__sflush_r+0xae>
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	4628      	mov	r0, r5
 8017b9e:	47b0      	blx	r6
 8017ba0:	4602      	mov	r2, r0
 8017ba2:	1c50      	adds	r0, r2, #1
 8017ba4:	d1c9      	bne.n	8017b3a <__sflush_r+0x32>
 8017ba6:	682b      	ldr	r3, [r5, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d0c6      	beq.n	8017b3a <__sflush_r+0x32>
 8017bac:	2b1d      	cmp	r3, #29
 8017bae:	d001      	beq.n	8017bb4 <__sflush_r+0xac>
 8017bb0:	2b16      	cmp	r3, #22
 8017bb2:	d11e      	bne.n	8017bf2 <__sflush_r+0xea>
 8017bb4:	602f      	str	r7, [r5, #0]
 8017bb6:	2000      	movs	r0, #0
 8017bb8:	e022      	b.n	8017c00 <__sflush_r+0xf8>
 8017bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bbe:	b21b      	sxth	r3, r3
 8017bc0:	e01b      	b.n	8017bfa <__sflush_r+0xf2>
 8017bc2:	690f      	ldr	r7, [r1, #16]
 8017bc4:	2f00      	cmp	r7, #0
 8017bc6:	d0f6      	beq.n	8017bb6 <__sflush_r+0xae>
 8017bc8:	0793      	lsls	r3, r2, #30
 8017bca:	680e      	ldr	r6, [r1, #0]
 8017bcc:	bf08      	it	eq
 8017bce:	694b      	ldreq	r3, [r1, #20]
 8017bd0:	600f      	str	r7, [r1, #0]
 8017bd2:	bf18      	it	ne
 8017bd4:	2300      	movne	r3, #0
 8017bd6:	eba6 0807 	sub.w	r8, r6, r7
 8017bda:	608b      	str	r3, [r1, #8]
 8017bdc:	f1b8 0f00 	cmp.w	r8, #0
 8017be0:	dde9      	ble.n	8017bb6 <__sflush_r+0xae>
 8017be2:	6a21      	ldr	r1, [r4, #32]
 8017be4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017be6:	4643      	mov	r3, r8
 8017be8:	463a      	mov	r2, r7
 8017bea:	4628      	mov	r0, r5
 8017bec:	47b0      	blx	r6
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	dc08      	bgt.n	8017c04 <__sflush_r+0xfc>
 8017bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bfa:	81a3      	strh	r3, [r4, #12]
 8017bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c04:	4407      	add	r7, r0
 8017c06:	eba8 0800 	sub.w	r8, r8, r0
 8017c0a:	e7e7      	b.n	8017bdc <__sflush_r+0xd4>
 8017c0c:	20400001 	.word	0x20400001

08017c10 <_fflush_r>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	690b      	ldr	r3, [r1, #16]
 8017c14:	4605      	mov	r5, r0
 8017c16:	460c      	mov	r4, r1
 8017c18:	b913      	cbnz	r3, 8017c20 <_fflush_r+0x10>
 8017c1a:	2500      	movs	r5, #0
 8017c1c:	4628      	mov	r0, r5
 8017c1e:	bd38      	pop	{r3, r4, r5, pc}
 8017c20:	b118      	cbz	r0, 8017c2a <_fflush_r+0x1a>
 8017c22:	6a03      	ldr	r3, [r0, #32]
 8017c24:	b90b      	cbnz	r3, 8017c2a <_fflush_r+0x1a>
 8017c26:	f7ff f8cd 	bl	8016dc4 <__sinit>
 8017c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d0f3      	beq.n	8017c1a <_fflush_r+0xa>
 8017c32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c34:	07d0      	lsls	r0, r2, #31
 8017c36:	d404      	bmi.n	8017c42 <_fflush_r+0x32>
 8017c38:	0599      	lsls	r1, r3, #22
 8017c3a:	d402      	bmi.n	8017c42 <_fflush_r+0x32>
 8017c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c3e:	f7ff faa8 	bl	8017192 <__retarget_lock_acquire_recursive>
 8017c42:	4628      	mov	r0, r5
 8017c44:	4621      	mov	r1, r4
 8017c46:	f7ff ff5f 	bl	8017b08 <__sflush_r>
 8017c4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c4c:	07da      	lsls	r2, r3, #31
 8017c4e:	4605      	mov	r5, r0
 8017c50:	d4e4      	bmi.n	8017c1c <_fflush_r+0xc>
 8017c52:	89a3      	ldrh	r3, [r4, #12]
 8017c54:	059b      	lsls	r3, r3, #22
 8017c56:	d4e1      	bmi.n	8017c1c <_fflush_r+0xc>
 8017c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c5a:	f7ff fa9b 	bl	8017194 <__retarget_lock_release_recursive>
 8017c5e:	e7dd      	b.n	8017c1c <_fflush_r+0xc>

08017c60 <fiprintf>:
 8017c60:	b40e      	push	{r1, r2, r3}
 8017c62:	b503      	push	{r0, r1, lr}
 8017c64:	4601      	mov	r1, r0
 8017c66:	ab03      	add	r3, sp, #12
 8017c68:	4805      	ldr	r0, [pc, #20]	@ (8017c80 <fiprintf+0x20>)
 8017c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c6e:	6800      	ldr	r0, [r0, #0]
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	f7ff fca5 	bl	80175c0 <_vfiprintf_r>
 8017c76:	b002      	add	sp, #8
 8017c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c7c:	b003      	add	sp, #12
 8017c7e:	4770      	bx	lr
 8017c80:	200000c4 	.word	0x200000c4

08017c84 <__swbuf_r>:
 8017c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c86:	460e      	mov	r6, r1
 8017c88:	4614      	mov	r4, r2
 8017c8a:	4605      	mov	r5, r0
 8017c8c:	b118      	cbz	r0, 8017c96 <__swbuf_r+0x12>
 8017c8e:	6a03      	ldr	r3, [r0, #32]
 8017c90:	b90b      	cbnz	r3, 8017c96 <__swbuf_r+0x12>
 8017c92:	f7ff f897 	bl	8016dc4 <__sinit>
 8017c96:	69a3      	ldr	r3, [r4, #24]
 8017c98:	60a3      	str	r3, [r4, #8]
 8017c9a:	89a3      	ldrh	r3, [r4, #12]
 8017c9c:	071a      	lsls	r2, r3, #28
 8017c9e:	d501      	bpl.n	8017ca4 <__swbuf_r+0x20>
 8017ca0:	6923      	ldr	r3, [r4, #16]
 8017ca2:	b943      	cbnz	r3, 8017cb6 <__swbuf_r+0x32>
 8017ca4:	4621      	mov	r1, r4
 8017ca6:	4628      	mov	r0, r5
 8017ca8:	f000 f82a 	bl	8017d00 <__swsetup_r>
 8017cac:	b118      	cbz	r0, 8017cb6 <__swbuf_r+0x32>
 8017cae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017cb2:	4638      	mov	r0, r7
 8017cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb6:	6823      	ldr	r3, [r4, #0]
 8017cb8:	6922      	ldr	r2, [r4, #16]
 8017cba:	1a98      	subs	r0, r3, r2
 8017cbc:	6963      	ldr	r3, [r4, #20]
 8017cbe:	b2f6      	uxtb	r6, r6
 8017cc0:	4283      	cmp	r3, r0
 8017cc2:	4637      	mov	r7, r6
 8017cc4:	dc05      	bgt.n	8017cd2 <__swbuf_r+0x4e>
 8017cc6:	4621      	mov	r1, r4
 8017cc8:	4628      	mov	r0, r5
 8017cca:	f7ff ffa1 	bl	8017c10 <_fflush_r>
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d1ed      	bne.n	8017cae <__swbuf_r+0x2a>
 8017cd2:	68a3      	ldr	r3, [r4, #8]
 8017cd4:	3b01      	subs	r3, #1
 8017cd6:	60a3      	str	r3, [r4, #8]
 8017cd8:	6823      	ldr	r3, [r4, #0]
 8017cda:	1c5a      	adds	r2, r3, #1
 8017cdc:	6022      	str	r2, [r4, #0]
 8017cde:	701e      	strb	r6, [r3, #0]
 8017ce0:	6962      	ldr	r2, [r4, #20]
 8017ce2:	1c43      	adds	r3, r0, #1
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d004      	beq.n	8017cf2 <__swbuf_r+0x6e>
 8017ce8:	89a3      	ldrh	r3, [r4, #12]
 8017cea:	07db      	lsls	r3, r3, #31
 8017cec:	d5e1      	bpl.n	8017cb2 <__swbuf_r+0x2e>
 8017cee:	2e0a      	cmp	r6, #10
 8017cf0:	d1df      	bne.n	8017cb2 <__swbuf_r+0x2e>
 8017cf2:	4621      	mov	r1, r4
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	f7ff ff8b 	bl	8017c10 <_fflush_r>
 8017cfa:	2800      	cmp	r0, #0
 8017cfc:	d0d9      	beq.n	8017cb2 <__swbuf_r+0x2e>
 8017cfe:	e7d6      	b.n	8017cae <__swbuf_r+0x2a>

08017d00 <__swsetup_r>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	4b29      	ldr	r3, [pc, #164]	@ (8017da8 <__swsetup_r+0xa8>)
 8017d04:	4605      	mov	r5, r0
 8017d06:	6818      	ldr	r0, [r3, #0]
 8017d08:	460c      	mov	r4, r1
 8017d0a:	b118      	cbz	r0, 8017d14 <__swsetup_r+0x14>
 8017d0c:	6a03      	ldr	r3, [r0, #32]
 8017d0e:	b90b      	cbnz	r3, 8017d14 <__swsetup_r+0x14>
 8017d10:	f7ff f858 	bl	8016dc4 <__sinit>
 8017d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d18:	0719      	lsls	r1, r3, #28
 8017d1a:	d422      	bmi.n	8017d62 <__swsetup_r+0x62>
 8017d1c:	06da      	lsls	r2, r3, #27
 8017d1e:	d407      	bmi.n	8017d30 <__swsetup_r+0x30>
 8017d20:	2209      	movs	r2, #9
 8017d22:	602a      	str	r2, [r5, #0]
 8017d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d28:	81a3      	strh	r3, [r4, #12]
 8017d2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d2e:	e033      	b.n	8017d98 <__swsetup_r+0x98>
 8017d30:	0758      	lsls	r0, r3, #29
 8017d32:	d512      	bpl.n	8017d5a <__swsetup_r+0x5a>
 8017d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d36:	b141      	cbz	r1, 8017d4a <__swsetup_r+0x4a>
 8017d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d3c:	4299      	cmp	r1, r3
 8017d3e:	d002      	beq.n	8017d46 <__swsetup_r+0x46>
 8017d40:	4628      	mov	r0, r5
 8017d42:	f7ff fa69 	bl	8017218 <_free_r>
 8017d46:	2300      	movs	r3, #0
 8017d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d4a:	89a3      	ldrh	r3, [r4, #12]
 8017d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017d50:	81a3      	strh	r3, [r4, #12]
 8017d52:	2300      	movs	r3, #0
 8017d54:	6063      	str	r3, [r4, #4]
 8017d56:	6923      	ldr	r3, [r4, #16]
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	89a3      	ldrh	r3, [r4, #12]
 8017d5c:	f043 0308 	orr.w	r3, r3, #8
 8017d60:	81a3      	strh	r3, [r4, #12]
 8017d62:	6923      	ldr	r3, [r4, #16]
 8017d64:	b94b      	cbnz	r3, 8017d7a <__swsetup_r+0x7a>
 8017d66:	89a3      	ldrh	r3, [r4, #12]
 8017d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d70:	d003      	beq.n	8017d7a <__swsetup_r+0x7a>
 8017d72:	4621      	mov	r1, r4
 8017d74:	4628      	mov	r0, r5
 8017d76:	f000 f846 	bl	8017e06 <__smakebuf_r>
 8017d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d7e:	f013 0201 	ands.w	r2, r3, #1
 8017d82:	d00a      	beq.n	8017d9a <__swsetup_r+0x9a>
 8017d84:	2200      	movs	r2, #0
 8017d86:	60a2      	str	r2, [r4, #8]
 8017d88:	6962      	ldr	r2, [r4, #20]
 8017d8a:	4252      	negs	r2, r2
 8017d8c:	61a2      	str	r2, [r4, #24]
 8017d8e:	6922      	ldr	r2, [r4, #16]
 8017d90:	b942      	cbnz	r2, 8017da4 <__swsetup_r+0xa4>
 8017d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017d96:	d1c5      	bne.n	8017d24 <__swsetup_r+0x24>
 8017d98:	bd38      	pop	{r3, r4, r5, pc}
 8017d9a:	0799      	lsls	r1, r3, #30
 8017d9c:	bf58      	it	pl
 8017d9e:	6962      	ldrpl	r2, [r4, #20]
 8017da0:	60a2      	str	r2, [r4, #8]
 8017da2:	e7f4      	b.n	8017d8e <__swsetup_r+0x8e>
 8017da4:	2000      	movs	r0, #0
 8017da6:	e7f7      	b.n	8017d98 <__swsetup_r+0x98>
 8017da8:	200000c4 	.word	0x200000c4

08017dac <abort>:
 8017dac:	b508      	push	{r3, lr}
 8017dae:	2006      	movs	r0, #6
 8017db0:	f000 f88e 	bl	8017ed0 <raise>
 8017db4:	2001      	movs	r0, #1
 8017db6:	f7e9 fc7f 	bl	80016b8 <_exit>

08017dba <__swhatbuf_r>:
 8017dba:	b570      	push	{r4, r5, r6, lr}
 8017dbc:	460c      	mov	r4, r1
 8017dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dc2:	2900      	cmp	r1, #0
 8017dc4:	b096      	sub	sp, #88	@ 0x58
 8017dc6:	4615      	mov	r5, r2
 8017dc8:	461e      	mov	r6, r3
 8017dca:	da0d      	bge.n	8017de8 <__swhatbuf_r+0x2e>
 8017dcc:	89a3      	ldrh	r3, [r4, #12]
 8017dce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017dd2:	f04f 0100 	mov.w	r1, #0
 8017dd6:	bf14      	ite	ne
 8017dd8:	2340      	movne	r3, #64	@ 0x40
 8017dda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017dde:	2000      	movs	r0, #0
 8017de0:	6031      	str	r1, [r6, #0]
 8017de2:	602b      	str	r3, [r5, #0]
 8017de4:	b016      	add	sp, #88	@ 0x58
 8017de6:	bd70      	pop	{r4, r5, r6, pc}
 8017de8:	466a      	mov	r2, sp
 8017dea:	f000 f879 	bl	8017ee0 <_fstat_r>
 8017dee:	2800      	cmp	r0, #0
 8017df0:	dbec      	blt.n	8017dcc <__swhatbuf_r+0x12>
 8017df2:	9901      	ldr	r1, [sp, #4]
 8017df4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017df8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017dfc:	4259      	negs	r1, r3
 8017dfe:	4159      	adcs	r1, r3
 8017e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e04:	e7eb      	b.n	8017dde <__swhatbuf_r+0x24>

08017e06 <__smakebuf_r>:
 8017e06:	898b      	ldrh	r3, [r1, #12]
 8017e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e0a:	079d      	lsls	r5, r3, #30
 8017e0c:	4606      	mov	r6, r0
 8017e0e:	460c      	mov	r4, r1
 8017e10:	d507      	bpl.n	8017e22 <__smakebuf_r+0x1c>
 8017e12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017e16:	6023      	str	r3, [r4, #0]
 8017e18:	6123      	str	r3, [r4, #16]
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	6163      	str	r3, [r4, #20]
 8017e1e:	b003      	add	sp, #12
 8017e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e22:	ab01      	add	r3, sp, #4
 8017e24:	466a      	mov	r2, sp
 8017e26:	f7ff ffc8 	bl	8017dba <__swhatbuf_r>
 8017e2a:	9f00      	ldr	r7, [sp, #0]
 8017e2c:	4605      	mov	r5, r0
 8017e2e:	4639      	mov	r1, r7
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7fe fd95 	bl	8016960 <_malloc_r>
 8017e36:	b948      	cbnz	r0, 8017e4c <__smakebuf_r+0x46>
 8017e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e3c:	059a      	lsls	r2, r3, #22
 8017e3e:	d4ee      	bmi.n	8017e1e <__smakebuf_r+0x18>
 8017e40:	f023 0303 	bic.w	r3, r3, #3
 8017e44:	f043 0302 	orr.w	r3, r3, #2
 8017e48:	81a3      	strh	r3, [r4, #12]
 8017e4a:	e7e2      	b.n	8017e12 <__smakebuf_r+0xc>
 8017e4c:	89a3      	ldrh	r3, [r4, #12]
 8017e4e:	6020      	str	r0, [r4, #0]
 8017e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e54:	81a3      	strh	r3, [r4, #12]
 8017e56:	9b01      	ldr	r3, [sp, #4]
 8017e58:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017e5c:	b15b      	cbz	r3, 8017e76 <__smakebuf_r+0x70>
 8017e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e62:	4630      	mov	r0, r6
 8017e64:	f000 f84e 	bl	8017f04 <_isatty_r>
 8017e68:	b128      	cbz	r0, 8017e76 <__smakebuf_r+0x70>
 8017e6a:	89a3      	ldrh	r3, [r4, #12]
 8017e6c:	f023 0303 	bic.w	r3, r3, #3
 8017e70:	f043 0301 	orr.w	r3, r3, #1
 8017e74:	81a3      	strh	r3, [r4, #12]
 8017e76:	89a3      	ldrh	r3, [r4, #12]
 8017e78:	431d      	orrs	r5, r3
 8017e7a:	81a5      	strh	r5, [r4, #12]
 8017e7c:	e7cf      	b.n	8017e1e <__smakebuf_r+0x18>

08017e7e <_raise_r>:
 8017e7e:	291f      	cmp	r1, #31
 8017e80:	b538      	push	{r3, r4, r5, lr}
 8017e82:	4605      	mov	r5, r0
 8017e84:	460c      	mov	r4, r1
 8017e86:	d904      	bls.n	8017e92 <_raise_r+0x14>
 8017e88:	2316      	movs	r3, #22
 8017e8a:	6003      	str	r3, [r0, #0]
 8017e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e90:	bd38      	pop	{r3, r4, r5, pc}
 8017e92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017e94:	b112      	cbz	r2, 8017e9c <_raise_r+0x1e>
 8017e96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e9a:	b94b      	cbnz	r3, 8017eb0 <_raise_r+0x32>
 8017e9c:	4628      	mov	r0, r5
 8017e9e:	f000 f853 	bl	8017f48 <_getpid_r>
 8017ea2:	4622      	mov	r2, r4
 8017ea4:	4601      	mov	r1, r0
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017eac:	f000 b83a 	b.w	8017f24 <_kill_r>
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d00a      	beq.n	8017eca <_raise_r+0x4c>
 8017eb4:	1c59      	adds	r1, r3, #1
 8017eb6:	d103      	bne.n	8017ec0 <_raise_r+0x42>
 8017eb8:	2316      	movs	r3, #22
 8017eba:	6003      	str	r3, [r0, #0]
 8017ebc:	2001      	movs	r0, #1
 8017ebe:	e7e7      	b.n	8017e90 <_raise_r+0x12>
 8017ec0:	2100      	movs	r1, #0
 8017ec2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	4798      	blx	r3
 8017eca:	2000      	movs	r0, #0
 8017ecc:	e7e0      	b.n	8017e90 <_raise_r+0x12>
	...

08017ed0 <raise>:
 8017ed0:	4b02      	ldr	r3, [pc, #8]	@ (8017edc <raise+0xc>)
 8017ed2:	4601      	mov	r1, r0
 8017ed4:	6818      	ldr	r0, [r3, #0]
 8017ed6:	f7ff bfd2 	b.w	8017e7e <_raise_r>
 8017eda:	bf00      	nop
 8017edc:	200000c4 	.word	0x200000c4

08017ee0 <_fstat_r>:
 8017ee0:	b538      	push	{r3, r4, r5, lr}
 8017ee2:	4d07      	ldr	r5, [pc, #28]	@ (8017f00 <_fstat_r+0x20>)
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	4608      	mov	r0, r1
 8017eea:	4611      	mov	r1, r2
 8017eec:	602b      	str	r3, [r5, #0]
 8017eee:	f7e9 fc33 	bl	8001758 <_fstat>
 8017ef2:	1c43      	adds	r3, r0, #1
 8017ef4:	d102      	bne.n	8017efc <_fstat_r+0x1c>
 8017ef6:	682b      	ldr	r3, [r5, #0]
 8017ef8:	b103      	cbz	r3, 8017efc <_fstat_r+0x1c>
 8017efa:	6023      	str	r3, [r4, #0]
 8017efc:	bd38      	pop	{r3, r4, r5, pc}
 8017efe:	bf00      	nop
 8017f00:	2000af2c 	.word	0x2000af2c

08017f04 <_isatty_r>:
 8017f04:	b538      	push	{r3, r4, r5, lr}
 8017f06:	4d06      	ldr	r5, [pc, #24]	@ (8017f20 <_isatty_r+0x1c>)
 8017f08:	2300      	movs	r3, #0
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	4608      	mov	r0, r1
 8017f0e:	602b      	str	r3, [r5, #0]
 8017f10:	f7e9 fc32 	bl	8001778 <_isatty>
 8017f14:	1c43      	adds	r3, r0, #1
 8017f16:	d102      	bne.n	8017f1e <_isatty_r+0x1a>
 8017f18:	682b      	ldr	r3, [r5, #0]
 8017f1a:	b103      	cbz	r3, 8017f1e <_isatty_r+0x1a>
 8017f1c:	6023      	str	r3, [r4, #0]
 8017f1e:	bd38      	pop	{r3, r4, r5, pc}
 8017f20:	2000af2c 	.word	0x2000af2c

08017f24 <_kill_r>:
 8017f24:	b538      	push	{r3, r4, r5, lr}
 8017f26:	4d07      	ldr	r5, [pc, #28]	@ (8017f44 <_kill_r+0x20>)
 8017f28:	2300      	movs	r3, #0
 8017f2a:	4604      	mov	r4, r0
 8017f2c:	4608      	mov	r0, r1
 8017f2e:	4611      	mov	r1, r2
 8017f30:	602b      	str	r3, [r5, #0]
 8017f32:	f7e9 fbb1 	bl	8001698 <_kill>
 8017f36:	1c43      	adds	r3, r0, #1
 8017f38:	d102      	bne.n	8017f40 <_kill_r+0x1c>
 8017f3a:	682b      	ldr	r3, [r5, #0]
 8017f3c:	b103      	cbz	r3, 8017f40 <_kill_r+0x1c>
 8017f3e:	6023      	str	r3, [r4, #0]
 8017f40:	bd38      	pop	{r3, r4, r5, pc}
 8017f42:	bf00      	nop
 8017f44:	2000af2c 	.word	0x2000af2c

08017f48 <_getpid_r>:
 8017f48:	f7e9 bb9e 	b.w	8001688 <_getpid>

08017f4c <_init>:
 8017f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f4e:	bf00      	nop
 8017f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f52:	bc08      	pop	{r3}
 8017f54:	469e      	mov	lr, r3
 8017f56:	4770      	bx	lr

08017f58 <_fini>:
 8017f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f5a:	bf00      	nop
 8017f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f5e:	bc08      	pop	{r3}
 8017f60:	469e      	mov	lr, r3
 8017f62:	4770      	bx	lr
